<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Nacos</title>
      <link href="/2023/07/30/nacos/"/>
      <url>/2023/07/30/nacos/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="nacos"><a href="#nacos" class="headerlink" title="nacos"></a>nacos</h1><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h3><p>下载地址：<a href="https://github.com/alibaba/nacos/releases?page=2">https://github.com/alibaba/nacos/releases?page=2</a></p><p>下载后解压即可</p><p>进入bin目录,双击startup.cmd</p><img src="/2023/07/30/nacos/image-20230729152301833.png" style="zoom: 67%;"><p>如果一闪而过—–&gt;说明jdk配置有问题，请检查环境变量</p><p>直接打开无法启动，编辑startup.cmd文件修改</p><p>将改成单实例standalone模式</p><p><img src="/2023/07/30/nacos/image-20230729161315843.png"></p><p>然后双击startup.cmd启动</p><img src="/2023/07/30/nacos/image-20230729162053856.png" style="zoom: 80%;"><p>通过8848端口下的/nacos访问，初始账号和密码都是nacos</p><img src="/2023/07/30/nacos/image-20230729162242490.png" style="zoom:67%;"><h3 id="2-可以将nacos中的数据存到mysql中"><a href="#2-可以将nacos中的数据存到mysql中" class="headerlink" title="2.可以将nacos中的数据存到mysql中"></a>2.可以将nacos中的数据存到mysql中</h3><p>打开</p><p><img src="/2023/07/30/nacos/image-20230729162840105.png"></p><p>将以下配置打开：并修改数据库root 和密码</p><p><img src="/2023/07/30/nacos/image-20230729163002516.png" alt="image-20230729163002516"></p><p>新建数据库叫nacos，并将以下文件导入</p><img src="/2023/07/30/nacos/image-20230729163431383.png" style="zoom:80%;"><p>修改密码为123456</p><img src="/2023/07/30/nacos/image-20230729164010642.png" style="zoom:67%;"><h3 id="3-Springboot整合nacos-config"><a href="#3-Springboot整合nacos-config" class="headerlink" title="3.Springboot整合nacos-config"></a>3.Springboot整合nacos-config</h3><p>首先创建一个maven项目，并在其下创建一个Module</p><img src="/2023/07/30/nacos/image-20230730002630433.png" style="zoom:67%;"><p>父级pom文件引入依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.java1234<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>nacos_demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>nacos_config_test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud.version</span><span class="token punctuation">></span></span>Hoxton.SR8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springboot.version</span><span class="token punctuation">></span></span>2.3.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springboot.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springcloudalibaba.version</span><span class="token punctuation">></span></span>2.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springcloudalibaba.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring-cloud.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;springboot.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;springcloudalibaba.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子级pom文件引入依赖：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;    &lt;parent&gt;        &lt;artifactId&gt;nacos_demo&lt;&#x2F;artifactId&gt;        &lt;groupId&gt;com.java1234&lt;&#x2F;groupId&gt;        &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;    &lt;&#x2F;parent&gt;    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;    &lt;artifactId&gt;nacos_config_test&lt;&#x2F;artifactId&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;        &lt;&#x2F;dependency&gt;        &lt;!-- 配置中心 --&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;&#x2F;artifactId&gt;        &lt;&#x2F;dependency&gt;    &lt;&#x2F;dependencies&gt;&lt;&#x2F;project&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在子级bootstrap.properties中配置的东西可以通过@Value获取</p><p><img src="/2023/07/30/nacos/image-20230729175439221.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestController    @RequestMapping(&quot;&#x2F;nacos&quot;)    public class NacosController &#123;        @Value(&quot;$&#123;chao.name&#125;&quot;)        private String name;        @Value(&quot;$&#123;chao.age&#125;&quot;)        private  int age;        @GetMapping(&quot;&#x2F;getConfig&quot;)        public String getConfig()&#123;            return name+&quot;:&quot;+age;        &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/07/30/nacos/image-20230729175610960.png"></p><p><img src="/2023/07/30/nacos/image-20230729175701369.png"></p><p><code>将配置放在nacos中进行管理：</code></p><ol><li>首先新增配置：</li></ol><p><img src="/2023/07/30/nacos/image-20230729180134980.png"></p><img src="/2023/07/30/nacos/image-20230729180211547.png" style="zoom:80%;"><p>在子级bootstrap.properties中配置nacos的地址等信息：</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">spring.application.name&#x3D;nacos_config_testspring.cloud.nacos.config.server-addr&#x3D;127.0.0.1:8848spring.cloud.nacos.config.group&#x3D;DEFAULT_GROUPspring.cloud.nacos.config.name&#x3D;nacos_config.propertieschao.name&#x3D;jackchao.age&#x3D;23<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时启动项目：得到nacos中的配置</p><p><img src="/2023/07/30/nacos/image-20230730003244375.png"></p><p>并且在controller上加上注解，在更换配置时可试试刷新配置：</p><p><img src="/2023/07/30/nacos/image-20230730003411125.png"></p><p><img src="/2023/07/30/nacos/image-20230730003459883.png"></p><p><code>遇到的问题</code></p><p>报错：Error creating bean with name ‘scopedTarget.nacosConfigController’: Injection of autowired dependenc…..</p><p>原因：.yml 要写成全程.yaml</p><p>我真的是无语了….</p><h3 id="4-nacos客户端的常用操作"><a href="#4-nacos客户端的常用操作" class="headerlink" title="4.nacos客户端的常用操作"></a>4.nacos客户端的常用操作</h3><ol><li>命名空间</li></ol><p>可以新增命名空间</p><p><img src="/2023/07/30/nacos/image-20230730102551910.png"></p><p>在例表里可以随意切换命名空间</p><p><img src="/2023/07/30/nacos/image-20230730102643143.png"></p><p>为了可以找到对应配置，需要在.properties文件中配置namespace，值为</p><p><img src="/2023/07/30/nacos/image-20230730102756080.png"></p><p>也可以利用这种方式加载多个配置集：</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">spring.application.name&#x3D;nacos_config_testspring.cloud.nacos.config.server-addr&#x3D;127.0.0.1:8848spring.cloud.nacos.config.namespace&#x3D;c8c821cd-a3c0-4af5-b7ac-d20e69aeff0e#spring.cloud.nacos.config.group&#x3D;DEFAULT_GROUP#spring.cloud.nacos.config.name&#x3D;nacos_config.propertiesspring.cloud.nacos.config.extension-configs[0].data-id&#x3D;mysql_common.propertiesspring.cloud.nacos.config.extension-configs[0].group&#x3D;DEFAULT_GROUPspring.cloud.nacos.config.extension-configs[0].refresh&#x3D;truespring.cloud.nacos.config.extension-configs[1].data-id&#x3D;redis_common.propertiesspring.cloud.nacos.config.extension-configs[1].group&#x3D;DEFAULT_GROUPspring.cloud.nacos.config.extension-configs[1].refresh&#x3D;truespring.cloud.nacos.config.extension-configs[2].data-id&#x3D;crm.propertiesspring.cloud.nacos.config.extension-configs[2].group&#x3D;CRM_GROUPspring.cloud.nacos.config.extension-configs[2].refresh&#x3D;truespring.cloud.nacos.config.extension-configs[3].data-id&#x3D;oa.propertiesspring.cloud.nacos.config.extension-configs[3].group&#x3D;OA_GROUPspring.cloud.nacos.config.extension-configs[3].refresh&#x3D;true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/07/30/nacos/image-20230730105016039.png"></p><p>且在nacos客户端可以进行配置的导出和导入</p><h3 id="5-nacos的服务注册与发现"><a href="#5-nacos的服务注册与发现" class="headerlink" title="5.nacos的服务注册与发现"></a>5.nacos的服务注册与发现</h3><ol><li>导入依赖</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;!-- 服务注册&#x2F;发现--&gt;      &lt;dependency&gt;          &lt;groupId&gt;com.alibaba.cloud&lt;&#x2F;groupId&gt;          &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;&#x2F;artifactId&gt;      &lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>新建多个模块并，编写配置文件</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 8082  servlet:    context-path: &#x2F;spring:  application:    name: nacos-order  cloud:    nacos:      discovery:        server-addr: 127.0.0.1:8848<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2023/07/30/nacos/image-20230730110601729.png" style="zoom:80%;"><p>启动项目可以发现：服务已经注册进来</p><img src="/2023/07/30/nacos/image-20230730110741525.png" style="zoom:80%;"><h3 id="6-服务之间的调用"><a href="#6-服务之间的调用" class="headerlink" title="6.服务之间的调用"></a>6.服务之间的调用</h3><ol><li>引入依赖openfeign</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;!-- openfeign --&gt;      &lt;dependency&gt;          &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;          &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;&#x2F;artifactId&gt;      &lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2023/07/30/nacos/image-20230730112105747.png"></p><p><img src="/2023/07/30/nacos/image-20230730112207957.png"></p><p>启动项目，收到消息：</p><p><img src="/2023/07/30/nacos/image-20230730112411197.png"></p><p>7.多实例负载均衡</p><p>创建两个相同模块：除了端口其他都一样</p><p><img src="/2023/07/30/nacos/image-20230730161121124.png"></p><p>启动后可以看到：</p><p><img src="/2023/07/30/nacos/image-20230730161206222.png"></p><p>由于Feign是通过服务名进行调用的，因此在调用的过程中可以实现负载均衡，而且可以在可视化界面调节权重</p><p><img src="/2023/07/30/nacos/image-20230730161619988.png"></p><img src="/2023/07/30/nacos/image-20230730170929917.png" style="zoom:80%;"><p>会出现两个负载均衡调用的情况：</p><p><img src="/2023/07/30/nacos/image-20230730170819251.png"></p><p>出现的报错：com.netflix.client.ClientException: Load balancer does not have available server for client: nacos-s</p><p>原因：两个服务注册到的命名空间不同</p><h3 id="7-可以配置nacos高可用集群"><a href="#7-可以配置nacos高可用集群" class="headerlink" title="7.可以配置nacos高可用集群"></a>7.可以配置nacos高可用集群</h3><p>复制三份nacos，并且修改配置即可</p>]]></content>
      
      
      <categories>
          
          <category> 工作笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nacos笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RestTemplate和log4j2</title>
      <link href="/2023/07/28/resttemplate-he-log4j2/"/>
      <url>/2023/07/28/resttemplate-he-log4j2/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="RestTemplate和log4j2"><a href="#RestTemplate和log4j2" class="headerlink" title="RestTemplate和log4j2"></a>RestTemplate和log4j2</h1><h2 id="RestTemplate"><a href="#RestTemplate" class="headerlink" title="RestTemplate"></a>RestTemplate</h2><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p> RestTemplate是Spring提供的用于访问服务的客户端，RestTemplate提供了多种便捷访问远程Http服务的方法,能够大大提高客户端的编写效率。 </p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>1.依赖</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;&lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.创建RestTemplate的配置类，注入到bean里</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class RestTemplateConfig &#123;    @Bean    public RestTemplate restTemplate()&#123;        &#x2F;&#x2F; RestTemplate restTemplate &#x3D; new RestTemplate();        &#x2F;&#x2F;设置中文乱码问题方式一        &#x2F;&#x2F; restTemplate.getMessageConverters().add(1,new StringHttpMessageConverter(Charset.forName(&quot;UTF-8&quot;)));        &#x2F;&#x2F; 设置中文乱码问题方式二        &#x2F;&#x2F; restTemplate.getMessageConverters().set(1,new StringHttpMessageConverter(StandardCharsets.UTF_8)); &#x2F;&#x2F; 支持中文编码        return new RestTemplate();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.使用RestTemplate获取相应的信息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@GetMapping(&quot;&#x2F;rest&quot;)   public people rest( )&#123;       ResponseEntity&lt;String&gt; entity &#x3D; restTemplate.getForEntity(&quot;https:&#x2F;&#x2F;727958639.github.io&#x2F;2021&#x2F;07&#x2F;07&#x2F;swagger&#x2F;&quot;, String.class);       System.out.println(&quot;状态码:&quot;+entity.getStatusCode());       System.out.println(&quot;响应体&quot;+entity.getBody());       System.out.println(entity.getBody());       return  new people(&quot;renyichao&quot;,22);   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="log4j2"><a href="#log4j2" class="headerlink" title="log4j2"></a>log4j2</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><ol><li><p>级别</p><table><thead><tr><th align="center">级别（由低至高）</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">ALL</td><td align="center">打开所有日志记录开关；是最低等级的</td></tr><tr><td align="center">TRACE</td><td align="center">输出追踪信息；一般情况下并不会使用</td></tr><tr><td align="center">DEBUG</td><td align="center">输出调试信息；打印些重要的运行信息</td></tr><tr><td align="center">INFO</td><td align="center">输出提示信息；突出应用程序运行过程</td></tr><tr><td align="center">WARN</td><td align="center">输出警告信息；会出现潜在错误的情况</td></tr><tr><td align="center">ERROR（默认）</td><td align="center">输出错误信息；不影响系统的继续运行</td></tr><tr><td align="center">FATAL</td><td align="center">输出致命错误；会导致应用程序的退出</td></tr><tr><td align="center">OFF</td><td align="center">关闭所有日志记录开关；是最高等级的</td></tr></tbody></table></li></ol><ol start="2"><li>格式定义</li></ol><table><thead><tr><th align="center">常用</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">SimpleLayout（简单格式器）</td><td align="center">将日志信息输出为简单格式，默认为 INFO 级别的消息</td></tr><tr><td align="center">PatternLayout（自定义格式器）</td><td align="center">根据自定义的转换模式，返回格式化后的日志信息结果</td></tr></tbody></table><table><thead><tr><th align="center">转换符</th><th align="center">描述</th><th align="center">性能</th></tr></thead><tbody><tr><td align="center">%c</td><td align="center">用于输出日志事件的类别名称</td><td align="center"></td></tr><tr><td align="center">%20c</td><td align="center">如果类别名称的长度少于 20 个字符，则左侧填充空格</td><td align="center"></td></tr><tr><td align="center">%.30c</td><td align="center">如果类别名称的长度少于 20 个字符，则右侧填充空格</td><td align="center"></td></tr><tr><td align="center">%-20c</td><td align="center">如果类别名称超过 30 个字符，则从头开始截断</td><td align="center"></td></tr><tr><td align="center">%C</td><td align="center">用于输出发出日志请求的调用者的全限定类名</td><td align="center">差</td></tr><tr><td align="center">%d</td><td align="center">用于输出记录事件的日期，如 %d{yyyy-MM-dd HH:mm:ss.SSS}</td><td align="center"></td></tr><tr><td align="center">%F</td><td align="center">用于输出发出记录请求的文件名</td><td align="center">差</td></tr><tr><td align="center">%l</td><td align="center">用于输出产生日志事件的调用者的位置信息</td><td align="center">差</td></tr><tr><td align="center">%L</td><td align="center">用于输出发出记录请求的行号</td><td align="center">差</td></tr><tr><td align="center">%m</td><td align="center">用于输出与日志事件关联的应用程序提供的消息</td><td align="center"></td></tr><tr><td align="center">%M</td><td align="center">用于输出发出日志请求的方法名称</td><td align="center">差</td></tr><tr><td align="center">%n</td><td align="center">输出平台相关的行分隔符或字符</td><td align="center"></td></tr><tr><td align="center">%P</td><td align="center">用于输出日志事件的优先级</td><td align="center"></td></tr><tr><td align="center">%r</td><td align="center">用于输出从构建布局到创建日志事件所经过的毫秒数</td><td align="center"></td></tr><tr><td align="center">%t</td><td align="center">用于输出生成日志事件的线程名称</td><td align="center"></td></tr><tr><td align="center">%%</td><td align="center">用于输出一个百分号</td><td align="center"></td></tr></tbody></table><p>1.导入依赖</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;!-- log4j2日志门面 --&gt;   &lt;dependency&gt;       &lt;groupId&gt;org.apache.logging.log4j&lt;&#x2F;groupId&gt;       &lt;artifactId&gt;log4j-api&lt;&#x2F;artifactId&gt;       &lt;version&gt;2.12.1&lt;&#x2F;version&gt;   &lt;&#x2F;dependency&gt;   &lt;!-- log4j2日志实现 --&gt;   &lt;dependency&gt;       &lt;groupId&gt;org.apache.logging.log4j&lt;&#x2F;groupId&gt;       &lt;artifactId&gt;log4j-core&lt;&#x2F;artifactId&gt;       &lt;version&gt;2.12.1&lt;&#x2F;version&gt;   &lt;&#x2F;dependency&gt;   &lt;!-- 单元测试 --&gt;   &lt;dependency&gt;       &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;       &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;       &lt;version&gt;4.12&lt;&#x2F;version&gt;   &lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.代码示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">import org.apache.log4j.BasicConfigurator;import org.apache.log4j.Logger;import org.junit.Test;public class Log4jTest &#123;    @Test    public void test01() &#123;        BasicConfigurator.configure(); &#x2F;&#x2F;加载初始化配置        Logger logger &#x3D; Logger.getLogger(Log4jTest.class);        logger.trace(&quot;trace信息&quot;);        logger.debug(&quot;debug信息&quot;); &#x2F;&#x2F;默认级别        logger.info(&quot;info信息&quot;);        logger.warn(&quot;warn信息&quot;);        logger.error(&quot;error信息&quot;);        logger.fatal(&quot;fatal信息&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">0 [main] DEBUG com.Log4jTest  - debug信息1 [main] INFO com.Log4jTest  - info信息1 [main] WARN com.Log4jTest  - warn信息1 [main] ERROR com.Log4jTest  - error信息1 [main] FATAL com.Log4jTest  - fatal信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用配置文件加载配置：<strong>创建配置：</strong> log4j.properties 文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#配置日志级别,引用输出器log4j.rootLogger&#x3D;INFO,console#配置控制台输出器log4j.appender.console&#x3D;org.apache.log4j.ConsoleAppender#配置简单格式器log4j.appender.console.layout&#x3D;org.apache.log4j.SimpleLayout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Testpublic void test02() &#123;    &#x2F;&#x2F; 已有配置文件，无需再加载初始化配置    &#x2F;&#x2F;BasicConfigurator.configure();    Logger logger &#x3D; Logger.getLogger(Log4jTest.class);    logger.trace(&quot;trace信息&quot;);    logger.debug(&quot;debug信息&quot;);    logger.info(&quot;info信息&quot;);    logger.warn(&quot;warn信息&quot;);    logger.error(&quot;error信息&quot;);    logger.fatal(&quot;fatal信息&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">INFO - info信息WARN - warn信息ERROR - error信息FATAL - fatal信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改自定义配置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#配置日志级别,引用输出器log4j.rootLogger&#x3D;INFO,console########## 控制台输出器 ###########配置控制台输出器log4j.appender.console&#x3D;org.apache.log4j.ConsoleAppender#配置自定义格式器log4j.appender.console.layout&#x3D;org.apache.log4j.PatternLayout#配置自定义转换模式log4j.appender.console.layout.conversionPattern&#x3D;[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5p] [%t] [%-4rms] [%c] %M %L %m%n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">[2022-06-30 21:19:45.421] [INFO ] [main] [0   ms] [com.log4j.Log4jTest] test02 26 info信息[2022-06-30 21:19:45.406] [WARN ] [main] [985 ms] [com.log4j.Log4jTest] test02 27 warn信息[2022-06-30 21:19:45.410] [ERROR] [main] [989 ms] [com.log4j.Log4jTest] test02 28 error信息[2022-06-30 21:19:45.416] [FATAL] [main] [995 ms] [com.log4j.Log4jTest] test02 29 fatal信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>保存日志到文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#配置日志级别,输出控制器log4j.rootLogger&#x3D;INFO,file########## 文件输出器 ###########配置文件输出器log4j.appender.file&#x3D;org.apache.log4j.FileAppender#配置自定义格式器log4j.appender.file.layout&#x3D;org.apache.log4j.PatternLayout#配置自定义转换模式log4j.appender.file.layout.conversionPattern&#x3D;[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5p] [%t] [%-4rms] [%c] %M %L %m%n#配置文件路径及名称log4j.appender.file.file&#x3D;..&#x2F;logDir&#x2F;file.log#配置字符编码log4j.appender.file.encoding&#x3D;UTF-8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存日志到数据库：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">create table log4j(    id         int    (11)    not null auto_increment comment &#39;自增ID&#39;,    name       varchar(30)    default null comment &#39;项目名称&#39;,    createTime varchar(30)    default null comment &#39;创建时间&#39;,    level      varchar(10)    default null comment &#39;日志级别&#39;,    thread     varchar(30)    default null comment &#39;线程名称&#39;,    className  varchar(255)   default null comment &#39;全限定名&#39;,    method     varchar(50)    default null comment &#39;方法名称&#39;,    lineNumber int    (5)     default null comment &#39;代码行号&#39;,    message    varchar(10000) default null comment &#39;日志信息&#39;,    primary key (id))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#配置日志级别,输出控制器log4j.rootLogger&#x3D;INFO,db########## 数据库输出器 ###########配置数据库输出器log4j.appender.db&#x3D;org.apache.log4j.jdbc.JDBCAppender#配置自定义格式器log4j.appender.db.layout&#x3D;org.apache.log4j.PatternLayout#配置自定义转换模式log4j.appender.db.layout.conversionPattern&#x3D;[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%-5p] [%t] [%-4rms] [%c] %M %L %m%n#配置数据库log4j.appender.db.URL&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;testlog4j.appender.db.Driver&#x3D;com.mysql.cj.jdbc.Driverlog4j.appender.db.User&#x3D;rootlog4j.appender.db.Password&#x3D;rootlog4j.appender.db.Sql&#x3D;insert into log4j (name, createTime, level, thread, className, method, lineNumber, message) \  values (&#39;log&#39;, &#39;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;&#39;, &#39;%p&#39;, &#39;%t&#39;, &#39;%c&#39;, &#39;%M&#39;, &#39;%L&#39;, &#39;%m&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>xml文件配置(模板)</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token comment">&lt;!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出--></span><span class="token comment">&lt;!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token attr-name">monitorInterval</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL --></span>  <span class="token comment">&lt;!--变量配置--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Properties</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 格式化输出：%date表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %msg：日志消息，%n是换行符--></span>    <span class="token comment">&lt;!-- %logger&#123;36&#125; 表示 Logger 名字最长36个字符 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LOG_PATTERN<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>%date&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- 定义日志存储的路径 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE_PATH<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>更换为你的日志路径<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FILE_NAME<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>更换为你的项目名<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Properties</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appenders</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>console</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Console<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SYSTEM_OUT<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--输出日志的格式--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;LOG_PATTERN&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token comment">&lt;!--控制台只输出level及其以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThresholdFilter</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span> <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span> <span class="token attr-name">onMismatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DENY<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>console</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，适合临时测试用--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>File</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Filelog<span class="token punctuation">"</span></span> <span class="token attr-name">fileName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;FILE_PATH&#125;/test.log<span class="token punctuation">"</span></span> <span class="token attr-name">append</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;LOG_PATTERN&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>File</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RollingFile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RollingFileInfo<span class="token punctuation">"</span></span> <span class="token attr-name">fileName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;FILE_PATH&#125;/info.log<span class="token punctuation">"</span></span> <span class="token attr-name">filePattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;FILE_PATH&#125;/$&#123;FILE_NAME&#125;-INFO-%d&#123;yyyy-MM-dd&#125;_%i.log.gz<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThresholdFilter</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span> <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span> <span class="token attr-name">onMismatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DENY<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;LOG_PATTERN&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Policies</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--interval属性用来指定多久滚动一次，默认是1 hour--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TimeBasedTriggeringPolicy</span> <span class="token attr-name">interval</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SizeBasedTriggeringPolicy</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10MB<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Policies</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DefaultRolloverStrategy</span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>15<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RollingFile</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 这个会打印出所有的warn及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RollingFile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RollingFileWarn<span class="token punctuation">"</span></span> <span class="token attr-name">fileName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;FILE_PATH&#125;/warn.log<span class="token punctuation">"</span></span> <span class="token attr-name">filePattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;FILE_PATH&#125;/$&#123;FILE_NAME&#125;-WARN-%d&#123;yyyy-MM-dd&#125;_%i.log.gz<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThresholdFilter</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>warn<span class="token punctuation">"</span></span> <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span> <span class="token attr-name">onMismatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DENY<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;LOG_PATTERN&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Policies</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--interval属性用来指定多久滚动一次，默认是1 hour--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TimeBasedTriggeringPolicy</span> <span class="token attr-name">interval</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SizeBasedTriggeringPolicy</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10MB<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Policies</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DefaultRolloverStrategy</span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>15<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RollingFile</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 这个会打印出所有的error及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RollingFile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RollingFileError<span class="token punctuation">"</span></span> <span class="token attr-name">fileName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;FILE_PATH&#125;/error.log<span class="token punctuation">"</span></span> <span class="token attr-name">filePattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;FILE_PATH&#125;/$&#123;FILE_NAME&#125;-ERROR-%d&#123;yyyy-MM-dd&#125;_%i.log.gz<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThresholdFilter</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>error<span class="token punctuation">"</span></span> <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span> <span class="token attr-name">onMismatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DENY<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;LOG_PATTERN&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Policies</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--interval属性用来指定多久滚动一次，默认是1 hour--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TimeBasedTriggeringPolicy</span> <span class="token attr-name">interval</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SizeBasedTriggeringPolicy</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10MB<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Policies</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DefaultRolloverStrategy</span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>15<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RollingFile</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appenders</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。--></span>  <span class="token comment">&lt;!--然后定义loggers，只有定义了logger并引入的appender，appender才会生效--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>loggers</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--过滤掉spring和mybatis的一些无用的DEBUG信息--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span> <span class="token attr-name">additivity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppenderRef</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Console<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--监控系统信息--></span>    <span class="token comment">&lt;!--若是additivity设为false，则 子Logger 只会在自己的appender里输出，而不会在 父Logger 的appender里输出。--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span> <span class="token attr-name">additivity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppenderRef</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Console<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Logger</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Console<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Filelog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RollingFileInfo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RollingFileWarn<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RollingFileError<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>loggers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.日志配置文件不生效是因为与原本依赖中的依赖产生冲突，需要将其进行解除</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;        &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;        &lt;exclusions&gt;            &lt;exclusion&gt;                &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;                &lt;artifactId&gt;spring-boot-starter-logging&lt;&#x2F;artifactId&gt;            &lt;&#x2F;exclusion&gt;        &lt;&#x2F;exclusions&gt;    &lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="持续更新ing"><a href="#持续更新ing" class="headerlink" title="持续更新ing"></a><code>持续更新ing</code></h2>]]></content>
      
      
      <categories>
          
          <category> 工作笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RestTemplate和log4j2的使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启新生活</title>
      <link href="/2023/07/25/kai-qi-xin-sheng-huo/"/>
      <url>/2023/07/25/kai-qi-xin-sheng-huo/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="又一个人生的新阶段！"><a href="#又一个人生的新阶段！" class="headerlink" title="又一个人生的新阶段！"></a>又一个人生的新阶段！</h1><p>​        时间过得很快，转眼几十年的学生生涯结束了，猝不及防！当初为了逃避工作而选择读研，终究是逃不掉呀，哈哈。不过也让我度过了学生时代最快乐的三年，这三年我认识了太多的朋友和同学，他们教会了我太多的东西，也帮助了我太多，不过以后就要孤军奋战啦！</p><img src="/2023/07/25/kai-qi-xin-sheng-huo/image-20230725211004994.png" style="zoom:50%;"><img src="/2023/07/25/kai-qi-xin-sheng-huo/image-20230725210926588.png" style="zoom: 33%;"><img src="/2023/07/25/kai-qi-xin-sheng-huo/image-20230725211110069.png" style="zoom:33%;"><p>​        同时，时间又总是过得很慢，比如上班的时候，感觉每天都是周一周二，痛苦，呜呜呜！虽然工资不多，但是我还是挺喜欢现在的工作的，希望自己以后的路也会一帆风顺，遇到更多朋友一起前行！</p><img src="/2023/07/25/kai-qi-xin-sheng-huo/image-20230725211530648.png" style="zoom:50%;">]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作开始啦 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>霍乱时期的爱情</title>
      <link href="/2022/07/25/huo-luan-shi-qi-de-ai-qing/"/>
      <url>/2022/07/25/huo-luan-shi-qi-de-ai-qing/</url>
      
        <content type="html"><![CDATA[<hr><hr><h1 id="霍乱时期的爱情"><a href="#霍乱时期的爱情" class="headerlink" title="霍乱时期的爱情"></a>霍乱时期的爱情</h1><p>​        <code> For you, a thousand times over .</code></p><p>​        这本书的读后感是我边读边写的所以可能会有些不够连续，而且中间夹杂了一些对当时情境的感受！从书的名字就可以看出，这本书是关于爱情的。从开头乌尔比诺医生和费尔明娜达萨的生活的的点点滴滴，让我看到了一对到了老年还互敬互爱的夫妻，即使是每天早上起来都互相影响互相抱怨，但是也是为了生活增添一份色彩，我觉得可能这就是我羡慕的生活，能找个这样的人那该多好呀！ 可是等到乌尔比诺医生去世的时候，我才发现，这个故事才刚好开始，而故事的主角也不是他！ </p><p><img src="/2022/07/25/huo-luan-shi-qi-de-ai-qing/1658724546159.png"></p><p>​        这就是爱吗？爱的几乎昏厥，哈哈，以前以为的心动只是心跳加快面红耳赤，现在发现也可以是思念成疾，爱的像得了霍乱一样！  虽然那时的我并没有这么夸张，但是也是一整天魂不守舍的，除了思念啥都不想干，爱情确实是有魔力的，真的可以冲昏一个人的头脑，即使是我这样一个理性的人！ </p><p><img src="/2022/07/25/huo-luan-shi-qi-de-ai-qing/1658724663670.png"></p><p>​         看到这里感觉很想笑，哈哈，当初的爱情就这么简单吗？它没有现代方便的交流，只能用写信来交流，你一封，我一封，而且十天半个月见不上一面，但是感情却如此的深厚，以至于他可以延续半个世纪。想想钱钟书和杨绛好像也是这样，但是却有着那么好的感情，现在想想都觉得好奢侈呀！反观现在，有了网络，可以天天交流，天天视频，却还会因为异地等一些小的原因闹分手。可能因为来的太快太容易啦，所以才不会让人觉得很珍贵吧！         睡了一觉一醒来，发现自己有了新的看法，前面说他们的爱情很简单，他们在爱这件事上的思想确实很简单，我喜欢他，他也喜欢我这就够了，我愿意为他做任何事，即使是上刀山下火海在所不辞。但是他们爱的过程确实艰辛的，开始时每天4次看似无意间的相遇，后来每天秘密写信时的小心，可能也正是这些事情才让他们爱得深沉和甘愿为对方付出和牺牲自己(很多视频中也提到过，真正的爱一个人就是什么事都是为对方着想，否则你还是更爱自己)，而现在的感情并没有这些显而易见的努力，直接就是聊天，吃饭，看电影只是为了恋爱而干一些事情，却没有那种来之不易，所以可能也就没有那么牢靠吧！  突然看了罗翔老师的一个视频，里面有人评价说，失恋了找心理医生找情感导师都比不上找一个单身的人，单身的人的情感理论比谁都多，哈哈哈 ， 我觉得这不说的就是我嘛，自己并没有经历过一些事情，并不了解到底什么是真真的感情，什么是真正的爱。写的这些东西也仅仅代表了我自己目前状态下的一些思考，希望以后我能有这些不一样的见解！ </p><p>​         弗洛伦蒂诺阿里萨苦苦等了两年，终于等到了他心心念念的姑娘，费尔明娜达萨同样也是心心念念这他，回来第一眼就想着见到他，去集市购物也是想着为自己的婚后生活做准备，可是不知道为什么，当见到阿里萨时却严肃的拒绝了他让他不要再来了，并把自己的信物还回去。一切来得都好快，就连作为读者的我都没反过来究竟是怎么回事，难道爱就是拒绝吗？那我在想现在是不是该庆幸我当初是被拒绝的呢，哈哈，看到这里我有点蒙了，不知道爱一个人应该是怎么表现的，拒绝还是勇敢的表达呢？我这一天不好好学习老是看一些视频，今天看了一个视频说:你心心念念想进的一扇门，有人却可以随意出入！！看了视频更扎心，活生生的现实，不过我还看到了另外一段话:一个男生真正成熟的表现不是站在一个女生面前，说我爱你，给她送这送那，像个跟屁虫一样围在她身边。而是经历过很多事情后，眼睛里写满了故事，脸上却再也没有稚嫩的痕迹，变得沉稳自信。然后能西装革履的坐在喜欢的人面前跟她喝咖啡，却不会再说我爱你。说的没错，我想如果我们有机会再见面，我也不会再把爱挂在嘴边了，因为这个字现在变得非常的奢侈了，不过，我想以你这种有主见的性格应该是不会愿意再见我了，概率为零，虽然我最近买彩票试着证明概率为零不是代表着不可能发生，但我现在发现自己太天真啦，连续四天买同一组数字，结果连续四天一个数字都没中，一个都不中，太离谱啦，哈哈。看来上天可能就是想告诉我，有些事不可能发生啦！ </p><p>​      费尔明娜达萨的严肃拒绝让阿里萨茶不思饭不想一口饭也吃不下去(当初也有点这种感觉，不过比他差远啦)，最后为他演奏完一手小提琴后终于鼓起勇气离开这座城市了，此时此刻我都能感受到他的那种不舍，却又无能为力！ </p><p>​         阿里萨在船上经历了一些事情后，终于决心重回这个城市，勇敢的面对这个生活，他开始放纵自己，以肉体的满足来遏制对费尔明娜达萨的思念，就这样他遇见了很多女人，但是不管对谁他都不愿意付出感情，因为他的心永远属于一个人。这些片段中对费尔明娜达萨的生活描写都是好的，她愉快的度蜜月和愉快的生活，让我不想去写这一段的感想，因为我觉得费尔明娜达萨已经不爱阿里萨了，已经完完全全的融入了自己的新生活，并且有了自己的孩子，还与丈夫一起参与每个重要的会议，看起来非常的幸福！让我替阿里萨感到特别惋惜！所以这一段我没有写感受，直到读到后面！ </p><p><code>让人不禁感叹爱情这东西果然比霍乱还厉害，竟有人真的会为了爱情苦苦等待半个世纪，不知道到底该说爱情让人疯狂呢，还是爱情真伟大。</code></p><p><img src="/2022/07/25/huo-luan-shi-qi-de-ai-qing/1658724816253.png"></p><p><img src="/2022/07/25/huo-luan-shi-qi-de-ai-qing/1658724862835.png"></p><p>​        我发现我错了，费尔明娜达萨还是爱着阿里萨的，他的婚后生活并没有那么幸福，和我预料到的一样，她和一个自己并不爱的人在一起怎么可能会幸福呢，他厌恶这个家庭，她的丈夫，她的岳母，他们家的陈旧思想，和她每天都要固定的活动。但是她却无能为力，这里虽然提她感到很惋惜，但是也没有办法！</p><p>​       毕竟是最后她自己选的，虽然她也是受害者，不过我觉得这其实很现实，在如今生活中也可以经常看到，父母想让女儿过上好日子，却不曾想他们会不会幸福！ </p><p>​        今天看到杨绛的一句话，以前年轻的时候以为不读书不足以了解人生，直到后来才发现如果不了解人生，是读不懂书的。读书的意义大概就是用生活所感去读书，用读书所得去生活吧。现在忽然有所感触，要不是之前小小的经历了一些事情，我可能并不能很好的去读懂这些关于爱情和关于生活的书。现在想想自己，其实和阿里萨是一样的，不过为了避免不必要的悲剧在自己身上出现，现在的我先不去考虑所谓的爱情，还是先努力的提升自己，好好的赚钱，为了以后真的遇见了对的人，可以有足够的资格去给她想要的生活！</p><p>​        紧接着故事讲述了费尔明娜达萨生活中的点点滴滴，与丈夫之间的矛盾问题，丈夫的出轨，自己回到故乡想冷静，又到想让丈夫接自己回去，整个过程她矛盾的心理。还有阿里萨淫乱的生活，他为了减轻精神上对费尔明娜达萨选择了这种淫乱的生活，放在现在肯定不会被人理解，可能还会被很多人唾弃吧，不过魔幻现实主义有它一定的道理，加上外国开放的思想，这些也不足为奇。可能是皇天不负有心人吧，阿里萨终于熬到了费尔明娜达萨丈夫去世，整整等待了50多年的他又一次有了机会去重新拾起他期盼已久的爱情了，最终如他所愿，他们两登上了“新忠诚号”(这个船的名字还挺有意义的），开始了他们几十年前就想过上的生活。怎么说呢，我觉得这应该算是一个不错的结局了，两个人终于走到了一起，即使没有正当的关系，没有一纸婚书，也即使道德上有点过意不去，但是终究他们的期盼没有付之东流！可能这真的就是这个世界上最伟大的爱情吧！ </p><p><img src="/2022/07/25/huo-luan-shi-qi-de-ai-qing/1658724927037.png"></p><p>​        在书上也看到了一些话，觉得这句话说的很现实，也经常发生在我们身边，真真爱的疯狂的人没有在一起，最后却选择了一个安逸却稳定的生活，和一个不错的人在了一起！虽然少了一点爱情的味道，但是生活还是要继续呀，毕竟现实中哪有那么多的阿里萨呀！</p><p><img src="/2022/07/25/huo-luan-shi-qi-de-ai-qing/1658724952600.png"></p><p>​        哈哈，是不是没个女生都有一种讨厌的食物，茄子这个东西贯穿了整本书，费尔明娜达萨开始对茄子的厌恶到后来不知不觉吃了好几大盘的茄子，也也意味着她对选错结婚对象要做出的牺牲吧！ </p><p>​        最后总的来说一说这本小说吧，这本书被誉为爱情的百科全书，也确实，它里面涵盖了形形色色的爱。</p><p><img src="/2022/07/25/huo-luan-shi-qi-de-ai-qing/1658725499509.png"></p><p>​        为什么马尔克斯在写完半年孤独后还要写一本关于爱情的小说呢，因为他觉得人究其一生都很难摆脱孤独。但如果说有什么情感可以对抗孤独的话，那么唯有爱情！当然从故事的开头贯穿到故事结束的“一生一世”。</p><p>​        为什么用霍乱这个词放在书名呢？因为作者觉得霍乱与爱情在一定程度上有些相似之处，爱情就像霍乱一样，它不可避免，很难判断，躲不开也逃不掉。所以书中为什么会有医生这个角色，他面对爱情不会那么疯狂，真是有点冷漠，因为医生的天职就是消灭霍乱，并且在医生高贵的朋友之中也没有人得过霍乱，意味着他们都没有爱情。听了解说才发现故事的开头的深刻含义，也就是德圣阿莫尔的死，他是医生的挚友，他们的友谊毋庸置疑，但是即使和医生走的这么近，依然是拥有爱情的，直到德圣阿莫尔死的时候他才知道爱情一直存在于他的身边，所以他在看到信时，才久久不能平静！所以只有医生最后死的时候才终于意识到了爱情，才说出了那句话”只有上帝知道，我有多爱你” 。</p><p>​         阿里萨一生中睡了600多个女人，有人觉得他是渣男，恶心，但有可能是作者想告诉我们人生是现实的，但爱情确是对现实的超越，最后阿里萨还是收获了他所谓的爱情。所以说爱情不是做了什么就有，也不是做了什么就没有，只要你们的心彼此还在为对方跳动那么爱情就还在！ </p><p>​         医生和费尔明娜有真正的爱情吗？应该是没有的，结合当时社会的现实，他追求的只是一个带出去有面子的人和稳定的生活，也正如他说的那句话”在婚姻中最重要的不是幸福，而是稳定”，就算最后他遇上了心动的人，也愿意毫不犹豫的放弃，来维持这段稳定的婚姻！所以他们两的爱情无疑是个悲剧，无爱的爱情，必然是爱情中最大的悲剧，医生怕是到死都不明白，阿里萨当初会说出，开枪吧，没有什么是比为爱而死更光荣这种话了！ </p><p>​       说到阿里萨，看到别人的解读终于理解了为什么作者为什么会把他写成一个花心大萝卜，精神与肉体分离，他问什么不写阿里萨50多年来一直拒绝诱惑，只为等费尔明娜一个人呢？原因是因为这一点都不现实，如果放在我们身上，我们会做到吗？这也完美的验证的马尔克斯的现实主义，当然这种行为一定程度也是为了勾起读者的兴趣，最重要的他代表着对旧的恋爱观无声的反抗！ </p><p>​        虽然这是一本讲爱情的书，但是也难逃孤独，因为孤独所以寻找爱情，因为爱情所以孤独！！ </p><p>​        故事的结局是美好的，因为两个人终究还是走到了一起，但是同时也是悲剧的，他们的爱情只能在船上度过，因为回到陆地，他们的爱就不会被世俗所接受。 </p><p>​        看完这些，可能让我对爱情有了一些明白了吧，但大多数还是迷茫！但我相信，虽然这世间充满了孤独，但爱是永存的，最后希望每个人都能找到自己的爱情！包括自己！虽然我做不到为一个人等待几十年这种离谱的事情，但我依然希望让我遇到一个值得我等待的人！ </p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 霍乱时期的爱情 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解忧杂货店</title>
      <link href="/2022/07/18/jie-you-za-huo-dian/"/>
      <url>/2022/07/18/jie-you-za-huo-dian/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="解忧杂货店"><a href="#解忧杂货店" class="headerlink" title="解忧杂货店"></a>解忧杂货店</h1><p>​        这可真是一本奇妙的书， 它以时空重叠的手法,讲述了三个年轻人误入「浪矢杂货店」，不料通过书信与三十年前的世界奇妙相连。其中有五个看似独立,实则却有着千丝万缕关联的故事 ，感觉整本书像是在画圆，而故事的最后这个完美的圆形成了。看完这本书给我最大的感受就是一些事情冥冥之中自有安排，我们要做的就是遵从自己的内心，但行好事，莫问前程。</p><p>​        看到别人的一些解读觉得说的挺好的，就借用他的话来说吧。 文章由一个个温馨的小故事构成，而这些故事里的人物冥冥之中都有微妙的联系。从纠结于是否放弃运动会而陪伴即将过世男朋友的月兔，到不知道是否放弃音乐而继承鱼店的鱼店音乐人克郎 ;从纠结于是否生下没有父亲的孩子的绿河，到是否跟父母一起连夜潜逃的保罗，或者是纠结于是否当陪酒女想经济独立的小狗，这些人看似没有关联，却都与丸光孤儿院有密切的联系。三个年轻人翔太，幸平和敦也误打误撞地闯入了这件杂货店，也误打误撞地为这些有各自烦恼的咨询者提供了建议。</p><p>​        不可否认的是他们的建议或多或少改变了他们的人生，但是最终看来，改变他们人生的是自己的努力。  每个人的心中都有烦恼，有些在考虑的在纠结的事情,其实心中早有定论，只是需要有人来认同才会更加坚定地去做。或者是即使是别人不认同，事情的方向也会是向自己想要的方向发展，就像月兔一样，即使他们三个给出的建议一直是让她放弃奥运会，因为他们知道就算准备了也无济于事，但是月兔依然从信中读到了自己的内心并且遵从了自己的内心，坚持训练，虽然最总没有成功，但是也做到了自己的无悔。</p><p>​        很有感触的是我们不能凭自己的想象去断定对方是怎么样的人，就像那些咨询者，在没有完全说出实情的时候，三个年轻人无法想象他们到底是怎样的人，也没法去揣测当事人的处境更加无法去想象当事人在未来会有怎样的发展。就像鱼店音乐人克郎在演奏他写的曲子之前，他们一直让他放弃梦想回家继承家业，照顾家里人，但是听到这美妙的曲子，他们了解到了克朗的生活会因为他的见义勇为而丧失生命，这时 他们意识到了克朗这一生存在的意义，此刻他们没有权利再去决定别人的生活，而是让他遵从自己，继续坚持。不过我相信，就算他们让克朗放弃自己的音乐梦，克朗也不会听的，因为他心中早已有了自己的答案，不管是为了自己还是为了期望已久的父亲，也不能放弃，即使面对自己的可能是牺牲，如果换做是我我想我也不会轻易放弃的。他虽然牺牲了，但是有人继承了他的意志，替他实现了梦想，这不也是一种成功吗？每个人活着就有他活着的意义不是嘛？ </p><p><img src="/2022/07/18/jie-you-za-huo-dian/1658123651023.png"></p><p>​         还有有着共同问题的两个人绿河的孩子和保罗。绿河因为怀上有妇之夫的孩子，向浪矢雄治咨询后决定生下女儿独自抚养，却不幸车祸过世。然而她的孩子却一直以为母亲不爱她想带着她一起自杀，令她想不到的是这只是一场意外，母亲为了照顾好她，低血糖才发生了车祸，即使这样，在生命最后一刻也不忘保护她的安全，读到这里，感受到了天下的父母亲都是一样的，为了自己的子女愿意做任何事情，即使是献出自己的生命！保罗也是一样，父亲对他说为了他付出自己的生命也愿意，他觉得父亲在骗自己，当自己了解到真相以后，才后悔当初没能听取浪失爷爷的话，父母亲为了保护他以后不被讨债人困扰，带着他的名字一起沉入了大海，父亲做到了他承诺的话！  这两个故事让人真的很感动，被天下的父母所打动。读到这里忽然又想起两句句高中作文经常用到的一句话:<code>生活哪有什么岁月静好，只不过是有人替你负重前行！</code>这个人就是父母亲。第二句就是<code>我们要以最大的善意去揣测别人而不是以最坏的恶意！</code> </p><p>​         至于迷途的小狗，我想说的就是别为了一些眼前的利益就放弃了未来的生活，别人的帮助让我们获得了成功，我们应该将这份帮助传递下去，去帮助更多需要帮助的人，也正是这个故事让这个圆回到了原点，敦也，翔太，幸平也收到了属于他们的感谢信，也让他们看到了真真的自己！ </p><p>​         最后，让我们去多多帮助身边的人，因为可能我们的一个小举动会影响别人的一生，只要人人都献出一点爱，世界将会变成美好的人间！用一句话总结就是：<code>但行好事，莫问前程！</code>加油！ </p><h2 id="几句摘抄的话放在最后："><a href="#几句摘抄的话放在最后：" class="headerlink" title="几句摘抄的话放在最后："></a>几句摘抄的话放在最后：</h2><ol><li> 其实所有纠结做选择的人心里早就有了答案，咨询只是想得到内心所倾向的选择。最终的所谓命运 还是自己一步步走出来的 </li><li> 人与人之间情断义绝，并不需要什么具体的理由。就算表面上有，也很可能只是心已经离开的结果，事后才编造出的借口而已。 </li><li> 但是，不妨换一个角度思考，正因为是白纸，所以可以画任何地图，一切都掌握在你自己手上。你很自由，充满了无限可能。这是很棒的事。我衷心祈祷你可以相信自己，无悔地燃烧自己的人生。 </li><li> 人与人之间的关系往往不是因为某些具体的原因而断绝。不，即使表面上有某种原因，其实是因为彼此的心已经不在一起，事后才牵强附会地找这些借口。因为，如果彼此的心没有分开，当发生可能会导致彼此关系断绝的事态时，某一方就会主动修复。之所以没有人注重修复，就是因为彼此的心已经不在一起了。就好像眼看着船要沉了，仍然在一旁袖手旁观。 （深有感触）</li><li> 我比任何人更爱你，随时都想和你在一起。如果我放弃比赛，就可以救你一命，我会毫不犹豫地放弃，但事实并不是这样，所以，我不想放弃自己的梦想。正因为我一直在追求梦想，所以才活得像自己，你也才会喜欢我。我时时刻刻想着你，但请你让我继续追求梦想。 </li></ol><img src="/2022/07/18/jie-you-za-huo-dian/1658123673710.png" style="zoom:33%;">]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 解忧杂货店 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>月亮与六便士</title>
      <link href="/2022/07/15/yue-liang-yu-liu-bian-shi/"/>
      <url>/2022/07/15/yue-liang-yu-liu-bian-shi/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="《月亮与六便士》读后感"><a href="#《月亮与六便士》读后感" class="headerlink" title="《月亮与六便士》读后感"></a>《月亮与六便士》读后感</h1><pre><code>     `满地都是六便士，他却抬头看见了月亮 。`</code></pre><p>​        这是一本关于梦想的小说，更进一步来说应该是关于灵魂的小说。他讲述了思特里克兰德是，一个在伦敦做事的证券经纪人，他有一个富裕和美满的家庭：妻子漂亮，爱慕虚荣，两个孩子健康快乐。按理说，他应该满足于这种人世的快乐才对，尽管这种生活未免庸俗和平静。但是，就在他们婚后的第17个年头，他突然离家去了巴黎，抛弃了在外人看来很好的事业和家庭。就在人们以为他的出走是因为有外遇的时候，人们发现的事实却是：他原来只是为了画画。这时的思特里克兰德没有任何的绘画基础，他只是爱好画画而已。在外人看来，他简直疯了，他的生活开始变得窘迫，几次险些因饥饿和疾病而死。他画的画也完全不像个样子，总是在原有的事物上进行破坏，除了有个蹩脚的画家戴尔克·施特略夫把他当成上帝外，任何人都不会买他的画，事实上他也从不轻易卖画。他不停地流浪，最后来到了塔西提岛，与一个土著姑娘爱塔结了婚。这时的他看起来似乎很知足，他有了一个土著人做妻子，他们生活在与世隔绝的地方，他每天都在那里作画。但不幸的是，不久他就感染了麻风病，在他病逝的前一年，他成了瞎子。爱塔一直照顾着他，直到他完成了自己的巨型壁画，身体溃烂而死。他的妻子依照他的遗言焚毁了挂满壁画的屋子，甚至没有留下一根木头。</p><p><img src="/2022/07/15/yue-liang-yu-liu-bian-shi/1657867153622.png"></p><p>​        也是看了一些解读才了解到，六便士是当时英国当时价值最低的货币象征着我们平时的普通生活，而月亮则象征着美好的触不可及的东西，本书中他就代表着理想，代表着一个人的灵魂深处。</p><p>​        在书的开头讲述他从一个平平无奇在银行工作的证券经纪人，毅然决然的放弃了自己本该美好舒适的生活，而为了自己的梦想甘愿去过着穷困潦倒的生活，此刻的我特别佩服他的勇气，敢于为自己的梦想献出自己的一切，甚至是生命他都不放在眼中。我当时就想说：哈哈，可能不止这辈子，下辈子我可能都做不到像他一样，可以摆脱自己身上一切的束缚，放下所有的羁绊，奋不顾身的去做一件自己喜欢做的事！不过事实确实如此。我到现在也想象不到那到底是种怎样的奇特力量能让一个人能做出这么大的牺牲，去为了一件自己当时并不擅长的东西。与他相似的还有末尾出现的库特拉斯医生，面对即将到达的事业高峰，他却毅然决然地去到小岛上当个医生，很不多人不理解，更多的人说他的了精神病。他没病也没疯，他只是跟着心走，追逐梦想。这里的梦想不是别人说的梦想，而是自己想要的生活。</p><p><img src="/2022/07/15/yue-liang-yu-liu-bian-shi/1657867265393.png"></p><p>​        他们都是跳出了尘世藩篱的人，身体和灵魂都在路上，个中滋味也许只有他们才知道吧。</p><p>​        不过再接着读下去我对他的看法就发生了极大地改变，从开始对他的佩服变成了对他的反感，觉得世界上怎么会有这样一个人没有一点点的人情味，自私自利，和一头野兽有什么区别。他对自己身边的人言语刻薄，丝毫不顾及别人的感受，只会对别人进行嘲讽和挖苦。书中最令人记忆深刻的，应该就是来自荷兰的蹩脚画家施特略夫拱手让妻那一节。施特略夫把时刻嘲讽他、初入绘画领域的思特里克兰德奉若神明，经常接济他，甚至在他病重欲死的时候不顾妻子的反对硬是接到家里。最后思特里克兰德把施特略夫赶出了家，还勾搭到其妻子。施特略夫只好出走，潦倒了三个月，却传来妻子自杀的消息，而思特里克兰德一如既往的冷漠，只留下妻子的裸体画。虽然生性怯懦，但这幅画还是激起了施特略夫的怒火，他想毁了这幅画。但是当看到这幅画的艺术高度后，这位蹩脚画家还是忍着难过留下了，旋即黯然回到荷兰老家。读到这里的我特别的气氛，我不知道作者为什么会塑造一个这样的主人公，就算是为了梦想也不至于不能一点人情味都没有吧，这样的追梦着都不如一头追逐猎物的猛兽。</p><p>​        再到后来，不断地读下去并且结合一些解读，我也是慢慢的了解到一些东西。在几年后他就在艺术界大放异彩，所以“我”怀着好奇去了他所隐居的塔希提岛。这也就是更加深层次的“月亮”——毛姆为艺术所创立的理想国。塔希提岛是在书中是一个世外桃源般的场景一样，热带丛林、棕榈树、土著人、古老风俗等等等等，但唯独没有现代的气息，没有社会规则，思特里克兰德可以在这里毫无顾忌的作画，流连于棕榈树间，他所追求的美是无处不在的。有的时候，一个人来到一个地方，会油然而生栖身此地的感觉，于是就在这从未领略的景色里、从未熟谙的人群里生活下来，并寻找到了心灵的安宁。于是就在这无关道德、无需价值的蛮荒桃源里，他努力作画，他出名了，成为了一画难求的大师，但他死于麻风病之后，按照遗嘱一切烧毁了他的所有画作。到了这里我才明白了思特里克兰德并不是一个简简单单的上了岁数的追梦者，他是一个天才，天才是什么呢？天才就是一群跟常人不同的人，可以形象的说：天才 = 神经病 = 疯子，比如哲学家尼采，画家梵高，商人乔布斯。在我们眼里他们成名之前就是一个疯子，他们做着我们常人几乎想都不敢想的事情，这样的话，我倒是可以对他上面做的事有一些量解了，毕竟在天才（疯子）的世界中只有自己所追求的东西，这种东西充斥着他们的灵魂。用别人的话说：<code>当一个人为了艺术抛弃一切的时候，他已经不是人了，人类的躯壳只是为了维系那支画笔罢了，换言之，他已经成为了常人眼里的怪物，自己眼里的神。所以不必再多苛责思特里克兰德这个人物了。他从毛姆笔下生来就是要为艺术奋斗的，他不是道德上的好人，也不是大众心中的好人，但他的确是一个纯粹的人，纯粹为了艺术的美。哪怕明知是厄运，他也要奋不顾身去追寻，疾步如飞，终于在生命的终点同时获得了厄运与美。</code></p><p>​        我还想说说除了主人公以外的一些东西–故事中的感情。这本书中有三个地方让我印象很深刻，第一个就是施特略夫对待妻子的感情，他对自己妻子爱的深情，不过放到现在也只会被当做我们经常说的“舔狗”，而舔狗的结果大家也都很清楚：舔狗，舔到最后一无所有！哈哈，结局果然没错，最后连自己的房子也让了出去，看到这里觉得也挺可悲的，不知道为什么，难道一个愿意对对方好的人真的就不配被珍惜吗？太容易得到的真的就不被放在眼里吗？一个陪伴自己这么多年并对自己这么好的人竟然比不上一个只遇到几天的人，最后服毒自杀可能就是必然的结局吧！第二个故事就是在船上提亚蕾提起他的两个丈夫，第一个喝酒后就对她拳打脚踢用鞭子抽打他，她被打的遍体鳞伤，但是当她丈夫死得时候却痛哭流涕让他不能忘怀，而第二个丈夫和第一个完全不同，不喝酒不打人，自己和别人暧昧丈夫都能忍受，他却觉得从没有一个男人让他这么失望，我一脸疑惑？这是啥情况，人都到了这么欠的地步了？让我真搞不明白还有愿意跟思特里克兰德在一起的爱塔，虽然我也愿意找到一个这样的姑娘，但是确实很让我佩服，她这样任劳任怨的为了一个只对艺术画画有感情的人是为了什么？感情这东西可真搞不懂呀！</p><p><img src="/2022/07/15/yue-liang-yu-liu-bian-shi/1657867182593.png"></p><p><img src="/2022/07/15/yue-liang-yu-liu-bian-shi/1657867213369.png" alt="老舔狗啦，哈哈哈"></p><p>​        反观自己感觉也是如此，我其实一直想不明白，为什么一个人会被一件没有发生的事情给阻挡住，到现在我才明白一点，怕只是一个借口罢了，内心只有爱与不爱，不爱了就算不隔山海也终将分离，如果爱山海亦可平不是吗？我经历的少，我也不明白遇到一些情况时自己会不会退缩，但是在遇到之前我想我还是有权保存我现在的想法，那就是如果遇到我爱并且爱我的人，我一定会奋不顾身的，我愿意离开我生活的城市，不管是过怎样的生活，城市也好，县城也罢，我觉得一切都不是问题。像钱钟书和杨绛一样，无论上山下乡，被批斗还是被分割都不能影响他们的感情。不过吧，如果我没有读过杀死一只知更鸟的话，我可能会觉得他们的观念很有问题，不过现在我想我会站在别人的角度看问题了像阿迪克斯一样，现在的我觉得，其实感情没有对错，每个人都有自己的想法和对待感情的看法，这与每个人的经历有关，有些人经历过了怕了，也不是他们的错，古言还讲：一朝被蛇咬十年怕井绳，随意我们应该尊重每个人的看法，尊重别人的选择，我们要做的就是做好我们自己的事情，也要理解别人的做法。有人说：<strong>多少年，我们一直信奉，每个人都是一个半圆，而这苍茫世界上，终有另外一个半圆和你严丝合缝，刚好可以拼出完美的圆。</strong>但是其实你等到了那个和你严丝合缝的半圆了吗？你还相信它的存在吗？<strong>这个世界上，没有两个真的能严丝合缝的半圆。只有自私的灵魂，在寻找另外一个自私的灵魂。</strong>最后在感情上，我希望我可以在以后遇到那个及时不能完全缝合，但能包容我所有缝隙与不足的半圆，也希望你们也可以！</p><p><code>只有诗人和圣人才会在柏油路上浇水，满怀信心地期望能长出百合花来回报他们的辛劳</code></p><p>​        最后的最后，我想说这本书虽然告诉我们一些道理，告诉我们追逐梦想的天才（亦或者说是疯子）是有多么的执着，但是我觉得这种执着并不适合我们所有人，严谨点我只能说他不适合我，我不是天才，我只是个普普通通的人，我现在做不到，下辈子可能也做不到，可以摆脱自己身上一切的束缚，放下所有的羁绊，奋不顾身的去做一件自己喜欢做的事，作者为了把思特里克兰德的性格设置成这样可能就是为了劝退我们这些普通人吧。我不敢说我完全读懂了这本书，但是谁都有选择自己如何生活的权利，不论是选择“六便士”还是选择“月亮”，都没有什么不对。活成怎样都不重要，即使在走到尽头的时候，我也不会追悔当初的选择。唯有真正实现了理想，才能得到真正的宁静，无所惧，更无所畏，这无关宗教，却是内心最真实的信仰。没必要去学思特里克兰德，我们只要成为遵循内心选择的信徒就好，不负韶光，不负世间来过一场！这世间本就没有对错！希望自己以后可以越来越好，加油！</p><h2 id="摘抄："><a href="#摘抄：" class="headerlink" title="摘抄："></a>摘抄：</h2><ol><li> 在爱情这件事情上面，如果你考虑起自尊心来，那只能有一个原因：实际上你还是最爱自己！然而，真正爱你的人，是不会轻易让你的自尊落一地。爱一个人需要放下自尊，只不过这个过程是相互的，因为都把自己的自尊心交给了对方，也被对方捧在了手里，才是美满的爱情，否则自尊交出去，被踩在脚下，那还不如先爱自己。 </li></ol>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 月亮与六便士 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百年孤独</title>
      <link href="/2022/07/13/bai-nian-gu-du/"/>
      <url>/2022/07/13/bai-nian-gu-du/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="《百年孤独》读后感"><a href="#《百年孤独》读后感" class="headerlink" title="《百年孤独》读后感"></a>《百年孤独》读后感</h1><p>​        多年以后，再次看到这本书，不知道自己会不会想起那个曾改变自己的那个遥远的下午。</p><p>​    <code>多年以后，面对行刑队，奥雷里亚诺·布恩迪亚上校将会回想起父亲带他去见识冰块的那个遥远的下午。</code></p><p>​        开始读这本书的时候，怀着一种对名著的敬意，并且希望可以从中得到一丝的慰藉。不过确实没让我失望。虽然对于我一个读书甚少领悟一些比较深的感悟可能有点难，不过读过书之后还是有不少的感悟的。再加上观看别人对书籍的解读和大家的读后感，让自己对书籍有了更加深刻的了解与感悟！</p><p>​        先说说自己在最初读完这本书时候的感悟吧。在最开始读这本书的时候并没有提前了解一些关于这本书的一些背景，也不知道这是一本魔幻现实主义的书籍，唯一知道的是这是一本对孤独进行阐释的书籍，因为最近的我有点丧，所以希望可以通过读书来缓解自己的焦躁与不安。说实话，现在的我确实比之前好多了，一方面可能是读书本就可以平复心中的烦躁与不安，另一方面就是《百年孤独》这本书确实让我领悟了一些道理吧。不过书中的名字多的让人眼花缭乱害的我时不时需要翻阅一下布恩迪亚家族的族谱，哈哈。故事以<code>多年以后，面对行刑队，奥雷里亚诺·布恩迪亚上校将会回想起父亲带他去见识冰块的那个遥远的下午。</code>这句话开始，同时包含了现在过去和未来三个时间点，让人有一种冲动去继续了解这个故事，而且“面对行刑队”这几个字也让人有一种悲惨结局的感觉，不过最后读完就会发现结局确实如此。整本书的开头并没有让人体会到跟孤独有关的任何东西，反而带给人的是一种欣欣向荣的场景，马孔多小镇的开辟，新生活的开始，一切一切都是那么的顺其自然。吉普赛人带来了新鲜的玩意磁铁，飞毯，再加上何塞·阿尔卡蒂奥·布恩迪亚对事物的太久的不懈坚持的精神和乌尔苏拉的勤劳和对整个家族的打理，让我感觉到马孔多未来会越来越好，但是结局却往往背道而驰。</p><p>​        <code>生命中曾经有过的所有灿烂，终究都要用寂寞来偿还！</code></p><p>​        说的一点都没错，不管之前的的生活有多么的灿烂，都避免不了孤独的存在。我们依次说说布恩迪亚家族的一些人吧。</p><p>==1. 何塞·阿尔卡蒂奥·布恩迪亚==</p><p>​        首先就是何塞·阿尔卡蒂奥·布恩迪亚，说到他无论是马孔多的建设还是发展，都有布恩迪亚不可磨灭的功劳，他的一生都在钻研之中度过，自从接触到吉普赛人带来的新科技，立即展开天马行空的想象，想要用磁铁来挖掘地下的黄金，把放大镜聚焦太阳应用于战争。他以科学家的忘我精神全心投入实验，甚至不惜以身犯险，他沉迷于科学研究，不再吃饭睡觉，喃喃自语，走火入魔。他终于筋疲力尽，精神崩溃，被家人绑在一棵栗子树上，直到多年后死去。何塞·阿尔卡蒂奥·布恩迪亚是一个有着坚定信念和执着追求的人，但他又是一个不切实际的理想主义者，他的精神世界与马孔多人的愚昧落后格格不入，因此他无论如何努力，都无法取得成功。他死在了一种不被理解的孤独里。读到他被绑在树上直到死去时，就开始故事慢慢的转向了悲剧和孤独，这么一个对马孔多做出巨大贡献的人最后却落得如此的下场，不被理解，被绑在树上直至生命的尽头。说明了探索者和开创者有着<code>不被理解的孤独</code>！</p><p>==2. 乌尔苏拉==</p><p>​        读完整本书我们可以感受到乌尔苏拉是整个家族的顶梁柱，无论整个家族发生怎样的事情，他都不会让家族分崩离析，所以为了让故事可以更好地继续发展所以她活了一百多岁，也几乎贯穿了整个家族的历史。<code>她似乎无处不在，每天从清晨到深夜，伴随着细棉布裙柔和的窸窣声一直四处忙碌。全亏了她，那泥土夯平的地面、未经粉刷的泥墙和自制的粗木家具才永远一尘不染，旧箱子的衣服才永远散发着罗勒的淡淡香气</code>乌尔苏拉是全文里活得最清醒、通透的一个，她吃苦耐劳、勤俭持家，但比起这些优秀的品质，她的坚强和积极向上的精神更令人敬佩，她在全书中就是一个希望的象征，她永远充满活力和不服输的精神，她凭借自己的双手扩大了家族，养育了一代又一代人，试图将这个各自孤独、一盘散沙的家族团结起来。但她始终没有明白的是：她自己都无法看透孤独，也无法摆脱孤独。就像面对儿子和孙子的事情无能为力，一个人对抗孤独带来的失望和困扰时，她也还是会去跟丈夫诉苦。就是这样一个女人，竟然也避免不了孤独，她再勤劳再努力，依然无法阻止家中一件一件悲剧的发生，就像他不愿意家族的人再用奥雷里亚诺，阿尔卡蒂奥，蕾梅黛丝和乌尔苏拉命名一样，不过一切都不能如她所愿。就是这样一个人，直到生命的尽头，她双目失明，老态龙钟，瘦小干枯，甚至成为曾孙女和玄孙的玩具，那种被死神遗忘的孤独，在她身上被展现的淋漓尽致，想一想如果换成自己眼睁睁看着身边亲人的离去，看到家族的没落，那是有多么的孤独呀。看到她的一生，我相信对我们来说现在是有多幸福呀。最后，她的一生也说明了品质再优秀的人，也无法逃脱孤独的魔爪。</p><p>==3. 奥雷里亚诺·布恩迪亚上校==</p><p>​        正本小说在讲家族中的各个成员，没有一个确定的主角，如果非要选一个出来的话，那一定非奥雷里亚诺·布恩迪亚上校莫属了，而且他也是作品中最具孤独气质的人物。奥雷里亚诺在长达二十年的征战生涯，通过三十二次失败的起义，躲过各种完成了他的的成长之路，最终成为奥雷里亚诺布恩迪亚上校。他之后甚至还妄图再次挑起被自己一手终结的战争，直到晚年无力再发动战争才终于歇息。奥雷里亚诺冷漠、近于无情，被母亲称作“缺乏爱能力的人”，可能大家早已忘记他也曾是在第一次摸到冰时，被吓得大叫“他在烧”的天真懵懂少年。奥雷里亚诺的命运转折出现在他的妻子被误杀， 上校的心也开始走向孤独。 战争的火焰烧进了马孔多，小镇的安静被打破， 也正是这突如其来的战争彻底地改变了奥雷里亚诺的一生。内外因交汇启动了命运的轮盘，然后奥雷里亚诺才成为了奥雷里亚诺布恩迪亚上校。他戎马一生，但是最终却在一间狭小的房间里不断地做着小金鱼来消磨最后的时光，他不断抗争但又一步步走向孤独。最后死在曾经绑着父亲的栗树下，死的时候还在想着已经记忆模糊的马戏团。他的一生是逃避孤独的一生，但孤独却从未摆脱。他发动战争是为了逃避妻子离世后的孤独，他放弃战争是发现战争只会让他更孤独，并且没有终点，他做小金鱼更是为了摆脱孤独，可是他始终没有摆脱。上校的孤独是来自于哪里呢？看了很多解读，觉得最有道理的应该是来自他内心的迷茫，最为重要的两个方面应该是权利和爱情。权利的孤独是必然的，当人爬升到一定的高度时就注定是孤独的，他们有很多东西是没有办法与人倾诉的。关于爱情，乌尔苏拉是这么评价上校的：他是一个不知道怎么去爱的男人，明明有过那么多女人，还有17个私生子，但是他还是选择重复制作小金鱼来孤独的度过余生（像我们平时，网络明明可以拉近人与人之间的感情让我们去发现爱，但讽刺的是反而人们离得太近导致与大家拉的更远，因为选择太多，反而不会去选择），我们其实也像上校一样，在这个大环境下不知道怎么去表达自己，总感觉自己是不被接受的，从而把自己困在围墙之中，去打游戏消遣时间。就是这么一个传奇的任务，最终也只能做着小金鱼度过自己的余生，而且最后被人们遗忘，被人们提起时也只是当做战争总被塑造的任务。可能被遗忘就是上校一生中最大的孤独了吧。</p><p>==4.美人儿蕾梅黛丝==</p><p>​        美人儿蕾梅黛丝一个天仙般的存在，开始并不懂得这么一个人的孤独来自何处呢？她天真烂漫，也从没感受到孤独感。她是一个很特别，很独立的存在，不论是在整个家族还是在马孔多，似乎都格格不入，而且她身上也有着某种诅咒，对她有想法的人都活不过两天，再后来她就成了死亡的象征但是依然有很多人前仆后继，不仅仅因为她美丽的外表，而且是为了追求自由（她不穿衣服在家乱跑，不守规则，是个彻彻底底的自由人），不过看了讲解以后才了解到她也象征着拉美人民追求者自由，然而美人儿蕾梅黛丝却升天飘走了，说明了在那个时代中，人们的希望再次破灭了。这里也运用了魔幻现实主义的写法，她随床单飘走了却没有人感到惋惜，也没有人疑惑他到底去了哪里，这可能是这个角色唯一让我感到孤独的地方吧。</p><p>==5.阿玛兰妲==</p><p>​    阿玛兰妲因为妒忌丽贝卡与钢琴师相爱，为了阻止丽贝卡结婚，下毒不小心害死了自己的嫂子和肚子里面的双胞胎。从此以后她一生都活在恐惧中，恐惧自己的内心并非那么懂得爱情，恐惧因自己的恶毒害死了嫂子。她一生都在惩罚自己，爱而不敢。阿玛兰妲的对丽贝卡结婚的破坏，导致丽贝卡移情别恋与她表哥相爱，并被赶出家门。钢琴师明白了阿玛兰妲心意后，跟她求婚，阿玛兰妲却说：“别天真了，克雷斯皮，我死也不会跟你结婚”。包括后面面对马尔克斯上校的追求的时候，一方面期待与他的相会，一方面又对他说：“我谁也不嫁，尤其不会嫁给你”。为什么阿玛兰妲面对追求者的时候这么狠心，她并非出于不爱，而是阿玛兰妲面对无穷的爱意和无法战胜的恐惧的时候，阿玛兰妲选择了后者，她让恐惧折磨自己的心灵。所以她后来一直用黑纱缠绕的手就是她内心恐惧的影子。她人的一生中，最大的恐惧不是来自外部，而是出于内心，她内心的不安全感恰恰就是恐惧的根源。她也知道了自己何时去世，于是她的后半生在为自己织寿衣中度过，这恐怕也是最大的孤独之一吧，知道了自己的死亡，而默默等待的过程。</p><p>==6.奥雷里亚诺第二==</p><p>​        他可能算是有一个很好地开局了，有着疯狂繁殖能力分农场，有着数不完的财富，有着妻子能接受的情人，每天都在欢乐中度过，但是正好也与他的结局有着鲜明的对比，连续几年的大雨让他变得一无所有，甚至食物都不够吃，结束了自己的一生。</p><p>==7.阿尔卡蒂奥第二==</p><p>​        小时候看枪毙犯人给他造成了阴影，最后又因为经历了香蕉公司的大屠杀，彻底的疯了，他忘不了那3000多具尸体，但是在别人看来确实什么都没有发生，==马孔多无事发生==，让他不愿意再走出那个房门，最终也是在心里隐形下孤独的死去。</p><p>​       由于人物太多，这里就不一一说了。最后我们总得说说布恩迪亚家族的孤独吧。读完整本书，似乎自己也跟着书中的人物度过了百年，我们可以感到一种很明显的宿命感，所有人的生命都在进行一个循环往复，不管是人物的名称，性格和干的一些事情都在循环往复的发生。不过，跳出小说，我们的生活又何尝不是循环往复的呢？从小我们就被教导我们要好好地学习，考个好大学，找个好工作，组建好的家庭，然后教导我们的孩子…..大家似乎都在过着同一种人生，要不怎么说人类的本质是复读机呢？哈哈！虽然我们都过着差不多的人生，但是我们的孤独都是一样的吗？然而最大的孤独是什么样子呢？，我想对我们普通人来说大概是我们完成了很多事情，但是这些事似乎注定是会被遗忘的，我们一无所有的来，也终将一无所有的离去。就像是布恩迪亚家族一样，那一场大雨似乎冲刷了人们的记忆，人们慢慢的忘了奥雷里亚诺上校，慢慢的人们也会遗忘掉布恩迪亚家族，这可能就是整本书最大的孤独吧！<code>羊皮卷上所载的一切永远至永远不会再重复，因为经历百年孤独的家族不会有第二次机会在大地上出现</code>。</p><p>​        看完讲解以后，才发现整个故事都在讲拉丁美洲的事情，一切的人物，背景，事件都有它的现实写照，故事中的人物都是自己身边亲人的写照，发生的事情也是，香蕉公司大屠杀，自由党保守党的战争等等，也让我明白了什么才是真正的魔幻现实主义。书中的最后一句也意味着压迫不会再拉美的土地上再次出现。讲解上还说，书中最后藏的彩蛋：小奥雷里亚诺破解着羊皮卷的内容，而他将小奥雷里亚诺代指自己，想说明他只是在破解预言家梅尔吉亚德斯的预言，自己成了自己书中人物预言中的人物，陷入了循环。不过，我反而觉得小奥雷里亚诺更像是我们读者自己，自己正在阅读着这本书，而作者才是梅尔吉亚德斯，我们以为孤独去阅读这本书，最后发现书中写得正是自己，我们也像是书中人物一样孤独，更加说明孤独在我们生活中是不可避免的。</p><p>​        当然孤独并不是孤单，孤单只的只是肉体上的单一，而孤独确实内心的。所以在现实生活中，孤独他就是不可避免的，人生的不同阶段总有它对应的孤独，所以我们才需要不断地折腾，不断地经历，无论成功与否，这些都会变成我们的记忆，而记忆就是抵抗孤独最大的武器，因为回忆很长，够一辈子去回味。所以在马孔多最可怕的孤独莫过于村子里的人都得了失眠症，长期的失眠使他们丧失了记忆，他们记不起来自己来自哪里，要去往何处的时候是最孤独的时候。读完之后才觉得我们反而是幸运的，最起码我们的孤独是建立在和平之中，生活在丰衣足食的年代。</p><p>​        最后，我觉得孤独并不可怕，可怕的是我们穷极一生没有按照我们自己的想法去做我们想做的事，可怕的是我们从来不敢去独自面对孤独，可怕的是我们自已以为我们自己从不孤独。虽然孤独不可避免，但是他也会以为我们的负重前行而变得更好。也希望我们可以在我们的一生中敢于面对孤独，更希望我们每个人都可以有人陪伴。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 百年孤独 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程</title>
      <link href="/2021/08/07/wang-luo-bian-cheng/"/>
      <url>/2021/08/07/wang-luo-bian-cheng/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h2 id="1-1、概述"><a href="#1-1、概述" class="headerlink" title="1.1、概述"></a>1.1、概述</h2><p><strong>地球村：</strong>你在西安，你一个美国的朋友！</p><p>信件：</p><p><img src="/2021/08/07/wang-luo-bian-cheng/1628305187168.png"></p><p><strong>计算机网络：</strong></p><p>​        计算机网络是指将**<a href="https://baike.baidu.com/item/%E5%9C%B0%E7%90%86">地理</a>位置不同<strong>的具有独立功能的</strong>多台<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA/140338">计算机</a>及其外部设备，通过通信线路连接起来<strong>，在<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3997">网络操作系统</a>，<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E8%BD%AF%E4%BB%B6/6579078">网络管理软件</a>及</strong><a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/4438611">网络通信协议</a><strong>的管理和协调下，</strong>实现<a href="https://baike.baidu.com/item/%E8%B5%84%E6%BA%90%E5%85%B1%E4%BA%AB/233480">资源共享</a>**和信息传递的计算机系统。</p><p><strong>网络编程的目的：</strong></p><p>无线电台…传播交流信息，数据交换。通信</p><p><strong>想要达到这个效果需要什么：</strong></p><ol><li>如何准确地定位网络上的一台主机 192.168.16.124：端口，定位到这个计算机上的某个资源</li><li>找到了这个主机，如何传输数据呢？</li></ol><p>javaweb：网页编程 B/S</p><p>网络编程：TCP/IP C/S</p><h2 id="1-2、网络通信的要素"><a href="#1-2、网络通信的要素" class="headerlink" title="1.2、网络通信的要素"></a>1.2、网络通信的要素</h2><p>如何实现网络的通信？</p><p>通信双方地址：</p><ul><li>ip</li><li>端口号</li><li>192.168.16.124：5900</li></ul><p><strong>规则：网络通信的协议</strong></p><p>TCP/IP参考模型：<br><img src="/2021/08/07/wang-luo-bian-cheng/20190105164025264.png"><br><img src="/2021/08/07/wang-luo-bian-cheng/20201210083400724.png" alt="在这里插入图片描述"><br>小结：</p><ol><li>网络编程中主要有两个问题</li></ol><ul><li>如何准确的定位到网络上的一台或者多台主机，<code>ping</code></li><li>找到主机之后如何进行通信</li></ul><ol start="2"><li>网络编程中的要素</li></ol><ul><li>IP和端口号 IP</li><li>网络通信写协议 UDP，TCP</li></ul><ol start="3"><li>万物皆对象</li></ol><h2 id="1-3、IP"><a href="#1-3、IP" class="headerlink" title="1.3、IP"></a>1.3、IP</h2><p>ip地址：inetAddress</p><ul><li>唯一定位一台网络上的计算机</li><li>127.0.0.1：本机localhost</li><li>ip地址的分类<ul><li>ipv4/ipv6<ul><li><strong>IPV4：</strong>127.0.0.1，四个字节组成。0 ~ 255， 42亿~；30亿都在北美，亚洲4亿。2001年就用尽了；</li><li><strong>IPV6：</strong>fe80::755f:fc6c:2ebc:b6e6%18，128位。8个无符号整数！</li></ul></li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">2001:0bb2:aaaa:0015:0000:0000:1aaa:13120<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>IP地址分类</li><li>公网（互联网）-私网（局域网）<ul><li>ABCD类地址</li><li>192.168.xx.xx，专门给组织内部使用的</li></ul></li><li>域名：记忆 IP问题！<ul><li>IP：<a href="http://www.vip.com/">www.vip.com</a></li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class TestInetAddress &#123;    public static void main(String[] args) &#123;   &#x2F;&#x2F; write your code here        try &#123;            InetAddress inetAddress1 &#x3D; InetAddress.getByName(&quot;127.0.0.1&quot;);            System.out.println(inetAddress1);            InetAddress inetAddress3 &#x3D; InetAddress.getByName(&quot;localhost&quot;);            System.out.println(inetAddress3);            InetAddress inetAddress4 &#x3D; InetAddress.getLocalHost();            System.out.println(inetAddress4);            &#x2F;&#x2F;查询网站ip地址            InetAddress inetAddress2 &#x3D; InetAddress.getByName(&quot;www.bilibili.com&quot;);            System.out.println(inetAddress2);            &#x2F;&#x2F;常用方法            &#x2F;&#x2F;System.out.println(inetAddress2.getAddress());            System.out.println(inetAddress2.getCanonicalHostName());    &#x2F;&#x2F;规范的名字            System.out.println(inetAddress2.getHostAddress());  &#x2F;&#x2F;ip            System.out.println(inetAddress2.getHostName()); &#x2F;&#x2F;域名，或者自己电脑的名字        &#125; catch (UnknownHostException e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-4、端口"><a href="#1-4、端口" class="headerlink" title="1.4、端口"></a>1.4、端口</h2><p>端口表示计算机上的一个程序的进程；</p><ul><li>不同的进程有不同的端口号！用来区分软件！</li><li>被规定0 ~ 065535</li><li>TCP，UDP：65535 * 2 ，单个协议下，端口号不能冲突</li><li>端口分类<ul><li>公有端口0 ~ 1023</li><li>默认端口<ul><li>HTTP：80</li><li>HTTPS：443</li><li>FTP：21</li><li>Telent：23</li></ul></li><li>程序注册端口：1024 ~ 49151，分配给用户或者程序<ul><li>Tomcat：8080</li><li>MySQL：3306</li><li>Oracle：1512</li></ul></li><li>动态、私有：49152 ~ 65535</li></ul></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">netstat -ano #查看所有的端口netstat -ano | finstr &quot;5900&quot; #查看指定的端口tasklist | findstr &quot;8696&quot; #查看指定端口的进程ctrl + shift + ESC  #任务管理器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class TestSocketAddress &#123;    public static void main(String[] args) &#123;        InetSocketAddress socketAddress &#x3D; new InetSocketAddress(&quot;127.0.0.1&quot;, 8080);        System.out.println(socketAddress);        System.out.println(socketAddress.getAddress());        System.out.println(socketAddress.getHostName());        System.out.println(socketAddress.getPort());    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-5、通信协议"><a href="#1-5、通信协议" class="headerlink" title="1.5、通信协议"></a>1.5、通信协议</h2><p>协议：约定，就好比我们现在说的是普通话。</p><p><strong>网络通信协议：</strong>速率，传输码率，传输控制……</p><p><strong>问题：</strong>非常的复杂？</p><p>大事化小：分层！</p><p><strong>TCP/IP协议簇：实际上是一组协议</strong></p><p>重要：</p><ul><li>TCP：用户传输协议</li><li>UDP：用户数据报协议</li></ul><p>出名的协议：</p><ul><li>TCP：</li><li>IP：网络互连协议</li></ul><p><img src="/2021/08/07/wang-luo-bian-cheng/20201210083625773.png"><br><strong>TCP UDP对比</strong></p><p>TCP：打电话</p><ul><li>连接，稳定</li><li><code>三次握手</code> <code>四次挥手</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">最少需要三次，保证稳定连接！A：你瞅啥？B：瞅你咋地？A：干一场！A：我要走了B：你真的要走了吗？B：你真的真的要走了吗？A：我真的要走了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>客户端、服务端</li><li>传输完成，释放连接，效率低</li></ul><p>UDP：发短信</p><ul><li>不连接，不稳定</li><li>客户端、服务端：没有明确的界限</li><li>不管有没有准备好，都可以发给你…</li><li>导弹攻击</li><li>DDOS：洪水攻击！（饱和攻击）</li></ul><h2 id="1-6、TCP"><a href="#1-6、TCP" class="headerlink" title="1.6、TCP"></a>1.6、TCP</h2><p>客户端</p><ol><li>连接服务器Socket</li><li>发送消息</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;客户端public class tcpClientDemo01 &#123;    public static void main(String[] args) &#123;        Socket socket &#x3D; null;        OutputStream os &#x3D; null;        try &#123;            &#x2F;&#x2F;1、要知道服务器的地址，端口号            InetAddress serverIP &#x3D; InetAddress.getByName(&quot;127.0.0.1&quot;);            int port &#x3D; 9999;            &#x2F;&#x2F;2、创建一个socket连接            socket &#x3D; new Socket(serverIP, port);            &#x2F;&#x2F;3、发送消息 IO流            os &#x3D; socket.getOutputStream();            os.write(&quot;Hello World&quot;.getBytes());        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125;finally &#123;            if (socket !&#x3D; null)&#123;                try &#123;                    socket.close();                &#125; catch (IOException e) &#123;                    e.printStackTrace();                &#125;            &#125;            if (os !&#x3D; null)&#123;                try &#123;                    os.close();                &#125; catch (IOException e) &#123;                    e.printStackTrace();                &#125;            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务器</p><ol><li>建立服务的端口ServerScoket</li><li>等待用户的连接accept</li><li>接收用户的消息</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;服务端public class tcpServerDemo01 &#123;    public static void main(String[] args) throws IOException &#123;        ServerSocket serverSocket &#x3D; null;        Socket socket &#x3D; null;        InputStream is &#x3D; null;        ByteArrayOutputStream baos &#x3D; null;        try &#123;            &#x2F;&#x2F;1、我得有一个地址            serverSocket &#x3D; new ServerSocket(9999);            &#x2F;&#x2F;2、等待客户端连接过来            socket &#x3D; serverSocket.accept();            &#x2F;&#x2F;3、读取客户端的消息            is &#x3D; socket.getInputStream();            &#x2F;&#x2F;管道流            baos &#x3D; new ByteArrayOutputStream();            byte[] buffer &#x3D; new byte[1024];            int len;            while ((len &#x3D; is.read(buffer)) !&#x3D; -1)&#123;                baos.write(buffer, 0, len);            &#125;            System.out.println(baos.toString());        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;finally &#123;            &#x2F;&#x2F;关闭资源            if (baos !&#x3D; null)&#123;                try &#123;                    baos.close();                &#125; catch (IOException e) &#123;                    e.printStackTrace();                &#125;            &#125;            if (is !&#x3D; null)&#123;                try &#123;                    is.close();                &#125; catch (IOException e) &#123;                    e.printStackTrace();                &#125;            &#125;            if (socket !&#x3D; null)&#123;                try &#123;                    socket.close();                &#125; catch (IOException e) &#123;                    e.printStackTrace();                &#125;            &#125;            if (serverSocket !&#x3D; null)&#123;                serverSocket.close();            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>服务器端：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class tcpServerDemo02 &#123;    public static void main(String[] args) throws Exception &#123;        &#x2F;&#x2F;1、创建服务        ServerSocket serverSocket &#x3D; new ServerSocket(9999);        &#x2F;&#x2F;2、监听客户端的连接        Socket socket &#x3D; serverSocket.accept();  &#x2F;&#x2F;阻塞式监听，会一直等待客户端连接        &#x2F;&#x2F;3、获取输入流        InputStream is &#x3D; socket.getInputStream();        &#x2F;&#x2F;4、文件输出        FileOutputStream fos &#x3D; new FileOutputStream(new File(&quot;receive.jpg&quot;));        byte[] buffer &#x3D; new byte[1024];        int len;        while ((len &#x3D; is.read(buffer)) !&#x3D; -1)&#123;            fos.write(buffer, 0, len);        &#125;        &#x2F;&#x2F;通知客户端我接收完毕了        OutputStream os &#x3D; socket.getOutputStream();        os.write(&quot;我接受完毕了，你可以断开了&quot;.getBytes());        &#x2F;&#x2F;5、关闭资源        fos.close();        is.close();        socket.close();        serverSocket.close();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class tcpClientDemo02 &#123;    public static void main(String[] args) throws Exception &#123;        &#x2F;&#x2F;1、创建一个Socket连接        Socket socket &#x3D; new Socket(InetAddress.getByName(&quot;127.0.0.1&quot;), 9999);        &#x2F;&#x2F;2、创建一个输出流        OutputStream os &#x3D; socket.getOutputStream();        &#x2F;&#x2F;3、读取文件        FileInputStream fis &#x3D; new FileInputStream(new File(&quot;111.jpg&quot;));        &#x2F;&#x2F;4、写出文件        byte[] buffer &#x3D; new byte[1024];        int len;        while ((len &#x3D; fis.read(buffer)) !&#x3D; -1)&#123;            os.write(buffer, 0 , len);        &#125;        &#x2F;&#x2F;通知服务器，我已经结束了        socket.shutdownOutput();    &#x2F;&#x2F;我已经传输完了！                &#x2F;&#x2F;确定服务器接收完毕，才能够断开连接        InputStream inputStream &#x3D; socket.getInputStream();        &#x2F;&#x2F;String byte[]        ByteArrayOutputStream baos &#x3D; new ByteArrayOutputStream();        byte[] buffer2 &#x3D; new byte[1024];        int len2;        while ((len2 &#x3D; inputStream.read(buffer2)) !&#x3D; -1)&#123;            baos.write(buffer2, 0, len2);        &#125;        System.out.println(baos.toString());        &#x2F;&#x2F;5、关闭资源        baos.close();        inputStream.close();        fis.close();        os.close();        socket.close();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><p>服务端</p><ul><li>自定义 S</li><li>Tomcat服务器 S：Java后台开发!</li></ul><p>客户端</p><ul><li>自定义 C</li><li>浏览器 B</li></ul><h2 id="1-7、UDP"><a href="#1-7、UDP" class="headerlink" title="1.7、UDP"></a>1.7、UDP</h2><p>发短信：不用连接，需要知道对方的地址</p><h3 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a><strong>发送消息</strong></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;不需要连接服务器public class UdpClientDemo01&#123;    public static void main(String[] args) throws Exception&#123;        &#x2F;&#x2F;1、建立一个Socket        DatagramSocket socket &#x3D; new DatagramSocket();        &#x2F;&#x2F;2、建一个包        String msg &#x3D; &quot;你好啊，服务器!&quot;;        &#x2F;&#x2F;发送给谁        InetAddress localhost &#x3D; InetAddress.getByName(&quot;localhost&quot;);        int port &#x3D; 9090;        &#x2F;&#x2F;数据，数据的长度起始，要发送给谁        DatagramPacket packet &#x3D; new DatagramPacket(msg.getBytes(), 0, msg.getBytes().length, localhost, port);        &#x2F;&#x2F;3、发送一个包        socket.send(packet);        &#x2F;&#x2F;4、关闭流        socket.close();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接收端</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;还是要等待客户端的连接！public class UdpServerDemo01 &#123;    public static void main(String[] args) throws Exception&#123;        &#x2F;&#x2F;开发端口        DatagramSocket socket &#x3D; new DatagramSocket(9090);        &#x2F;&#x2F;接收数据包        byte[] buffer &#x3D; new byte[1024];        DatagramPacket packet &#x3D; new DatagramPacket(buffer, 0, buffer.length);   &#x2F;&#x2F;接收        socket.receive(packet); &#x2F;&#x2F;阻塞接收        System.out.println(packet.getAddress().getHostAddress());        System.out.println(new String(packet.getData(), 0, packet.getLength()));        &#x2F;&#x2F;关闭连接        socket.close();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="循环发送消息"><a href="#循环发送消息" class="headerlink" title="循环发送消息"></a>循环发送消息</h3><p>XXX：你好！</p><p>YYY：你好！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class UdpSenderDemo01 &#123;    public static void main(String[] args) throws Exception&#123;        DatagramSocket socket &#x3D; new DatagramSocket(8888);        &#x2F;&#x2F;准备数据：控制台读取 System.in        BufferedReader reader &#x3D; new BufferedReader(new InputStreamReader(System.in));        while (true)&#123;            String data &#x3D; reader.readLine();            byte[] datas &#x3D; data.getBytes();            DatagramPacket packet &#x3D; new DatagramPacket(datas, 0, datas.length, new InetSocketAddress(&quot;localhost&quot;, 6666));            socket.send(packet);            if (data.equals(&quot;bye&quot;))&#123;                break;            &#125;        &#125;        socket.close();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public class UdpReceiveDemo01 &#123;    public static void main(String[] args)  throws Exception&#123;        DatagramSocket socket &#x3D; new DatagramSocket(6666);        &#x2F;&#x2F;准备接收包裹        byte[] container &#x3D; new byte[1024];        while (true)&#123;            DatagramPacket packet &#x3D; new DatagramPacket(container, 0, container.length);            socket.receive(packet); &#x2F;&#x2F;阻塞式接收包裹            &#x2F;&#x2F;断开连接 byte            byte[] data &#x3D; packet.getData();            String receiveData &#x3D; new String(data, 0, data.length);            System.out.println(receiveData);            if (receiveData.equals(&quot;bye&quot;))&#123;                break;            &#125;        &#125;        socket.close();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在线咨询：两个人都可以是发送方，也可以是接收方！</p><blockquote><p>多线程实现两者对话（封装成了工具类）</p></blockquote><p><code>发送方法</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.chao.chat;import java.io.BufferedReader;import java.io.InputStreamReader;import java.net.DatagramPacket;import java.net.DatagramSocket;import java.net.InetSocketAddress;public class TalkSend implements Runnable &#123;    DatagramSocket socket &#x3D; null;    BufferedReader reader &#x3D; null;    private String toIP;    private int fromPort;    private int toPort;    public TalkSend(int fromPort,String toIP,  int toPort) &#123;        this.toIP &#x3D; toIP;        this.fromPort &#x3D; fromPort;        this.toPort &#x3D; toPort;        try &#123;            socket &#x3D; new DatagramSocket(fromPort);            reader &#x3D; new BufferedReader(new InputStreamReader(System.in));        &#125;catch (Exception e)&#123;            e.printStackTrace();        &#125;    &#125;    @Override    public void run() &#123;        while (true)&#123;            try &#123;                String data &#x3D; reader.readLine();                byte[] datas &#x3D; data.getBytes();                DatagramPacket packet &#x3D; new DatagramPacket(datas, 0, datas.length, new InetSocketAddress(this.toIP, this.toPort));                socket.send(packet);                if (data.equals(&quot;bye&quot;))&#123;                    break;                &#125;            &#125;catch (Exception e)&#123;                e.printStackTrace();            &#125;        &#125;        socket.close();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>接受方法</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.chao.chat;import java.io.IOException;import java.net.DatagramPacket;import java.net.DatagramSocket;import java.net.SocketException;public class TalkReceive implements Runnable &#123;    DatagramSocket socket &#x3D; null;    private int port;    private String msgFrom;    public TalkReceive(int port,String msgFrom) throws IOException &#123;        this.port &#x3D; port;        this.msgFrom &#x3D;msgFrom;        try &#123;            socket &#x3D; new DatagramSocket(port);        &#125; catch (SocketException e) &#123;            e.printStackTrace();        &#125;    &#125;    @Override    public void run() &#123;        while (true)&#123;            try &#123;                &#x2F;&#x2F;准备接收包裹                byte[] container &#x3D; new byte[1024];                DatagramPacket packet &#x3D; new DatagramPacket(container, 0, container.length);                socket.receive(packet); &#x2F;&#x2F;阻塞式接收包裹                &#x2F;&#x2F;断开连接 byte                byte[] data &#x3D; packet.getData();                String receiveData &#x3D; new String(data, 0, data.length);                System.out.println(msgFrom+&quot;:&quot;+receiveData);                if (receiveData.equals(&quot;bye&quot;))&#123;                    break;                &#125;            &#125; catch (IOException e) &#123;                e.printStackTrace();            &#125;        &#125;        socket.close();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>学生端</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.chao.chat;import java.io.IOException;public class TalkStudent &#123;    public static void main(String[] args) throws IOException &#123;        &#x2F;&#x2F;开启两个进程        new Thread(new TalkSend(7777,&quot;localhost&quot;,9999)).start();        new Thread(new TalkReceive(8888,&quot;老师&quot;)).start();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>老师端</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.chao.chat;import java.io.IOException;public class TalkTeacher &#123;    public static void main(String[] args) throws IOException &#123;        new Thread(new TalkSend(5555,&quot;localhost&quot;,8888)).start();        new Thread(new TalkReceive(9999,&quot;学生&quot;)).start();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/07/wang-luo-bian-cheng/1628321593172.png"><img src="/2021/08/07/wang-luo-bian-cheng/1628321605751.png"></p><h2 id="1-8、URL"><a href="#1-8、URL" class="headerlink" title="1.8、URL"></a>1.8、URL</h2><p><a href="https://www.baidu.com/">https://www.baidu.com</a></p><p>统一资源定位符：定位资源的，定位互联网上的某一个资源</p><p>DNS域名解析 <a href="http://www.baidu.com/">www.baidu.com</a> =&gt; xxx.x.xx.xx</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">协议：&#x2F;&#x2F;ip地址：端口&#x2F;项目名&#x2F;资源<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/07/wang-luo-bian-cheng/1628323873526.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.chao.url;import java.net.MalformedURLException;import java.net.URL;public class URLDemo01 &#123;    public static void main(String[] args) throws MalformedURLException &#123;        URL url &#x3D; new URL(&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;helloword&#x2F;index.jsp?username&#x3D;chao&amp;password&#x3D;123&quot;);        System.out.println(url.getProtocol());  &#x2F;&#x2F;协议        System.out.println(url.getHost());      &#x2F;&#x2F;主机ip        System.out.println(url.getPort());      &#x2F;&#x2F;端口        System.out.println(url.getPath());      &#x2F;&#x2F;文件        System.out.println(url.getFile());      &#x2F;&#x2F;全路径        System.out.println(url.getQuery());     &#x2F;&#x2F;参数    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>下载网上资源</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.chao.url;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.URL;public class UrlDown &#123;    public static void main(String[] args) throws IOException &#123;        &#x2F;&#x2F;下载地址        URL url &#x3D; new URL(&quot;http:&#x2F;&#x2F;localhost:8080&#x2F;chao&#x2F;haha.txt&quot;);        &#x2F;&#x2F;连接到这个资源 HTTP        HttpURLConnection urlConnection &#x3D; (HttpURLConnection) url.openConnection();        InputStream inputStream &#x3D; urlConnection.getInputStream();        FileOutputStream fos &#x3D; new FileOutputStream(&quot;haha.txt&quot;);        byte[] buffer &#x3D; new byte[1024];        int len;        while ((len&#x3D;inputStream.read(buffer))!&#x3D;1)&#123;            fos.write(buffer,0,len);        &#125;        fos.close();        inputStream.close();        urlConnection.disconnect();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>下载网上的歌</p></blockquote><p>1.找到网页</p><p>2.右键检查元素</p><p>3.找到network</p><p><img src="/2021/08/07/wang-luo-bian-cheng/1628333237484.png"></p><p>4.点击歌曲</p><p>5.查看里面的请求变化</p><p>6.找到里面的MP4或者m4a文件双击</p><p>7.复制网页连接到方法即可</p><p><img src="/2021/08/07/wang-luo-bian-cheng/1628333369953.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.chao.url;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.URL;public class UrlDown &#123;    public static void main(String[] args) throws IOException &#123;        &#x2F;&#x2F;下载地址        URL url &#x3D; new URL(&quot;https:&#x2F;&#x2F;m801.music.126.net&#x2F;20210807190036&#x2F;5c2be88e4c8604b8252ca10770e2cb2a&#x2F;jdyyaac&#x2F;025f&#x2F;5108&#x2F;550f&#x2F;55b3631b50fb21a9c1aebe8f98e8325c.m4a&quot;);        &#x2F;&#x2F;连接到这个资源 HTTP        HttpURLConnection urlConnection &#x3D; (HttpURLConnection) url.openConnection();        InputStream inputStream &#x3D; urlConnection.getInputStream();        FileOutputStream fos &#x3D; new FileOutputStream(&quot;kebukeyi.mp3&quot;);        byte[] buffer &#x3D; new byte[1024];        int len;        while ((len&#x3D;inputStream.read(buffer))!&#x3D;-1)&#123;            fos.write(buffer,0,len);        &#125;        fos.close();        inputStream.close();        urlConnection.disconnect();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络编程笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch</title>
      <link href="/2021/08/02/elasticsearch/"/>
      <url>/2021/08/02/elasticsearch/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h1><p>在学习ElasticSearch之前，先简单了解一下<strong>Lucene</strong>：</p><ul><li><strong>Doug Cutting开发</strong></li><li>是<strong>apache软件基金会</strong>4 jakarta项目组的一个子项目</li><li>是一个<strong>开放源代码</strong>的<strong>全文检索引擎工具包</strong></li><li><strong>不是一个完整的全文检索引擎，而是一个全文检索引擎的架构</strong>，提供了完整的查询引擎和索引引擎，部分<a href="https://baike.baidu.com/item/%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90/11046544">文本分析</a>引擎（英文与德文两种西方语言）</li><li>当前以及最近几年最受欢迎的<strong>免费Java信息检索程序库</strong>。</li></ul><p><strong>Lucene和ElasticSearch的关系：</strong></p><ul><li>ElasticSearch是基于Lucene 做了一下封装和增强</li></ul><h1 id="一、ElasticSearch概述"><a href="#一、ElasticSearch概述" class="headerlink" title="一、ElasticSearch概述"></a>一、ElasticSearch概述</h1><blockquote><p>官网：<a href="https://www.elastic.co/cn/downloads/elasticsearch">https://www.elastic.co/cn/downloads/elasticsearch</a></p></blockquote><p><strong>Elaticsearch</strong>，简称为es，es是一个开源的<strong>高扩展</strong>的<strong>分布式全文检索引擎</strong>，它可以近乎<strong>实时的存储</strong>、<strong>检索数据;<strong>本身扩展性很好，可以扩展到上百台服务器，处理PB级别(大数据时代）的数据。es也使用java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的</strong>目的</strong>是 通过简单的<strong>RESTful API</strong>来隐藏Lucene的复杂性，从而让全文搜索变得简单 。</p><p>据国际权威的数据库产品评测机构DB Engines的统计，在2016年1月，ElasticSearch已超过Solr等，成为<strong>排名第一的搜索引擎类应用</strong>。</p><blockquote><h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3></blockquote><p>多年前，一个叫做Shay Banon的刚结婚不久的失业开发者，由于妻子要去伦敦学习厨师，他便跟着也去了。在他找工作的过程中，为了给妻子构建一个食谱的搜索引擎，他开始构建一个早期版本的Lucene。</p><p>直接基于Lucene工作会比较困难，所以Shay开始抽象Lucene代码以便lava程序员可以在应用中添加搜索功能。他发布了他的第一个开源项目，叫做“Compass”。</p><p>后来Shay找到一份工作，这份工作处在高性能和内存数据网格的分布式环境中，因此高性能的、实时的、分布式的搜索引擎也是理所当然需要的。然后他决定重写Compass库使其成为一个独立的服务叫做Elasticsearch。</p><p>第一个公开版本出现在2010年2月，在那之后Elasticsearch已经成为Github上最受欢迎的项目之一，代码贡献者超过300人。一家主营Elasticsearch的公司就此成立，他们一边提供商业支持一边开发新功能，不过Elasticsearch将永远开源且对所有人可用。</p><p>Shay的妻子依旧等待着她的食谱搜索…..</p><p><strong>谁在使用：</strong></p><p>1、维基百科,类似百度百科，全文检索,高亮,搜索推荐/2<br>2、The Guardian (国外新闻网站) ,类似搜狐新闻,用户行为日志(点击,浏览,收藏,评论) +社交网络数据(对某某新闻的相关看法) ,数据分析,给到每篇新闻文章的作者,让他知道他的文章的公众反馈(好,坏,热门，垃圾,鄙视，崇拜)<br>3、Stack Overflow (国外的程序异常讨论论坛) , IT问题,程序的报错,提交上去,有人会跟你讨论和回答,全文检索,搜索相关问题和答案,程序报错了,就会将报错信息粘贴到里面去,搜索有没有对应的答案<br>4、GitHub (开源代码管理),搜索 上千亿行代码<br>5、电商网站,检索商品<br>6、日志数据分析, logstash采集日志, ES进行复杂的数据分析, <strong>ELK技术, elasticsearch+logstash+kibana</strong><br>7、商品价格监控网站,用户设定某商品的价格阈值,当低于该阈值的时候,发送通知消息给用户,比如说订阅牙膏的监控,如果高露洁牙膏的家庭套装低于50块钱,就通知我,我就去买<br>8、BI系统,商业智能, Business Intelligence。比如说有个大型商场集团，BI ,分析一下某某区域最近3年的用户消费 金额的趋势以及用户群体的组成构成,产出相关的数张报表, **区,最近3年,每年消费金额呈现100%的增长,而且用户群体85%是高级白领，开-个新商场。ES执行数据分析和挖掘, Kibana进行数据可视化<br>9、国内:站内搜索(电商,招聘,门户,等等),IT系统搜索(OA,CRM,ERP,等等),数据分析(ES热门<br>的一一个使用场景)</p><h2 id="ES和Solr"><a href="#ES和Solr" class="headerlink" title="ES和Solr"></a>ES和Solr</h2><h3 id="ElasticSearch简介"><a href="#ElasticSearch简介" class="headerlink" title="ElasticSearch简介"></a>ElasticSearch简介</h3><ul><li>Elasticsearch是一个<strong>实时分布式搜索和分析引擎</strong>。 它让你以前所未有的速度处理大数据成为可能。</li><li>它用于 <strong>全文搜索、结构化搜索、分析</strong> 以及将这三者混合使用:</li><li><code>维基百科</code>使用Elasticsearch提供<strong>全文搜索</strong>并<strong>高亮关键字</strong>,以及输入<strong>实时搜索</strong>(search-asyou-type)和<strong>搜索纠错</strong>(did-you-mean)等搜索建议功能。</li><li><code>英国卫报</code>使用Elasticsearch结合用户日志和社交网络数据提供给他们的编辑以实时的反馈,以便及时了解公众对新发表的文章的回应。</li><li><code>StackOverflow</code>结合全文搜索与地理位置查询,以及more-like-this功能来找到相关的问题和答案。</li><li><code>Github</code>使用Elasticsearch检索1300亿行的代码。</li><li>但是Elasticsearch不仅用于大型企业，它还让像<code>DataDog</code>以及<code>Klout</code>这样的创业公司将最初的想法变成可扩展的解决方案。</li><li>Elasticsearch可以在你的笔记本上运行,也可以在数以百计的服务器上处理PB级别的数据。</li><li>Elasticsearch是一个基于Apache Lucene(TM)的开源搜索引擎。无论在开源还是专有领域, Lucene可被认为是迄今为止最先进、性能最好的、功能最全的搜索引擎库。<ul><li>但是, <strong>Lucene只是一个库</strong>。 想要使用它,你必须使用Java来作为开发语言并将其直接集成到你的应用中,更糟糕的是, Lucene非常复杂,你需要深入了解检索的相关知识来理解它是如何工作的。</li></ul></li><li>Elasticsearch也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能,但是它的<strong>目的</strong>是<mark>通过简单的<strong>RESTful API</strong>来隐藏Lucene的复杂性,从而让全文搜索变得简单。</mark></li></ul><h3 id="Solr简介"><a href="#Solr简介" class="headerlink" title="Solr简介"></a>Solr简介</h3><ul><li>Solr是Apache下的一个顶级开源项目,采用Java开发,它是<strong>基于Lucene的全文搜索服务器</strong>。Solr提供了比Lucene更为<strong>丰富的查询语言</strong>,同时实现了<strong>可配置</strong>、<strong>可扩展</strong>，并<strong>对索引、搜索性能进行了优化</strong></li><li>Solr可以<strong>独立运行</strong>,运行在letty. Tomcat等这些Selrvlet容器中 , Solr 索引的实现方法很简单,<mark>用POST方法向Solr服务器发送一个描述Field及其内容的XML文档, Solr根据xml文档<strong>添加、删除、更新</strong>索引</mark>。Solr 搜索只需要发送HTTP GET请求,然后对Solr返回xml、json等格式的查询结果进行解析,组织页面布局。</li><li>Solr不提供构建UI的功能, <strong>Solr提供了一个管理界面,通过管理界面可以查询Solr的配置和运行情况。</strong></li><li>Solr是基于lucene开发企业级搜索服务器,实际上就是封装了lucene.</li><li>Solr是一个独立的企业级搜索应用服务器,它<strong>对外提供类似于Web-service的API接口</strong>。用户可以通过http请求,向搜索引擎服务器提交-定格式的文件,生成索引;也可以通过提出查找请求,并得到返回结果。</li></ul><h3 id="ElasticSearch与Solr比较"><a href="#ElasticSearch与Solr比较" class="headerlink" title="ElasticSearch与Solr比较"></a>ElasticSearch与Solr比较</h3><ol><li><code>当单纯的对已有数据进行搜索时，Solr更快</code></li></ol><p><img src="/2021/08/02/elasticsearch/2aa8e3beb5871b69bacfbb8ea476024b-1626936023794.png"></p><ol><li><code>当实时建立索引时，Solr会产生io阻塞，查询性能较差，ElasticSearch具有明显的优势</code></li></ol><p><img src="/2021/08/02/elasticsearch/553df4df5803d0d748851ead4bcd2df7-1626936023793.png"></p><ol><li><code>随着数据量的增加，Solr的搜索效率会变得更低，而ElasticSearch却没有明显的变化</code></li></ol><p><img src="/2021/08/02/elasticsearch/8a363b4dca2f0e878634f3e95a345c1f-1626936023820.png"> </p><ol><li><code>转变我们的搜索基础设施后从Solr ElasticSearch，我们看见一个即时~ 50x提高搜索性能！</code></li></ol><p><img src="/2021/08/02/elasticsearch/7e3bdc49ad0de72a4669da1e2e5b91b1-1626936023799.png"></p><p>总结</p><p>1、<strong>es</strong>基本是<strong>开箱即用</strong>(解压就可以用!) ,非常简单。Solr安装略微复杂一丢丢!<br>2、<strong>Solr 利用Zookeeper进行分布式管理</strong>,而<strong>E*<em>lasticsearch 自身带有分布式协调管理功能*</em> 。</strong><br>3、Solr 支持更多格式的数据,比如JSON、XML、 CSV ,而<strong>Elasticsearch仅支持json文件格式</strong>。<br>4、Solr 官方提供的功能更多,而Elasticsearch本身更注重于核心功能，高级功能多有第三方插件提供，例如图形化界面需要kibana友好支撑<br>5、 <strong>Solr 查询快,但更新索引时慢(即插入删除慢)</strong> ，用于电商等查询多的应用;</p><ul><li><strong>ES建立索引快(即查询慢)</strong> ，即<strong>实时性查询快</strong>，用于facebook新浪等搜索。</li><li>Solr是传统搜索应用的有力解决方案，但Elasticsearch更适用于新兴的实时搜索应用。</li></ul><p>6、Solr比较成熟，有一个更大，更成熟的用户、开发和贡献者社区，而Elasticsearch相对开发维护者较少,更新太快,学习使用成本较高。</p><h1 id="二、ElasticSearch安装"><a href="#二、ElasticSearch安装" class="headerlink" title="二、ElasticSearch安装"></a>二、ElasticSearch安装</h1><pre class="line-numbers language-none"><code class="language-none">JDK8，最低要求<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用Java开发，必须保证<code>ElasticSearch</code>的版本与Java的核心jar包版本对应！（Java环境保证没错）</p><blockquote><p>这里在windows上进行安装</p><h3 id="Windows下安装"><a href="#Windows下安装" class="headerlink" title="Windows下安装"></a>Windows下安装</h3></blockquote><p>1、安装</p><p>下载地址：<a href="https://www.elastic.co/cn/downloads/">https://www.elastic.co/cn/downloads/</a></p><p>历史版本下载：<a href="https://www.elastic.co/cn/downloads/past-releases/">https://www.elastic.co/cn/downloads/past-releases/</a></p><blockquote><p>ElasticSearch: <a href="https://mirrors.huaweicloud.com/elasticsearch/?C=N&amp;O=D">https://mirrors.huaweicloud.com/elasticsearch/?C=N&amp;O=D</a><br>logstash: <a href="https://mirrors.huaweicloud.com/logstash/?C=N&amp;O=D">https://mirrors.huaweicloud.com/logstash/?C=N&amp;O=D</a><br>kibana: <a href="https://mirrors.huaweicloud.com/kibana/?C=N&amp;O=D">https://mirrors.huaweicloud.com/kibana/?C=N&amp;O=D</a><br>elasticsearch-analysis-ik: <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">https://github.com/medcl/elasticsearch-analysis-ik/releases</a><br>cerebro: <a href="https://github.com/lmenezes/cerebro/releases">https://github.com/lmenezes/cerebro/releases</a> </p></blockquote><p>解压即可（尽量将ElasticSearch相关工具放在统一目录下）</p><p>2、熟悉目录</p><p><img src="/2021/08/02/elasticsearch/54d6400bf029f5086e61148312c11991-1626936023794.png"></p><p><img src="/2021/08/02/elasticsearch/17a71c649421cd7ec42d73ecf5ce0c76-1626936023799.png"></p><p><img src="/2021/08/02/elasticsearch/54d6400bf029f5086e61148312c11991.png"></p><pre class="line-numbers language-basic" data-language="basic"><code class="language-basic">bin 启动文件目录config 配置文件目录1og4j2 日志配置文件jvm.options java 虚拟机相关的配置(默认启动占1g内存，内容不够需要自己调整)elasticsearch.ym1 elasticsearch 的配置文件! 默认9200端口!跨域!1ib    相关jar包modules 功能模块目录plugins 插件目录ik分词器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、启动</p><blockquote><p>一定要检查自己的java环境是否配置好</p></blockquote><p><img src="/2021/08/02/elasticsearch/930407acb07f960f346918bfa55e54ad-1626936023797.png"></p><p><img src="/2021/08/02/elasticsearch/90337e146295d779b5c19d3b33ad4fbb-1626936023820.png"></p><p> <img src="/2021/08/02/elasticsearch/20210608171553663-1626936023795.png"></p><blockquote><h3 id="安装可视化界面"><a href="#安装可视化界面" class="headerlink" title="安装可视化界面"></a>安装可视化界面</h3></blockquote><pre class="line-numbers language-none"><code class="language-none">elasticsearch-head<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>使用前提</strong>：需要安装nodejs  </p><blockquote><p>nodejs安装</p></blockquote><p>Node.js 安装包及源码下载地址为：<a href="https://nodejs.org/en/download/%E3%80%82">https://nodejs.org/en/download/。</a></p><p>.<img src="/2021/08/02/elasticsearch/ea44a05920cc648813a7d1938e9b6db3-1626936023798.png"><img src="/2021/08/02/elasticsearch/ea44a05920cc648813a7d1938e9b6db3-1626936023798.png"></p><p><img src="/2021/08/02/elasticsearch/e18062fcafbad1cabd6cce2e6bff5091-1626936023796.png"></p><pre class="line-numbers language-none"><code class="language-none">npm install cnpm -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>可视化界面安装</p></blockquote><p>1、下载地址</p><p><a href="https://github.com/mobz/elasticsearch-head">https://github.com/mobz/elasticsearch-head</a></p><p>2、安装</p><p>解压即可（尽量将ElasticSearch相关工具放在统一目录下）</p><p>3、启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cd elasticsearch-head# 安装依赖npm install# 启动npm run start# 访问http:&#x2F;&#x2F;localhost:9100&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>安装依赖</strong></p><p><img src="/2021/08/02/elasticsearch/9806ef8f1306edba6ce82680c4063f1b-1626936023794.png"></p><p><strong>运行</strong></p><p><img src="/2021/08/02/elasticsearch/7f9f7da8343cbb30b5a74bd440e11ad2-1626936023819.png"></p><p><strong>访问</strong></p><blockquote><p>存在跨域问题（只有当两个页面同源，才能交互）</p><p>同源（端口，主机，协议三者都相同）</p><p><a href="https://blog.csdn.net/qq_38128179/article/details/84956552">https://blog.csdn.net/qq_38128179/article/details/84956552</a></p></blockquote><p><img src="/2021/08/02/elasticsearch/698ee7c155e8ee7d5d251a093296fe3b-1626936023799.png"></p><p><strong>开启跨域（在elasticsearch解压目录config下elasticsearch.yml中添加）</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 开启跨域http.cors.enabled: true# 所有人访问http.cors.allow-origin: &quot;*&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>重启elasticsearch</p></blockquote><p><img src="/2021/08/02/elasticsearch/20210608175802715-1626936023819.png"></p><p><strong>再次连接</strong></p><p><img src="/2021/08/02/elasticsearch/fb37f33e916c06e7ce9267886ec713e0-1626936023796.png"></p><p><strong>如何理解上图：</strong></p><ul><li><p>如果你是初学者</p><ul><li>索引 可以看做 “数据库”</li><li>类型 可以看做 “表”</li><li>文档 可以看做 “库中的数据（表中的行）”</li></ul></li><li><p><code>这个head，我们只是把它当做可视化数据展示工具，之后所有的查询都在kibana中进行</code></p></li><li><p>因为不支持json格式化，不方便</p></li></ul><blockquote><h3 id="安装kibana"><a href="#安装kibana" class="headerlink" title="安装kibana"></a>安装kibana</h3></blockquote><p>​        Kibana是一个针对ElasticSearch的开源分析及可视化平台,用来搜索、查看交互存储在Elasticsearch索引中的数据。使用Kibana ,可以通过各种图表进行高级数据分析及展示。Kibana让海量数据更容易理解。它操作简单,基于浏览器的用户界面可以快速创建仪表板( dashboard )实时显示Elasticsearch查询动态。设置Kibana非常简单。无需编码或者额外的基础架构,几分钟内就可以完成Kibana安装并启动Elasticsearch索引监测。</p><p>1、下载地址:</p><blockquote><p>下载的版本需要与ElasticSearch版本对应</p></blockquote><p><a href="https://www.elastic.co/cn/downloads/">https://www.elastic.co/cn/downloads/</a></p><p>历史版本下载：<a href="https://www.elastic.co/cn/downloads/past-releases/">https://www.elastic.co/cn/downloads/past-releases/</a></p><p>2、安装</p><p>解压即可（尽量将ElasticSearch相关工具放在统一目录下）</p><p><img src="/2021/08/02/elasticsearch/444ba7c6a713f18240517a34857e0573-1626936023819.png"></p><p>3、启动</p><p><img src="/2021/08/02/elasticsearch/6cefd2c1a749a11f6156cadb9b10d1bb-1626936023819.png"></p><p><img src="/2021/08/02/elasticsearch/145d46190d52c409313a12d62e357025-1626936023820.png"></p><p><strong>访问</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><code>localhost:5601</code></li></ol><p><img src="/2021/08/02/elasticsearch/424b2e09549e26843a6e362732435918-1626936023797.png"></p><p>4、开发工具</p><p>（Postman、curl、head、谷歌浏览器插件）</p><blockquote><p>可以使用 <code>Kibana</code>进行测试</p></blockquote><p><img src="/2021/08/02/elasticsearch/144dc81a6e463cbf89d19325faea14d2-1626936023798.png"></p><blockquote><p>如果说，你在英文方面不太擅长，kibana是支持汉化的</p></blockquote><p>5、kibana汉化</p><p>编辑器打开<code>kibana解压目录/config/kibana.yml(kibana-7.13.1-windows-x86_64/config/kibana.yml)</code>，添加</p><pre class="line-numbers language-none"><code class="language-none">i18n.locale: &quot;zh-CN&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启kibana</p><p><strong>汉化成功</strong></p><p><img src="/2021/08/02/elasticsearch/f0630a4b39e782ccf61b48d768f74f35-1626936023798.png"></p><h3 id="了解ELK"><a href="#了解ELK" class="headerlink" title="了解ELK"></a><strong>了解ELK</strong></h3><ul><li><p>ELK是</p><p>Elasticsearch、Logstash、 Kibana三大开源框架首字母大写简称</p><p>。市面上也被成为Elastic Stack。</p><ul><li>其中Elasticsearch是一个基于Lucene、分布式、通过Restful方式进行交互的近实时搜索平台框架。<ul><li>像类似百度、谷歌这种大数据全文搜索引擎的场景都可以使用Elasticsearch作为底层支持框架，可见Elasticsearch提供的搜索能力确实强大,市面上很多时候我们简称Elasticsearch为es。</li></ul></li><li>Logstash是ELK的中央数据流引擎,用于从不同目标(文件/数据存储/MQ )收集的不同格式数据,经过过滤后支持输出到不同目的地(文件/MQ/redis/elasticsearch/kafka等)。</li><li>Kibana可以将elasticsearch的数据通过友好的页面展示出来 ,提供实时分析的功能。</li></ul></li><li><p>市面上很多开发只要提到ELK能够一致说出它是一个日志分析架构技术栈总称 ,但实际上ELK不仅仅适用于日志分析,它还可以支持其它任何数据分析和收集的场景,日志分析和收集只是更具有代表性。并非唯一性。</p></li></ul><ol><li><code>收集清洗数据(Logstash) ==&gt; 搜索、存储(ElasticSearch) ==&gt; 展示(Kibana)</code></li></ol><p><img src="/2021/08/02/elasticsearch/df6dbfcb9e87260cd3b21553780b52de-1626936023820.png"></p><h1 id="三、ElasticSearch核心概念"><a href="#三、ElasticSearch核心概念" class="headerlink" title="三、ElasticSearch核心概念"></a>三、ElasticSearch核心概念</h1><blockquote><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2></blockquote><p>1、索引（ElasticSearch）</p><ul><li>包多个分片</li></ul><p>2、字段类型（映射）</p><ul><li>字段类型映射（字段是整型，还是字符型…）</li></ul><p>3、文档</p><p>4、分片（Lucene索引，倒排索引）</p><blockquote><p>ElasticSearch是面向文档，关系行数据库和ElasticSearch客观对比！一切都是JSON！</p></blockquote><table><thead><tr><th align="left">Relational DB</th><th align="left">ElasticSearch</th></tr></thead><tbody><tr><td align="left">数据库（database）</td><td align="left">索引（indices）</td></tr><tr><td align="left">表（tables）</td><td align="left">types (慢慢会被弃用)</td></tr><tr><td align="left">行（rows）</td><td align="left">documents</td></tr><tr><td align="left">字段（columns）</td><td align="left">fields</td></tr></tbody></table><p><strong>elasticsearch（集群）</strong>中可以包含多个<strong>索引（数据库）</strong> ,每个索引中可以包含多个<strong>类型（表）</strong> ,每个类型下又包含多个<strong>文档（行）</strong> ,每个文档中又包含多个<strong>字段（列）</strong>。</p><h3 id="物理设计"><a href="#物理设计" class="headerlink" title="物理设计:"></a>物理设计:</h3><p>elasticsearch在后台把<strong>每个索引划分成多个分片</strong>，每分分片可以在集群中的不同服务器间迁移</p><p>一个人就是一个集群! ，即<strong>启动的ElasticSearch服务，默认就是一个集群，且默认集群名为elasticsearch</strong></p><p><img src="/2021/08/02/elasticsearch/e546fee56b749c9c04dc8c882cd8b05f-1626936023799.png"></p><h3 id="逻辑设计"><a href="#逻辑设计" class="headerlink" title="逻辑设计:"></a>逻辑设计:</h3><p>一个索引类型中，包含多个文档，比如说文档1，文档2。当我们索引一篇文档时，可以通过这样的顺序找到它：索引 =&gt; 类型 =&gt; 文档ID ，通过这个组合我们就能索引到某个具体的文档。 注意：ID不必是整数，实际上它是个字符串。</p><blockquote><p>文档（”行“）</p></blockquote><p>之前说elasticsearch是面向文档的，那么就意味着<strong>索引和搜索数据的最小单位是文档</strong>，elasticsearch中，文档有几个重要属性:</p><ul><li>自我包含，一篇文档同时包含字段和对应的值，也就是同时包含key:value !</li><li>可以是层次型的，一个文档中包含自文档，复杂的逻辑实体就是这么来的! {就是一个json对象 ! fastjson进行自动转换 !}</li><li>灵活的结构，文档不依赖预先定义的模式，我们知道关系型数据库中，要提前定义字段才能使用，在elasticsearch中，对于字段是非常灵活的，有时候,我们可以忽略该字段，或者动态的添加一个新的字段。</li></ul><p>尽管我们可以随意的新增或者忽略某个字段，但是，每个字段的类型非常重要，比如一个年龄字段类型，可以是字符串也可以是整形。因为elasticsearch会保存字段和类型之间的映射及其他的设置。这种映射具体到每个映射的每种类型，这也是为什么在elasticsearch中，类型有时候也称为映射类型。</p><blockquote><p>类型（“表”）  </p></blockquote><p>类型是文档的逻辑容器，就像关系型数据库一样，表格是行的容器。类型中对于字段的定义称为映射，比如name映射为字符串类型。我们说文档是无模式的，它们不需要拥有映射中所定义的所有字段，比如新增一个字段，那么elasticsearch是怎么做的呢?</p><ul><li>elasticsearch会自动的将新字段加入映射，但是这个字段的不确定它是什么类型，elasticsearch就开始猜，如果这个值是18，那么elasticsearch会认为它是整形。但是elasticsearch也可能猜不对，所以最安全的方式就是提前定义好所需要的映射，这点跟关系型数据库殊途同归了，先定义好字段，然后再使用，别整什么幺蛾子。</li></ul><blockquote><p>索引（“库”）</p></blockquote><p>索引是映射类型的容器， elasticsearch中的索引是一个非常大的文档集合。 索引存储了映射类型的字段和其他设置。然后它们被存储到了各个分片上了。我们来研究下分片是如何工作的。</p><p><strong>物理设计：节点和分片 如何工作</strong></p><p>创建新索引</p><p><img src="/2021/08/02/elasticsearch/2faa409745d8139159005bce5905bccb-1626936023814.png"></p><p>一个集群至少有一个节点，而一个节点就是一个elasricsearch进程，节点可以有多个索引默认的，如果你创建索引，那么索引将会有个5个分片(primary shard ,又称主分片)构成的，每一个主分片会有一个副本(replica shard，又称复制分片)</p><p><img src="/2021/08/02/elasticsearch/10bf46e479ee230cb126bfb6c788c202-1626936023813.png"></p><p>上图是一个有3个节点的集群，可以看到主分片和对应的复制分片都不会在同一个节点内，这样有利于某个节点挂掉了，数据也不至于失。实际上，<strong><em>*一个分片是一个Lucene索引*<em>（*<em>一个ElasticSearch索引包含多个Lucene索引*</em> ）</em></em> ，</strong>一个包含**倒排索引**的文件目录，倒排索引的结构使得elasticsearch在不扫描全部文档的情况下，就能告诉你哪些文档包含特定的关键字**。不过，等等，倒排索引是什么鬼?</p><p><strong>倒排索引（Lucene索引底层）</strong></p><blockquote><p>简单说就是 按（文章关键字，对应的文档0个或多个）形式建立索引，根据关键字就可直接查询对应的文档（含关键字的），无需查询每一个文档，如下图</p></blockquote><p><img src="/2021/08/02/elasticsearch/b131c1e91d1180722e92b260789f0538-1626936023744.png"></p><h1 id="四、IK分词器-elasticsearch插件"><a href="#四、IK分词器-elasticsearch插件" class="headerlink" title="四、IK分词器(elasticsearch插件)"></a>四、IK分词器(elasticsearch插件)</h1><blockquote><p><strong>IK分词器：中文分词器</strong></p></blockquote><p>分词：即把一段中文或者别的划分成一个个的关键字，我们在搜索时候会把自己的信息进行分词，会把数据库中或者索引库中的数据进行分词，然后进行一一个匹配操作，<strong>默认的中文分词是将每个字看成一个词</strong>（<mark>不使用用IK分词器的情况下</mark>），比如“我爱狂神”会被分为”我”，”爱”，”狂”，”神” ，这显然是不符合要求的，所以我们需要安装中文分词器ik来解决这个问题。</p><p><strong>IK提供了两个分词算法</strong>: <code>ik_smart</code>和<code>ik_max_word</code> ,其中<code>ik_smart</code>为<strong>最少切分</strong>, <code>ik_max_word</code>为<strong>最细粒度划分</strong>!</p><h3 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h3><blockquote><p>版本要与ElasticSearch版本对应</p></blockquote><p>下载地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></p><h3 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h3><blockquote><p>ik文件夹是自己创建的</p></blockquote><p>加压即可（但是我们需要解压到ElasticSearch的plugins目录ik文件夹下）</p><p><img src="/2021/08/02/elasticsearch/24ce5f1ed0fabc0de65a2c6ec826da8c-1626936023819.png"></p><h3 id="3、重启ElasticSearch"><a href="#3、重启ElasticSearch" class="headerlink" title="3、重启ElasticSearch"></a>3、重启ElasticSearch</h3><blockquote><p>加载了IK分词器</p></blockquote><p><img src="/2021/08/02/elasticsearch/6c918d9e8f772f786e0454b59a2bc0a8-1626936023795.png"></p><h3 id="4、使用-ElasticSearch安装补录-bin-elasticsearch-plugin-可以查看插件"><a href="#4、使用-ElasticSearch安装补录-bin-elasticsearch-plugin-可以查看插件" class="headerlink" title="4、使用 ElasticSearch安装补录/bin/elasticsearch-plugin 可以查看插件"></a>4、使用 <code>ElasticSearch安装补录/bin/elasticsearch-plugin</code> 可以查看插件</h3><pre class="line-numbers language-none"><code class="language-none">E:\ElasticSearch\elasticsearch-7.6.1\bin&gt;elasticsearch-plugin list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/0508f2275eb06963d6d9c730a5058d66-1626936023763.png"></p><h3 id="5、使用kibana测试"><a href="#5、使用kibana测试" class="headerlink" title="5、使用kibana测试"></a>5、使用kibana测试</h3><p><code>ik_smart</code>：最少切分</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET _analyze&#123;  &quot;analyzer&quot;: &quot;ik_smart&quot;,  &quot;text&quot;: &quot;中国共产党&quot;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/1627541151790.png"></p><p><code>ik_max_word</code>：最细粒度划分（穷尽词库的可能）</p><pre class="line-numbers language-jso" data-language="jso"><code class="language-jso">GET _analyze&#123;  &quot;analyzer&quot;: &quot;ik_max_word&quot;,  &quot;text&quot;: &quot;中国共产党&quot;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/1627541214244.png"></p><p><code>ik_smart</code>：最少切分</p><p><img src="/2021/08/02/elasticsearch/ace9342952701bd14e1b9531c0ee29b7-1626936023798.png"></p><p><code>ik_max_word</code>：最细粒度划分（穷尽词库的可能）</p><p><img src="/2021/08/02/elasticsearch/42b97e51e53d8ad2d97a6c80d12f981b-1626936023749.png"></p><blockquote><p>从上面看，感觉分词都比较正常，但是大多数，分词都满足不了我们的想法，如下例:</p><p>耗子尾汁被分开了，达不到我们的想法</p></blockquote><p><img src="/2021/08/02/elasticsearch/2771baaf4efdb1388f3d7017fe0268f3-1626936023795.png"></p><blockquote><p>那么，我们需要手动将该词添加到分词器的词典当中</p></blockquote><h3 id="6、添加自定义的词添加到扩展字典中"><a href="#6、添加自定义的词添加到扩展字典中" class="headerlink" title="6、添加自定义的词添加到扩展字典中"></a>6、添加自定义的词添加到扩展字典中</h3><pre class="line-numbers language-none"><code class="language-none">elasticsearch目录&#x2F;plugins&#x2F;ik&#x2F;config&#x2F;IKAnalyzer.cfg.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/9e498de9b416b8371f35689c1b450206-1626936023757.png"></p><p>打开 <code>IKAnalyzer.cfg.xml</code> 文件，扩展字典</p><p><img src="/2021/08/02/elasticsearch/80ab669f2e1e391c696127954a77234c-1626936023798.png"></p><p>创建字典文件，添加字典内容</p><p><img src="/2021/08/02/elasticsearch/af9a9f29d0af0c35f6799d97cc3ac3d0-1626936023795.png"></p><p>重启ElasticSearch，再次使用kibana测试</p><p><img src="/2021/08/02/elasticsearch/1131d783b3f9d26c3322ccaa689ba706-1626936023769.png"></p><h1 id="五、Rest风格说明"><a href="#五、Rest风格说明" class="headerlink" title="五、Rest风格说明"></a>五、Rest风格说明</h1><p><strong>一种软件架构风格</strong>,而不是标准,只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以<strong>更简洁</strong>，<strong>更有层次</strong>，<strong>更易于实现缓存</strong>等机制。</p><h3 id="1-基本Rest命令说明："><a href="#1-基本Rest命令说明：" class="headerlink" title="1.基本Rest命令说明："></a><strong>1.基本Rest命令说明：</strong></h3><table><thead><tr><th align="left">method</th><th align="left">url地址</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">PUT（创建,修改）</td><td align="left">localhost:9200/索引名称/类型名称/文档id</td><td align="left">创建文档（指定文档id）</td></tr><tr><td align="left">POST（创建）</td><td align="left">localhost:9200/索引名称/类型名称</td><td align="left">创建文档（随机文档id）</td></tr><tr><td align="left">POST（修改）</td><td align="left">localhost:9200/索引名称/类型名称/文档id/_update</td><td align="left">修改文档</td></tr><tr><td align="left">DELETE（删除）</td><td align="left">localhost:9200/索引名称/类型名称/文档id</td><td align="left">删除文档</td></tr><tr><td align="left">GET（查询）</td><td align="left">localhost:9200/索引名称/类型名称/文档id</td><td align="left">查询文档通过文档ID</td></tr><tr><td align="left">POST（查询）</td><td align="left">localhost:9200/索引名称/类型名称/文档id/_search</td><td align="left">查询所有数据</td></tr></tbody></table><h3 id="2-测试"><a href="#2-测试" class="headerlink" title="2.测试"></a>2.测试</h3><h4 id="1、创建一个索引，添加"><a href="#1、创建一个索引，添加" class="headerlink" title="1、创建一个索引，添加"></a>1、创建一个索引，添加</h4><blockquote><p>PUT    /索引名/~类型名/文档id</p><p>{请求体}</p></blockquote><pre class="line-numbers language-json" data-language="json"><code class="language-json">PUT &#x2F;test1&#x2F;type1&#x2F;1&#123;&quot;name&quot; : &quot;任宜超&quot;,&quot;age&quot; : 18&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/1627562286632.png"></p><blockquote><p>完成了自动增加索引！数据也成功添加了</p></blockquote><p><img src="/2021/08/02/elasticsearch/1627562572959.png"></p><h4 id="2、字段数据类型"><a href="#2、字段数据类型" class="headerlink" title="2、字段数据类型"></a>2、字段数据类型</h4><ul><li><p><code>字符串类型</code></p></li><li><p>text、keyword</p><ul><li>text：支持分词，全文检索,支持模糊、精确查询,不支持聚合,排序操作;text类型的最大支持的字符长度无限制,适合大字段存储；</li><li>keyword：不进行分词，直接索引、支持模糊、支持精确匹配，支持聚合、排序操作。keyword类型的最大支持的长度为——32766个UTF-8类型的字符,可以通过设置ignore_above指定自持字符长度，超过给定长度后的数据将不被索引，无法通过term精确匹配检索返回结果。</li></ul></li><li><p><code>数值型</code></p></li><li><p>long、Integer、short、byte、double、float、<strong>half float</strong>、<strong>scaled float</strong></p></li><li><p><code>日期类型</code></p></li><li><p>date</p></li><li><p><code>te布尔类型</code></p></li><li><p>boolean</p></li><li><p><code>二进制类型</code></p></li><li><p>binary</p></li><li><p>等等…</p></li></ul><h4 id="3、指定字段的类型（使用PUT）"><a href="#3、指定字段的类型（使用PUT）" class="headerlink" title="3、指定字段的类型（使用PUT）"></a>3、指定字段的类型（使用PUT）</h4><blockquote><p>创建规则   类似于建库（建立索引和字段对应类型），也可看做规则的建立</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">PUT</span> <span class="token operator">/</span>test2<span class="token punctuation">&#123;</span><span class="token string-property property">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string-property property">"properties"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string-property property">"name"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"text"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string-property property">"age"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"long"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string-property property">"birthday"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">"type"</span><span class="token operator">:</span> <span class="token string">"date"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/37c626020fa67cb00955c59cd966f024-1626936023782.png"></p><h4 id="4、获取建立的规则"><a href="#4、获取建立的规则" class="headerlink" title="4、获取建立的规则"></a>4、获取建立的规则</h4><pre class="line-numbers language-none"><code class="language-none">GET test2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><img src="/2021/08/02/elasticsearch/f370e9aa667836b14bdd27ad27de0c70-1626936023787.png"></li></ol><h4 id="5、获取默认信息"><a href="#5、获取默认信息" class="headerlink" title="5、获取默认信息"></a>5、获取默认信息</h4><blockquote><p><code>_doc</code> 默认类型（default type），type 在未来的版本中会逐渐弃用，因此产生一个默认类型进行代替</p></blockquote><pre class="line-numbers language-json" data-language="json"><code class="language-json">PUT &#x2F;test3&#x2F;_doc&#x2F;1&#123;&quot;name&quot;: &quot;流柚&quot;,&quot;age&quot;: 18,&quot;birth&quot;: &quot;1999-10-10&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">GET test3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/9fb783e4d5bcb4c370b54b3c1365d665-1626936023796.png"></p><blockquote><p>如果自己的文档字段没有被指定，那么ElasticSearch就会给我们默认配置字段类型</p></blockquote><p>扩展：通过<code>get _cat/</code> 可以获取ElasticSearch的当前的很多信息！ </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">GET _cat&#x2F;indices         &#x2F;&#x2F;具体信息GET _cat&#x2F;aliasesGET _cat&#x2F;allocationGET _cat&#x2F;countGET _cat&#x2F;fielddataGET _cat&#x2F;healthGET _cat&#x2F;indicesGET _cat&#x2F;masterGET _cat&#x2F;nodeattrsGET _cat&#x2F;nodesGET _cat&#x2F;pending_tasksGET _cat&#x2F;pluginsGET _cat&#x2F;recoveryGET _cat&#x2F;repositoriesGET _cat&#x2F;segmentsGET _cat&#x2F;shardsGET _cat&#x2F;snapshotsGET _cat&#x2F;tasksGET _cat&#x2F;templates<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <img src="/2021/08/02/elasticsearch/1627564041145.png"></p><h4 id="6、修改"><a href="#6、修改" class="headerlink" title="6、修改"></a>6、修改</h4><blockquote><p>两种方案</p></blockquote><p>①旧的（使用put覆盖原来的值）</p><ul><li>版本+1（_version）</li><li>但是如果漏掉某个字段没有写，那么更新是没有写的字段 ，会消失</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json">PUT &#x2F;test3&#x2F;_doc&#x2F;1&#123;&quot;name&quot; : &quot;流柚是我的大哥&quot;,&quot;age&quot; : 18,&quot;birth&quot; : &quot;1999-10-10&quot;&#125; GET &#x2F;test3&#x2F;_doc&#x2F;1 &#x2F;&#x2F; 修改会有字段丢失PUT &#x2F;test3&#x2F;_doc&#x2F;1&#123;&quot;name&quot; : &quot;流柚&quot;&#125; GET &#x2F;test3&#x2F;_doc&#x2F;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/9ab3aa3c0eb15ff9df43b4b4d0b7172d-1626936023793.png"></p><p><img src="/2021/08/02/elasticsearch/6f9081c4a6f3e919a670d21bb8e33a16-1626936023814.png"></p><p>②新的（使用post的update）</p><ul><li>version不会改变</li><li>需要注意doc</li><li><code>不会丢失字段</code></li></ul><pre class="line-numbers language-none"><code class="language-none">POST &#x2F;test3&#x2F;_doc&#x2F;1&#x2F;_update&#123;&quot;doc&quot;:&#123;&quot;name&quot; : &quot;post修改，version不会加一&quot;,&quot;age&quot; : 2&#125;&#125; GET &#x2F;test3&#x2F;_doc&#x2F;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/f4c014990225c80102cf281551b12155-1626936023796.png"></p><h4 id="7、删除"><a href="#7、删除" class="headerlink" title="7、删除"></a>7、删除</h4><pre class="line-numbers language-none"><code class="language-none">DELETE &#x2F;test1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/c867fabdcffe83bf04f0b1740fe4f296-1626936023796.png"></p><p><img src="/2021/08/02/elasticsearch/28b62ce261cf5042502cc75391ebe7a5-1626936023824.png"></p><h4 id="※关于文档的基本操作（重点）"><a href="#※关于文档的基本操作（重点）" class="headerlink" title="※关于文档的基本操作（重点）"></a>※关于文档的基本操作（重点）</h4><blockquote><p>基本操作</p></blockquote><h5 id="（1）添加数据"><a href="#（1）添加数据" class="headerlink" title="（1）添加数据"></a>（1）添加数据</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">PUT &#x2F;chao&#x2F;user&#x2F;1&#123;  &quot;name&quot;: &quot;任宜超&quot;,  &quot;age&quot;: 23,  &quot;sesc&quot;: &quot;一定能操作&quot;,  &quot;tags&quot;: [&quot;直男&quot;,&quot;温暖&quot;,&quot;爱心&quot;]&#125;PUT &#x2F;chao&#x2F;user&#x2F;2&#123;  &quot;name&quot;: &quot;张三&quot;,  &quot;age&quot;: 3,  &quot;sesc&quot;: &quot;法外狂徒&quot;,  &quot;tags&quot;: [&quot;渣男&quot;,&quot;旅游&quot;,&quot;狠心&quot;]&#125;PUT &#x2F;chao&#x2F;user&#x2F;3&#123;  &quot;name&quot;: &quot;李四&quot;,  &quot;age&quot;: 3,  &quot;sesc&quot;: &quot;mmp&quot;,  &quot;tags&quot;: [&quot;靓仔&quot;,&quot;长歌&quot;,&quot;狠心&quot;]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/1627642717553.png"></p><h5 id="（2）查询数据"><a href="#（2）查询数据" class="headerlink" title="（2）查询数据"></a>（2）查询数据</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">GET chao&#x2F;user&#x2F;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/1627642803555.png"></p><h5 id="（3）-更新数据"><a href="#（3）-更新数据" class="headerlink" title="（3） 更新数据"></a>（3） 更新数据</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">PUT &#x2F;chao&#x2F;user&#x2F;3&#123;  &quot;name&quot;: &quot;李四2222&quot;,  &quot;age&quot;: 3,  &quot;sesc&quot;: &quot;mmp&quot;,  &quot;tags&quot;: [&quot;靓仔&quot;,&quot;长歌&quot;,&quot;狠心&quot;]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/1627646962535.png"></p><h5 id="（4）post-update-更新数据"><a href="#（4）post-update-更新数据" class="headerlink" title="（4）post update 更新数据"></a>（4）post update 更新数据</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">POST &#x2F;test3&#x2F;_doc&#x2F;1&#x2F;_update&#123;&quot;doc&quot;:&#123;&quot;name&quot; : &quot;post修改，version不会加一&quot;,&quot;age&quot; : 2&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>version不会改变</li><li>需要注意doc</li><li><code>不会丢失字段</code></li></ul><h4 id="8、查询（简单条件）"><a href="#8、查询（简单条件）" class="headerlink" title="8、查询（简单条件）"></a>8、查询（简单条件）</h4><pre class="line-numbers language-none"><code class="language-none">GET &#x2F;chao&#x2F;user&#x2F;_search?q&#x3D;name:任宜超<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/1627707113686.png"></p><blockquote><p>score 匹配度</p><p>如果存在多条查询出来的结果，匹配度越高分值越高</p></blockquote><p><img src="/2021/08/02/elasticsearch/1627709452805.png"></p><h4 id="9、复杂查询"><a href="#9、复杂查询" class="headerlink" title="9、复杂查询"></a>9、复杂查询</h4><blockquote><p>chao索引中的内容</p></blockquote><p><img src="/2021/08/02/elasticsearch/1627717855434.png"></p><h5 id="①查询匹配"><a href="#①查询匹配" class="headerlink" title="①查询匹配"></a>①查询匹配</h5><ul><li><p><code>match</code>：匹配（会使用分词器解析（先分析文档，然后进行查询））</p></li><li><p><code>_source</code>：过滤字段</p></li><li><p><code>sort</code>：排序</p></li><li><p><code>form</code>、<code>size</code> 分页</p></li></ul><blockquote><p><code>match</code>：匹配（会使用分词器解析（先分析文档，然后进行查询））</p><p>“query”  相当于            GET /chao/user/_search?q=name:任宜超          中的<code>q</code>属性</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">GET &#x2F;chao&#x2F;user&#x2F;_search&#123;&quot;query&quot;:&#123;&quot;match&quot;:&#123;&quot;name&quot;:&quot;超&quot;&#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/1627718051633.png"></p><blockquote><p><code>_source</code>：过滤字段</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">GET &#x2F;chao&#x2F;user&#x2F;_search&#123;&quot;query&quot;:&#123;&quot;match&quot;:&#123;&quot;name&quot;:&quot;超&quot;&#125;&#125;, &quot;_source&quot;: [&quot;name&quot;,&quot;sesc&quot;]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/1627718588696.png"></p><blockquote><p><code>sort</code>：排序</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">GET &#x2F;chao&#x2F;user&#x2F;_search&#123;&quot;query&quot;:&#123;&quot;match&quot;:&#123;&quot;name&quot;:&quot;超&quot;&#125;&#125;, &quot;sort&quot;: [  &#123;    &quot;age&quot;: &#123;      &quot;order&quot;: &quot;desc&quot;    &#125;  &#125;]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/1627719749729.png"></p><blockquote><p><code>form</code>、<code>size</code> 分页</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">GET &#x2F;chao&#x2F;user&#x2F;_search&#123;&quot;query&quot;:&#123;&quot;match&quot;:&#123;&quot;name&quot;:&quot;超&quot;&#125;&#125;, &quot;sort&quot;: [  &#123;    &quot;age&quot;: &#123;      &quot;order&quot;: &quot;desc&quot;    &#125;  &#125;],&quot;from&quot;: 0, &quot;size&quot;: 1&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/1627720449199.png"></p><h5 id="②多条件查询（bool）"><a href="#②多条件查询（bool）" class="headerlink" title="②多条件查询（bool）"></a>②多条件查询（<code>bool</code>）</h5><ul><li><p><code>must</code> 相当于 <code>and</code></p></li><li><p><code>should</code> 相当于 <code>or</code></p></li><li><p><code>must_not</code> 相当于 <code>not (... and ...)</code></p></li><li><p><code>filter</code> 过滤</p><blockquote><p><code>must</code> 相当于 <code>and</code></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">GET &#x2F;chao&#x2F;user&#x2F;_search&#123;&quot;query&quot;: &#123;  &quot;bool&quot;: &#123;        &quot;must&quot;: [      &#123;        &quot;match&quot;: &#123;          &quot;name&quot;: &quot;超&quot;        &#125;      &#125;,      &#123;        &quot;match&quot;: &#123;          &quot;age&quot;: &quot;24&quot;        &#125;      &#125;    ]      &#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/1627722783399.png"></p><blockquote><p><code>shuld</code>   相当于  <code>or   </code>     符合其中一个就行</p><p>should &lt;==&gt; or</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">GET &#x2F;chao&#x2F;user&#x2F;_search&#123;&quot;query&quot;: &#123;  &quot;bool&quot;: &#123;        &quot;should&quot;: [      &#123;      &quot;match&quot;: &#123;          &quot;name&quot;: &quot;超&quot;        &#125;      &#125;,      &#123;        &quot;match&quot;: &#123;          &quot;age&quot;: &quot;24&quot;        &#125;      &#125;   ]      &#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/1627734000057.png"></p><blockquote><p>must_not &lt;==&gt; not (… and …)</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">GET &#x2F;chao&#x2F;user&#x2F;_search&#123;&quot;query&quot;: &#123;  &quot;bool&quot;: &#123;        &quot;must_not&quot;: [           &#123;        &quot;match&quot;: &#123;          &quot;age&quot;: &quot;24&quot;        &#125;      &#125;    ]      &#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/1627734410837.png"></p><blockquote><p>过滤器<code>filter</code></p><p><code>gt</code>   大于</p><p><code>gte</code>大于等于</p><p><code>lt</code>小于</p><p><code>lte</code>小于等于</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">GET &#x2F;chao&#x2F;user&#x2F;_search&#123;&quot;query&quot;: &#123;  &quot;bool&quot;: &#123;        &quot;must&quot;: [           &#123;        &quot;match&quot;: &#123;          &quot;name&quot;: &quot;超&quot;        &#125;      &#125;    ],    &quot;filter&quot;: &#123;      &quot;range&quot;: &#123;        &quot;age&quot;: &#123;         &quot;gte&quot;: 22,          &quot;lte&quot;: 23&#125;&#125;&#125;      &#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/1627741584339.png"></p></li></ul><h5 id="②匹配数组"><a href="#②匹配数组" class="headerlink" title="②匹配数组"></a>②匹配数组</h5><ul><li><p>貌似不能与其它字段一起使用</p></li><li><p>可以多关键字查（空格隔开）— 匹配字段也是符合的</p></li><li><p><code>match</code> 会使用分词器解析（先分析文档，然后进行查询）</p></li><li><p>搜词</p><blockquote><p>多个条件（不是精确查询）：</p><p>使用空格隔开</p><p>只要满足其中一个结果就可以被查出</p><p>这个时候通过分值进行基本的判断</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">GET chao&#x2F;user&#x2F;_search&#123;  &quot;query&quot;: &#123;    &quot;match&quot;: &#123;      &quot;tags&quot;: &quot;男 操作 爱&quot;    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/1627804850566.png"></p></li></ul><h5 id="④精确查询"><a href="#④精确查询" class="headerlink" title="④精确查询"></a>④精确查询</h5><blockquote><p>精确查询</p></blockquote><ul><li><p><code>term</code> 直接通过 倒排索引 指定<strong>词条</strong>查询</p></li><li><p>适合查询 number、date、keyword ，不适合text</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#x2F;&#x2F; 精确查询（必须全部都有，而且不可分，即按一个完整的词查询）&#x2F;&#x2F; term 直接通过 倒排索引 指定的词条 进行精确查找的GET &#x2F;blog&#x2F;user&#x2F;_search&#123;&quot;query&quot;:&#123;&quot;term&quot;:&#123;&quot;desc&quot;:&quot;年 &quot;&#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><img src="/2021/08/02/elasticsearch/3730f347189d17265dd4e0e93c6978fb-1626936023818.png"></p><h5 id="※-使用term（精确查询）时，我发现三个问题，问题如下："><a href="#※-使用term（精确查询）时，我发现三个问题，问题如下：" class="headerlink" title="※     使用term（精确查询）时，我发现三个问题，问题如下："></a>※     使用term（精确查询）时，我发现三个问题，问题如下：</h5><ul><li><p>字段值必须是一个词（索引中存在的词），才能匹配</p><ul><li><p>问题：中文字符串，term查询时无法查询到数据（比如，“编程”两字在文档中存在，但是搜索不到）</p></li><li><p>原因：索引为配置中文分词器（默认使用standard，即所有中文字符串都会被切分为单个中文汉字作为单词），所以没有超过1个汉字的词，也就无法匹配，进而查不到数据</p></li><li><p>解决：创建索引时配置中文分词器，如</p></li><li><p>查询的英文字符只能是小写，大写都无效</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">PUT example&#123;&quot;mappings&quot;: &#123;&quot;properties&quot;: &#123;&quot;name&quot;:&#123;&quot;type&quot;: &quot;text&quot;,&quot;analyzer&quot;: &quot;ik_max_word&quot; &#x2F;&#x2F; ik分词器&#125;&#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>查询时英文单词必须是完整的</p></li></ul></li></ul><h5 id="⑤text和keyword"><a href="#⑤text和keyword" class="headerlink" title="⑤text和keyword"></a>⑤text和keyword</h5><ul><li>text：<ul><li><strong>支持分词</strong>，<strong>全文检索</strong>、支持模糊、精确查询,不支持聚合,排序操作;</li><li>text类型的最大支持的字符长度无限制,适合大字段存储；</li></ul></li><li>keyword：<ul><li><strong>不进行分词</strong>，<strong>直接索引</strong>、支持模糊、支持精确匹配，支持聚合、排序操作。</li><li>keyword类型的最大支持的长度为——32766个UTF-8类型的字符,可以通过设置ignore_above指定自持字符长度，超过给定长度后的数据将不被索引，<strong>无法通过term精确匹配检索返回结果</strong>。</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 测试keyword和text是否支持分词&#x2F;&#x2F; 设置索引类型PUT &#x2F;test&#123;    &quot;mappings&quot;: &#123;        &quot;properties&quot;: &#123;            &quot;text&quot;:&#123;                &quot;type&quot;:&quot;text&quot;             &#125;,            &quot;keyword&quot;:&#123;                &quot;type&quot;:&quot;keyword&quot;             &#125;        &#125;    &#125;&#125;   &#x2F;&#x2F; 设置字段数据PUT &#x2F;test&#x2F;_doc&#x2F;1&#123;&quot;text&quot;:&quot;测试keyword和text是否支持分词&quot;,&quot;keyword&quot;:&quot;测试keyword和text是否支持分词&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-java" data-language="java"><code class="language-java">GET _analyze&#123;&quot;analyzer&quot;: &quot;keyword&quot;,&quot;text&quot;: [&quot;测试liu&quot;]&#125;&#x2F;&#x2F; 不会分词，即 测试liu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/1627806678547.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">GET _analyze&#123;&quot;analyzer&quot;: &quot;standard&quot;,&quot;text&quot;: [&quot;测试liu&quot;]&#125;&#x2F;&#x2F; 分为 测 试 liu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/1627806699478.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">GET _analyze&#123;&quot;analyzer&quot;:&quot;ik_max_word&quot;,&quot;text&quot;: [&quot;测试liu&quot;]&#125;&#x2F;&#x2F; 分为 测试 liu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/1627806733173.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; text 支持分词&#x2F;&#x2F; keyword 不支持分词GET &#x2F;test&#x2F;_doc&#x2F;_search&#123;    &quot;query&quot;:&#123;        &quot;match&quot;:&#123;            &quot;text&quot;:&quot;测试&quot;        &#125;    &#125;&#125;&#x2F;&#x2F; 查的到 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/1627807078912.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">GET &#x2F;test&#x2F;_doc&#x2F;_search&#123;        &quot;query&quot;:&#123;            &quot;match&quot;:&#123;                &quot;keyword&quot;:&quot;测试&quot;            &#125;        &#125;&#125;&#x2F;&#x2F; 查不到，必须是 &quot;测试keyword和text是否支持分词&quot; 才能查到<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/1627807097887.png"></p><h5 id="⑥高亮查询"><a href="#⑥高亮查询" class="headerlink" title="⑥高亮查询"></a>⑥高亮查询</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 自定义前缀和后缀GET blog&#x2F;user&#x2F;_search&#123;&quot;query&quot;: &#123;&quot;match&quot;: &#123;&quot;name&quot;:&quot;流&quot;&#125;&#125;,&quot;highlight&quot;: &#123;&quot;pre_tags&quot;: &quot;&lt;p class&#x3D;&#39;key&#39; style&#x3D;&#39;color:red&#39;&gt;&quot;,&quot;post_tags&quot;: &quot;&lt;&#x2F;p&gt;&quot;,&quot;fields&quot;: &#123;&quot;name&quot;: &#123;&#125;&#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-java" data-language="java"><code class="language-java">GET &#x2F;chao&#x2F;user&#x2F;_search&#123;  &quot;query&quot;: &#123;    &quot;match&quot;: &#123;      &quot;name&quot;: &quot;超&quot;    &#125;  &#125;  , &quot;highlight&quot;: &#123;    &quot;fields&quot;: &#123;      &quot;name&quot;:&#123;              &#125;    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/1627808021924.png" alt="1627808021924"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">GET &#x2F;chao&#x2F;user&#x2F;_search&#123;  &quot;query&quot;: &#123;    &quot;match&quot;: &#123;      &quot;name&quot;: &quot;任宜超&quot;    &#125;  &#125;  , &quot;highlight&quot;: &#123;    &quot;fields&quot;: &#123;      &quot;name&quot;:&#123;              &#125;    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/1627808100154.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">GET &#x2F;chao&#x2F;user&#x2F;_search&#123;  &quot;query&quot;: &#123;    &quot;match&quot;: &#123;      &quot;name&quot;: &quot;任宜超&quot;    &#125;  &#125;  , &quot;highlight&quot;: &#123;    &quot;pre_tags&quot;: &quot;&lt;p class&#x3D;&#39;key&#39; style&#x3D;&#39;color:red&#39;&gt;&quot;,    &quot;post_tags&quot;: &quot;&lt;&#x2F;p&gt;&quot;,    &quot;fields&quot;: &#123;&quot;name&quot;: &#123;&#125;    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/1627808291725.png"></p><h1 id="六、SpringBoot整合"><a href="#六、SpringBoot整合" class="headerlink" title="六、SpringBoot整合"></a>六、SpringBoot整合</h1><h4 id="※学习方法"><a href="#※学习方法" class="headerlink" title="※学习方法"></a>※<code>学习方法</code></h4><blockquote><p>找文档  [<a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html]">https://www.elastic.co/guide/en/elasticsearch/client/index.html]</a></p></blockquote><p><img src="/2021/08/02/elasticsearch/1627811622545.png"></p><p><img src="/2021/08/02/elasticsearch/1627811673314.png"></p><h6 id="1-原生依赖"><a href="#1-原生依赖" class="headerlink" title="1.原生依赖"></a>1.原生依赖</h6><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.elasticsearch.client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>elasticsearch-rest-high-level-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>7.13.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-找对象"><a href="#2-找对象" class="headerlink" title="2.找对象"></a>2.找对象</h5><p><img src="/2021/08/02/elasticsearch/1627812013931.png"></p><h3 id="1、创建工程"><a href="#1、创建工程" class="headerlink" title="1、创建工程"></a>1、创建工程</h3><p><img src="/2021/08/02/elasticsearch/1627812619003.png"></p><blockquote><p>版本要一致</p></blockquote><p><img src="/2021/08/02/elasticsearch/1627813203516.png"></p><h3 id="2-自己定义es-版本，保证和本地一样"><a href="#2-自己定义es-版本，保证和本地一样" class="headerlink" title="2.自己定义es 版本，保证和本地一样"></a>2.<code>自己定义es 版本，保证和本地一样</code></h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>elasticsearch.version</span><span class="token punctuation">></span></span>7.6.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>elasticsearch.version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>提前导入fastjson、lombok</strong></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&lt;dependency&gt;&lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;&lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;&lt;version&gt;1.2.70&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;&lt;!-- lombok需要安装插件 --&gt;&lt;dependency&gt;&lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;&lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;&lt;optional&gt;true&lt;&#x2F;optional&gt;&lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-创建一个配置类"><a href="#3-创建一个配置类" class="headerlink" title="3.创建一个配置类"></a>3.创建一个配置类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class ElasticSearchClientConfig &#123;    @Bean    public RestHighLevelClient restHighLevelClient()&#123;        RestHighLevelClient client &#x3D; new RestHighLevelClient(                RestClient.builder(                        new HttpHost(&quot;localhost&quot;, 9200, &quot;http&quot;)));                return client;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/1627821147130.png"></p><blockquote><p>索引操作</p></blockquote><h3 id="4-测试索引创建"><a href="#4-测试索引创建" class="headerlink" title="4.测试索引创建"></a>4.测试索引创建</h3><blockquote><p>相当于PUT</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.chao;import org.elasticsearch.client.RequestOptions;import org.elasticsearch.client.RestHighLevelClient;import org.elasticsearch.client.indices.CreateIndexRequest;import org.elasticsearch.client.indices.CreateIndexResponse;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.boot.test.context.SpringBootTest;import java.io.IOException;@SpringBootTestclass ChaoEsApiApplicationTests &#123;    @Autowired    @Qualifier(&quot;restHighLevelClient&quot;)    private RestHighLevelClient Client;    @Test    void testCreatIndex() throws IOException &#123;        &#x2F;&#x2F;创建索引请求        CreateIndexRequest request &#x3D; new CreateIndexRequest(&quot;chao_index&quot;);        &#x2F;&#x2F;执行请求indicesClient ,请求后获得响应        CreateIndexResponse createIndexResponse &#x3D; Client.indices().create(request, RequestOptions.DEFAULT);        System.out.println(createIndexResponse);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/1627824583104.png"></p><h3 id="5-测试获取索引-判断其是否存在"><a href="#5-测试获取索引-判断其是否存在" class="headerlink" title="5.测试获取索引,判断其是否存在"></a>5.测试获取索引,判断其是否存在</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;测试创建索引,判断其是否存在   @Test   void testExistIndex() throws IOException &#123;       &#x2F;&#x2F;创建索引请求       GetIndexRequest request &#x3D; new GetIndexRequest(&quot;chao_index&quot;);       &#x2F;&#x2F;执行请求indicesClient ,请求后获得响应       boolean exists &#x3D; Client.indices().exists(request,RequestOptions.DEFAULT);       System.out.println(exists);   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/1627825489541.png"></p><h3 id="6-测试索引删除"><a href="#6-测试索引删除" class="headerlink" title="6.测试索引删除"></a>6.测试索引删除</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 测试索引删除@Testpublic void testDeleteIndex() throws IOException &#123;    DeleteIndexRequest request &#x3D; new DeleteIndexRequest(&quot;chao_index&quot;);    AcknowledgedResponse delete &#x3D; Client.indices().delete(request,     RequestOptions.DEFAULT);    System.out.println(delete.isAcknowledged());&#x2F;&#x2F; 是否删除成功   Client.close();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7、创建并编写实体类"><a href="#7、创建并编写实体类" class="headerlink" title="7、创建并编写实体类"></a>7、创建并编写实体类</h3><blockquote><p>会自动帮我们封装</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Data@NoArgsConstructor@AllArgsConstructorpublic class User implements Serializable &#123;     private static final long serialVersionUID &#x3D; -3843548915035470817L;     private String name;    private Integer age;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="※文档的操作"><a href="#※文档的操作" class="headerlink" title="※文档的操作"></a>※文档的操作</h3><h3 id="1、文档的添加"><a href="#1、文档的添加" class="headerlink" title="1、文档的添加"></a>1、文档的添加</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 测试添加文档(先创建一个User实体类，添加fastjson依赖)   @Test   public void testAddDocument() throws IOException &#123;   &#x2F;&#x2F; 创建一个User对象       User chao &#x3D; new User(&quot;chao&quot;, 18);   &#x2F;&#x2F; 创建请求       IndexRequest request &#x3D; new IndexRequest(&quot;chao_index&quot;);   &#x2F;&#x2F; 制定规则 PUT &#x2F;chao_index&#x2F;_doc&#x2F;1       request.id(&quot;1&quot;);&#x2F;&#x2F; 设置文档ID       &#x2F;&#x2F;request失效时间       request.timeout(TimeValue.timeValueMillis(1000));&#x2F;&#x2F; request.timeout(&quot;1s&quot;)   &#x2F;&#x2F; 将我们的数据放入请求中       request.source(JSON.toJSONString(chao), XContentType.JSON);   &#x2F;&#x2F; 客户端发送请求，获取响应的结果       IndexResponse response &#x3D; Client.index(request, RequestOptions.DEFAULT);       System.out.println(response.status());&#x2F;&#x2F; 获取建立索引的状态信息 CREATED       System.out.println(response);&#x2F;&#x2F; 查看返回内容  IndexResponse[index&#x3D;chao_index,type&#x3D;_doc,id&#x3D;1,version&#x3D;1,result&#x3D;created,seqNo&#x3D;0,      &#x2F;&#x2F; primaryTerm&#x3D;1,shards&#x3D;&#123;&quot;total&quot;:2,&quot;successful&quot;:1,&quot;failed&quot;:0&#125;]   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/1627883231852.png"></p><h3 id="2、文档信息的获取"><a href="#2、文档信息的获取" class="headerlink" title="2、文档信息的获取"></a>2、文档信息的获取</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 测试获得文档信息   @Test   public void testGetDocument() throws IOException &#123;       GetRequest request &#x3D; new GetRequest(&quot;chao_index&quot;,&quot;1&quot;);       GetResponse response &#x3D; Client.get(request, RequestOptions.DEFAULT);       System.out.println(response.getSourceAsString());&#x2F;&#x2F; 打印文档内容       System.out.println(response);&#x2F;&#x2F; 返回的全部内容和命令是一样的       &#x2F;&#x2F;Client.close();   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/1627884570235.png"></p><p><img src="/2021/08/02/elasticsearch/1627884584979.png"></p><h3 id="3、文档的获取，并判断其是否存在"><a href="#3、文档的获取，并判断其是否存在" class="headerlink" title="3、文档的获取，并判断其是否存在"></a>3、文档的获取，并判断其是否存在</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 获取文档，判断是否存在 get &#x2F;chao_index&#x2F;_doc&#x2F;1   @Test   public void testDocumentIsExists() throws IOException &#123;       GetRequest request &#x3D; new GetRequest(&quot;chao_index&quot;, &quot;1&quot;);   &#x2F;&#x2F; 不获取返回的 _source的上下文了       request.fetchSourceContext(new FetchSourceContext(false));       request.storedFields(&quot;_none_&quot;);       boolean exists &#x3D; Client.exists(request, RequestOptions.DEFAULT);       System.out.println(exists);  &#x2F;&#x2F;true   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、文档的更新"><a href="#4、文档的更新" class="headerlink" title="4、文档的更新"></a>4、文档的更新</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 测试更新文档内容  @Test  public void testUpdateDocument() throws IOException &#123;      UpdateRequest request &#x3D; new UpdateRequest(&quot;chao_index&quot;, &quot;1&quot;);      User user &#x3D; new User(&quot;lmk&quot;,11);      request.doc(JSON.toJSONString(user),XContentType.JSON);      UpdateResponse response &#x3D; Client.update(request, RequestOptions.DEFAULT);      System.out.println(response.status()); &#x2F;&#x2F; OK        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/1627885001483.png"></p><h3 id="5、文档的删除"><a href="#5、文档的删除" class="headerlink" title="5、文档的删除"></a>5、文档的删除</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 测试删除文档   @Test   public void testDeleteDocument() throws IOException &#123;       DeleteRequest request &#x3D; new DeleteRequest(&quot;chao_index&quot;, &quot;1&quot;);       request.timeout(&quot;1s&quot;);       DeleteResponse response &#x3D; Client.delete(request, RequestOptions.DEFAULT);       System.out.println(response.status());&#x2F;&#x2F; OK   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/1627885080796.png"></p><h3 id="6、文档的查询"><a href="#6、文档的查询" class="headerlink" title="6、文档的查询"></a>6、文档的查询</h3><p><img src="/2021/08/02/elasticsearch/1627886405141.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">  &#x2F;&#x2F; 查询&#x2F;&#x2F; SearchRequest 搜索请求&#x2F;&#x2F; SearchSourceBuilder 条件构造&#x2F;&#x2F; HighlightBuilder 高亮&#x2F;&#x2F; TermQueryBuilder 精确查询&#x2F;&#x2F; MatchAllQueryBuilder&#x2F;&#x2F; xxxQueryBuilder ...   @Test   public void testSearch() throws IOException &#123;       &#x2F;&#x2F; 1.创建查询请求对象       SearchRequest searchRequest &#x3D; new SearchRequest();       &#x2F;&#x2F; 2.构建搜索条件       SearchSourceBuilder searchSourceBuilder &#x3D; new SearchSourceBuilder();       &#x2F;&#x2F; (1)查询条件 使用QueryBuilders工具类创建       &#x2F;&#x2F; 精确查询       TermQueryBuilder termQueryBuilder &#x3D; QueryBuilders.termQuery(&quot;name&quot;, &quot;chao&quot;);       &#x2F;&#x2F; &#x2F;&#x2F; 匹配查询       &#x2F;&#x2F; MatchAllQueryBuilder matchAllQueryBuilder &#x3D; QueryBuilders.matchAllQuery();       &#x2F;&#x2F; (2)其他&lt;可有可无&gt;：（可以参考 SearchSourceBuilder 的字段部分）       &#x2F;&#x2F; 设置高亮       searchSourceBuilder.highlighter(new HighlightBuilder());       &#x2F;&#x2F; &#x2F;&#x2F; 分页       &#x2F;&#x2F; searchSourceBuilder.from();       &#x2F;&#x2F; searchSourceBuilder.size();       &#x2F;&#x2F;希望在60s查出       searchSourceBuilder.timeout(new TimeValue(60, TimeUnit.SECONDS));       &#x2F;&#x2F; (3)条件投入       searchSourceBuilder.query(termQueryBuilder);       &#x2F;&#x2F; 3.添加条件到请求       searchRequest.source(searchSourceBuilder);       &#x2F;&#x2F; 4.客户端查询请求       SearchResponse search &#x3D; Client.search(searchRequest, RequestOptions.DEFAULT);       &#x2F;&#x2F; 5.查看返回结果       SearchHits hits &#x3D; search.getHits();       System.out.println(JSON.toJSONString(hits));       System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);       for (SearchHit documentFields : hits.getHits()) &#123;           System.out.println(documentFields.getSourceAsMap());       &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前面的操作都无法批量添加数据 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 上面的这些api无法批量增加数据（只会保留最后一个source）@Testpublic void test() throws IOException &#123;    IndexRequest request &#x3D; new IndexRequest(&quot;bulk&quot;);&#x2F;&#x2F; 没有id会自动生成一个随机ID    request.source(JSON.toJSONString(new User(&quot;liu&quot;,1)),XContentType.JSON);    request.source(JSON.toJSONString(new User(&quot;min&quot;,2)),XContentType.JSON);    request.source(JSON.toJSONString(new User(&quot;kai&quot;,3)),XContentType.JSON);    IndexResponse index &#x3D; restHighLevelClient.index(request, RequestOptions.DEFAULT);    System.out.println(index.status());&#x2F;&#x2F; created&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7、批量添加数据"><a href="#7、批量添加数据" class="headerlink" title="7、批量添加数据"></a>7、批量添加数据</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">    &#x2F;&#x2F; 特殊的，真的项目一般会 批量插入数据    @Test    public void testBulk() throws IOException &#123;        BulkRequest bulkRequest &#x3D; new BulkRequest();        bulkRequest.timeout(&quot;10s&quot;);        ArrayList&lt;User&gt; users &#x3D; new ArrayList&lt;&gt;();        users.add(new User(&quot;chao-1&quot;,1));        users.add(new User(&quot;chao-2&quot;,2));        users.add(new User(&quot;chao-3&quot;,3));        users.add(new User(&quot;chao-4&quot;,4));        users.add(new User(&quot;chao-5&quot;,5));        users.add(new User(&quot;chao-6&quot;,6));        &#x2F;&#x2F; 批量请求处理        for (int i &#x3D; 0; i &lt; users.size(); i++) &#123;            bulkRequest.add(                &#x2F;&#x2F; 这里是数据信息                    new IndexRequest(&quot;chao_index&quot;)                            .id(&quot;&quot;+(i + 1)) &#x2F;&#x2F; 没有设置id 会自定生成一个随机id                            .source(JSON.toJSONString(users.get(i)),XContentType.JSON)            );        &#125;        BulkResponse bulk &#x3D; Client.bulk(bulkRequest, RequestOptions.DEFAULT);        System.out.println(bulk.status());&#x2F;&#x2F; ok    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/1627885584566.png"></p><h1 id="七、ElasticSearch实战"><a href="#七、ElasticSearch实战" class="headerlink" title="七、ElasticSearch实战"></a>七、ElasticSearch实战</h1><h2 id="防京东商城搜索（高亮）"><a href="#防京东商城搜索（高亮）" class="headerlink" title="防京东商城搜索（高亮）"></a>防京东商城搜索（高亮）</h2><h3 id="1、工程创建（springboot）"><a href="#1、工程创建（springboot）" class="headerlink" title="1、工程创建（springboot）"></a>1、工程创建（springboot）</h3><p><img src="/2021/08/02/elasticsearch/1627889885764.png"></p><p><strong>目录结构</strong></p><p><img src="/2021/08/02/elasticsearch/f0f96e10f7221f6217052046b81f2baf-1626936023816.png"></p><h3 id="2、基本编码"><a href="#2、基本编码" class="headerlink" title="2、基本编码"></a>2、基本编码</h3><p>①导入依赖</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">&lt;properties&gt;&lt;java.version&gt;1.8&lt;&#x2F;java.version&gt;&lt;elasticsearch.version&gt;7.6.1&lt;&#x2F;elasticsearch.version&gt;&lt;&#x2F;properties&gt;&lt;dependencies&gt;&lt;!-- jsoup解析页面 --&gt;&lt;!-- 解析网页 爬视频可 研究tiko --&gt;&lt;dependency&gt;&lt;groupId&gt;org.jsoup&lt;&#x2F;groupId&gt;&lt;artifactId&gt;jsoup&lt;&#x2F;artifactId&gt;&lt;version&gt;1.10.2&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;&lt;!-- fastjson --&gt;&lt;dependency&gt;&lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;&lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;&lt;version&gt;1.2.70&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;&lt;!-- ElasticSearch --&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;&lt;artifactId&gt;spring-boot-starter-data-elasticsearch&lt;&#x2F;artifactId&gt;&lt;&#x2F;dependency&gt;&lt;!-- thymeleaf --&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;&#x2F;artifactId&gt;&lt;&#x2F;dependency&gt;&lt;!-- web --&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;&lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;&lt;&#x2F;dependency&gt;&lt;!-- devtools热部署 --&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;&lt;artifactId&gt;spring-boot-devtools&lt;&#x2F;artifactId&gt;&lt;scope&gt;runtime&lt;&#x2F;scope&gt;&lt;optional&gt;true&lt;&#x2F;optional&gt;&lt;&#x2F;dependency&gt;&lt;!-- --&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;&lt;artifactId&gt;spring-boot-configuration-processor&lt;&#x2F;artifactId&gt;&lt;optional&gt;true&lt;&#x2F;optional&gt;&lt;&#x2F;dependency&gt;&lt;!-- lombok 需要安装插件 --&gt;&lt;dependency&gt;&lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;&lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;&lt;optional&gt;true&lt;&#x2F;optional&gt;&lt;&#x2F;dependency&gt;&lt;!-- test --&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;&lt;artifactId&gt;spring-boot-starter-test&lt;&#x2F;artifactId&gt;&lt;scope&gt;test&lt;&#x2F;scope&gt;&lt;&#x2F;dependency&gt;&lt;&#x2F;dependencies&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>②导入前端素材</p><p>链接：<a href="https://pan.baidu.com/s/1M5uWdYsCZyzIAOcgcRkA_A">https://pan.baidu.com/s/1M5uWdYsCZyzIAOcgcRkA_A</a><br>提取码：qk8p<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p><p>③编写 <code>application.preperties</code>配置文件</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"># 更改端口，防止冲突server.port&#x3D;9999# 关闭thymeleaf缓存spring.thymeleaf.cache&#x3D;false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>④测试controller和view</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controllerpublic class IndexController &#123;@GetMapping(&#123;&quot;&#x2F;&quot;,&quot;index&quot;&#125;) public String index()&#123; return &quot;index&quot;; &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/c4c75ee5fb0be9a19face4c60b882684-1626936023814.png"></p><h3 id="3、爬虫（jsoup）"><a href="#3、爬虫（jsoup）" class="headerlink" title="3、爬虫（jsoup）"></a>3、爬虫（jsoup）</h3><blockquote><p>数据获取：数据库、消息队列、爬虫、…</p></blockquote><blockquote><p><code>jsoup</code>包！  解析网页</p><p><code>tika</code>包！ 可以爬取视频，音乐</p></blockquote><p>1.导入依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.jsoup<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsoup<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.10.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>①搜索京东搜索页面，并分析页面</p><ol><li><code>http://search.jd.com/search?keyword=java</code></li></ol><p>页面如下</p><p><img src="/2021/08/02/elasticsearch/8ced87dc0e0a856e4a3578d2b0cf7dbe-1626936023816.png"></p><p>审查页面元素</p><p><strong>页面列表id：J_goodsList</strong></p><p><img src="/2021/08/02/elasticsearch/6a78be2143beb4b4bf335a34f64dcc05-1626936023815.png"></p><p><strong>目标元素：img、price、name</strong></p><p><img src="/2021/08/02/elasticsearch/d200bbcbb3f7fcb84e6ad1928cf82e55-1626936023817.png"></p><p>②爬取数据（获取请求返回的页面信息，筛选出可用的）</p><blockquote><p>创建工具类HtmlParseUtil，并简单编写</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class HtmlParseUtil &#123;    public static void main(String[] args) throws IOException &#123;    &#x2F;&#x2F;&#x2F; 使用前需要联网    &#x2F;&#x2F; 请求url:http:&#x2F;&#x2F;search.jd.com&#x2F;search?keyword&#x3D;java        String url &#x3D; &quot;http:&#x2F;&#x2F;search.jd.com&#x2F;search?keyword&#x3D;java&quot;;    &#x2F;&#x2F; 1.解析网页(jsoup 解析返回的对象是浏览器Document对象)        Document document &#x3D; Jsoup.parse(new URL(url), 30000);    &#x2F;&#x2F; 使用document可以使用在js对document的所有操作    &#x2F;&#x2F; 2.获取元素（通过id）        Element j_goodsList &#x3D; document.getElementById(&quot;J_goodsList&quot;);    &#x2F;&#x2F; 3.获取J_goodsList ul 每一个 li        Elements lis &#x3D; j_goodsList.getElementsByTag(&quot;li&quot;);    &#x2F;&#x2F; 4.获取li下的 img、price、name        for (Element li : lis) &#123;            &#x2F;&#x2F; 获取li下 第一张图片的src属性            String img &#x3D; li.getElementsByTag(&quot;img&quot;).eq(0).attr(&quot;src&quot;);                        String name &#x3D; li.getElementsByClass(&quot;p-name&quot;).eq(0).text();            String price &#x3D; li.getElementsByClass(&quot;p-price&quot;).eq(0).text();            System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);            System.out.println(&quot;img : &quot; + img);            System.out.println(&quot;name : &quot; + name);            System.out.println(&quot;price : &quot; + price);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行结果</strong></p><p><img src="/2021/08/02/elasticsearch/6d49b4aedc386ad060d7547c72c82539-1626936023826.png"></p><p><strong>原因是啥？</strong></p><blockquote><p>一般图片特别多的网站，所有的图片都是通过延迟加载的 </p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 打印标签内容Elements lis &#x3D; j_goodsList.getElementsByTag(&quot;li&quot;);System.out.println(lis);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>打印所有li标签，发现img标签中并没有属性src的设置，只是data-lazy-ing设置图片加载的地址</p><p><img src="/2021/08/02/elasticsearch/a44a701b230cc90740c4239fbcc7f7c5-1626936023823.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;改成如下String img &#x3D; li.getElementsByTag(&quot;img&quot;).eq(0).attr(&quot;data-lazy-img&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建HtmlParseUtil、改写</p><ul><li>更改图片获取属性为 <code>data-lazy-img</code></li><li>与实体类结合，实体类如下</li></ul><blockquote><p>实体类</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Data@AllArgsConstructor@NoArgsConstructorpublic class Content implements Serializable &#123;    private static final long serialVersionUID &#x3D; -8049497962627482693L;    private String name;    private String img;    private String price;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>封装为方法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class HtmlParseUtil &#123;    public static void main(String[] args) throws IOException &#123;        &#x2F;&#x2F;System.out.println(parseJD(&quot;java&quot;));        parseJD(&quot;vue&quot;).forEach(System.out::println);    &#125;   public static List&lt;Content&gt; parseJD(String keyword) throws IOException &#123;        &#x2F;&#x2F;&#x2F; 使用前需要联网        &#x2F;&#x2F; 请求url        String url &#x3D; &quot;http:&#x2F;&#x2F;search.jd.com&#x2F;search?keyword&#x3D;&quot; + keyword;        &#x2F;&#x2F; 1.解析网页(jsoup 解析返回的对象是浏览器Document对象)        Document document &#x3D; Jsoup.parse(new URL(url), 30000);        &#x2F;&#x2F; 使用document可以使用在js对document的所有操作        &#x2F;&#x2F; 2.获取元素（通过id）        Element j_goodsList &#x3D; document.getElementById(&quot;J_goodsList&quot;);        &#x2F;&#x2F;j_goodsList 如果这里为空   用下面这个方法        &#x2F;&#x2F;Document document &#x3D; Jsoup.connect(url).userAgent(&quot;Mozilla&#x2F;5.0 (Windows NT 5.1; zh-CN) AppleWebKit&#x2F;535.12 (KHTML, like Gecko) Chrome&#x2F;22.0.1229.79 Safari&#x2F;535.12&quot;).timeout(30000).get();        &#x2F;&#x2F; 3.获取J_goodsList ul 每一个 li        Elements lis &#x3D; j_goodsList.getElementsByTag(&quot;li&quot;);        &#x2F;&#x2F; System.out.println(lis);        &#x2F;&#x2F; 4.获取li下的 img、price、name        &#x2F;&#x2F; list存储所有li下的内容        List&lt;Content&gt; contents &#x3D; new ArrayList&lt;Content&gt;();        for (Element li : lis) &#123;        &#x2F;&#x2F; 由于网站图片使用懒加载，将src属性替换为data-lazy-img            String img &#x3D; li.getElementsByTag(&quot;img&quot;).eq(0).attr(&quot;data-lazy-img&quot;);&#x2F;&#x2F; 获取li下 第一张图片            String name &#x3D; li.getElementsByClass(&quot;p-name&quot;).eq(0).text();            String price &#x3D; li.getElementsByClass(&quot;p-price&quot;).eq(0).text();        &#x2F;&#x2F; 封装为对象            Content content &#x3D; new Content(name,img,price);        &#x2F;&#x2F; 添加到list中            contents.add(content);        &#125;        &#x2F;&#x2F; System.out.println(contents);        &#x2F;&#x2F; 5.返回 list        return contents;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果展示</strong></p><p><img src="/2021/08/02/elasticsearch/1627897778683.png"></p><h3 id="4、基本代码"><a href="#4、基本代码" class="headerlink" title="4、基本代码"></a>4、基本代码</h3><p>⑤编写Config</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class ElasticSearchConfig &#123;     @Bean     public RestHighLevelClient restHighLevelClient()&#123;          RestHighLevelClient client &#x3D; new RestHighLevelClient(             RestClient.builder(                 new HttpHost(&quot;127.0.0.1&quot;,9200,&quot;http&quot;)             )           );           return client;     &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>⑥编写service</p><blockquote><p>因为是爬取的数据，那么就不走Dao，以下编写都不会编写接口，开发中必须严格要求编写</p></blockquote><p><strong>ContentService</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Service public class ContentService &#123;     @Autowired     private RestHighLevelClient restHighLevelClient;     &#x2F;&#x2F; 1、解析数据放入 es 索引中     public Boolean parseContent(String keyword) throws IOException &#123;     &#x2F;&#x2F; 获取内容         List&lt;Content&gt; contents &#x3D; HtmlParseUtil.parseJD(keyword);     &#x2F;&#x2F; 内容放入 es 中         BulkRequest bulkRequest &#x3D; new BulkRequest();         bulkRequest.timeout(&quot;2m&quot;); &#x2F;&#x2F; 可根据实际业务设置         for (int i &#x3D; 0; i &lt; contents.size(); i++) &#123;             bulkRequest.add(                     new IndexRequest(&quot;jd_goods&quot;)                             .source(JSON.toJSONString(contents.get(i)), XContentType.JSON)             );         &#125;         BulkResponse bulk &#x3D; restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT);         &#x2F;&#x2F;restHighLevelClient.close();         return !bulk.hasFailures();     &#125;     &#x2F;&#x2F; 2、根据keyword分页查询结果     public List&lt;Map&lt;String, Object&gt;&gt; search(String keyword, Integer pageIndex, Integer pageSize) throws IOException &#123;         if (pageIndex &lt;&#x3D; 1)&#123;             pageIndex &#x3D; 1;         &#125;         SearchRequest jd_goods &#x3D; new SearchRequest(&quot;jd_goods&quot;);     &#x2F;&#x2F; 创建搜索源建造者对象         SearchSourceBuilder searchSourceBuilder &#x3D; new SearchSourceBuilder();     &#x2F;&#x2F; 条件采用：精确查询 通过keyword查字段name         TermQueryBuilder termQueryBuilder &#x3D; QueryBuilders.termQuery(&quot;name&quot;, keyword);         searchSourceBuilder.query(termQueryBuilder);         searchSourceBuilder.timeout(new TimeValue(60, TimeUnit.SECONDS));&#x2F;&#x2F; 60s     &#x2F;&#x2F; 分页         searchSourceBuilder.from(pageIndex);         searchSourceBuilder.size(pageSize);     &#x2F;&#x2F; 高亮     &#x2F;&#x2F; ....     &#x2F;&#x2F; 搜索源放入搜索请求中         jd_goods.source(searchSourceBuilder);     &#x2F;&#x2F; 执行查询，返回结果         SearchResponse searchResponse &#x3D; restHighLevelClient.search(jd_goods, RequestOptions.DEFAULT);         &#x2F;&#x2F;restHighLevelClient.close();     &#x2F;&#x2F; 解析结果         SearchHits hits &#x3D; searchResponse.getHits();         List&lt;Map&lt;String,Object&gt;&gt; results &#x3D; new ArrayList&lt;&gt;();         for (SearchHit documentFields : hits.getHits()) &#123;             Map&lt;String, Object&gt; sourceAsMap &#x3D; documentFields.getSourceAsMap();             results.add(sourceAsMap);         &#125;     &#x2F;&#x2F; 返回查询的结果         return results;     &#125; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/08/02/elasticsearch/1627899063699.png"></p><p>⑦编写controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controllerpublic class ContentController &#123;    @Autowired    private ContentService contentService;    @ResponseBody    @GetMapping(&quot;&#x2F;parse&#x2F;&#123;keyword&#125;&quot;)    public Boolean parse(@PathVariable(&quot;keyword&quot;) String keyword) throws IOException &#123;        return contentService.parseContent(keyword);    &#125;    @ResponseBody    @GetMapping(&quot;&#x2F;search&#x2F;&#123;keyword&#125;&#x2F;&#123;pageIndex&#125;&#x2F;&#123;pageSize&#125;&quot;)    public List&lt;Map&lt;String, Object&gt;&gt; parse(@PathVariable(&quot;keyword&quot;) String keyword,                                           @PathVariable(&quot;pageIndex&quot;) Integer pageIndex,                                           @PathVariable(&quot;pageSize&quot;) Integer pageSize) throws IOException &#123;        return contentService.search(keyword,pageIndex,pageSize);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>⑧测试结果</p><p>1、解析数据放入 es 索引中</p><p><img src="/2021/08/02/elasticsearch/1627899429322.png"></p><p><img src="/2021/08/02/elasticsearch/1627899409792.png"></p><p>2、根据keyword分页查询结果</p><p><img src="/2021/08/02/elasticsearch/1627903273050.png"></p><h3 id="5、前后端分离（简单使用Vue）"><a href="#5、前后端分离（简单使用Vue）" class="headerlink" title="5、前后端分离（简单使用Vue）"></a>5、前后端分离（简单使用Vue）</h3><blockquote><p>删除Controller 方法上的 <a href="https://github.com/ResponseBody">@ResponseBody</a>注解</p></blockquote><p><img src="/2021/08/02/elasticsearch/2d2171649598fc20bcbfb860f49dc526-1626936023823.png"></p><p>①下载并引入Vue.min.js和axios.js</p><blockquote><p>如果安装了nodejs，可以按如下步骤，没有可以到后面素材处下载</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install vuenpm install axios<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> <img src="/2021/08/02/elasticsearch/10634dde7a3fc5ec924714b77debba01-1626936023828.png"></p><blockquote><p>将下面两个文件加到<code>js</code>中</p></blockquote><p><img src="/2021/08/02/elasticsearch/eae4f70d5c2ee7886e3f79a58934f7e5-1626936023818.png"></p><p><img src="/2021/08/02/elasticsearch/b98c8d6381145a654518c78fc60ee080-1626936023815.png"></p><p>②修改静态页面</p><p>引入js</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/js/vue.min.js&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/js/axios.min.js&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改后的index.html</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>狂神说Java-ES仿京东实战<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/css/style.css&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/js/jquery.min.js&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> mallist tmall- page-not-market <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 头部搜索 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> header-list-app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>headerLayout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>headerCon <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- Logo--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mallLogo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/images/jdlogo.png&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header-extra<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--搜索--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mallSearch<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mall-search<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>searchTop<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mallSearch-form clearfix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">></span></span>天猫搜索<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mallSearch-input clearfix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s-combobox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s-combobox-685<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s-combobox-input-wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>keyword<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>off<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mq<span class="token punctuation">"</span></span><span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>s-combobox-input<span class="token punctuation">"</span></span> <span class="token attr-name">aria-haspopup</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">@click.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>searchKey<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>searchbtn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>搜索<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>relKeyTop<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>狂神说Java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>狂神说前端<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>狂神说Linux<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>狂神说大数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>狂神聊理财<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 商品详情页面 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 品牌分类 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navAttrsForm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>attrs j_NavAttrs<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span>block</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>brandAttr j_nav_brand<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>j_Brand attr<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>attrKey<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>品牌<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>attrValues<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>av-collapse row-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 狂神说 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> Java <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 排序规则 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>filter clearfix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fSort fSort-cur<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>综合<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>f-ico-arrow-d<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fSort<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>人气<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>f-ico-arrow-d<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fSort<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>新品<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>f-ico-arrow-d<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fSort<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>销量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>f-ico-arrow-d<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fSort<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>价格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>f-ico-triangle-mt<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>f-ico-triangle-mb<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 商品详情 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>view grid-nosku<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>product<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result in results<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>product-iWrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--商品封面--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>productImg-wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>productImg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result.img<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--价格--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>productPrice<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result.price<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--标题--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>productTitle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result.name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 店铺名 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>productShop<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>店铺： 狂神说Java <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 成交信息 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>productStatus<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>月成交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>999笔<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>评价 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/js/vue.min.js&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/js/axios.min.js&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">"keyword"</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token comment">// 搜索的关键字</span><span class="token string-property property">"results"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 后端返回的结果</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token function">searchKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> keyword <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>keyword<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'h_search/'</span><span class="token operator">+</span>keyword<span class="token operator">+</span><span class="token string">'/0/20'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>results<span class="token operator">=</span>response<span class="token punctuation">.</span>data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6、搜索高亮"><a href="#6、搜索高亮" class="headerlink" title="6、搜索高亮"></a>6、搜索高亮</h3><blockquote><p>在4的基础上添加内容</p></blockquote><p>①ContentService</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 3、 在2的基础上进行高亮查询    public List&lt;Map&lt;String, Object&gt;&gt; highlightSearch(String keyword, Integer pageIndex, Integer pageSize) throws IOException &#123;        SearchRequest searchRequest &#x3D; new SearchRequest(&quot;jd_goods&quot;);        SearchSourceBuilder searchSourceBuilder &#x3D; new SearchSourceBuilder();&#x2F;&#x2F; 精确查询，添加查询条件        TermQueryBuilder termQueryBuilder &#x3D; QueryBuilders.termQuery(&quot;name&quot;, keyword);        searchSourceBuilder.timeout(new TimeValue(60, TimeUnit.SECONDS));        searchSourceBuilder.query(termQueryBuilder);&#x2F;&#x2F; 分页        searchSourceBuilder.from(pageIndex);        searchSourceBuilder.size(pageSize);&#x2F;&#x2F; 高亮 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;        HighlightBuilder highlightBuilder &#x3D; new HighlightBuilder();        highlightBuilder.field(&quot;name&quot;);        highlightBuilder.preTags(&quot;&lt;span style&#x3D;&#39;color:red&#39;&gt;&quot;);        highlightBuilder.postTags(&quot;&lt;&#x2F;span&gt;&quot;);        searchSourceBuilder.highlighter(highlightBuilder);&#x2F;&#x2F; 执行查询        searchRequest.source(searchSourceBuilder);        SearchResponse searchResponse &#x3D; restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);&#x2F;&#x2F; 解析结果 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;        SearchHits hits &#x3D; searchResponse.getHits();        List&lt;Map&lt;String, Object&gt;&gt; results &#x3D; new ArrayList&lt;&gt;();        for (SearchHit documentFields : hits.getHits()) &#123;&#x2F;&#x2F; 使用新的字段值（高亮），覆盖旧的字段值            Map&lt;String, Object&gt; sourceAsMap &#x3D; documentFields.getSourceAsMap();&#x2F;&#x2F; 高亮字段            Map&lt;String, HighlightField&gt; highlightFields &#x3D; documentFields.getHighlightFields();            HighlightField name &#x3D; highlightFields.get(&quot;name&quot;);&#x2F;&#x2F; 替换            if (name !&#x3D; null)&#123;                Text[] fragments &#x3D; name.fragments();                StringBuilder new_name &#x3D; new StringBuilder();                for (Text text : fragments) &#123;                    new_name.append(text);                &#125;                sourceAsMap.put(&quot;name&quot;,new_name.toString());            &#125;            results.add(sourceAsMap);        &#125;        return results;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>②ContentController</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@ResponseBody@GetMapping(&quot;&#x2F;h_search&#x2F;&#123;keyword&#125;&#x2F;&#123;pageIndex&#125;&#x2F;&#123;pageSize&#125;&quot;)public List&lt;Map&lt;String, Object&gt;&gt; highlightParse(@PathVariable(&quot;keyword&quot;) String keyword,@PathVariable(&quot;pageIndex&quot;) Integer pageIndex,@PathVariable(&quot;pageSize&quot;) Integer pageSize) throws IOException &#123;        return contentService.highlightSearch(keyword,pageIndex,pageSize);        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>③结果展示</p><p><img src="/2021/08/02/elasticsearch/435430115c932f865f5d1eb27084f7f2-1626936023821.png"></p><p>测试</p><p><img src="/2021/08/02/elasticsearch/1627909471621.png"></p><hr><h2 id="over"><a href="#over" class="headerlink" title="over"></a>over</h2>]]></content>
      
      
      <categories>
          
          <category> 搜索 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ</title>
      <link href="/2021/07/20/rabbitmq/"/>
      <url>/2021/07/20/rabbitmq/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><p><img src="/2021/07/20/rabbitmq/20210705145929233.png"></p><h2 id="1-MQ引言"><a href="#1-MQ引言" class="headerlink" title="1 MQ引言"></a>1 MQ引言</h2><h3 id="1-1-什么是MQ"><a href="#1-1-什么是MQ" class="headerlink" title="1.1 什么是MQ"></a>1.1 什么是MQ</h3><pre><code>       `MQ(Message Quene)` :  翻译为`消息队列`,通过典型的生产者和消费者模型,生产者不断向消息队列中生产消息，消费者不断的从队列中获取消息。因为消息的生产和消费都是异步的，而且只关心消息的发送和接收，没有业务逻辑的侵入,轻松的实现系统间解耦。别名为 `消息中间件`通过利用高效可靠的消息传递机制进行平台无关的数据交流，并基于数据通信来进行分布式系统的集成。</code></pre><h3 id="1-2-MQ有哪些"><a href="#1-2-MQ有哪些" class="headerlink" title="1.2 MQ有哪些"></a>1.2 MQ有哪些</h3><p>​        当今市面上有很多主流的消息中间件，如老牌的<code>ActiveMQ</code>、<code>RabbitMQ</code>，炙手可热的<code>Kafka</code>，阿里巴巴自主开发<code>RocketMQ</code>等。</p><h3 id="1-3-不同MQ特点"><a href="#1-3-不同MQ特点" class="headerlink" title="1.3 不同MQ特点"></a>1.3 不同MQ特点</h3><p>==1.ActiveMQ==<br>        ActiveMQ 是Apache出品，最流行的，能力强劲的开源消息总线。它是一个完全支持JMS规范的的消息中间件。丰富的API,多种集群架构模式让ActiveMQ在业界成为老牌的消息中间件,在中小型企业 颇受欢迎!</p><p>==2.Kafka==<br>        Kafka是LinkedIn开源的分布式发布-订阅消息系统，目前归属于Apache顶级项目。Kafka主要特点是基于Pull的模式来处理消息消费，追求高吞吐量，一开始的目的就是用于日志收集和传输。0.8版本开始支持复制，<code>不支持事务，对消息的重复、丢失、错误没有严格要求</code>，适合产生大量数据的互联网服务的数据收集业务。</p><p>==3.RocketMQ==<br>        RocketMQ是阿里开源的消息中间件，它是纯Java开发，具有高吞吐量、高可用性、适合大规模分布式系统应用的特点。RocketMQ思路起源于Kafka，但并不是Kafka的一个Copy，它对消息的可靠传输及事务性做了优化，目前在阿里集团被广泛应用于交   易、充值、流计算、消息推送、日志流式处理、binglog分发等场景。</p><p>==4.RabbitMQ==<br>        RabbitMQ是使用Erlang语言开发的开源消息队列系统，基于<code>AMQP</code>协议来实现。AMQP的主要特征是<code>面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全</code>。AMQP协议更多用在企业系统内对数据一致性、稳定性和可靠性要求很高的场景，对性能和吞吐量的要求还在其次。    </p><blockquote><p>RabbitMQ比Kafka可靠，Kafka更适合IO高吞吐的处理，一般应用在大数据日志处理或对实时性（少量延迟），可靠性（少量丢数据）要求稍低的场景使用，比如ELK日志收集。</p></blockquote><h2 id="2-RabbitMQ-的引言"><a href="#2-RabbitMQ-的引言" class="headerlink" title="2 RabbitMQ 的引言"></a>2 RabbitMQ 的引言</h2><h3 id="2-1-RabbitMQ"><a href="#2-1-RabbitMQ" class="headerlink" title="2.1 RabbitMQ"></a>2.1 RabbitMQ</h3><blockquote><p>基于AMQP协议，erlang语言开发，是部署最广泛的开源消息中间件,是最受欢迎的开源消息中间件之一。</p></blockquote><p><img src="/2021/07/20/rabbitmq/20201030175407725.png"></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"># AMQP 协议: AMQP（advanced message queuing protocol）在2003年时被提出，最早用于解决金融领不同平台之间的消息传递交互问题。顾名思义，AMQP是一种协议，更准确的说是一种binary wire-level protocol（链接协议）。这是其和JMS的本质差别，AMQP不从API层进行限定，而是直接定义网络交换的数据格式。这使得实现了AMQP的provider天然性就是跨平台的。以下是AMQP协议模型:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/07/20/rabbitmq/20201030175435428.png"></p><h3 id="2-2-RabbitMQ-的安装"><a href="#2-2-RabbitMQ-的安装" class="headerlink" title="2.2 RabbitMQ 的安装"></a>2.2 RabbitMQ 的安装</h3><h4 id="2-2-1-下载"><a href="#2-2-1-下载" class="headerlink" title="2.2.1 下载"></a>2.2.1 下载</h4><p><img src="/2021/07/20/rabbitmq/20201030175453979.png"></p><h4 id="2-2-2-下载的安装包"><a href="#2-2-2-下载的安装包" class="headerlink" title="2.2.2 下载的安装包"></a>2.2.2 下载的安装包</h4><p><img src="/2021/07/20/rabbitmq/20201030175542524.png" alt="在这里插入图片描述"></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">注意:这里的安装包是centos7安装的包<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-2-3-安装步骤"><a href="#2-2-3-安装步骤" class="headerlink" title="2.2.3 安装步骤"></a>2.2.3 安装步骤</h4><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"># 1.将rabbitmq安装包上传到linux系统中erlang-22.0.7-1.el7.x86_64.rpm  #l7表示是Centosl7,Centosl8表示Centos8rabbitmq-server-3.7.18-1.el7.noarch.rpm# 2.安装Erlang依赖包rpm -ivh erlang-22.0.7-1.el7.x86_64.rpm# 3.安装RabbitMQ安装包(需要联网)yum install -y rabbitmq-server-3.7.18-1.el7.noarch.rpm注意:默认安装完成后配置文件模板在:&#x2F;usr&#x2F;share&#x2F;doc&#x2F;rabbitmq-server-3.7.18&#x2F;rabbitmq.config.example目录中,需要将配置文件复制到&#x2F;etc&#x2F;rabbitmq&#x2F;目录中,并修改名称为rabbitmq.config# 4.复制配置文件cp &#x2F;usr&#x2F;share&#x2F;doc&#x2F;rabbitmq-server-3.7.18&#x2F;rabbitmq.config.example &#x2F;etc&#x2F;rabbitmq&#x2F;rabbitmq.config# 5.查看配置文件位置ls &#x2F;etc&#x2F;rabbitmq&#x2F;rabbitmq.config# 6.修改配置文件(参见下图:)vim &#x2F;etc&#x2F;rabbitmq&#x2F;rabbitmq.config <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/20/rabbitmq/2020103017560848.png"></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">将上图中配置文件中红色部分去掉&#96;%%&#96;,以及最后的&#96;,&#96;逗号 修改为下图:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/07/20/rabbitmq/20201030175704618.png"></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"># 7.执行如下命令,启动rabbitmq中的插件管理rabbitmq-plugins enable rabbitmq_management出现如下说明:Enabling plugins on node rabbit@localhost:    rabbitmq_management    The following plugins have been configured:      rabbitmq_management      rabbitmq_management_agent      rabbitmq_web_dispatch    Applying plugin configuration to rabbit@localhost...    The following plugins have been enabled:      rabbitmq_management      rabbitmq_management_agent      rabbitmq_web_dispatch    set 3 plugins.    Offline change; changes will take effect at broker restart.# 8.启动RabbitMQ的服务systemctl start rabbitmq-serversystemctl restart rabbitmq-serversystemctl stop rabbitmq-server# 9.查看服务状态(见下图:)systemctl status rabbitmq-server  ● rabbitmq-server.service - RabbitMQ broker     Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;rabbitmq-server.service; disabled; vendor preset: disabled)     Active: active (running) since 三 2019-09-25 22:26:35 CST; 7s ago   Main PID: 2904 (beam.smp)     Status: &quot;Initialized&quot;     CGroup: &#x2F;system.slice&#x2F;rabbitmq-server.service             ├─2904 &#x2F;usr&#x2F;lib64&#x2F;erlang&#x2F;erts-10.4.4&#x2F;bin&#x2F;beam.smp -W w -A 64 -MBas ageffcbf -MHas ageffcbf -             MBlmbcs...             ├─3220 erl_child_setup 32768             ├─3243 inet_gethost 4             └─3244 inet_gethost 4      .........<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/20/rabbitmq/1626520287465.png"></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"># 10.关闭防火墙服务systemctl disable firewalld  # 需要关闭防火墙，否则访问不了    Removed symlink &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;firewalld.service.    Removed symlink &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;dbus-org.fedoraproject.FirewallD1.service.systemctl stop firewalld   # 11.访问web管理界面http:&#x2F;&#x2F;10.15.0.8:15672&#x2F;       端口号15672<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/20/rabbitmq/20201030175753712.png"></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"># 12.登录管理界面username:  guestpassword:  guest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/20/rabbitmq/20201030175814170.png"></p><h2 id="3-RabiitMQ-配置"><a href="#3-RabiitMQ-配置" class="headerlink" title="3 RabiitMQ 配置"></a>3 RabiitMQ 配置</h2><h3 id="3-1-RabbitMQ-管理命令行"><a href="#3-1-RabbitMQ-管理命令行" class="headerlink" title="3.1 RabbitMQ 管理命令行"></a>3.1 RabbitMQ 管理命令行</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"># 1.服务启动相关systemctl start|restart|stop|status rabbitmq-server# 2.管理命令行  用来在不使用web管理界面情况下命令操作RabbitMQrabbitmqctl  help  可以查看更多命令# 3.插件管理命令行rabbitmq-plugins enable|list|disable <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-web管理界面介绍"><a href="#3-2-web管理界面介绍" class="headerlink" title="3.2 web管理界面介绍"></a>3.2 web管理界面介绍</h3><h4 id="3-2-1-overview概览"><a href="#3-2-1-overview概览" class="headerlink" title="3.2.1 overview概览"></a>3.2.1 overview概览</h4><p><img src="/2021/07/20/rabbitmq/20201030175840800.png"></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"># connections：无论生产者还是消费者，都需要与RabbitMQ建立连接后才可以完成消息的生产和消费，在这里可以查看连接情况&#96;# channels：通道，建立连接后，会形成通道，消息的投递获取依赖通道。# Exchanges：交换机，用来实现消息的路由# Queues：队列，即消息队列，消息存放在队列中，等待消费，消费后被移除队列。&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-2-Admin用户和虚拟主机管理"><a href="#3-2-2-Admin用户和虚拟主机管理" class="headerlink" title="3.2.2 Admin用户和虚拟主机管理"></a>3.2.2 Admin用户和虚拟主机管理</h4><h5 id="3-2-2-1-添加用户"><a href="#3-2-2-1-添加用户" class="headerlink" title="3.2.2.1 添加用户"></a>3.2.2.1 添加用户</h5><p><img src="/2021/07/20/rabbitmq/20210705193528571.png"></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"># 上面的Tags选项，其实是指定用户的角色，可选的有以下几个：超级管理员(administrator):    可登陆管理控制台，可查看所有的信息，并且可以对用户，策略(policy)进行操作。# 监控者(monitoring):可登陆管理控制台，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等)# 策略制定者(policymaker):可登陆管理控制台, 同时可以对policy进行管理。但无法查看节点的相关信息(上图红框标识的部分)。# 普通管理者(management):仅可登陆管理控制台，无法看到节点信息，也无法对策略进行管理。# 其他:无法登陆管理控制台，通常就是普通的生产者和消费者。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-2-2-2-创建虚拟主机"><a href="#3-2-2-2-创建虚拟主机" class="headerlink" title="3.2.2.2 创建虚拟主机"></a>3.2.2.2 创建虚拟主机</h5><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"># 虚拟主机为了让各个用户可以互不干扰的工作，RabbitMQ添加了虚拟主机（Virtual Hosts）的概念。其实就是一个独立的访问路径，不同用户使用不同路径，各自有自己的队列、交换机，互相不会影响。相当于关系型中的数据库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/07/20/rabbitmq/202107051936520.png"></p><h5 id="3-2-2-3-绑定虚拟主机和用户"><a href="#3-2-2-3-绑定虚拟主机和用户" class="headerlink" title="3.2.2.3 绑定虚拟主机和用户"></a>3.2.2.3 绑定虚拟主机和用户</h5><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">创建好虚拟主机，我们还要给用户添加访问权限：点击添加好的虚拟主机：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/20/rabbitmq/20210705193758998.png"></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">进入虚拟机设置界面<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/20/rabbitmq/20210705193911356.png"></p><h2 id="4-RabbitMQ-的第一个程序"><a href="#4-RabbitMQ-的第一个程序" class="headerlink" title="4 RabbitMQ 的第一个程序"></a>4 RabbitMQ 的第一个程序</h2><h3 id="4-1-AMQP协议的回顾"><a href="#4-1-AMQP协议的回顾" class="headerlink" title="4.1 AMQP协议的回顾"></a>4.1 AMQP协议的回顾</h3><p><img src="/2021/07/20/rabbitmq/20210705194004304.png"></p><h3 id="4-2-RabbitMQ支持的消息模型"><a href="#4-2-RabbitMQ支持的消息模型" class="headerlink" title="4.2 RabbitMQ支持的消息模型"></a>4.2 RabbitMQ支持的消息模型</h3><p><img src="/2021/07/20/rabbitmq/2020103018025840.png"><br><img src="/2021/07/20/rabbitmq/20201030180315852.png" alt="在这里插入图片描述"></p><h3 id="4-3-引入依赖"><a href="#4-3-引入依赖" class="headerlink" title="4.3 引入依赖"></a>4.3 引入依赖</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.rabbitmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>amqp-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.7.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>创建虚拟主机</p></blockquote><p><img src="/2021/07/20/rabbitmq/1626668886670.png"></p><blockquote><p>创建用户</p></blockquote><p><img src="/2021/07/20/rabbitmq/1626668940575.png"></p><blockquote><p>为用户设置虚拟主机（点击用户的名字）</p></blockquote><p><img src="/2021/07/20/rabbitmq/1626669044332.png"></p><h3 id="4-4-第一种模型-直连"><a href="#4-4-第一种模型-直连" class="headerlink" title="4.4 第一种模型(直连)"></a>4.4 第一种模型(直连)</h3><p><img src="/2021/07/20/rabbitmq/20201030180349461.png"></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"># 在上图的模型中，有以下概念：P：生产者，也就是要发送消息的程序C：消费者：消息的接受者，会一直等待消息到来。queue：消息队列，图中红色部分。类似一个邮箱，可以缓存消息；生产者向其中投递消息，消费者从其中取出消息。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-1-开发生产者"><a href="#4-4-1-开发生产者" class="headerlink" title="4.4.1 开发生产者"></a>4.4.1 开发生产者</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">package helloword;import com.rabbitmq.client.Channel;import com.rabbitmq.client.Connection;import com.rabbitmq.client.MessageProperties;import org.junit.Test;import utils.RabbitMQUtils;import java.io.IOException;import java.util.concurrent.TimeoutException;public class Provider &#123;    &#x2F;&#x2F;生产消息    @Test    public void testSendMessage() throws IOException, TimeoutException &#123;&#x2F;*        &#x2F;&#x2F;创建连接mq的连接工厂对象        ConnectionFactory connectionFactory &#x3D; new ConnectionFactory();        &#x2F;&#x2F;设置连接rabbitmq主机        connectionFactory.setHost(&quot;192.168.11.143&quot;);        &#x2F;&#x2F;设置端口号        connectionFactory.setPort(5672);        &#x2F;&#x2F;设置连接那个虚拟主机        connectionFactory.setVirtualHost(&quot;&#x2F;ems&quot;);        &#x2F;&#x2F;设置访问虚拟主机的用户名和密码        connectionFactory.setUsername(&quot;ems&quot;);        connectionFactory.setPassword(&quot;123&quot;);        &#x2F;&#x2F;获取连接对象        Connection connection &#x3D; connectionFactory.newConnection();*&#x2F;        &#x2F;&#x2F;通过工具类获取连接对象        Connection connection &#x3D; RabbitMQUtils.getConnection();        &#x2F;&#x2F;获取连接中通道        Channel channel &#x3D; connection.createChannel();        &#x2F;&#x2F;通道绑定对应消息队列        &#x2F;&#x2F;参数：String queue, boolean durable, boolean exclusive,        &#x2F;&#x2F;boolean autoDelete,Map&lt;String, Object&gt; arguments        &#x2F;&#x2F;参数1:  队列名称 如果队列不存在自动创建        &#x2F;&#x2F;参数2:  用来定义队列特性是否要持久化 true 持久化队列   false 不持久化        &#x2F;&#x2F;参数3:  exclusive 是否独占队列  true 独占队列   false  不独占        &#x2F;&#x2F;参数4:  autoDelete: 是否在消费完成后自动删除队列  true 自动删除  false 不自动删除        &#x2F;&#x2F;参数5:  额外附加参数        channel.queueDeclare(&quot;hello&quot;,true,false,false,null);        &#x2F;&#x2F;发布消息        &#x2F;&#x2F;参数1: 交换机名称 参数2:队列名称  参数3:传递消息额外设置  参数4:消息的具体内容        channel.basicPublish(&quot;&quot;,&quot;hello&quot;, MessageProperties.PERSISTENT_TEXT_PLAIN,&quot;hello rabbitmq&quot;.getBytes());        &#x2F;*channel.close();        connection.close();*&#x2F;        &#x2F;&#x2F;调用工具类        RabbitMQUtils.closeConnectionAndChanel(channel,connection);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/20/rabbitmq/20210705212514383.png"></p><h4 id="4-4-2-开发消费者"><a href="#4-4-2-开发消费者" class="headerlink" title="4.4.2 开发消费者"></a>4.4.2 开发消费者</h4><blockquote><p>用main方法，test不行</p><p>用main函数会持续监听，一有消息发过来，就自动触发</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">package helloword;import com.rabbitmq.client.*;import org.junit.Test;import java.io.IOException;import java.util.concurrent.TimeoutException;public class Customer &#123;    public static void main(String[] args) throws IOException, TimeoutException &#123;            &#x2F;&#x2F;创建连接mq的连接工厂对象            ConnectionFactory connectionFactory &#x3D; new ConnectionFactory();            &#x2F;&#x2F;设置连接rabbitmq主机            connectionFactory.setHost(&quot;192.168.161.128&quot;);            &#x2F;&#x2F;设置端口号            connectionFactory.setPort(5672);            &#x2F;&#x2F;设置连接那个虚拟主机            connectionFactory.setVirtualHost(&quot;&#x2F;ems&quot;);            &#x2F;&#x2F;设置访问虚拟主机的用户名和密码            connectionFactory.setUsername(&quot;ems&quot;);            connectionFactory.setPassword(&quot;123&quot;);            &#x2F;&#x2F;获取连接对象            Connection connection &#x3D; connectionFactory.newConnection();            &#x2F;&#x2F;获取连接中通道            Channel channel &#x3D; connection.createChannel();            channel.queueDeclare(&quot;hello&quot;,true,false,false,null);            &#x2F;&#x2F;消费消息            &#x2F;&#x2F;参数一：消费那个队列的消息，队列名称            &#x2F;&#x2F;参数二：开始消息的自动确认机制            &#x2F;&#x2F;参数三：消费时的回调接口            channel.basicConsume(&quot;hello&quot;,true,new DefaultConsumer(channel)&#123;                @Override                &#x2F;&#x2F;最后一个参数：消息队列中取出来的消息                public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;                    System.out.println(&quot;new String(body) &#x3D; &quot; + new String(body));                &#125;            &#125;);                &#x2F;&#x2F;消费消息不建议关闭，因为要持续监听&#x2F;&#x2F;            channel.close();&#x2F;&#x2F;            connection.close();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/20/rabbitmq/1626672643716.png"></p><h4 id="4-4-3-参数的说明"><a href="#4-4-3-参数的说明" class="headerlink" title="4.4.3 参数的说明"></a>4.4.3 参数的说明</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">channel.queueDeclare(&quot;hello&quot;,true,false,false,null);&#39;参数1&#39;:用来声明通道对应的队列&#39;参数2&#39;:用来指定是否持久化队列&#39;参数3&#39;:用来指定是否独占队列&#39;参数4&#39;:用来指定是否自动删除队列&#39;参数5&#39;:对队列的额外配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/20/rabbitmq/20210705212734830.png"><br><img src="/2021/07/20/rabbitmq/20210705212756452.png"></p><h4 id="4-4-4-工具类的包装"><a href="#4-4-4-工具类的包装" class="headerlink" title="4.4.4 工具类的包装"></a>4.4.4 工具类的包装</h4><blockquote><p>重复的代码太多了，封装成工具类</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">package utils;import com.rabbitmq.client.Channel;import com.rabbitmq.client.Connection;import com.rabbitmq.client.ConnectionFactory;import java.util.Properties;public class RabbitMQUtils &#123;    private static ConnectionFactory connectionFactory;    private static Properties properties;    static&#123;       &#x2F;&#x2F;重量级资源  类加载执行之执行一次        connectionFactory &#x3D; new ConnectionFactory();        connectionFactory.setHost(&quot;192.168.161.128&quot;);        connectionFactory.setPort(5672);        connectionFactory.setVirtualHost(&quot;&#x2F;ems&quot;);        connectionFactory.setUsername(&quot;ems&quot;);        connectionFactory.setPassword(&quot;123&quot;);    &#125;    &#x2F;&#x2F;定义提供连接对象的方法    public static Connection getConnection() &#123;        try &#123;            return connectionFactory.newConnection();        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125;        return null;    &#125;    &#x2F;&#x2F;关闭通道和关闭连接工具方法    public static void closeConnectionAndChanel(Channel channel, Connection conn) &#123;        try &#123;            if(channel!&#x3D;null) channel.close();            if(conn!&#x3D;null)   conn.close();        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125;    &#125;    public static void main(String[] args) &#123;        &#x2F;&#x2F;System.out.println(&quot;RabbitMQUtils.getConnection() &#x3D; &quot; + RabbitMQUtils.getConnection());    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>改进的生产者</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">package helloword;import com.rabbitmq.client.Channel;import com.rabbitmq.client.Connection;import com.rabbitmq.client.ConnectionFactory;import com.rabbitmq.client.MessageProperties;import org.junit.Test;import utils.RabbitMQUtils;import java.io.IOException;import java.util.concurrent.TimeoutException;public class Provider &#123;    @Test    public void textSendMessage() throws IOException, TimeoutException &#123;        Connection connection &#x3D; RabbitMQUtils.getConnection();        &#x2F;&#x2F;获取连接中通道        Channel channel &#x3D; connection.createChannel();        &#x2F;&#x2F;通道绑定对应消息队列        &#x2F;&#x2F;参数：String queue, boolean durable, boolean exclusive, boolean autoDelete,Map&lt;String, Object&gt; arguments        &#x2F;&#x2F;参数1:  队列名称 如果队列不存在自动创建        &#x2F;&#x2F;参数2:  用来定义队列特性是否要持久化 true 持久化队列   false 不持久化        &#x2F;&#x2F;参数3:  exclusive 是否独占队列  true 独占队列   false  不独占        &#x2F;&#x2F;参数4:  autoDelete: 是否在消费完成后自动删除队列  true 自动删除  false 不自动删除        &#x2F;&#x2F;参数5:  额外附加参数        channel.queueDeclare(&quot;hello&quot;,true,false,false,null);        &#x2F;&#x2F;发布消息        &#x2F;&#x2F;参数1: 交换机名称 参数2:队列名称  参数3:传递消息额外设置  参数4:消息的具体内容        channel.basicPublish(&quot;&quot;,&quot;hello&quot;, MessageProperties.PERSISTENT_TEXT_PLAIN,&quot;hello rabbitmq&quot;.getBytes());        &#x2F;&#x2F;调用工具类        RabbitMQUtils.closeConnectionAndChanel(channel,connection);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>改进的消费者</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">package helloword;import com.rabbitmq.client.*;import org.junit.Test;import utils.RabbitMQUtils;import java.io.IOException;import java.util.concurrent.TimeoutException;public class Customer &#123;    public static void main(String[] args) throws IOException, TimeoutException &#123;        Connection connection &#x3D; RabbitMQUtils.getConnection();            &#x2F;&#x2F;获取连接中通道            Channel channel &#x3D; connection.createChannel();            channel.queueDeclare(&quot;hello&quot;,true,false,false,null);            &#x2F;&#x2F;消费消息            &#x2F;&#x2F;参数一：消费那个队列的消息，队列名称            &#x2F;&#x2F;参数二：开始消息的自动确认机制            &#x2F;&#x2F;参数三：消费时的回调接口            channel.basicConsume(&quot;hello&quot;,true,new DefaultConsumer(channel)&#123;                @Override                &#x2F;&#x2F;最后一个参数：消息队列中取出来的消息                public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;                    System.out.println(&quot;new String(body) &#x3D; &quot; + new String(body));                &#125;            &#125;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>细节</p></blockquote><p><code>发送消息是通过通道进行的，但是通道没有与队列进行绑定，同一个通道可以向不同的队列发送请求</code></p><p>==持久化设置为false，重启rabbitmq，队列会消失，为true的话，则不会消失。==</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">#    队列的消息持久化参数MessageProperties.PERSISTENT_TEXT_PLAIN&#x2F;&#x2F;参数1:  队列名称 如果队列不存在自动创建&#x2F;&#x2F;参数2:  用来定义队列特性是否要持久化 true 持久化队列   false 不持久化&#x2F;&#x2F;参数3:  exclusive 是否独占队列  true 独占队列   false  不独占&#x2F;&#x2F;参数4:  autoDelete: 是否在消费完成后自动删除队列  true 自动删除  false 不自动删除&#x2F;&#x2F;参数5:  额外附加参数channel.queueDeclare(&quot;hello&quot;,true,false,false,null);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-第二种模型-work-quene"><a href="#4-5-第二种模型-work-quene" class="headerlink" title="4.5 第二种模型(work quene)"></a>4.5 第二种模型(work quene)</h3><p>​        <code>Work queues</code>，也被称为（<code>Task queues</code>），任务模型。当消息处理比较耗时的时候，可能生产消息的速度会远远大于消息的消费速度。长此以往，消息就会堆积越来越多，无法及时处理。此时就可以使用work 模型：让多个消费者绑定到一个队列，共同消费队列中的消息。队列中的消息一旦消费，就会消失，因此任务是不会被重复执行的。</p><p><img src="/2021/07/20/rabbitmq/20201030180428828.png"></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"># 角色：P：生产者：任务的发布者C1：消费者-1，领取任务并且完成任务，假设完成速度较慢C2：消费者-2：领取任务并完成任务，假设完成速度快<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-5-1-开发生产者"><a href="#4-5-1-开发生产者" class="headerlink" title="4.5.1 开发生产者"></a>4.5.1 开发生产者</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">channel.queueDeclare(&quot;hello&quot;, true, false, false, null);for (int i &#x3D; 0; i &lt; 10; i++) &#123;  channel.basicPublish(&quot;&quot;, &quot;hello&quot;, null, (i+&quot;&#x3D;&#x3D;&#x3D;&#x3D;&gt;:我是消息&quot;).getBytes());&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-5-2-开发消费者-1"><a href="#4-5-2-开发消费者-1" class="headerlink" title="4.5.2 开发消费者-1"></a>4.5.2 开发消费者-1</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">channel.queueDeclare(&quot;hello&quot;,true,false,false,null);channel.basicConsume(&quot;hello&quot;,true,new DefaultConsumer(channel)&#123;  @Override  public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;    System.out.println(&quot;消费者1: &quot;+new String(body));  &#125;&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-5-3-开发消费者-2"><a href="#4-5-3-开发消费者-2" class="headerlink" title="4.5.3 开发消费者-2"></a>4.5.3 开发消费者-2</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">channel.queueDeclare(&quot;hello&quot;,true,false,false,null);channel.basicConsume(&quot;hello&quot;,true,new DefaultConsumer(channel)&#123;  @Override  public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;    try &#123;      Thread.sleep(1000);   &#x2F;&#x2F;处理消息比较慢 一秒处理一个消息    &#125; catch (InterruptedException e) &#123;      e.printStackTrace();    &#125;    System.out.println(&quot;消费者2: &quot;+new String(body));    &#125;&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-5-4-测试结果"><a href="#4-5-4-测试结果" class="headerlink" title="4.5.4 测试结果"></a>4.5.4 测试结果</h4><p><img src="/2021/07/20/rabbitmq/20201030180452976.png"><br><img src="/2021/07/20/rabbitmq/20201030180521397.png"></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"># 总结:默认情况下，RabbitMQ将按顺序将每个消息发送给下一个使用者。平均而言，每个消费者都会收到相同数量的消息。这种分发消息的方式称为循环。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-5-5-消息自动确认机制"><a href="#4-5-5-消息自动确认机制" class="headerlink" title="4.5.5 消息自动确认机制"></a>4.5.5 消息自动确认机制</h4><p>​        ·<code>Doing a task can take a few seconds. You maywonder what happens if one of the consumers starts a long task and dies with it only partly done.With our current code,once RabbitMQ delivers a message to the consumer it immediatelymarks it for deletion. In this case, if you kill a worker we will lose the message it was justprocessing. We&#39;llalso lose all the messages that  were dispatched to this particular worker but were not yet handled.But we don&#39;t want to lose any tasks. If a worker dies,we&#39;d like the task to be delivered to another worker.</code></p><p>​        完成一项任务可能需要几秒钟。您可能想知道，如果其中一个消费者开始了一项长期任务，但只完成了一部分就死了，会发生什么情况。在我们当前的代码中，一旦RabbitMQ将消息传递给使用者，它就会立即将其标记为删除。在这种情况下，如果您杀死一个worker，我们将丢失它刚刚处理的消息。我们还将丢失发送给该特定工作进程但尚未处理的所有消息。但我们不想失去任何任务。如果一个worker死了，我们希望把任务交给另一个工人。</p><blockquote><p>channel.basicConsume(“hello”,true,new DefaultConsumer(channel) </p><p>第二个参数为自动确认，为了防止消息的丢失，我们把自动确认设置为false</p></blockquote><blockquote><p>我们希望消息每次只进来一个，不希望一次全进来然后慢慢执行</p></blockquote><h5 id="4-5-5-1-开发生产者"><a href="#4-5-5-1-开发生产者" class="headerlink" title="4.5.5.1 开发生产者"></a>4.5.5.1 开发生产者</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">package workquene;import com.rabbitmq.client.Channel;import com.rabbitmq.client.Connection;import utils.RabbitMQUtils;import java.io.IOException;public class Provider &#123;    public static void main(String[] args) throws IOException &#123;        &#x2F;&#x2F;获取连接对象        Connection connection &#x3D; RabbitMQUtils.getConnection();        &#x2F;&#x2F;获取通道对象        Channel channel &#x3D; connection.createChannel();        &#x2F;&#x2F;通过通道声明队列        channel.queueDeclare(&quot;work&quot;, true, false, false, null);        for (int i &#x3D; 1; i &lt;&#x3D;20; i++) &#123;            &#x2F;&#x2F;生产消息            channel.basicPublish(&quot;&quot;, &quot;work&quot;, null, (i + &quot;hello work quene&quot;).getBytes());        &#125;        &#x2F;&#x2F;关闭资源        RabbitMQUtils.closeConnectionAndChanel(channel, connection);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-5-5-2-开发消费者-1"><a href="#4-5-5-2-开发消费者-1" class="headerlink" title="4.5.5.2 开发消费者-1"></a>4.5.5.2 开发消费者-1</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">package workquene;import com.rabbitmq.client.*;import utils.RabbitMQUtils;import java.io.IOException;public class Customer1 &#123;    public static void main(String[] args) throws IOException &#123;        &#x2F;&#x2F;获取连接        Connection connection &#x3D; RabbitMQUtils.getConnection();        final Channel channel &#x3D; connection.createChannel();        channel.basicQos(1);&#x2F;&#x2F;每一次只能消费一个消息        channel.queueDeclare(&quot;work&quot;,true,false,false,null);        &#x2F;&#x2F;参数1:队列名称  参数2:消息自动确认 true  消费者自动向rabbitmq确认消息消费  false 不会自动确认消息        channel.basicConsume(&quot;work&quot;,false,new DefaultConsumer(channel)&#123;            @Override            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;                try&#123;                    Thread.sleep(2000);                &#125;catch (Exception e)&#123;                    e.printStackTrace();                &#125;                System.out.println(&quot;消费者-1: &quot;+new String(body));                &#x2F;&#x2F; 参数1:确认队列中那个具体消息 参数2:是否开启多个消息同时确实                channel.basicAck(envelope.getDeliveryTag(),false);            &#125;        &#125;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-5-5-3-开发消费者-2"><a href="#4-5-5-3-开发消费者-2" class="headerlink" title="4.5.5.3 开发消费者-2"></a>4.5.5.3 开发消费者-2</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">package workquene;import com.rabbitmq.client.*;import utils.RabbitMQUtils;import java.io.IOException;public class Customer2 &#123;    public static void main(String[] args) throws IOException &#123;        &#x2F;&#x2F;获取连接        Connection connection &#x3D; RabbitMQUtils.getConnection();        final Channel channel &#x3D; connection.createChannel();        channel.basicQos(1);        channel.queueDeclare(&quot;work&quot;,true,false,false,null);        channel.basicConsume(&quot;work&quot;,false,new DefaultConsumer(channel)&#123;            @Override            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;                System.out.println(&quot;消费者-2: &quot;+new String(body));         &#x2F;&#x2F;手动确认  参数1:手动确认消息标识  参数2:是否开启多个消息同时确认false 每次确认一个                channel.basicAck(envelope.getDeliveryTag(), false);            &#125;        &#125;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"># 设置通道一次只能消费一个消息channel.basicQos(1);# 关闭消息的自动确认,开启手动确认消息（未被确认的还会放在里面）channel.basicAck(envelope.getDeliveryTag(), false);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/20/rabbitmq/20210705234645168.png"></p><p><img src="/2021/07/20/rabbitmq/20210705234709121.png"></p><h3 id="4-5-第三种模型-fanout"><a href="#4-5-第三种模型-fanout" class="headerlink" title="4.5 第三种模型(fanout)"></a>4.5 第三种模型(fanout)</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">fanout 扇出 也称为广播<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/20/rabbitmq/20201030183457220.png"></p><blockquote><p>在广播模式下，消息发送流程是这样的：</p></blockquote><p>​        <code>可以有多个消费者每个消费者有自己的queue（队列）每个队列都要绑定到Exchange（交换机） 生产者发送的消息，只能发送到交换机，交换机来决定要发给哪个队列，生产者无法决定。交换机把消息发送给绑定过的所有队列队列的消费者都能拿到消息。实现一条消息被多个消费者消费</code></p><h4 id="4-5-1-开发生产者-1"><a href="#4-5-1-开发生产者-1" class="headerlink" title="4.5.1 开发生产者"></a>4.5.1 开发生产者</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">package fanout;import com.rabbitmq.client.Channel;import com.rabbitmq.client.Connection;import utils.RabbitMQUtils;import java.io.IOException;public class Provider &#123;    public static void main(String[] args) throws IOException &#123;        &#x2F;&#x2F;获取连接对象        Connection connection &#x3D; RabbitMQUtils.getConnection();        Channel channel &#x3D; connection.createChannel();        &#x2F;&#x2F;将通道声明指定交换机   &#x2F;&#x2F;参数1: 交换机名称    参数2: 交换机类型  fanout 广播类型        channel.exchangeDeclare(&quot;logs&quot;,&quot;fanout&quot;);        &#x2F;&#x2F;发送消息        channel.basicPublish(&quot;logs&quot;,&quot;&quot;,null,&quot;fanout type message&quot;.getBytes());        &#x2F;&#x2F;释放资源        RabbitMQUtils.closeConnectionAndChanel(channel,connection);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-5-2-开发消费者-1-1"><a href="#4-5-2-开发消费者-1-1" class="headerlink" title="4.5.2 开发消费者-1"></a>4.5.2 开发消费者-1</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">package fanout;import com.rabbitmq.client.*;import utils.RabbitMQUtils;import java.io.IOException;public class Customer1 &#123;    public static void main(String[] args) throws IOException &#123;        &#x2F;&#x2F;获取连接对象        Connection connection &#x3D; RabbitMQUtils.getConnection();        Channel channel &#x3D; connection.createChannel();        &#x2F;&#x2F;通道绑定交换机        channel.exchangeDeclare(&quot;logs&quot;,&quot;fanout&quot;);        &#x2F;&#x2F;临时队列        String queueName &#x3D; channel.queueDeclare().getQueue();        &#x2F;&#x2F;绑定交换机和队列        channel.queueBind(queueName,&quot;logs&quot;,&quot;&quot;);        &#x2F;&#x2F;消费消息        channel.basicConsume(queueName,true,new DefaultConsumer(channel)&#123;            @Override            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;                System.out.println(&quot;消费者1: &quot;+new String(body));            &#125;        &#125;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-5-3-开发消费者-2-1"><a href="#4-5-3-开发消费者-2-1" class="headerlink" title="4.5.3 开发消费者-2"></a>4.5.3 开发消费者-2</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">package fanout;import com.rabbitmq.client.*;import utils.RabbitMQUtils;import java.io.IOException;public class Customer2 &#123;    public static void main(String[] args) throws IOException &#123;        &#x2F;&#x2F;获取连接对象        Connection connection &#x3D; RabbitMQUtils.getConnection();        Channel channel &#x3D; connection.createChannel();        &#x2F;&#x2F;通道绑定交换机        channel.exchangeDeclare(&quot;logs&quot;,&quot;fanout&quot;);        &#x2F;&#x2F;临时队列        String queueName &#x3D; channel.queueDeclare().getQueue();        &#x2F;&#x2F;绑定交换机和队列        channel.queueBind(queueName,&quot;logs&quot;,&quot;&quot;);        &#x2F;&#x2F;消费消息        channel.basicConsume(queueName,true,new DefaultConsumer(channel)&#123;            @Override            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;                System.out.println(&quot;消费者2: &quot;+new String(body));            &#125;        &#125;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-5-4-开发消费者-3"><a href="#4-5-4-开发消费者-3" class="headerlink" title="4.5.4 开发消费者-3"></a>4.5.4 开发消费者-3</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">package fanout;import com.rabbitmq.client.*;import utils.RabbitMQUtils;import java.io.IOException;public class Customer3 &#123;    public static void main(String[] args) throws IOException &#123;        &#x2F;&#x2F;获取连接对象        Connection connection &#x3D; RabbitMQUtils.getConnection();        Channel channel &#x3D; connection.createChannel();        &#x2F;&#x2F;通道绑定交换机        channel.exchangeDeclare(&quot;logs&quot;,&quot;fanout&quot;);        &#x2F;&#x2F;临时队列        String queueName &#x3D; channel.queueDeclare().getQueue();        &#x2F;&#x2F;绑定交换机和队列        channel.queueBind(queueName,&quot;logs&quot;,&quot;&quot;);        &#x2F;&#x2F;消费消息        channel.basicConsume(queueName,true,new DefaultConsumer(channel)&#123;            @Override            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;                System.out.println(&quot;消费者3: &quot;+new String(body));            &#125;        &#125;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-5-5-测试结果"><a href="#4-5-5-测试结果" class="headerlink" title="4.5.5 测试结果"></a>4.5.5 测试结果</h4><blockquote><p>三个同时拿到了消息</p></blockquote><p><img src="/2021/07/20/rabbitmq/20210706003342953.png"><br><img src="/2021/07/20/rabbitmq/20210706003354516.png"><br><img src="/2021/07/20/rabbitmq/20210706003407181.png"></p><h3 id="4-6-第四种模型-Routing"><a href="#4-6-第四种模型-Routing" class="headerlink" title="4.6 第四种模型(Routing)"></a>4.6 第四种模型(Routing)</h3><h4 id="4-6-1-Routing-之订阅模型-Direct-直连"><a href="#4-6-1-Routing-之订阅模型-Direct-直连" class="headerlink" title="4.6.1 Routing 之订阅模型-Direct(直连)"></a>4.6.1 Routing 之订阅模型-Direct(直连)</h4><p>​        <code>在Fanout模式中，一条消息，会被所有订阅的队列都消费。但是，在某些场景下，我们希望不同的消息被不同的队列消费。这时就要用到Direct类型的Exchange。</code></p><p>​        在Direct模型下：队列与交换机的绑定，不能是任意绑定了，而是要指定一个<code>RoutingKey（路由key）</code>消息的发送方在 向 Exchange发送消息时，也必须指定消息的 <code>RoutingKey</code>。</p><p>​        Exchange不再把消息交给每一个绑定的队列，而是根据消息的<code>Routing Key</code>进行判断，只有队列的<code>Routingkey</code>与消息的 <code>Routing key</code>完全一致，才会接收到消息.</p><p><img src="/2021/07/20/rabbitmq/20201030234745232.png"></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"># P：生产者，向Exchange发送消息，发送消息时，会指定一个routing key。# X：Exchange（交换机），接收生产者的消息，然后把消息递交给 与routing key完全匹配的队列# C1：消费者，其所在队列指定了需要routing key 为 error 的消息# C2：消费者，其所在队列指定了需要routing key 为 info、# error、warning 的消息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-6-1-1-开发生产者"><a href="#4-6-1-1-开发生产者" class="headerlink" title="4.6.1.1 开发生产者"></a>4.6.1.1 开发生产者</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">package direct;import com.rabbitmq.client.Channel;import com.rabbitmq.client.Connection;import utils.RabbitMQUtils;import java.io.IOException;public class Provider &#123;    public static void main(String[] args) throws IOException &#123;        &#x2F;&#x2F;获取连接对象        Connection connection &#x3D; RabbitMQUtils.getConnection();        &#x2F;&#x2F;获取连接通道对象        Channel channel &#x3D; connection.createChannel();        String exchangeName &#x3D; &quot;logs_direct&quot;;        &#x2F;&#x2F;通过通道声明交换机  参数1:交换机名称  参数2:direct  路由模式        channel.exchangeDeclare(exchangeName,&quot;direct&quot;);        &#x2F;&#x2F;发送消息        String routingkey &#x3D; &quot;info&quot;;        channel.basicPublish(exchangeName,routingkey,null,(&quot;这是direct模型发布的基于route key: [&quot;+routingkey+&quot;] 发送的消息&quot;).getBytes());        &#x2F;&#x2F;关闭资源        RabbitMQUtils.closeConnectionAndChanel(channel,connection);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-6-1-2-开发消费者-1"><a href="#4-6-1-2-开发消费者-1" class="headerlink" title="4.6.1.2 开发消费者-1"></a>4.6.1.2 开发消费者-1</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">package direct;import com.rabbitmq.client.*;import utils.RabbitMQUtils;import java.io.IOException;public class Customer1 &#123;    public static void main(String[] args) throws IOException &#123;        Connection connection &#x3D; RabbitMQUtils.getConnection();        Channel channel &#x3D; connection.createChannel();        String exchangeName &#x3D; &quot;logs_direct&quot;;        &#x2F;&#x2F;通道声明交换机以及交换的类型        channel.exchangeDeclare(exchangeName,&quot;direct&quot;);        &#x2F;&#x2F;创建一个临时队列        String queue &#x3D; channel.queueDeclare().getQueue();        &#x2F;&#x2F;基于route key绑定队列和交换机        channel.queueBind(queue,exchangeName,&quot;error&quot;);        &#x2F;&#x2F;获取消费的消息        channel.basicConsume(queue,true,new DefaultConsumer(channel)&#123;            @Override            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;                System.out.println(&quot;消费者1: &quot;+ new String(body));            &#125;        &#125;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-6-1-3-开发消费者-2"><a href="#4-6-1-3-开发消费者-2" class="headerlink" title="4.6.1.3 开发消费者-2"></a>4.6.1.3 开发消费者-2</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">package direct;import com.rabbitmq.client.*;import utils.RabbitMQUtils;import java.io.IOException;public class Customer2 &#123;    public static void main(String[] args) throws IOException &#123;        Connection connection &#x3D; RabbitMQUtils.getConnection();        Channel channel &#x3D; connection.createChannel();        String exchangeName &#x3D; &quot;logs_direct&quot;;        &#x2F;&#x2F;声明交换机 以及交换机类型 direct        channel.exchangeDeclare(exchangeName,&quot;direct&quot;);        &#x2F;&#x2F;创建一个临时队列        String queue &#x3D; channel.queueDeclare().getQueue();        &#x2F;&#x2F;临时队列和交换机绑定        channel.queueBind(queue,exchangeName,&quot;info&quot;);        channel.queueBind(queue,exchangeName,&quot;error&quot;);        channel.queueBind(queue,exchangeName,&quot;warning&quot;);        &#x2F;&#x2F;消费消息        channel.basicConsume(queue,true,new DefaultConsumer(channel)&#123;            @Override            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;                System.out.println(&quot;消费者2: &quot;+new String(body));            &#125;        &#125;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-6-1-4-测试生产者发送Route-key为error的消息时"><a href="#4-6-1-4-测试生产者发送Route-key为error的消息时" class="headerlink" title="4.6.1.4 测试生产者发送Route key为error的消息时"></a>4.6.1.4 测试生产者发送Route key为error的消息时</h5><p><img src="/2021/07/20/rabbitmq/20210706085347295.png"><br><img src="/2021/07/20/rabbitmq/20210706085405375.png"></p><h5 id="4-6-1-5-测试生产者发送Route-key为info的消息时"><a href="#4-6-1-5-测试生产者发送Route-key为info的消息时" class="headerlink" title="4.6.1.5 测试生产者发送Route key为info的消息时"></a>4.6.1.5 测试生产者发送Route key为info的消息时</h5><p><img src="/2021/07/20/rabbitmq/20210706085227831.png"></p><p><img src="/2021/07/20/rabbitmq/20210706085253271.png"></p><h4 id="4-6-2-Routing-之订阅模型-Topic"><a href="#4-6-2-Routing-之订阅模型-Topic" class="headerlink" title="4.6.2 Routing 之订阅模型-Topic"></a>4.6.2 Routing 之订阅模型-Topic</h4><blockquote><p>Topic类型的Exchange与Direct相比，都是可以根据RoutingKey把消息路由到不同的队列。只不过Topic类型Exchange可以让队列在绑定Routing key的时候使用通配符！这种模型Routingkey 一般都是由一个或多个单词组成，多个单词之间以”.”分割，<br>例如： item.insert</p></blockquote><p><img src="/2021/07/20/rabbitmq/20201030234821717.png"></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"># 统配符* (star) can substitute for exactly one word.    匹配不多不少恰好1个词# (hash) can substitute for zero or more words.  匹配零个、一个或多个词# 如:audit.#    匹配audit、audit.irs 、或者audit.irs.corporate等    audit.*   只能匹配 audit.irs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-6-2-1-开发生产者"><a href="#4-6-2-1-开发生产者" class="headerlink" title="4.6.2.1 开发生产者"></a>4.6.2.1 开发生产者</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">package topic;import com.rabbitmq.client.Channel;import com.rabbitmq.client.Connection;import utils.RabbitMQUtils;import java.io.IOException;public class Provider &#123;    public static void main(String[] args) throws IOException &#123;        &#x2F;&#x2F;获取连接对象        Connection connection &#x3D; RabbitMQUtils.getConnection();        Channel channel &#x3D; connection.createChannel();        &#x2F;&#x2F;声明交换机以及交换机类型 topic        channel.exchangeDeclare(&quot;topics&quot;,&quot;topic&quot;);        &#x2F;&#x2F;发布消息        String routekey &#x3D; &quot;save.user.delete&quot;;        channel.basicPublish(&quot;topics&quot;,routekey,null,(&quot;这里是topic动态路由模型,routekey: [&quot;+routekey+&quot;]&quot;).getBytes());        &#x2F;&#x2F;关闭资源        RabbitMQUtils.closeConnectionAndChanel(channel,connection);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-6-2-2-开发消费者-1"><a href="#4-6-2-2-开发消费者-1" class="headerlink" title="4.6.2.2 开发消费者-1"></a>4.6.2.2 开发消费者-1</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">Routing Key中使用*通配符方式1package topic;import com.rabbitmq.client.*;import utils.RabbitMQUtils;import java.io.IOException;public class Customer1 &#123;    public static void main(String[] args) throws IOException &#123;        &#x2F;&#x2F;获取连接        Connection connection &#x3D; RabbitMQUtils.getConnection();        Channel channel &#x3D; connection.createChannel();        &#x2F;&#x2F;声明交换机以及交换机类型        channel.exchangeDeclare(&quot;topics&quot;,&quot;topic&quot;);        &#x2F;&#x2F;创建一个临时队列        String queue &#x3D; channel.queueDeclare().getQueue();        &#x2F;&#x2F;绑定队列和交换机  动态统配符形式route key        channel.queueBind(queue,&quot;topics&quot;,&quot;*.user.*&quot;);        &#x2F;&#x2F;消费消息        channel.basicConsume(queue,true,new DefaultConsumer(channel)&#123;            @Override            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;                System.out.println(&quot;消费者1: &quot;+ new String(body));            &#125;        &#125;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-6-2-3-开发消费者-2"><a href="#4-6-2-3-开发消费者-2" class="headerlink" title="4.6.2.3 开发消费者-2"></a>4.6.2.3 开发消费者-2</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">Routing Key中使用#通配符方式1package topic;import com.rabbitmq.client.*;import utils.RabbitMQUtils;import java.io.IOException;public class Customer2 &#123;    public static void main(String[] args) throws IOException &#123;        &#x2F;&#x2F;获取连接        Connection connection &#x3D; RabbitMQUtils.getConnection();        Channel channel &#x3D; connection.createChannel();        &#x2F;&#x2F;声明交换机以及交换机类型        channel.exchangeDeclare(&quot;topics&quot;,&quot;topic&quot;);        &#x2F;&#x2F;创建一个临时队列        String queue &#x3D; channel.queueDeclare().getQueue();        &#x2F;&#x2F;绑定队列和交换机  动态统配符形式route key        channel.queueBind(queue,&quot;topics&quot;,&quot;*.user.#&quot;);        &#x2F;&#x2F;消费消息        channel.basicConsume(queue,true,new DefaultConsumer(channel)&#123;            @Override            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;                System.out.println(&quot;消费者2: &quot;+ new String(body));            &#125;        &#125;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-6-2-4-测试结果"><a href="#4-6-2-4-测试结果" class="headerlink" title="4.6.2.4 测试结果"></a>4.6.2.4 测试结果</h5><p><img src="/2021/07/20/rabbitmq/20210706091718910.png"><br><img src="/2021/07/20/rabbitmq/20210706091736341.png"></p><h2 id="5-SpringBoot中使用RabbitMQ"><a href="#5-SpringBoot中使用RabbitMQ" class="headerlink" title="5 SpringBoot中使用RabbitMQ"></a>5 SpringBoot中使用RabbitMQ</h2><h3 id="5-1-搭建初始环境"><a href="#5-1-搭建初始环境" class="headerlink" title="5.1 搭建初始环境"></a>5.1 搭建初始环境</h3><h4 id="5-1-1-引入依赖"><a href="#5-1-1-引入依赖" class="headerlink" title="5.1.1 引入依赖"></a>5.1.1 引入依赖</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-1-2-配置配置文件"><a href="#5-1-2-配置配置文件" class="headerlink" title="5.1.2 配置配置文件"></a>5.1.2 配置配置文件</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">spring:  application:    name: springboot_rabbitmq  rabbitmq:    host: 10.15.0.9    port: 5672    username: ems    password: 123    virtual-host: &#x2F;ems<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>RabbitTemplate用来简化操作    使用时候直接在项目中注入即可使用</p></blockquote><h3 id="5-2-第一种hello-world模型使用"><a href="#5-2-第一种hello-world模型使用" class="headerlink" title="5.2 第一种hello world模型使用"></a>5.2 第一种hello world模型使用</h3><p><img src="/2021/07/20/rabbitmq/../../../typora%25E6%2596%2587%25E4%25BB%25B6/%25E7%25AC%2594%25E8%25AE%25B0/RabbitMQ/20201030180349461.png"></p><blockquote><p>开发生产者</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.example;import org.junit.jupiter.api.Test;import org.springframework.amqp.rabbit.core.RabbitTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;@SpringBootTestclass DemoApplicationTests &#123;    @Autowired    private RabbitTemplate rabbitTemplate;    @Test    public void testHello() &#123;        rabbitTemplate.convertAndSend(&quot;hello&quot;,&quot;hello world&quot;); &#x2F;&#x2F; 生产端没有指定交换机只有routingKey和Object。&#x2F;&#x2F;消费方产生hello队列，放在默认的交换机(AMQP default)上。&#x2F;&#x2F;而默认的交换机有一个特点，只要你的routerKey的名字与这个&#x2F;&#x2F;交换机的队列有相同的名字，他就会自动路由上。 &#x2F;&#x2F;生产端routingKey 叫hello ，消费端生产hello队列。&#x2F;&#x2F;他们就路由上了    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>开发消费者</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">import org.springframework.amqp.rabbit.annotation.Queue;import org.springframework.amqp.rabbit.annotation.RabbitHandler;import org.springframework.amqp.rabbit.annotation.RabbitListener;import org.springframework.stereotype.Component;@Component&#x2F;&#x2F; 生产端没有指定交换机只有routingKey和Object。&#x2F;&#x2F;消费方产生hello队列，放在默认的交换机(AMQP default)上。&#x2F;&#x2F;而默认的交换机有一个特点，只要你的routerKey的名字与这个&#x2F;&#x2F;交换机的队列有相同的名字，他就会自动路由上。 &#x2F;&#x2F;生产端routingKey 叫hello ，消费端生产hello队列。&#x2F;&#x2F;他们就路由上了@RabbitListener(queuesToDeclare &#x3D; @Queue(value &#x3D; &quot;hello&quot;))public class HelloCustomer &#123;    @RabbitHandler  &#x2F;&#x2F;回调方法    public void receive1(String message)&#123;        System.out.println(&quot;message &#x3D; &quot; + message);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/20/rabbitmq/2021070610294993.png"></p><blockquote><p>想要设置队列的属性（不写就是默认的：持久化，非独占，不自动删除）</p></blockquote><p><img src="/2021/07/20/rabbitmq/1626688395624.png"></p><h3 id="5-3-第二种work模型使用"><a href="#5-3-第二种work模型使用" class="headerlink" title="5.3 第二种work模型使用"></a>5.3 第二种work模型使用</h3><p><img src="/2021/07/20/rabbitmq/../../../typora%25E6%2596%2587%25E4%25BB%25B6/%25E7%25AC%2594%25E8%25AE%25B0/RabbitMQ/20201030180428828.png"></p><blockquote><p>开发生产者</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.example;import org.junit.jupiter.api.Test;import org.springframework.amqp.rabbit.core.RabbitTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;@SpringBootTestclass DemoApplicationTests &#123;    @Autowired    private RabbitTemplate rabbitTemplate;     @Test    public void testWork() &#123;        for (int i &#x3D; 0;i&lt;10;i++)&#123;            rabbitTemplate.convertAndSend(&quot;work&quot;,i+&quot;work&quot;);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>开发消费者</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.example;import org.springframework.amqp.rabbit.annotation.Queue;import org.springframework.amqp.rabbit.annotation.RabbitListener;import org.springframework.stereotype.Component;@Componentpublic class WorkCustomer &#123;&#x2F;&#x2F; 生产端没有指定交换机只有routingKey和Object。&#x2F;&#x2F;消费方产生work队列，放在默认的交换机(AMQP default)上。&#x2F;&#x2F;而默认的交换机有一个特点，只要你的routerKey的名字与这个&#x2F;&#x2F;交换机的队列有相同的名字，他就会自动路由上。 &#x2F;&#x2F;生产端routingKey 叫work ，消费端生产work队列。&#x2F;&#x2F;他们就路由上了                 @RabbitListener(queuesToDeclare &#x3D; @Queue(&quot;work&quot;))    public void receive1(String message)&#123;        System.out.println(&quot;work message1 &#x3D; &quot; + message);    &#125;    @RabbitListener(queuesToDeclare &#x3D; @Queue(&quot;work&quot;))    public void receive2(String message)&#123;        System.out.println(&quot;work message2 &#x3D; &quot; + message);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/20/rabbitmq/1626757904096.png"></p><blockquote><p>说明:默认在Spring AMQP实现中Work这种方式就是公平调度,如果需要实现能者多劳需要外配置</p></blockquote><h3 id="5-4-Fanout-广播模型"><a href="#5-4-Fanout-广播模型" class="headerlink" title="5.4 Fanout 广播模型"></a>5.4 Fanout 广播模型</h3><p><img src="/2021/07/20/rabbitmq/../../../typora%25E6%2596%2587%25E4%25BB%25B6/%25E7%25AC%2594%25E8%25AE%25B0/RabbitMQ/20201030183457220.png"></p><blockquote><p>开发生产者</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.example;import org.junit.jupiter.api.Test;import org.springframework.amqp.rabbit.core.RabbitTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;@SpringBootTestclass DemoApplicationTests &#123;    @Autowired    private RabbitTemplate rabbitTemplate;    @Test    public void testFanOut() &#123;        rabbitTemplate.convertAndSend(&quot;logs&quot;,&quot;&quot;,&quot;这是日志广播&quot;); &#x2F;&#x2F; 参数1为交换机，参数2为路由key，“”表示为任意路由，参数3为消息内容    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>开发消费者</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.example;import org.springframework.amqp.rabbit.annotation.Exchange;import org.springframework.amqp.rabbit.annotation.Queue;import org.springframework.amqp.rabbit.annotation.QueueBinding;import org.springframework.amqp.rabbit.annotation.RabbitListener;import org.springframework.stereotype.Component;@Componentpublic class WorkCustomer &#123;    @RabbitListener(bindings &#x3D; @QueueBinding(            value &#x3D; @Queue, &#x2F;&#x2F; 创建临时队列            exchange &#x3D; @Exchange(name &#x3D; &quot;logs&quot;, type &#x3D; &quot;fanout&quot;)    ))    public void receive1(String message) &#123;        System.out.println(&quot;message1 &#x3D; &quot; + message);    &#125;    @RabbitListener(bindings &#x3D; @QueueBinding(            value &#x3D; @Queue, &#x2F;&#x2F;创建临时队列            exchange &#x3D; @Exchange(name &#x3D; &quot;logs&quot;, type &#x3D; &quot;fanout&quot;)  &#x2F;&#x2F;绑定交换机类型    ))    public void receive2(String message) &#123;        System.out.println(&quot;message2 &#x3D; &quot; + message);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/20/rabbitmq/20210706104830274.png"></p><h3 id="5-5-Route-路由模型"><a href="#5-5-Route-路由模型" class="headerlink" title="5.5 Route 路由模型"></a>5.5 Route 路由模型</h3><blockquote><p>开发生产者</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.example;import org.junit.jupiter.api.Test;import org.springframework.amqp.rabbit.core.RabbitTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;@SpringBootTestclass DemoApplicationTests &#123;    @Autowired    private RabbitTemplate rabbitTemplate;    @Test    void contextLoads() &#123;        rabbitTemplate.convertAndSend(&quot;directs&quot;,&quot;error&quot;,&quot;error 的日志信息&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>开发消费者</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.example;import org.springframework.amqp.rabbit.annotation.Exchange;import org.springframework.amqp.rabbit.annotation.Queue;import org.springframework.amqp.rabbit.annotation.QueueBinding;import org.springframework.amqp.rabbit.annotation.RabbitListener;import org.springframework.stereotype.Component;@Componentpublic class WorkCustomer &#123;    @RabbitListener(bindings &#x3D; &#123;            @QueueBinding(                    value &#x3D; @Queue, &#x2F;&#x2F; 创建临时队列                    key &#x3D; &#123;&quot;info&quot;, &quot;error&quot;&#125;, &#x2F;&#x2F; 路由key                    exchange &#x3D; @Exchange(type &#x3D; &quot;direct&quot;, name &#x3D; &quot;directs&quot;)            )&#125;)    public void receive1(String message) &#123;        System.out.println(&quot;message1 &#x3D; &quot; + message);    &#125;    @RabbitListener(bindings &#x3D; &#123;            @QueueBinding(                    value &#x3D; @Queue,                    key &#x3D; &#123;&quot;error&quot;&#125;,                    exchange &#x3D; @Exchange(type &#x3D; &quot;direct&quot;, name &#x3D; &quot;directs&quot;)            )&#125;)    public void receive2(String message) &#123;        System.out.println(&quot;message2 &#x3D; &quot; + message);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/20/rabbitmq/20210706105459598.png"></p><h3 id="5-6-Topic-订阅模型-动态路由模型"><a href="#5-6-Topic-订阅模型-动态路由模型" class="headerlink" title="5.6 Topic 订阅模型(动态路由模型)"></a>5.6 Topic 订阅模型(动态路由模型)</h3><blockquote><p>开发生产者</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.example;import org.junit.jupiter.api.Test;import org.springframework.amqp.rabbit.core.RabbitTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;@SpringBootTestclass DemoApplicationTests &#123;    @Autowired    private RabbitTemplate rabbitTemplate;    @Test    void contextLoads() &#123;        rabbitTemplate.convertAndSend(&quot;topics&quot;,&quot;user.save.findAll&quot;,&quot;user.save.findAll 的消息&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>开发消费者</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.example;import org.springframework.amqp.rabbit.annotation.Exchange;import org.springframework.amqp.rabbit.annotation.Queue;import org.springframework.amqp.rabbit.annotation.QueueBinding;import org.springframework.amqp.rabbit.annotation.RabbitListener;import org.springframework.stereotype.Component;@Componentpublic class WorkCustomer &#123;    @RabbitListener(bindings &#x3D; &#123;            @QueueBinding(                    value &#x3D; @Queue,                    key &#x3D; &#123;&quot;user.*&quot;&#125;,                    exchange &#x3D; @Exchange(type &#x3D; &quot;topic&quot;,name &#x3D; &quot;topics&quot;)            )    &#125;)    public void receive1(String message)&#123;        System.out.println(&quot;message1 &#x3D; &quot; + message);    &#125;    @RabbitListener(bindings &#x3D; &#123;            @QueueBinding(                    value &#x3D; @Queue,                    key &#x3D; &#123;&quot;user.#&quot;&#125;,                    exchange &#x3D; @Exchange(type &#x3D; &quot;topic&quot;,name &#x3D; &quot;topics&quot;)            )    &#125;)    public void receive2(String message)&#123;        System.out.println(&quot;message2 &#x3D; &quot; + message);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/20/rabbitmq/20210706110027465.png"></p><h2 id="6-MQ的应用场景"><a href="#6-MQ的应用场景" class="headerlink" title="6 MQ的应用场景"></a>6 MQ的应用场景</h2><h3 id="6-1-异步处理"><a href="#6-1-异步处理" class="headerlink" title="6.1 异步处理"></a>6.1 异步处理</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"># 场景说明：用户注册后，需要发注册邮件和注册短信,传统的做法有两种1.串行的方式 2.并行的方式# 串行方式: 将注册信息写入数据库后,发送注册邮件,再发送注册短信,以上三个任务全部完成后才返回给客户端。 这有一个问题是,邮件,短信并不是必须的,它只是一个通知,而这种做法让客户端等待没有必要等待的东西. <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/20/rabbitmq/20201030225628901.png"></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"># 并行方式: 将注册信息写入数据库后,发送邮件的同时,发送短信,以上三个任务完成后,返回给客户端,并行的方式能提高处理的时间。 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/07/20/rabbitmq/20201030225657273.png"></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"># 消息队列:假设三个业务节点分别使用50ms,串行方式使用时间150ms,并行使用时间100ms。虽然并行已经提高的处理时间,但是,前面说过,邮件和短信对我正常的使用网站没有任何影响，客户端没有必要等着其发送完成才显示注册成功,应该是写入数据库后就返回. 消息队列: 引入消息队列后，把发送邮件,短信不是必须的业务逻辑异步处理 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/07/20/rabbitmq/20201030225723665.jpg"></p><blockquote><p>由此可以看出,引入消息队列后，用户的响应时间就等于写入数据库的时间+写入消息队列的时间(可以忽略不计),引入消息队列后处理后,响应时间是串行的3倍,是并行的2倍。</p></blockquote><h3 id="6-2-应用解耦"><a href="#6-2-应用解耦" class="headerlink" title="6.2 应用解耦"></a>6.2 应用解耦</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"># 场景：双11是购物狂节,用户下单后,订单系统需要通知库存系统,传统的做法就是订单系统调用库存系统的接口. <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/07/20/rabbitmq/20201030225742845.png"></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"># 这种做法有一个缺点:当库存系统出现故障时,订单就会失败。 订单系统和库存系统高耦合.  引入消息队列 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/07/20/rabbitmq/20201030225800254.png"></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"># 订单系统:用户下单后,订单系统完成持久化处理,将消息写入消息队列,返回用户订单下单成功。# 库存系统:订阅下单的消息,获取下单消息,进行库操作。就算库存系统出现故障,消息队列也能保证消息的可靠投递,不会导致消息丢失.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-流量削峰"><a href="#6-3-流量削峰" class="headerlink" title="6.3 流量削峰"></a>6.3 流量削峰</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"># 场景: 秒杀活动，一般会因为流量过大，导致应用挂掉,为了解决这个问题，一般在应用前端加入消息队列。  # 作用:1.可以控制活动人数，超过此一定阀值的订单直接丢弃(我为什么秒杀一次都没有成功过呢^^) 2.可以缓解短时间的高流量压垮应用(应用程序按自己的最大处理能力获取订单) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/20/rabbitmq/20201030225837502.png"></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">1.用户的请求,服务器收到之后,首先写入消息队列,加入消息队列长度超过最大值,则直接抛弃用户请求或跳转到错误页面.  2.秒杀业务根据消息队列中的请求信息，再做后续处理.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="7-RabbitMQ的集群"><a href="#7-RabbitMQ的集群" class="headerlink" title="7 RabbitMQ的集群"></a>7 RabbitMQ的集群</h2><h3 id="7-1-集群架构"><a href="#7-1-集群架构" class="headerlink" title="7.1 集群架构"></a>7.1 集群架构</h3><h4 id="7-1-1-普通集群-副本集群"><a href="#7-1-1-普通集群-副本集群" class="headerlink" title="7.1.1 普通集群(副本集群)"></a>7.1.1 普通集群(副本集群)</h4><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"># All data&#x2F;state required for the operation of a RabbitMQ broker is replicated across all nodes. An exception to this are message queues, whichby default reside on one node, though they are visible and reachable from all nodes. To replicate queues across nodes in a cluster   默认情况下:RabbitMQ代理操作所需的所有数据&#x2F;状态都将跨所有节点复制。这方面的一个例外是消息队列，默认情况下，消息队列位于一个节点上，尽管它们可以从所有节点看到和访问<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>架构图</p></blockquote><p><img src="/2021/07/20/rabbitmq/20210706112155571.png"></p><blockquote><p>核心解决问题:  当集群中某一时刻master节点宕机,可以对Quene中信息,进行备份</p></blockquote><blockquote><p>集群搭建</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"># 0.集群规划node1: 10.15.0.3  mq1  master 主节点node2: 10.15.0.4  mq2  repl1  副本节点node3: 10.15.0.5  mq3  repl2  副本节点# 1.克隆三台机器主机名和ip映射vim &#x2F;etc&#x2F;hosts加入: 10.15.0.3 mq1    10.15.0.4 mq2    10.15.0.5 mq3node1: vim &#x2F;etc&#x2F;hostname 加入:  mq1node2: vim &#x2F;etc&#x2F;hostname 加入:  mq2node3: vim &#x2F;etc&#x2F;hostname 加入:  mq3# 2.三个机器安装rabbitmq,并同步cookie文件,在node1上执行:scp &#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;.erlang.cookie root@mq2:&#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;scp &#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;.erlang.cookie root@mq3:&#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;# 3.查看cookie是否一致:node1: cat &#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;.erlang.cookie node2: cat &#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;.erlang.cookie node3: cat &#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;.erlang.cookie # 4.后台启动rabbitmq所有节点执行如下命令,启动成功访问管理界面:rabbitmq-server -detached # 5.在node2和node3执行加入集群命令:1.关闭       rabbitmqctl stop_app2.加入集群    rabbitmqctl join_cluster rabbit@mq13.启动服务    rabbitmqctl start_app# 6.查看集群状态,任意节点执行:rabbitmqctl cluster_status# 7.如果出现如下显示,集群搭建成功:Cluster status of node rabbit@mq3 ...[&#123;nodes,[&#123;disc,[rabbit@mq1,rabbit@mq2,rabbit@mq3]&#125;]&#125;,&#123;running_nodes,[rabbit@mq1,rabbit@mq2,rabbit@mq3]&#125;,&#123;cluster_name,&lt;&lt;&quot;rabbit@mq1&quot;&gt;&gt;&#125;,&#123;partitions,[]&#125;,&#123;alarms,[&#123;rabbit@mq1,[]&#125;,&#123;rabbit@mq2,[]&#125;,&#123;rabbit@mq3,[]&#125;]&#125;]# 8.登录管理界面,展示如下状态:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/20/rabbitmq/20201030225920927.png"></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"># 9.测试集群在node1上,创建队列<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/20/rabbitmq/20210706172934162.png"></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"># 10.查看node2和node3节点:<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/20/rabbitmq/202107061730445.png"></p><p><img src="/2021/07/20/rabbitmq/20210706173130281.png"></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"># 11.关闭node1节点,执行如下命令,查看node2和node3:rabbitmqctl stop_app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/07/20/rabbitmq/20210706180109199.png"></p><p><img src="/2021/07/20/rabbitmq/20210706180146791.png"></p><h4 id="7-1-2-镜像集群"><a href="#7-1-2-镜像集群" class="headerlink" title="7.1.2 镜像集群"></a>7.1.2 镜像集群</h4><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"># This guide covers mirroring (queue contents replication) of classic queues  --摘自官网# By default, contents of a queue within a RabbitMQ cluster are located on a single node (the node on which the queue was declared). This is in contrast to exchanges and bindings, which can always beconsidered to be on all nodes. Queues can optionally be made *mirrored* across multiple nodes.                                                         --摘自官网镜像队列机制就是将队列在三个节点之间设置主从关系，消息会在三个节点之间进行自动同步，且如果其中一个节点不可用，并不会导致消息丢失或服务不可用的情况，提升MQ集群的整体高可用性。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>集群架构图</p></blockquote><p><img src="/2021/07/20/rabbitmq/20201030230122209.png"></p><blockquote><p>配置集群架构</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"># 0.策略说明rabbitmqctl set_policy [-p &lt;vhost&gt;] [--priority &lt;priority&gt;] [--apply-to &lt;apply-to&gt;] &lt;name&gt; &lt;pattern&gt;  &lt;definition&gt;-p Vhost： 可选参数，针对指定vhost下的queue进行设置Name:     policy的名称Pattern: queue的匹配模式(正则表达式)Definition：镜像定义，包括三个部分ha-mode, ha-params, ha-sync-modeha-mode:指明镜像队列的模式，有效值为 all&#x2F;exactly&#x2F;nodesall：表示在集群中所有的节点上进行镜像exactly：表示在指定个数的节点上进行镜像，节点的个数由ha-params指定nodes：表示在指定的节点上进行镜像，节点名称通过ha-params指定ha-params：ha-mode模式需要用到的参数ha-sync-mode：进行队列中消息的同步方式，有效值为automatic和manualpriority：可选参数，policy的优先级             # 1.查看当前策略rabbitmqctl list_policies# 2.添加策略rabbitmqctl set_policy ha-all &#39;^hello&#39; &#39;&#123;&quot;ha-mode&quot;:&quot;all&quot;,&quot;ha-sync-mode&quot;:&quot;automatic&quot;&#125;&#39; 说明:策略正则表达式为 “^” 表示所有匹配所有队列名称  ^hello:匹配hello开头队列，automaticZion自动同步# 3.删除策略rabbitmqctl clear_policy ha-all# 4.测试集群<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/20/rabbitmq/20210706194543248.png"></p><p><img src="/2021/07/20/rabbitmq/20210706194552481.png"></p><p><img src="/2021/07/20/rabbitmq/20210706194602674.png"></p>]]></content>
      
      
      <categories>
          
          <category> 其他笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC</title>
      <link href="/2021/07/15/springmvc/"/>
      <url>/2021/07/15/springmvc/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><h2 id="1-什么是MVC"><a href="#1-什么是MVC" class="headerlink" title="1.什么是MVC"></a>1.什么是MVC</h2><h3 id="1-1、什么是MVC"><a href="#1-1、什么是MVC" class="headerlink" title="1.1、什么是MVC"></a>1.1、什么是MVC</h3><ul><li>MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范。</li><li>是将业务逻辑、数据、显示分离的方法来组织代码。</li><li>MVC主要作用是<strong>降低了视图与业务逻辑间的双向偶合</strong>。</li><li>MVC不是一种设计模式，<strong>MVC是一种架构模式</strong>。当然不同的MVC存在差异。</li></ul><p><strong>Model（模型）：</strong>数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao） 和 服务层（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。</p><p><strong>View（视图）：</strong>负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。</p><p><strong>Controller（控制器）：</strong>接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。也就是说控制器做了个调度员的工作。</p><p><strong>最典型的MVC就是JSP + servlet + javabean的模式。</strong></p><p><img src="/2021/07/15/springmvc/640-1626345595754.png"></p><h3 id="1-2、Model1时代"><a href="#1-2、Model1时代" class="headerlink" title="1.2、Model1时代"></a>1.2、Model1时代</h3><ul><li>在web早期的开发中，通常采用的都是Model1。</li><li>Model1中，主要分为两层，视图层和模型层。</li></ul><p><img src="/2021/07/15/springmvc/640-1626345595832.webp"></p><p>Model1优点：架构简单，比较适合小型项目开发；</p><p>Model1缺点：JSP职责不单一，职责过重，不便于维护；</p><h3 id="1-3、Model2时代"><a href="#1-3、Model2时代" class="headerlink" title="1.3、Model2时代"></a>1.3、Model2时代</h3><p>Model2把一个项目分成三部分，包括<strong>视图、控制、模型。</strong></p><p><img src="/2021/07/15/springmvc/640-1626345595840.webp"></p><ol><li>用户发请求</li><li>Servlet接收请求数据，并调用对应的业务逻辑方法</li><li>业务处理完毕，返回更新后的数据给servlet</li><li>servlet转向到JSP，由JSP来渲染页面</li><li>响应给前端更新后的页面</li></ol><p><strong>职责分析：</strong></p><p><strong>Controller：控制器</strong></p><ol><li>取得表单数据</li><li>调用业务逻辑</li><li>转向指定的页面</li></ol><p><strong>Model：模型</strong></p><ol><li>业务逻辑</li><li>保存数据的状态</li></ol><p><strong>View：视图</strong></p><ol><li>显示页面</li></ol><p>Model2这样不仅提高的代码的复用率与项目的扩展性，且大大降低了项目的维护成本。Model 1模式的实现比较简单，适用于快速开发小规模项目，Model1中JSP页面身兼View和Controller两种角色，将控制逻辑和表现逻辑混杂在一起，从而导致代码的重用性非常低，增加了应用的扩展性和维护的难度。Model2消除了Model1的缺点。</p><h3 id="1-4、回顾Servlet"><a href="#1-4、回顾Servlet" class="headerlink" title="1.4、回顾Servlet"></a>1.4、回顾Servlet</h3><ol><li><p>新建一个Maven工程当做父工程！pom依赖！</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>建立一个Moudle：springmvc-01-servlet ， 添加Web app的支持！</p></li><li><p>导入servlet 和 jsp 的 jar 依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写一个Servlet类，用来处理用户的请求</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.kuang.servlet;&#x2F;&#x2F;实现Servlet接口public class HelloServlet extends HttpServlet &#123;   @Override   protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;       &#x2F;&#x2F;取得参数       String method &#x3D; req.getParameter(&quot;method&quot;);       if (method.equals(&quot;add&quot;))&#123;           req.getSession().setAttribute(&quot;msg&quot;,&quot;执行了add方法&quot;);      &#125;       if (method.equals(&quot;delete&quot;))&#123;           req.getSession().setAttribute(&quot;msg&quot;,&quot;执行了delete方法&quot;);      &#125;       &#x2F;&#x2F;业务逻辑       &#x2F;&#x2F;视图跳转       req.getRequestDispatcher(&quot;&#x2F;WEB-INF&#x2F;jsp&#x2F;hello.jsp&quot;).forward(req,resp);  &#125;   @Override   protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;       doGet(req,resp);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写Hello.jsp，在WEB-INF目录下新建一个jsp的文件夹，新建hello.jsp</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Kuangshen<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>$&#123;msg&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在web.xml中注册Servlet</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>        <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>com.kuang.servlet.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置Tomcat，并启动测试</p></li><li><ul><li>localhost:8080/user?method=add</li><li>localhost:8080/user?method=delete</li></ul></li></ol><p><strong>MVC框架要做哪些事情</strong></p><ol><li>将url映射到java类或java类的方法 .</li><li>封装用户提交的数据 .</li><li>处理请求–调用相关的业务处理–封装响应数据 .</li><li>将响应的数据进行渲染 . jsp / html 等表示层数据 .</li></ol><p><strong>说明：</strong></p><p>​    常见的服务器端MVC框架有：Struts、Spring MVC、ASP.NET MVC、Zend Framework、JSF；常见前端MVC框架：vue、angularjs、react、backbone；由MVC演化出了另外一些模式如：MVP、MVVM 等等….</p><h2 id="2、什么是SpringMVC"><a href="#2、什么是SpringMVC" class="headerlink" title="2、什么是SpringMVC"></a>2、什么是SpringMVC</h2><h3 id="2-1、概述"><a href="#2-1、概述" class="headerlink" title="2.1、概述"></a>2.1、概述</h3><p><img src="/2021/07/15/springmvc/640-1626345595844.png"></p><p>Spring MVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。</p><p>查看官方文档：<a href="https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web">https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web</a></p><p><strong>我们为什么要学习SpringMVC呢?</strong></p><p> Spring MVC的特点：</p><ol><li>轻量级，简单易学</li><li>高效 , 基于请求响应的MVC框架</li><li>与Spring兼容性好，无缝结合</li><li>约定优于配置</li><li>功能强大：RESTful、数据验证、格式化、本地化、主题等</li><li>简洁灵活</li></ol><p>Spring的web框架围绕<strong>DispatcherServlet</strong> [ 调度Servlet ] 设计。</p><p>DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解形式进行开发，十分简洁；</p><p>正因为SpringMVC好 , 简单 , 便捷 , 易学 , 天生和Spring无缝集成(使用SpringIoC和Aop) , 使用约定优于配置 . 能够进行简单的junit测试 . 支持Restful风格 .异常处理 , 本地化 , 国际化 , 数据验证 , 类型转换 , 拦截器 等等……所以我们要学习 .</p><p><strong>最重要的一点还是用的人多 , 使用的公司多 .</strong> </p><h3 id="2-2、中心控制器"><a href="#2-2、中心控制器" class="headerlink" title="2.2、中心控制器"></a>2.2、中心控制器</h3><p>​    Spring的web框架围绕DispatcherServlet设计。DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解的controller声明方式。</p><p>​    Spring MVC框架像许多其他MVC框架一样, <strong>以请求为驱动</strong> , <strong>围绕一个中心Servlet分派请求及提供其他功能</strong>，**DispatcherServlet是一个实际的Servlet (它继承自HttpServlet 基类)**。</p><p><img src="/2021/07/15/springmvc/640-1626345595852.png"></p><p>SpringMVC的原理如下图所示：</p><p>​    当发起请求时被前置的控制器拦截到请求，根据请求参数生成代理请求，找到请求对应的实际控制器，控制器处理请求，创建数据模型，访问数据库，将模型响应给中心控制器，控制器使用模型与视图渲染视图结果，将结果返回给中心控制器，再将结果返回给请求者。</p><p><img src="/2021/07/15/springmvc/640-1626345595851.png"></p><h3 id="2-3、SpringMVC执行原理"><a href="#2-3、SpringMVC执行原理" class="headerlink" title="2.3、SpringMVC执行原理"></a>2.3、SpringMVC执行原理</h3><p><img src="/2021/07/15/springmvc/1626345775689.png"></p><p>图为SpringMVC的一个较完整的流程图，实线表示SpringMVC框架提供的技术，不需要开发者实现，虚线表示需要开发者实现。</p><p><strong>简要分析执行流程</strong></p><ol><li><p>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求。</p><p>我们假设请求的url为 : <a href="http://localhost:8080/SpringMVC/hello">http://localhost:8080/SpringMVC/hello</a></p><p><strong>如上url拆分成三部分：</strong></p><p><a href="http://localhost:8080服务器域名">http://localhost:8080服务器域名</a></p><p>SpringMVC部署在服务器上的web站点</p><p>hello表示控制器</p><p>通过分析，如上url表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器。</p></li><li><p>HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping,HandlerMapping根据请求url查找Handler。</p></li><li><p>HandlerExecution表示具体的Handler,其主要作用是根据url查找控制器，如上url被查找控制器为：hello。</p></li><li><p>HandlerExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等。</p></li><li><p>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。</p></li><li><p>Handler让具体的Controller执行。</p></li><li><p>Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView。</p></li><li><p>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。</p></li><li><p>DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名。</p></li><li><p>视图解析器将解析的逻辑视图名传给DispatcherServlet。</p></li><li><p>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图。</p></li><li><p>最终视图呈现给用户。</p></li></ol><h2 id="3-第一个MVC程序"><a href="#3-第一个MVC程序" class="headerlink" title="3.第一个MVC程序"></a>3.第一个MVC程序</h2><h3 id="配置版"><a href="#配置版" class="headerlink" title="配置版"></a>配置版</h3><p>1、新建一个Moudle ， springmvc-02-hello ， 添加web的支持！</p><p>2、确定导入了SpringMVC 的依赖！</p><p>3、配置web.xml  ， 注册DispatcherServlet</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>        <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--1.注册DispatcherServlet--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:springmvc-servlet.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!--启动级别-1--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--></span>   <span class="token comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、编写SpringMVC 的 配置文件！名称：springmvc-servlet.xml  : [servletname]-servlet.xml</p><p>说明，这里的名称要求是按照官方来的</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、添加 处理映射器</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6、添加 处理器适配器</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7、添加 视图解析器</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--前缀--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token comment">&lt;!--后缀--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8、编写我们要操作业务Controller ，要么实现Controller接口，要么增加注解；需要返回一个ModelAndView，装数据，封视图；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.kuang.controller;import org.springframework.web.servlet.ModelAndView;import org.springframework.web.servlet.mvc.Controller;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;&#x2F;&#x2F;注意：这里我们先导入Controller接口public class HelloController implements Controller &#123;   public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception &#123;       &#x2F;&#x2F;ModelAndView 模型和视图       ModelAndView mv &#x3D; new ModelAndView();       &#x2F;&#x2F;封装对象，放在ModelAndView中。Model       mv.addObject(&quot;msg&quot;,&quot;HelloSpringMVC!&quot;);       &#x2F;&#x2F;封装要跳转的视图，放在ModelAndView中       mv.setViewName(&quot;hello&quot;); &#x2F;&#x2F;: &#x2F;WEB-INF&#x2F;jsp&#x2F;hello.jsp       return mv;  &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9、将自己的类交给SpringIOC容器，注册bean</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--Handler--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/hello<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.controller.HelloController<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>10、写要跳转的jsp页面，显示ModelandView存放的数据，以及我们的正常页面；</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Kuangshen<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>$&#123;msg&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>11、配置Tomcat 启动测试！</p><p><img src="/2021/07/15/springmvc/1626346117920.png"></p><p><strong>可能遇到的问题：访问出现404，排查步骤：</strong></p><ol><li>查看控制台输出，看一下是不是缺少了什么jar包。</li><li>如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！</li><li>重启Tomcat 即可解决！</li></ol><p>小结：看这个估计大部分同学都能理解其中的原理了，但是我们实际开发才不会这么写，不然就疯了，还学这个玩意干嘛！我们来看个注解版实现，这才是SpringMVC的精髓，到底有多么简单，看这个图就知道了。</p><h3 id="注解版"><a href="#注解版" class="headerlink" title="注解版"></a>注解版</h3><p><strong>1、新建一个Moudle，springmvc-03-hello-annotation 。添加web支持！</strong></p><p>2、由于Maven可能存在资源过滤的问题，我们将配置完善</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、在pom.xml文件引入相关的依赖：主要有Spring框架核心库、Spring MVC、servlet , JSTL等。我们在父依赖中已经引入了！</p><p><strong>4、配置web.xml</strong></p><p>注意点：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>        <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--1.注册servlet--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>SpringMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:springmvc-servlet.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!-- 启动顺序，数字越小，启动越早 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--所有请求都会被springmvc拦截 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>SpringMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>/ 和 /* 的区别：</strong>&lt; url-pattern &gt; / &lt;/ url-pattern &gt; 不会匹配到.jsp， 只针对我们编写的请求；即：.jsp 不会进入spring的 DispatcherServlet类 。&lt; url-pattern &gt; /* &lt;/ url-pattern &gt; 会匹配 *.jsp，会出现返回 jsp视图 时再次进入spring的DispatcherServlet 类，导致找不到对应的controller所以报404错。</p><ol><li><ul><li><p>注意web.xml版本问题，要最新版！</p></li><li><p>注册DispatcherServlet</p></li><li><p>关联SpringMVC的配置文件</p></li><li><p>启动级别为1</p></li><li><p>映射路径为 / 【不要用/*，会404】</p></li></ul></li><li><p><strong>5、添加Spring MVC配置文件</strong></p></li><li><p>在resource目录下添加springmvc-servlet.xml配置文件，配置的形式与Spring容器配置基本类似，为了支持基于注解的IOC，设置了自动扫描包的功能，具体配置信息如下：</p></li><li><p>```xml</p><?xml version="1.0" encoding="UTF-8"?><p>&lt;beans xmlns=”<a href="http://www.springframework.org/schema/beans&quot;">http://www.springframework.org/schema/beans&quot;</a></p><pre><code>  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;  xmlns:context=&quot;http://www.springframework.org/schema/context&quot;  xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;  xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd   http://www.springframework.org/schema/context   https://www.springframework.org/schema/context/spring-context.xsd   http://www.springframework.org/schema/mvc   https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt;</code></pre>   <!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --><p>   &lt;context:component-scan base-package=”com.kuang.controller”/&gt;</p>   <!-- 让Spring MVC不处理静态资源 --><p>   &lt;mvc:default-servlet-handler /&gt;</p>   <!--   支持mvc注解驱动       在spring中一般采用@RequestMapping注解来完成映射关系       要想使@RequestMapping注解生效       必须向上下文中注册DefaultAnnotationHandlerMapping       和一个AnnotationMethodHandlerAdapter实例       这两个实例分别在类级别和方法级别处理。       而annotation-driven配置帮助我们自动完成上述两个实例的注入。    --><p>   &lt;mvc:annotation-driven /&gt;</p>   <!-- 视图解析器 --><p>   &lt;bean class=”org.springframework.web.servlet.view.InternalResourceViewResolver”</p><pre><code>     id=&quot;internalResourceViewResolver&quot;&gt;   &lt;!-- 前缀 --&gt;   &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot; /&gt;   &lt;!-- 后缀 --&gt;   &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot; /&gt;</code></pre>   <pre class="line-numbers language-none"><code class="language-none">5. 在视图解析器中我们把所有的视图都存放在&#x2F;WEB-INF&#x2F;目录下，这样可以保证视图安全，因为这个目录下的文件，客户端不能直接访问。6. - 让IOC的注解生效   - 静态资源过滤 ：HTML . JS . CSS . 图片 ， 视频 .....   - MVC的注解驱动   - 配置视图解析器     7. **6、创建Controller**8. 编写一个Java控制类：com.kuang.controller.HelloController , 注意编码规范9. &#96;&#96;&#96;java   package com.kuang.controller;      import org.springframework.stereotype.Controller;   import org.springframework.ui.Model;   import org.springframework.web.bind.annotation.RequestMapping;      @Controller   @RequestMapping(&quot;&#x2F;HelloController&quot;)   public class HelloController &#123;         &#x2F;&#x2F;真实访问地址 : 项目名&#x2F;HelloController&#x2F;hello      @RequestMapping(&quot;&#x2F;hello&quot;)      public String sayHello(Model model)&#123;          &#x2F;&#x2F;向模型中添加属性msg与值，可以在JSP页面中取出并渲染          model.addAttribute(&quot;msg&quot;,&quot;hello,SpringMVC&quot;);          &#x2F;&#x2F;web-inf&#x2F;jsp&#x2F;hello.jsp          return &quot;hello&quot;;     &#125;   &#125;   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><ul><li>@Controller是为了让Spring IOC容器初始化时自动扫描到；</li><li>@RequestMapping是为了映射请求路径，这里因为类与方法上都有映射所以访问时应该是/HelloController/hello；</li><li>方法中声明Model类型的参数是为了把Action中的数据带到视图中；</li><li>方法返回的结果是视图的名称hello，加上配置文件中的前后缀变成WEB-INF/jsp/<strong>hello</strong>.jsp。</li></ul></li><li><p>7、<strong>创建视图层</strong></p></li><li><p>在WEB-INF/ jsp目录中创建hello.jsp ， 视图可以直接取出并展示从Controller带回的信息；</p></li><li><p>可以通过EL表示取出Model中存放的值，或者对象；</p></li><li><p>```xml<br>&lt;%@ page contentType=”text/html;charset=UTF-8” language=”java” %&gt;</p><html><head>   <title>SpringMVC</title></head><body>${msg}</body></html><pre class="line-numbers language-none"><code class="language-none">**8、配置Tomcat运行**配置Tomcat ，  开启服务器 ， 访问 对应的请求路径！![](SpringMVC&#x2F;1626346332903.png)**OK，运行成功！**### 小结实现步骤其实非常的简单：1. 新建一个web项目2. 导入相关jar包3. 编写web.xml , 注册DispatcherServlet4. 编写springmvc配置文件5. 接下来就是去创建对应的控制类 , controller6. 最后完善前端视图和controller之间的对应7. 测试运行调试.使用springMVC必须配置的三大件：**处理器映射器、处理器适配器、视图解析器**通常，我们只需要**手动配置视图解析器**，而**处理器映射器**和**处理器适配器**只需要开启**注解驱动**即可，而省去了大段的xml配置## 4.RestFul和控制器### 控制器Controller- 控制器复杂提供访问应用程序的行为，通常通过接口定义或注解定义两种方法实现。- 控制器负责解析用户的请求并将其转换为一个模型。- 在Spring MVC中一个控制器类可以包含多个方法- 在Spring MVC中，对于Controller的配置方式有很多种  ### 实现Controller接口Controller是一个接口，在org.springframework.web.servlet.mvc包下，接口中只有一个方法；&#96;&#96;&#96;java&#x2F;&#x2F;实现该接口的类获得控制器功能public interface Controller &#123;   &#x2F;&#x2F;处理请求且返回一个模型与视图对象   ModelAndView handleRequest(HttpServletRequest var1, HttpServletResponse var2) throws Exception;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p><strong>测试</strong></p><ol><li><p>新建一个Moudle，springmvc-04-controller 。将刚才的03 拷贝一份, 我们进行操作！</p></li><li><ul><li>删掉HelloController</li><li>mvc的配置文件只留下 视图解析器！</li></ul></li><li><p>编写一个Controller类，ControllerTest1</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;定义控制器&#x2F;&#x2F;注意点：不要导错包，实现Controller接口，重写方法；public class ControllerTest1 implements Controller &#123;   public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception &#123;       &#x2F;&#x2F;返回一个模型视图对象       ModelAndView mv &#x3D; new ModelAndView();       mv.addObject(&quot;msg&quot;,&quot;Test1Controller&quot;);       mv.setViewName(&quot;test&quot;);       return mv;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写完毕后，去Spring配置文件中注册请求的bean；name对应请求路径，class对应处理请求的类</p><pre class="line-numbers language-none"><code class="language-none">&lt;bean name&#x3D;&quot;&#x2F;t1&quot; class&#x3D;&quot;com.kuang.controller.ControllerTest1&quot;&#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>编写前端test.jsp，注意在WEB-INF/jsp目录下编写，对应我们的视图解析器</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Kuangshen<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>$&#123;msg&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置Tomcat运行测试，我这里没有项目发布名配置的就是一个 / ，所以请求不用加项目名，OK！</p><p><img src="/2021/07/15/springmvc/640-1626346567923.png"></p></li></ol><p><strong>说明：</strong></p><ul><li><p>实现接口Controller定义控制器是较老的办法</p></li><li><p>缺点是：一个控制器中只有一个方法，如果要多个方法则需要定义多个Controller；定义的方式比较麻烦；</p></li></ul><h3 id="使用注解-Controller"><a href="#使用注解-Controller" class="headerlink" title="使用注解@Controller"></a>使用注解@Controller</h3><ul><li><p>@Controller注解类型用于声明Spring类的实例是一个控制器（在讲IOC时还提到了另外3个注解）；</p></li><li><p>Spring可以使用扫描机制来找到应用程序中所有基于注解的控制器类，为了保证Spring能找到你的控制器，需要在配置文件中声明组件扫描。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;&lt;context:component-scan base-package&#x3D;&quot;com.kuang.controller&quot;&#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>增加一个ControllerTest2类，使用注解实现；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;@Controller注解的类会自动添加到Spring上下文中@Controllerpublic class ControllerTest2&#123;   &#x2F;&#x2F;映射访问路径   @RequestMapping(&quot;&#x2F;t2&quot;)   public String index(Model model)&#123;       &#x2F;&#x2F;Spring MVC会自动实例化一个Model对象用于向视图中传值       model.addAttribute(&quot;msg&quot;, &quot;ControllerTest2&quot;);       &#x2F;&#x2F;返回视图位置       return &quot;test&quot;;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>运行tomcat测试</p><p><img src="/2021/07/15/springmvc/1626346763320.png"></p></li></ul><p><strong>可以发现，我们的两个请求都可以指向一个视图，但是页面结果的结果是不一样的，从这里可以看出视图是被复用的，而控制器与视图之间是弱偶合关系。</strong></p><p><strong>注解方式是平时使用的最多的方式！</strong></p><h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="RequestMapping"></a>RequestMapping</h3><p><strong>@RequestMapping</strong></p><ul><li><p>@RequestMapping注解用于映射url到控制器类或一个特定的处理程序方法。可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</p></li><li><p>为了测试结论更加准确，我们可以加上一个项目名测试 myweb</p></li><li><p>只注解在方法上面</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controllerpublic class TestController &#123;   @RequestMapping(&quot;&#x2F;h1&quot;)   public String test()&#123;       return &quot;test&quot;;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问路径：<a href="http://localhost:8080/">http://localhost:8080</a> / 项目名 / h1</p></li><li><p>同时注解类与方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controller@RequestMapping(&quot;&#x2F;admin&quot;)public class TestController &#123;   @RequestMapping(&quot;&#x2F;h1&quot;)   public String test()&#123;       return &quot;test&quot;;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问路径：<a href="http://localhost:8080/">http://localhost:8080</a> / 项目名/ admin /h1  , 需要先指定类的路径再指定方法的路径；</p></li></ul><h3 id="RestFul-风格"><a href="#RestFul-风格" class="headerlink" title="RestFul 风格"></a>RestFul 风格</h3><p><strong>概念</strong></p><p>Restful就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p><p><strong>功能</strong></p><p>资源：互联网所有的事物都可以被抽象为资源</p><p>资源操作：使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。</p><p>分别对应 添加、 删除、修改、查询。</p><p><strong>传统方式操作资源</strong>  ：通过不同的参数来实现不同的效果！方法单一，post 和 get</p><p>​    <a href="http://127.0.0.1/item/queryItem.action?id=1">http://127.0.0.1/item/queryItem.action?id=1</a> 查询,GET</p><p>​    <a href="http://127.0.0.1/item/saveItem.action">http://127.0.0.1/item/saveItem.action</a> 新增,POST</p><p>​    <a href="http://127.0.0.1/item/updateItem.action">http://127.0.0.1/item/updateItem.action</a> 更新,POST</p><p>​    <a href="http://127.0.0.1/item/deleteItem.action?id=1">http://127.0.0.1/item/deleteItem.action?id=1</a> 删除,GET或POST</p><p><strong>使用RESTful操作资源</strong> ：可以通过不同的请求方式来实现不同的效果！如下：请求地址一样，但是功能可以不同！</p><p>​    <a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> 查询,GET</p><p>​    <a href="http://127.0.0.1/item">http://127.0.0.1/item</a> 新增,POST</p><p>​    <a href="http://127.0.0.1/item">http://127.0.0.1/item</a> 更新,PUT</p><p>​    <a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> 删除,DELETE</p><p><strong>学习测试</strong></p><ol><li><p>在新建一个类 RestFulController</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controllerpublic class RestFulController &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在Spring MVC中可以使用  @PathVariable 注解，让方法参数的值对应绑定到一个URI模板变量上。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controllerpublic class RestFulController &#123;   &#x2F;&#x2F;映射访问路径   @RequestMapping(&quot;&#x2F;commit&#x2F;&#123;p1&#125;&#x2F;&#123;p2&#125;&quot;)   public String index(@PathVariable int p1, @PathVariable int p2, Model model)&#123;              int result &#x3D; p1+p2;       &#x2F;&#x2F;Spring MVC会自动实例化一个Model对象用于向视图中传值       model.addAttribute(&quot;msg&quot;, &quot;结果：&quot;+result);       &#x2F;&#x2F;返回视图位置       return &quot;test&quot;;         &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>我们来测试请求查看下</p><p><img src="/2021/07/15/springmvc/1626346847242.png"></p></li><li><p>思考：使用路径变量的好处？</p></li><li><ul><li><p>使路径变得更加简洁；</p></li><li><p>获得参数更加方便，框架会自动进行类型转换。</p></li><li><p>通过路径变量的类型可以约束访问参数，如果类型不一样，则访问不到对应的请求方法，如这里访问是的路径是/commit/1/a，则路径与方法不匹配，而不会是参数转换失败。</p><p><img src="/2021/07/15/springmvc/1626346859024.png"></p></li></ul></li><li><p>我们来修改下对应的参数类型，再次测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;映射访问路径@RequestMapping(&quot;&#x2F;commit&#x2F;&#123;p1&#125;&#x2F;&#123;p2&#125;&quot;)public String index(@PathVariable int p1, @PathVariable String p2, Model model)&#123;   String result &#x3D; p1+p2;   &#x2F;&#x2F;Spring MVC会自动实例化一个Model对象用于向视图中传值   model.addAttribute(&quot;msg&quot;, &quot;结果：&quot;+result);   &#x2F;&#x2F;返回视图位置   return &quot;test&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/15/springmvc/1626346892392.png"></p></li></ol><p><strong>使用method属性指定请求类型</strong></p><p>用于约束请求的类型，可以收窄请求范围。指定请求谓词的类型如GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE等</p><p>我们来测试一下：</p><ul><li><p>增加一个方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;映射访问路径,必须是POST请求@RequestMapping(value &#x3D; &quot;&#x2F;hello&quot;,method &#x3D; &#123;RequestMethod.POST&#125;)public String index2(Model model)&#123;   model.addAttribute(&quot;msg&quot;, &quot;hello!&quot;);   return &quot;test&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>我们使用浏览器地址栏进行访问默认是Get请求，会报错405：</p><p><img src="/2021/07/15/springmvc/1626346917753.png"></p></li><li><p>如果将POST修改为GET则正常了；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;映射访问路径,必须是Get请求@RequestMapping(value &#x3D; &quot;&#x2F;hello&quot;,method &#x3D; &#123;RequestMethod.GET&#125;)public String index2(Model model)&#123;   model.addAttribute(&quot;msg&quot;, &quot;hello!&quot;);   return &quot;test&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/15/springmvc/1626346944610.png"></p></li></ul><p><strong>小结：</strong></p><p>Spring MVC 的 @RequestMapping 注解能够处理 HTTP 请求的方法, 比如 GET, PUT, POST, DELETE 以及 PATCH。</p><p><strong>所有的地址栏请求默认都会是 HTTP GET 类型的。</strong></p><p>方法级别的注解变体有如下几个：组合注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@GetMapping@PostMapping@PutMapping@DeleteMapping@PatchMapping<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>@GetMapping 是一个组合注解，平时使用的会比较多！</p><p>它所扮演的是 @RequestMapping(method =RequestMethod.GET) 的一个快捷方式。</p><h2 id="5-数据处理及跳转"><a href="#5-数据处理及跳转" class="headerlink" title="5.数据处理及跳转"></a>5.数据处理及跳转</h2><h3 id="1-结果跳转方式"><a href="#1-结果跳转方式" class="headerlink" title="1.结果跳转方式"></a>1.结果跳转方式</h3><h4 id="ModelAndView"><a href="#ModelAndView" class="headerlink" title="ModelAndView"></a>ModelAndView</h4><p>设置ModelAndView对象 , 根据view的名称 , 和视图解析器跳到指定的页面 .</p><p>页面 : {视图解析器前缀} + viewName +{视图解析器后缀}</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 视图解析器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span>     <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- 前缀 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token comment">&lt;!-- 后缀 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的controller类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class ControllerTest1 implements Controller &#123;   public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception &#123;       &#x2F;&#x2F;返回一个模型视图对象       ModelAndView mv &#x3D; new ModelAndView();       mv.addObject(&quot;msg&quot;,&quot;ControllerTest1&quot;);       mv.setViewName(&quot;test&quot;);       return mv;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ServletAPI"><a href="#ServletAPI" class="headerlink" title="ServletAPI"></a>ServletAPI</h4><p>通过设置ServletAPI , 不需要视图解析器 .</p><p>1、通过HttpServletResponse进行输出</p><p>2、通过HttpServletResponse实现重定向</p><p>3、通过HttpServletResponse实现转发</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controllerpublic class ResultGo &#123;   @RequestMapping(&quot;&#x2F;result&#x2F;t1&quot;)   public void test1(HttpServletRequest req, HttpServletResponse rsp) throws IOException &#123;       rsp.getWriter().println(&quot;Hello,Spring BY servlet API&quot;);  &#125;   @RequestMapping(&quot;&#x2F;result&#x2F;t2&quot;)   public void test2(HttpServletRequest req, HttpServletResponse rsp) throws IOException &#123;       rsp.sendRedirect(&quot;&#x2F;index.jsp&quot;);  &#125;   @RequestMapping(&quot;&#x2F;result&#x2F;t3&quot;)   public void test3(HttpServletRequest req, HttpServletResponse rsp) throws Exception &#123;       &#x2F;&#x2F;转发       req.setAttribute(&quot;msg&quot;,&quot;&#x2F;result&#x2F;t3&quot;);       req.getRequestDispatcher(&quot;&#x2F;WEB-INF&#x2F;jsp&#x2F;test.jsp&quot;).forward(req,rsp);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SpringMVC-1"><a href="#SpringMVC-1" class="headerlink" title="SpringMVC"></a>SpringMVC</h4><p><strong>通过SpringMVC来实现转发和重定向 - 无需视图解析器；</strong></p><p>测试前，需要将视图解析器注释掉</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controllerpublic class ResultSpringMVC &#123;   @RequestMapping(&quot;&#x2F;rsm&#x2F;t1&quot;)   public String test1()&#123;       &#x2F;&#x2F;转发       return &quot;&#x2F;index.jsp&quot;;  &#125;   @RequestMapping(&quot;&#x2F;rsm&#x2F;t2&quot;)   public String test2()&#123;       &#x2F;&#x2F;转发二       return &quot;forward:&#x2F;index.jsp&quot;;  &#125;   @RequestMapping(&quot;&#x2F;rsm&#x2F;t3&quot;)   public String test3()&#123;       &#x2F;&#x2F;重定向       return &quot;redirect:&#x2F;index.jsp&quot;;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>通过SpringMVC来实现转发和重定向 - 有视图解析器；</strong></p><p>重定向 , 不需要视图解析器 , 本质就是重新请求一个新地方嘛 , 所以注意路径问题.</p><p>可以重定向到另外一个请求实现 .</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controllerpublic class ResultSpringMVC2 &#123;   @RequestMapping(&quot;&#x2F;rsm2&#x2F;t1&quot;)   public String test1()&#123;       &#x2F;&#x2F;转发       return &quot;test&quot;;  &#125;   @RequestMapping(&quot;&#x2F;rsm2&#x2F;t2&quot;)   public String test2()&#123;       &#x2F;&#x2F;重定向       return &quot;redirect:&#x2F;index.jsp&quot;;       &#x2F;&#x2F;return &quot;redirect:hello.do&quot;; &#x2F;&#x2F;hello.do为另一个请求&#x2F;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-数据处理"><a href="#6-数据处理" class="headerlink" title="6.数据处理"></a>6.数据处理</h2><h3 id="6-1处理提交数据"><a href="#6-1处理提交数据" class="headerlink" title="6.1处理提交数据"></a>6.1处理提交数据</h3><p><strong>1、提交的域名称和处理方法的参数名一致</strong></p><p>提交数据 : <a href="http://localhost:8080/hello?name=kuangshen">http://localhost:8080/hello?name=kuangshen</a></p><p>处理方法 :</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(&quot;&#x2F;hello&quot;)public String hello(String name)&#123;   System.out.println(name);   return &quot;hello&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后台输出 : kuangshen</p><p><strong>2、提交的域名称和处理方法的参数名不一致</strong></p><p>提交数据 : <a href="http://localhost:8080/hello?username=kuangshen">http://localhost:8080/hello?username=kuangshen</a></p><p>处理方法 :</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;@RequestParam(&quot;username&quot;) : username提交的域的名称 .@RequestMapping(&quot;&#x2F;hello&quot;)public String hello(@RequestParam(&quot;username&quot;) String name)&#123;   System.out.println(name);   return &quot;hello&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后台输出 : kuangshen</p><p><strong>3、提交的是一个对象</strong></p><p>要求提交的表单域和对象的属性名一致  , 参数使用对象即可</p><p>1、实体类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class User &#123;   private int id;   private String name;   private int age;   &#x2F;&#x2F;构造   &#x2F;&#x2F;get&#x2F;set   &#x2F;&#x2F;tostring()&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、提交数据 : <a href="http://localhost:8080/mvc04/user?name=kuangshen&amp;id=1&amp;age=15">http://localhost:8080/mvc04/user?name=kuangshen&amp;id=1&amp;age=15</a></p><p>3、处理方法 :</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(&quot;&#x2F;user&quot;)public String user(User user)&#123;   System.out.println(user);   return &quot;hello&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后台输出 : User { id=1, name=’kuangshen’, age=15 }</p><p>说明：如果使用对象的话，前端传递的参数名和对象名必须一致，否则就是null。</p><h3 id="6-2数据显示到前端"><a href="#6-2数据显示到前端" class="headerlink" title="6.2数据显示到前端"></a>6.2数据显示到前端</h3><p><strong>第一种 : 通过ModelAndView</strong></p><p>我们前面一直都是如此 . 就不过多解释</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class ControllerTest1 implements Controller &#123;   public ModelAndView handleRequest(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws Exception &#123;       &#x2F;&#x2F;返回一个模型视图对象       ModelAndView mv &#x3D; new ModelAndView();       mv.addObject(&quot;msg&quot;,&quot;ControllerTest1&quot;);       mv.setViewName(&quot;test&quot;);       return mv;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第二种 : 通过ModelMap</strong></p><p>ModelMap</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(&quot;&#x2F;hello&quot;)public String hello(@RequestParam(&quot;username&quot;) String name, ModelMap model)&#123;   &#x2F;&#x2F;封装要显示到视图中的数据   &#x2F;&#x2F;相当于req.setAttribute(&quot;name&quot;,name);   model.addAttribute(&quot;name&quot;,name);   System.out.println(name);   return &quot;hello&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第三种 : 通过Model</strong></p><p>Model</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(&quot;&#x2F;ct2&#x2F;hello&quot;)public String hello(@RequestParam(&quot;username&quot;) String name, Model model)&#123;   &#x2F;&#x2F;封装要显示到视图中的数据   &#x2F;&#x2F;相当于req.setAttribute(&quot;name&quot;,name);   model.addAttribute(&quot;msg&quot;,name);   System.out.println(name);   return &quot;test&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2对比"><a href="#6-2对比" class="headerlink" title="6.2对比"></a>6.2对比</h3><p>就对于新手而言简单来说使用区别就是：</p><pre class="line-numbers language-none"><code class="language-none">Model 只有寥寥几个方法只适合用于储存数据，简化了新手对于Model对象的操作和理解；ModelMap 继承了 LinkedMap ，除了实现了自身的一些方法，同样的继承 LinkedMap 的方法和特性；ModelAndView 可以在储存数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然更多的以后开发考虑的更多的是性能和优化，就不能单单仅限于此的了解。</p><p><strong>请使用80%的时间打好扎实的基础，剩下18%的时间研究框架，2%的时间去学点英文，框架的官方文档永远是最好的教程。</strong></p><h3 id="6-3乱码问题"><a href="#6-3乱码问题" class="headerlink" title="6.3乱码问题"></a>6.3乱码问题</h3><p>测试步骤：</p><p>1、我们可以在首页编写一个提交的表单</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/e/t<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、后台编写对应的处理类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controllerpublic class Encoding &#123;   @RequestMapping(&quot;&#x2F;e&#x2F;t&quot;)   public String test(Model model,String name)&#123;       model.addAttribute(&quot;msg&quot;,name); &#x2F;&#x2F;获取表单提交的值       return &quot;test&quot;; &#x2F;&#x2F;跳转到test页面显示输入的值  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、输入中文测试，发现乱码</p><p><img src="/2021/07/15/springmvc/1626347371280.png"></p><p>不得不说，乱码问题是在我们开发中十分常见的问题，也是让我们程序猿比较头大的问题！</p><p>以前乱码问题通过过滤器解决 , 而SpringMVC给我们提供了一个过滤器 , 可以在web.xml中配置 .</p><p>修改了xml文件需要重启服务器！</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是我们发现 , 有些极端情况下.这个过滤器对get的支持不好 .</p><p>处理方法 :</p><p>1、修改tomcat配置文件 ：设置编码！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;Connector URIEncoding&#x3D;&quot;utf-8&quot; port&#x3D;&quot;8080&quot; protocol&#x3D;&quot;HTTP&#x2F;1.1&quot;          connectionTimeout&#x3D;&quot;20000&quot;          redirectPort&#x3D;&quot;8443&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2、自定义过滤器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.kuang.filter;import javax.servlet.*;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletRequestWrapper;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.io.UnsupportedEncodingException;import java.util.Map;&#x2F;*** 解决get和post请求 全部乱码的过滤器*&#x2F;public class GenericEncodingFilter implements Filter &#123;   @Override   public void destroy() &#123;  &#125;   @Override   public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;       &#x2F;&#x2F;处理response的字符编码       HttpServletResponse myResponse&#x3D;(HttpServletResponse) response;       myResponse.setContentType(&quot;text&#x2F;html;charset&#x3D;UTF-8&quot;);       &#x2F;&#x2F; 转型为与协议相关对象       HttpServletRequest httpServletRequest &#x3D; (HttpServletRequest) request;       &#x2F;&#x2F; 对request包装增强       HttpServletRequest myrequest &#x3D; new MyRequest(httpServletRequest);       chain.doFilter(myrequest, response);  &#125;   @Override   public void init(FilterConfig filterConfig) throws ServletException &#123;  &#125;&#125;&#x2F;&#x2F;自定义request对象，HttpServletRequest的包装类class MyRequest extends HttpServletRequestWrapper &#123;   private HttpServletRequest request;   &#x2F;&#x2F;是否编码的标记   private boolean hasEncode;   &#x2F;&#x2F;定义一个可以传入HttpServletRequest对象的构造函数，以便对其进行装饰   public MyRequest(HttpServletRequest request) &#123;       super(request);&#x2F;&#x2F; super必须写       this.request &#x3D; request;  &#125;   &#x2F;&#x2F; 对需要增强方法 进行覆盖   @Override   public Map getParameterMap() &#123;       &#x2F;&#x2F; 先获得请求方式       String method &#x3D; request.getMethod();       if (method.equalsIgnoreCase(&quot;post&quot;)) &#123;           &#x2F;&#x2F; post请求           try &#123;               &#x2F;&#x2F; 处理post乱码               request.setCharacterEncoding(&quot;utf-8&quot;);               return request.getParameterMap();          &#125; catch (UnsupportedEncodingException e) &#123;               e.printStackTrace();          &#125;      &#125; else if (method.equalsIgnoreCase(&quot;get&quot;)) &#123;           &#x2F;&#x2F; get请求           Map&lt;String, String[]&gt; parameterMap &#x3D; request.getParameterMap();           if (!hasEncode) &#123; &#x2F;&#x2F; 确保get手动编码逻辑只运行一次               for (String parameterName : parameterMap.keySet()) &#123;                   String[] values &#x3D; parameterMap.get(parameterName);                   if (values !&#x3D; null) &#123;                       for (int i &#x3D; 0; i &lt; values.length; i++) &#123;                           try &#123;                               &#x2F;&#x2F; 处理get乱码                               values[i] &#x3D; new String(values[i]                                      .getBytes(&quot;ISO-8859-1&quot;), &quot;utf-8&quot;);                          &#125; catch (UnsupportedEncodingException e) &#123;                               e.printStackTrace();                          &#125;                      &#125;                  &#125;              &#125;               hasEncode &#x3D; true;          &#125;           return parameterMap;      &#125;       return super.getParameterMap();  &#125;   &#x2F;&#x2F;取一个值   @Override   public String getParameter(String name) &#123;       Map&lt;String, String[]&gt; parameterMap &#x3D; getParameterMap();       String[] values &#x3D; parameterMap.get(name);       if (values &#x3D;&#x3D; null) &#123;           return null;      &#125;       return values[0]; &#x2F;&#x2F; 取回参数的第一个值  &#125;   &#x2F;&#x2F;取所有值   @Override   public String[] getParameterValues(String name) &#123;       Map&lt;String, String[]&gt; parameterMap &#x3D; getParameterMap();       String[] values &#x3D; parameterMap.get(name);       return values;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个也是我在网上找的一些大神写的，一般情况下，SpringMVC默认的乱码处理就已经能够很好的解决了！</p><p><strong>然后在web.xml中配置这个过滤器即可！</strong></p><p>乱码问题，需要平时多注意，在尽可能能设置编码的地方，都设置为统一编码 UTF-8！</p><h2 id="7-整合SSM框架"><a href="#7-整合SSM框架" class="headerlink" title="7.整合SSM框架"></a>7.整合SSM框架</h2><blockquote><p>环境要求</p></blockquote><p>环境：</p><ul><li>IDEA</li><li>MySQL 5.7.19</li><li>Tomcat 9</li><li>Maven 3.6</li></ul><p> 要求：</p><ul><li>需要熟练掌握MySQL数据库，Spring，JavaWeb及MyBatis知识，简单的前端知识；</li></ul><blockquote><p>数据库环境</p></blockquote><p>创建一个存放书籍数据的数据库表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE DATABASE &#96;ssmbuild&#96;;USE &#96;ssmbuild&#96;;DROP TABLE IF EXISTS &#96;books&#96;;CREATE TABLE &#96;books&#96; (&#96;bookID&#96; INT(10) NOT NULL AUTO_INCREMENT COMMENT &#39;书id&#39;,&#96;bookName&#96; VARCHAR(100) NOT NULL COMMENT &#39;书名&#39;,&#96;bookCounts&#96; INT(11) NOT NULL COMMENT &#39;数量&#39;,&#96;detail&#96; VARCHAR(200) NOT NULL COMMENT &#39;描述&#39;,KEY &#96;bookID&#96; (&#96;bookID&#96;)) ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8INSERT  INTO &#96;books&#96;(&#96;bookID&#96;,&#96;bookName&#96;,&#96;bookCounts&#96;,&#96;detail&#96;)VALUES(1,&#39;Java&#39;,1,&#39;从入门到放弃&#39;),(2,&#39;MySQL&#39;,10,&#39;从删库到跑路&#39;),(3,&#39;Linux&#39;,5,&#39;从进门到进牢&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>基本环境搭建</p></blockquote><p>1、新建一Maven项目！ssmbuild ， 添加web的支持</p><p>2、导入相关的pom依赖！</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--Junit--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--数据库驱动--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- 数据库连接池 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.mchange<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--Servlet - JSP --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--Mybatis--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--Spring--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、Maven资源过滤设置 </p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、建立基本结构和配置框架！</p><ul><li><p>com.kuang.pojo</p></li><li><p>com.kuang.dao</p></li><li><p>com.kuang.service</p></li><li><p>com.kuang.controller</p></li><li><p>mybatis-config.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>       <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>       <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>applicationContext.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>Mybatis层编写</p></blockquote><p>1、数据库配置文件 <strong>database.properties</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">jdbc.driver=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8jdbc.username=rootjdbc.password=123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、IDEA关联数据库</p><p>3、编写MyBatis的核心配置文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>       <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>       <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com/kuang/dao/BookMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、编写数据库对应的实体类 com.kuang.pojo.Books</p><p>使用lombok插件！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.kuang.pojo;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;@Data@AllArgsConstructor@NoArgsConstructorpublic class Books &#123;      private int bookID;   private String bookName;   private int bookCounts;   private String detail;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、编写Dao层的 Mapper接口！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.kuang.dao;import com.kuang.pojo.Books;import java.util.List;public interface BookMapper &#123;   &#x2F;&#x2F;增加一个Book   int addBook(Books book);   &#x2F;&#x2F;根据id删除一个Book   int deleteBookById(int id);   &#x2F;&#x2F;更新Book   int updateBook(Books books);   &#x2F;&#x2F;根据id查询,返回一个Book   Books queryBookById(int id);   &#x2F;&#x2F;查询全部Book,返回list集合   List&lt;Books&gt; queryAllBook();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>       <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>       <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.dao.BookMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--增加一个Book--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addBook<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      insert into ssmbuild.books(bookName,bookCounts,detail)      values (#&#123;bookName&#125;, #&#123;bookCounts&#125;, #&#123;detail&#125;)   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--根据id删除一个Book--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteBookById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      delete from ssmbuild.books where bookID=#&#123;bookID&#125;   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--更新Book--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateBook<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      update ssmbuild.books      set bookName = #&#123;bookName&#125;,bookCounts = #&#123;bookCounts&#125;,detail = #&#123;detail&#125;      where bookID = #&#123;bookID&#125;   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--根据id查询,返回一个Book--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryBookById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select * from ssmbuild.books      where bookID = #&#123;bookID&#125;   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--查询全部Book--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryAllBook<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      SELECT * from ssmbuild.books   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7、编写Service层的接口和实现类</p><p>接口：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.kuang.service;import com.kuang.pojo.Books;import java.util.List;&#x2F;&#x2F;BookService:底下需要去实现,调用dao层public interface BookService &#123;   &#x2F;&#x2F;增加一个Book   int addBook(Books book);   &#x2F;&#x2F;根据id删除一个Book   int deleteBookById(int id);   &#x2F;&#x2F;更新Book   int updateBook(Books books);   &#x2F;&#x2F;根据id查询,返回一个Book   Books queryBookById(int id);   &#x2F;&#x2F;查询全部Book,返回list集合   List&lt;Books&gt; queryAllBook();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.kuang.service;import com.kuang.dao.BookMapper;import com.kuang.pojo.Books;import java.util.List;public class BookServiceImpl implements BookService &#123;   &#x2F;&#x2F;调用dao层的操作，设置一个set接口，方便Spring管理   private BookMapper bookMapper;   public void setBookMapper(BookMapper bookMapper) &#123;       this.bookMapper &#x3D; bookMapper;  &#125;      public int addBook(Books book) &#123;       return bookMapper.addBook(book);  &#125;      public int deleteBookById(int id) &#123;       return bookMapper.deleteBookById(id);  &#125;      public int updateBook(Books books) &#123;       return bookMapper.updateBook(books);  &#125;      public Books queryBookById(int id) &#123;       return bookMapper.queryBookById(id);  &#125;      public List&lt;Books&gt; queryAllBook() &#123;       return bookMapper.queryAllBook();  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>OK，到此，底层需求操作编写完毕！</strong></p><blockquote><p>Spring层</p></blockquote><p>1、配置<strong>Spring整合MyBatis</strong>，我们这里数据源使用c3p0连接池；</p><p>2、我们去编写Spring整合Mybatis的相关的配置文件；spring-dao.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- 配置整合mybatis --></span>   <span class="token comment">&lt;!-- 1.关联数据库文件 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:database.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token comment">&lt;!-- 2.数据库连接池 --></span>   <span class="token comment">&lt;!--数据库连接池       dbcp 半自动化操作 不能自动连接       c3p0 自动化操作（自动的加载配置文件 并且设置到对象里面）   --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!-- 配置连接池属性 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.driver&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.url&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.username&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;jdbc.password&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token comment">&lt;!-- c3p0连接池的私有属性 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maxPoolSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>minPoolSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token comment">&lt;!-- 关闭连接后不自动commit --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>autoCommitOnClose<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token comment">&lt;!-- 获取连接超时时间 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkoutTimeout<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token comment">&lt;!-- 当获取连接失败重试次数 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>acquireRetryAttempts<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- 3.配置SqlSessionFactory对象 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!-- 注入数据库连接池 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:mybatis-config.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 --></span>   <span class="token comment">&lt;!--解释 ：https://www.cnblogs.com/jpfss/p/7799806.html--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!-- 注入sqlSessionFactory --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactoryBeanName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token comment">&lt;!-- 给出需要扫描Dao接口包 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、<strong>Spring整合service层</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd   http://www.springframework.org/schema/context   http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- 扫描service相关的bean --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.service<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token comment">&lt;!--BookServiceImpl注入到IOC容器中--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BookServiceImpl<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.service.BookServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bookMapper<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bookMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- 配置事务管理器 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!-- 注入数据库连接池 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！</p><blockquote><p>SpringMVC层</p></blockquote><p>1、<strong>web.xml</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>        <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--DispatcherServlet--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>           <span class="token comment">&lt;!--一定要注意:我们这里加载的是总的配置文件，之前被这里坑了！--></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--encodingFilter--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>          org.springframework.web.filter.CharacterEncodingFilter       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!--Session过期时间--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-config</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-timeout</span><span class="token punctuation">></span></span>15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-timeout</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-config</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、<strong>spring-mvc.xml</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd   http://www.springframework.org/schema/context   http://www.springframework.org/schema/context/spring-context.xsd   http://www.springframework.org/schema/mvc   https://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- 配置SpringMVC --></span>   <span class="token comment">&lt;!-- 1.开启SpringMVC注解驱动 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token punctuation">/></span></span>   <span class="token comment">&lt;!-- 2.静态资源默认servlet配置--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/></span></span>   <span class="token comment">&lt;!-- 3.配置jsp 显示ViewResolver视图解析器 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.JstlView<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- 4.扫描web相关的bean --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.controller<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、<strong>Spring配置整合文件，applicationContext.xml</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spring-dao.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spring-service.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spring-mvc.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>配置文件，暂时结束！Controller 和 视图层编写</strong></p><p>1、BookController 类编写 ， 方法一：查询全部书籍</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controller@RequestMapping(&quot;&#x2F;book&quot;)public class BookController &#123;   @Autowired   @Qualifier(&quot;BookServiceImpl&quot;)   private BookService bookService;   @RequestMapping(&quot;&#x2F;allBook&quot;)   public String list(Model model) &#123;       List&lt;Books&gt; list &#x3D; bookService.queryAllBook();       model.addAttribute(&quot;list&quot;, list);       return &quot;allBook&quot;;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、编写首页 <strong>index.jsp</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">       <span class="token selector">a</span> <span class="token punctuation">&#123;</span>           <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>           <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>           <span class="token property">font-size</span><span class="token punctuation">:</span> 18px<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>       <span class="token selector">h3</span> <span class="token punctuation">&#123;</span>           <span class="token property">width</span><span class="token punctuation">:</span> 180px<span class="token punctuation">;</span>           <span class="token property">height</span><span class="token punctuation">:</span> 38px<span class="token punctuation">;</span>           <span class="token property">margin</span><span class="token punctuation">:</span> 100px auto<span class="token punctuation">;</span>           <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>           <span class="token property">line-height</span><span class="token punctuation">:</span> 38px<span class="token punctuation">;</span>           <span class="token property">background</span><span class="token punctuation">:</span> deepskyblue<span class="token punctuation">;</span>           <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;pageContext.request.contextPath&#125;/book/allBook<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击进入列表页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、书籍列表页面 <strong>allbook.jsp</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>书籍列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- 引入 Bootstrap --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row clearfix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-12 column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span><span class="token punctuation">></span></span>书籍列表 —— 显示所有书籍<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-4 column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;pageContext.request.contextPath&#125;/book/toAddBook<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>新增<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row clearfix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-12 column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>table table-hover table-striped<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>书籍编号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>书籍名字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>书籍数量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>书籍详情<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>操作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>forEach</span> <span class="token attr-name">var</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span> <span class="token attr-name">items</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;requestScope.get('list')&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>$&#123;book.getBookID()&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>$&#123;book.getBookName()&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>$&#123;book.getBookCounts()&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>$&#123;book.getDetail()&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;pageContext.request.contextPath&#125;/book/toUpdateBook?id=$&#123;book.getBookID()&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>更改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> |                           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;pageContext.request.contextPath&#125;/book/del/$&#123;book.getBookID()&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>forEach</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、BookController 类编写 ， 方法二：添加书籍</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(&quot;&#x2F;toAddBook&quot;)public String toAddPaper() &#123;   return &quot;addBook&quot;;&#125;@RequestMapping(&quot;&#x2F;addBook&quot;)public String addPaper(Books books) &#123;   System.out.println(books);   bookService.addBook(books);   return &quot;redirect:&#x2F;book&#x2F;allBook&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、添加书籍页面：<strong>addBook.jsp</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>新增书籍<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- 引入 Bootstrap --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row clearfix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-12 column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span><span class="token punctuation">></span></span>新增书籍<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;pageContext.request.contextPath&#125;/book/addBook<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      书籍名称：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bookName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>      书籍数量：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bookCounts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>      书籍详情：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>detail<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>添加<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、BookController 类编写 ， 方法三：修改书籍</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(&quot;&#x2F;toUpdateBook&quot;)public String toUpdateBook(Model model, int id) &#123;   Books books &#x3D; bookService.queryBookById(id);   System.out.println(books);   model.addAttribute(&quot;book&quot;,books );   return &quot;updateBook&quot;;&#125;@RequestMapping(&quot;&#x2F;updateBook&quot;)public String updateBook(Model model, Books book) &#123;   System.out.println(book);   bookService.updateBook(book);   Books books &#x3D; bookService.queryBookById(book.getBookID());   model.addAttribute(&quot;books&quot;, books);   return &quot;redirect:&#x2F;book&#x2F;allBook&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7、修改书籍页面  <strong>updateBook.jsp</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>修改信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- 引入 Bootstrap --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row clearfix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-md-12 column<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span><span class="token punctuation">></span></span>修改信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;pageContext.request.contextPath&#125;/book/updateBook<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bookID<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;book.getBookID()&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      书籍名称：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bookName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;book.getBookName()&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      书籍数量：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bookCounts<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;book.getBookCounts()&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      书籍详情：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>detail<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;book.getDetail() &#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8、BookController 类编写 ， 方法四：删除书籍</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(&quot;&#x2F;del&#x2F;&#123;bookId&#125;&quot;)public String deleteBook(@PathVariable(&quot;bookId&quot;) int id) &#123;   bookService.deleteBookById(id);   return &quot;redirect:&#x2F;book&#x2F;allBook&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>配置Tomcat，进行运行！</strong></p><p>到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！</p><p><strong>项目结构图</strong> </p><p><img src="/2021/07/15/springmvc/1626348009633.png"></p><p><img src="/2021/07/15/springmvc/1626348025736.png"></p><blockquote><p>小结及展望</p></blockquote><p>这个是同学们的第一个SSM整合案例，一定要烂熟于心！</p><p>SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。</p><p>或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！</p><p>我们后面还要学习一些 SpringMVC 的知识！</p><ul><li>Ajax  和  Json</li><li>文件上传和下载</li><li>拦截器</li></ul><h2 id="8-Json交互处理"><a href="#8-Json交互处理" class="headerlink" title="8.Json交互处理"></a>8.Json交互处理</h2><blockquote><p>什么是JSON？</p></blockquote><ul><li>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式，目前使用特别广泛。</li><li>采用完全独立于编程语言的<strong>文本格式</strong>来存储和表示数据。</li><li>简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。</li><li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li></ul><p>在 JavaScript 语言中，一切都是对象。因此，任何JavaScript 支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等。看看他的要求和语法格式：</p><ul><li>对象表示为键值对，数据由逗号分隔</li><li>花括号保存对象</li><li>方括号保存数组</li></ul><p><strong>JSON 键值对</strong>是用来保存 JavaScript 对象的一种方式，和 JavaScript 对象的写法也大同小异，键/值对组合中的键名写在前面并用双引号 “” 包裹，使用冒号 : 分隔，然后紧接着值：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#123;&quot;name&quot;: &quot;QinJiang&quot;&#125;&#123;&quot;age&quot;: &quot;3&quot;&#125;&#123;&quot;sex&quot;: &quot;男&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>很多人搞不清楚 JSON 和 JavaScript 对象的关系，甚至连谁是谁都不清楚。其实，可以这么理解：</p><p>JSON 是 JavaScript 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">var obj &#x3D; &#123;a: &#39;Hello&#39;, b: &#39;World&#39;&#125;; &#x2F;&#x2F;这是一个对象，注意键名也是可以使用引号包裹的var json &#x3D; &#39;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#39;; &#x2F;&#x2F;这是一个 JSON 字符串，本质是一个字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>JSON 和 JavaScript 对象互转</strong></p><p>要实现从JSON字符串转换为JavaScript 对象，使用 JSON.parse() 方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">var obj &#x3D; JSON.parse(&#39;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#39;);&#x2F;&#x2F;结果是 &#123;a: &#39;Hello&#39;, b: &#39;World&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>要实现从JavaScript 对象转换为JSON字符串，使用 JSON.stringify() 方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">var json &#x3D; JSON.stringify(&#123;a: &#39;Hello&#39;, b: &#39;World&#39;&#125;);&#x2F;&#x2F;结果是 &#39;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>代码测试</strong></p><p>1、新建一个module ，springmvc-05-json ， 添加web的支持</p><p>2、在web目录下新建一个 json-1.html ， 编写测试内容</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;   &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;   &lt;title&gt;JSON_秦疆&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;   &#x2F;&#x2F;编写一个js的对象   var user &#x3D; &#123;       name:&quot;秦疆&quot;,       age:3,       sex:&quot;男&quot;  &#125;;   &#x2F;&#x2F;将js对象转换成json字符串   var str &#x3D; JSON.stringify(user);   console.log(str);      &#x2F;&#x2F;将json字符串转换为js对象   var user2 &#x3D; JSON.parse(str);   console.log(user2.age,user2.name,user2.sex);&lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、在IDEA中使用浏览器打开，查看控制台输出！</p><p><img src="/2021/07/15/springmvc/1626348368052.png"></p><blockquote><p>Controller返回JSON数据</p></blockquote><p>Jackson应该是目前比较好的json解析工具了</p><p>当然工具不止这一个，比如还有阿里巴巴的 fastjson 等等。</p><p>我们这里使用Jackson，使用它需要导入它的jar包；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;com.fasterxml.jackson.core&#x2F;jackson-core --&gt;&lt;dependency&gt;   &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;   &lt;artifactId&gt;jackson-databind&lt;&#x2F;artifactId&gt;   &lt;version&gt;2.9.8&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置SpringMVC需要的配置</p><p>web.xml</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;web-app xmlns&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&quot;        xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;        xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee http:&#x2F;&#x2F;xmlns.jcp.org&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_4_0.xsd&quot;        version&#x3D;&quot;4.0&quot;&gt;   &lt;!--1.注册servlet--&gt;   &lt;servlet&gt;       &lt;servlet-name&gt;SpringMVC&lt;&#x2F;servlet-name&gt;       &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;       &lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;       &lt;init-param&gt;           &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;           &lt;param-value&gt;classpath:springmvc-servlet.xml&lt;&#x2F;param-value&gt;       &lt;&#x2F;init-param&gt;       &lt;!-- 启动顺序，数字越小，启动越早 --&gt;       &lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt;   &lt;&#x2F;servlet&gt;   &lt;!--所有请求都会被springmvc拦截 --&gt;   &lt;servlet-mapping&gt;       &lt;servlet-name&gt;SpringMVC&lt;&#x2F;servlet-name&gt;       &lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;   &lt;&#x2F;servlet-mapping&gt;   &lt;filter&gt;       &lt;filter-name&gt;encoding&lt;&#x2F;filter-name&gt;       &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;&#x2F;filter-class&gt;       &lt;init-param&gt;           &lt;param-name&gt;encoding&lt;&#x2F;param-name&gt;           &lt;param-value&gt;utf-8&lt;&#x2F;param-value&gt;       &lt;&#x2F;init-param&gt;   &lt;&#x2F;filter&gt;   &lt;filter-mapping&gt;       &lt;filter-name&gt;encoding&lt;&#x2F;filter-name&gt;       &lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;   &lt;&#x2F;filter-mapping&gt;&lt;&#x2F;web-app&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>springmvc-servlet.xml</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;      xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;      xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;      xmlns:mvc&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&quot;      xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context       https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc       https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&#x2F;spring-mvc.xsd&quot;&gt;   &lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;   &lt;context:component-scan base-package&#x3D;&quot;com.kuang.controller&quot;&#x2F;&gt;   &lt;!-- 视图解析器 --&gt;   &lt;bean class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;         id&#x3D;&quot;internalResourceViewResolver&quot;&gt;       &lt;!-- 前缀 --&gt;       &lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;WEB-INF&#x2F;jsp&#x2F;&quot; &#x2F;&gt;       &lt;!-- 后缀 --&gt;       &lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot; &#x2F;&gt;   &lt;&#x2F;bean&gt;&lt;&#x2F;beans&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们随便编写一个User的实体类，然后我们去编写我们的测试Controller；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.kuang.pojo;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;&#x2F;&#x2F;需要导入lombok@Data@AllArgsConstructor@NoArgsConstructorpublic class User &#123;   private String name;   private int age;   private String sex;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们需要两个新东西，一个是@ResponseBody，一个是ObjectMapper对象，我们看下具体的用法</p><p>编写一个Controller；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controllerpublic class UserController &#123;   @RequestMapping(&quot;&#x2F;json1&quot;)   @ResponseBody   public String json1() throws JsonProcessingException &#123;       &#x2F;&#x2F;创建一个jackson的对象映射器，用来解析数据       ObjectMapper mapper &#x3D; new ObjectMapper();       &#x2F;&#x2F;创建一个对象       User user &#x3D; new User(&quot;秦疆1号&quot;, 3, &quot;男&quot;);       &#x2F;&#x2F;将我们的对象解析成为json格式       String str &#x3D; mapper.writeValueAsString(user);       &#x2F;&#x2F;由于@ResponseBody注解，这里会将str转成json格式返回；十分方便       return str;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置Tomcat ， 启动测试一下！</p><p><a href="http://localhost:8080/json1">http://localhost:8080/json1</a></p><p><img src="/2021/07/15/springmvc/1626348445236.png"></p><p>发现出现了乱码问题，我们需要设置一下他的编码格式为utf-8，以及它返回的类型；</p><p>通过@RequestMaping的produces属性来实现，修改下代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;produces:指定响应体返回类型和编码@RequestMapping(value &#x3D; &quot;&#x2F;json1&quot;,produces &#x3D; &quot;application&#x2F;json;charset&#x3D;utf-8&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再次测试， <a href="http://localhost:8080/json1">http://localhost:8080/json1</a> ， 乱码问题OK！</p><p><img src="/2021/07/15/springmvc/1626348468282.png"></p><p>【注意：使用json记得处理乱码问题】</p><blockquote><p>代码优化</p></blockquote><p><strong>乱码统一解决</strong></p><p>上一种方法比较麻烦，如果项目中有许多请求则每一个都要添加，可以通过Spring配置统一指定，这样就不用每次都去处理了！</p><p>我们可以在springmvc的配置文件上添加一段消息StringHttpMessageConverter转换配置！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;mvc:annotation-driven&gt;   &lt;mvc:message-converters register-defaults&#x3D;&quot;true&quot;&gt;       &lt;bean class&#x3D;&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt;           &lt;constructor-arg value&#x3D;&quot;UTF-8&quot;&#x2F;&gt;       &lt;&#x2F;bean&gt;       &lt;bean class&#x3D;&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;&gt;           &lt;property name&#x3D;&quot;objectMapper&quot;&gt;               &lt;bean class&#x3D;&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;&gt;                   &lt;property name&#x3D;&quot;failOnEmptyBeans&quot; value&#x3D;&quot;false&quot;&#x2F;&gt;               &lt;&#x2F;bean&gt;           &lt;&#x2F;property&gt;       &lt;&#x2F;bean&gt;   &lt;&#x2F;mvc:message-converters&gt;&lt;&#x2F;mvc:annotation-driven&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>返回json字符串统一解决</strong></p><p>在类上直接使用 <strong>@RestController</strong> ，这样子，里面所有的方法都只会返回 json 字符串了，不用再每一个都添加@ResponseBody ！我们在前后端分离开发中，一般都使用 @RestController ，十分便捷！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestControllerpublic class UserController &#123;   &#x2F;&#x2F;produces:指定响应体返回类型和编码   @RequestMapping(value &#x3D; &quot;&#x2F;json1&quot;)   public String json1() throws JsonProcessingException &#123;       &#x2F;&#x2F;创建一个jackson的对象映射器，用来解析数据       ObjectMapper mapper &#x3D; new ObjectMapper();       &#x2F;&#x2F;创建一个对象       User user &#x3D; new User(&quot;秦疆1号&quot;, 3, &quot;男&quot;);       &#x2F;&#x2F;将我们的对象解析成为json格式       String str &#x3D; mapper.writeValueAsString(user);       &#x2F;&#x2F;由于@ResponseBody注解，这里会将str转成json格式返回；十分方便       return str;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动tomcat测试，结果都正常输出！</p><blockquote><p>测试集合输出</p></blockquote><p>增加一个新的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(&quot;&#x2F;json2&quot;)public String json2() throws JsonProcessingException &#123;   &#x2F;&#x2F;创建一个jackson的对象映射器，用来解析数据   ObjectMapper mapper &#x3D; new ObjectMapper();   &#x2F;&#x2F;创建一个对象   User user1 &#x3D; new User(&quot;秦疆1号&quot;, 3, &quot;男&quot;);   User user2 &#x3D; new User(&quot;秦疆2号&quot;, 3, &quot;男&quot;);   User user3 &#x3D; new User(&quot;秦疆3号&quot;, 3, &quot;男&quot;);   User user4 &#x3D; new User(&quot;秦疆4号&quot;, 3, &quot;男&quot;);   List&lt;User&gt; list &#x3D; new ArrayList&lt;User&gt;();   list.add(user1);   list.add(user2);   list.add(user3);   list.add(user4);   &#x2F;&#x2F;将我们的对象解析成为json格式   String str &#x3D; mapper.writeValueAsString(list);   return str;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果 : 十分完美，没有任何问题！</p><p><img src="/2021/07/15/springmvc/1626348517468.png"></p><blockquote><p>输出时间对象</p></blockquote><p>增加一个新的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(&quot;&#x2F;json3&quot;)public String json3() throws JsonProcessingException &#123;   ObjectMapper mapper &#x3D; new ObjectMapper();   &#x2F;&#x2F;创建时间一个对象，java.util.Date   Date date &#x3D; new Date();   &#x2F;&#x2F;将我们的对象解析成为json格式   String str &#x3D; mapper.writeValueAsString(date);   return str;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果 :</p><p><img src="/2021/07/15/springmvc/1626348538701.png"></p><ul><li>默认日期格式会变成一个数字，是1970年1月1日到当前日期的毫秒数！</li><li>Jackson 默认是会把时间转成timestamps形式</li></ul><p><strong>解决方案：取消timestamps形式 ， 自定义时间格式</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(&quot;&#x2F;json4&quot;)public String json4() throws JsonProcessingException &#123;   ObjectMapper mapper &#x3D; new ObjectMapper();   &#x2F;&#x2F;不使用时间戳的方式   mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);   &#x2F;&#x2F;自定义日期格式对象   SimpleDateFormat sdf &#x3D; new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);   &#x2F;&#x2F;指定日期格式   mapper.setDateFormat(sdf);   Date date &#x3D; new Date();   String str &#x3D; mapper.writeValueAsString(date);   return str;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果 : 成功的输出了时间！</p><p><img src="/2021/07/15/springmvc/1626348602872.png"></p><blockquote><p>抽取为工具类</p></blockquote><p><strong>如果要经常使用的话，这样是比较麻烦的，我们可以将这些代码封装到一个工具类中；我们去编写下</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.kuang.utils;import com.fasterxml.jackson.core.JsonProcessingException;import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.databind.SerializationFeature;import java.text.SimpleDateFormat;public class JsonUtils &#123;      public static String getJson(Object object) &#123;       return getJson(object,&quot;yyyy-MM-dd HH:mm:ss&quot;);  &#125;   public static String getJson(Object object,String dateFormat) &#123;       ObjectMapper mapper &#x3D; new ObjectMapper();       &#x2F;&#x2F;不使用时间差的方式       mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);       &#x2F;&#x2F;自定义日期格式对象       SimpleDateFormat sdf &#x3D; new SimpleDateFormat(dateFormat);       &#x2F;&#x2F;指定日期格式       mapper.setDateFormat(sdf);       try &#123;           return mapper.writeValueAsString(object);      &#125; catch (JsonProcessingException e) &#123;           e.printStackTrace();      &#125;       return null;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们使用工具类，代码就更加简洁了！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(&quot;&#x2F;json5&quot;)public String json5() throws JsonProcessingException &#123;   Date date &#x3D; new Date();   String json &#x3D; JsonUtils.getJson(date);   return json;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大功告成！完美！</p><blockquote><p>FastJson</p></blockquote><p>fastjson.jar是阿里开发的一款专门用于Java开发的包，可以方便的实现json对象与JavaBean对象的转换，实现JavaBean对象与json字符串的转换，实现json对象与json字符串的转换。实现json的转换方法很多，最后的实现结果都是一样的。</p><p>fastjson 的 pom依赖！</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.60<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>fastjson 三个主要的类：</p><p><strong>JSONObject  代表 json 对象</strong> </p><ul><li>JSONObject实现了Map接口, 猜想 JSONObject底层操作是由Map实现的。</li><li>JSONObject对应json对象，通过各种形式的get()方法可以获取json对象中的数据，也可利用诸如size()，isEmpty()等方法获取”键：值”对的个数和判断是否为空。其本质是通过实现Map接口并调用接口中的方法完成的。</li></ul><p><strong>JSONArray  代表 json 对象数组</strong></p><ul><li>内部是有List接口中的方法来完成操作的。</li></ul><p><strong>JSON代表 JSONObject和JSONArray的转化</strong></p><ul><li>JSON类源码分析与使用</li><li>仔细观察这些方法，主要是实现json对象，json对象数组，javabean对象，json字符串之间的相互转化。</li></ul><p><strong>代码测试，我们新建一个FastJsonDemo 类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.kuang.controller;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;import com.kuang.pojo.User;import java.util.ArrayList;import java.util.List;public class FastJsonDemo &#123;   public static void main(String[] args) &#123;       &#x2F;&#x2F;创建一个对象       User user1 &#x3D; new User(&quot;秦疆1号&quot;, 3, &quot;男&quot;);       User user2 &#x3D; new User(&quot;秦疆2号&quot;, 3, &quot;男&quot;);       User user3 &#x3D; new User(&quot;秦疆3号&quot;, 3, &quot;男&quot;);       User user4 &#x3D; new User(&quot;秦疆4号&quot;, 3, &quot;男&quot;);       List&lt;User&gt; list &#x3D; new ArrayList&lt;User&gt;();       list.add(user1);       list.add(user2);       list.add(user3);       list.add(user4);       System.out.println(&quot;*******Java对象 转 JSON字符串*******&quot;);       String str1 &#x3D; JSON.toJSONString(list);       System.out.println(&quot;JSON.toJSONString(list)&#x3D;&#x3D;&gt;&quot;+str1);       String str2 &#x3D; JSON.toJSONString(user1);       System.out.println(&quot;JSON.toJSONString(user1)&#x3D;&#x3D;&gt;&quot;+str2);       System.out.println(&quot;\n****** JSON字符串 转 Java对象*******&quot;);       User jp_user1&#x3D;JSON.parseObject(str2,User.class);       System.out.println(&quot;JSON.parseObject(str2,User.class)&#x3D;&#x3D;&gt;&quot;+jp_user1);       System.out.println(&quot;\n****** Java对象 转 JSON对象 ******&quot;);       JSONObject jsonObject1 &#x3D; (JSONObject) JSON.toJSON(user2);       System.out.println(&quot;(JSONObject) JSON.toJSON(user2)&#x3D;&#x3D;&gt;&quot;+jsonObject1.getString(&quot;name&quot;));       System.out.println(&quot;\n****** JSON对象 转 Java对象 ******&quot;);       User to_java_user &#x3D; JSON.toJavaObject(jsonObject1, User.class);       System.out.println(&quot;JSON.toJavaObject(jsonObject1, User.class)&#x3D;&#x3D;&gt;&quot;+to_java_user);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        这种工具类，我们只需要掌握使用就好了，在使用的时候在根据具体的业务去找对应的实现。和以前的commons-io那种工具包一样，拿来用就好了！</p><h2 id="9-Ajax研究"><a href="#9-Ajax研究" class="headerlink" title="9.Ajax研究"></a>9.Ajax研究</h2><blockquote><p>简介</p></blockquote><ul><li><p><strong>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</strong></p></li><li><p>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</p></li><li><p><strong>Ajax 不是一种新的编程语言，而是一种用于创建更好更快以及交互性更强的Web应用程序的技术。</strong></p></li><li><p>在 2005 年，Google 通过其 Google Suggest 使 AJAX 变得流行起来。Google Suggest能够自动帮你完成搜索单词。</p></li><li><p>Google Suggest 使用 AJAX 创造出动态性极强的 web 界面：当您在谷歌的搜索框输入关键字时，JavaScript 会把这些字符发送到服务器，然后服务器会返回一个搜索建议的列表。</p></li><li><p>就和国内百度的搜索框一样!</p></li><li><p>传统的网页(即不用ajax技术的网页)，想要更新内容或者提交一个表单，都需要重新加载整个网页。</p></li><li><p>使用ajax技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。</p></li><li><p>使用Ajax，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的Web用户界面。</p></li></ul><blockquote><p>伪造Ajax</p></blockquote><p>我们可以使用前端的一个标签来伪造一个ajax的样子。iframe标签</p><p>1、新建一个module ：sspringmvc-06-ajax ， 导入web支持！</p><p>2、编写一个 ajax-frame.html 使用 iframe 测试，感受下效果</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>kuangshen<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">   window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">var</span> myDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'currentTime'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> myDate<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token keyword">function</span> <span class="token function">LoadPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">var</span> targetUrl <span class="token operator">=</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>targetUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>       document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"iframePosition"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src <span class="token operator">=</span> targetUrl<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>请输入要加载的地址：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>currentTime<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.baidu.com/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">LoadPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>加载页面位置：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iframePosition<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、使用IDEA开浏览器测试一下！</p><p><strong>利用AJAX可以做：</strong></p><ul><li>注册时，输入用户名自动检测用户是否已经存在。</li><li>登陆时，提示用户名密码错误</li><li>删除数据行时，将行ID发送到后台，后台在数据库中删除，数据库删除成功后，在页面DOM中将数据行也删除。</li><li>….等等</li></ul><blockquote><p>jQuery.ajax</p></blockquote><p>纯JS原生实现Ajax我们不去讲解这里，直接使用jquery提供的，方便学习和使用，避免重复造轮子，有兴趣的同学可以去了解下JS原生XMLHttpRequest ！</p><p>Ajax的核心是XMLHttpRequest对象(XHR)。XHR为向服务器发送请求和解析服务器响应提供了接口。能够以异步方式从服务器获取新数据。</p><p>jQuery 提供多个与 AJAX 有关的方法。</p><p>通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON – 同时您能够把这些外部数据直接载入网页的被选元素中。</p><p>jQuery 不是生产者，而是大自然搬运工。</p><p>jQuery Ajax本质就是 XMLHttpRequest，对他进行了封装，方便调用！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">jQuery.ajax(...)      部分参数：            url：请求地址            type：请求方式，GET、POST（1.9.0之后用method）        headers：请求头            data：要发送的数据    contentType：即将发送信息至服务器的内容编码类型(默认: &quot;application&#x2F;x-www-form-urlencoded; charset&#x3D;UTF-8&quot;)          async：是否异步        timeout：设置请求超时时间（毫秒）      beforeSend：发送请求前执行的函数(全局)        complete：完成之后执行的回调函数(全局)        success：成功之后执行的回调函数(全局)          error：失败之后执行的回调函数(全局)        accepts：通过请求头发送给服务器，告诉服务器当前客户端可接受的数据类型        dataType：将服务器端返回的数据转换成指定类型          &quot;xml&quot;: 将服务器端返回的内容转换成xml格式          &quot;text&quot;: 将服务器端返回的内容转换成普通文本格式          &quot;html&quot;: 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。        &quot;script&quot;: 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式          &quot;json&quot;: 将服务器端返回的内容转换成相应的JavaScript对象        &quot;jsonp&quot;: JSONP 格式使用 JSONP 形式调用函数时，如 &quot;myurl?callback&#x3D;?&quot; jQuery 将自动替换 ? 为正确的函数名，以执行回调函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>我们来个简单的测试，使用最原始的HttpServletResponse处理 , .最简单 , 最通用</strong></p><p>1、配置web.xml 和 springmvc的配置文件，复制上面案例的即可 【记得静态资源过滤和注解驱动配置上】</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       https://www.springframework.org/schema/context/spring-context.xsd       http://www.springframework.org/schema/mvc       https://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token punctuation">/></span></span>   <span class="token comment">&lt;!-- 视图解析器 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span>         <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!-- 前缀 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>       <span class="token comment">&lt;!-- 后缀 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、编写一个AjaxController</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controllerpublic class AjaxController &#123;   @RequestMapping(&quot;&#x2F;a1&quot;)   public void ajax1(String name , HttpServletResponse response) throws IOException &#123;       if (&quot;admin&quot;.equals(name))&#123;           response.getWriter().print(&quot;true&quot;);      &#125;else&#123;           response.getWriter().print(&quot;false&quot;);      &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、导入jquery ， 可以使用在线的CDN ， 也可以下载导入</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://code.jquery.com/jquery-3.1.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4、编写index.jsp测试</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>$Title$<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  &lt;%--<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://code.jquery.com/jquery-3.1.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>--%>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">       <span class="token keyword">function</span> <span class="token function">a1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>               <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">"$&#123;pageContext.request.contextPath&#125;/a1"</span><span class="token punctuation">,</span>               <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">'name'</span><span class="token operator">:</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#txtName"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>               <span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data<span class="token punctuation">,</span>status</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token function">alert</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>&lt;%--onblur：失去焦点触发事件--%>用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txtName<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onblur</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">a1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、启动tomcat测试！打开浏览器的控制台，当我们鼠标离开输入框的时候，可以看到发出了一个ajax的请求！是后台返回给我们的结果！测试成功！</p><p><strong>Springmvc实现</strong></p><p>实体类user</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Data@AllArgsConstructor@NoArgsConstructorpublic class User &#123;   private String name;   private int age;   private String sex;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们来获取一个集合对象，展示到前端页面</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(&quot;&#x2F;a2&quot;)public List&lt;User&gt; ajax2()&#123;   List&lt;User&gt; list &#x3D; new ArrayList&lt;User&gt;();   list.add(new User(&quot;秦疆1号&quot;,3,&quot;男&quot;));   list.add(new User(&quot;秦疆2号&quot;,3,&quot;男&quot;));   list.add(new User(&quot;秦疆3号&quot;,3,&quot;男&quot;));   return list; &#x2F;&#x2F;由于@RestController注解，将list转成json格式返回&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前端页面</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>获取数据<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80%<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">   <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"$&#123;pageContext.request.contextPath&#125;/a2"</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>               <span class="token keyword">var</span> html<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>               <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>data<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   html<span class="token operator">+=</span> <span class="token string">"&lt;tr>"</span> <span class="token operator">+</span>                       <span class="token string">"&lt;td>"</span> <span class="token operator">+</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"&lt;/td>"</span> <span class="token operator">+</span>                       <span class="token string">"&lt;td>"</span> <span class="token operator">+</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">"&lt;/td>"</span> <span class="token operator">+</span>                       <span class="token string">"&lt;td>"</span> <span class="token operator">+</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sex <span class="token operator">+</span> <span class="token string">"&lt;/td>"</span> <span class="token operator">+</span>                       <span class="token string">"&lt;/tr>"</span>              <span class="token punctuation">&#125;</span>               <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#content"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>成功实现了数据回显！可以体会一下Ajax的好处！</strong></p><blockquote><p>注册提示效果</p></blockquote><p>我们再测试一个小Demo，思考一下我们平时注册时候，输入框后面的实时提示怎么做到的；如何优化</p><p>我们写一个Controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(&quot;&#x2F;a3&quot;)public String ajax3(String name,String pwd)&#123;   String msg &#x3D; &quot;&quot;;   &#x2F;&#x2F;模拟数据库中存在数据   if (name!&#x3D;null)&#123;       if (&quot;admin&quot;.equals(name))&#123;           msg &#x3D; &quot;OK&quot;;      &#125;else &#123;           msg &#x3D; &quot;用户名输入错误&quot;;      &#125;  &#125;   if (pwd!&#x3D;null)&#123;       if (&quot;123456&quot;.equals(pwd))&#123;           msg &#x3D; &quot;OK&quot;;      &#125;else &#123;           msg &#x3D; &quot;密码输入有误&quot;;      &#125;  &#125;   return msg; &#x2F;&#x2F;由于@RestController注解，将msg转成json格式返回&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前端页面 login.jsp</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>ajax<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">       <span class="token keyword">function</span> <span class="token function">a1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>               <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">"$&#123;pageContext.request.contextPath&#125;/a3"</span><span class="token punctuation">,</span>               <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">'name'</span><span class="token operator">:</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>               <span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                       <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#userInfo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                       <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#userInfo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>                   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#userInfo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>       <span class="token keyword">function</span> <span class="token function">a2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           $<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>               <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">"$&#123;pageContext.request.contextPath&#125;/a3"</span><span class="token punctuation">,</span>               <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">'pwd'</span><span class="token operator">:</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#pwd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>               <span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                       <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#pwdInfo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                       <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#pwdInfo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span>                   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#pwdInfo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>  用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onblur</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">a1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userInfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>  密码:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onblur</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">a2</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pwdInfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【记得处理json乱码问题】</p><p>测试一下效果，动态请求响应，局部刷新，就是如此！</p><p><img src="/2021/07/15/springmvc/640-1626348797230.png"></p><blockquote><p>获取baidu接口Demo</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html; charset=utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>JSONP百度搜索<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">       <span class="token selector">#q</span><span class="token punctuation">&#123;</span>           <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>           <span class="token property">height</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>           <span class="token property">border</span><span class="token punctuation">:</span>1px solid #ddd<span class="token punctuation">;</span>           <span class="token property">line-height</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>           <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>           <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>           <span class="token property">padding</span><span class="token punctuation">:</span> 0 10px<span class="token punctuation">;</span>           <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>       <span class="token selector">#ul</span><span class="token punctuation">&#123;</span>           <span class="token property">width</span><span class="token punctuation">:</span> 520px<span class="token punctuation">;</span>           <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>           <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>           <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>           <span class="token property">border</span><span class="token punctuation">:</span>1px solid #ddd<span class="token punctuation">;</span>           <span class="token property">margin-top</span><span class="token punctuation">:</span> -1px<span class="token punctuation">;</span>           <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>       <span class="token selector">#ul li</span><span class="token punctuation">&#123;</span>           <span class="token property">line-height</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>           <span class="token property">padding</span><span class="token punctuation">:</span> 0 10px<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>       <span class="token selector">#ul li:hover</span><span class="token punctuation">&#123;</span>           <span class="token property">background-color</span><span class="token punctuation">:</span> #f60<span class="token punctuation">;</span>           <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>   </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">       <span class="token comment">// 2.步骤二</span>       <span class="token comment">// 定义demo函数 (分析接口、数据)</span>       <span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">var</span> Ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">var</span> html <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>           <span class="token comment">// 如果搜索数据存在 把内容添加进去</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>s<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token comment">// 隐藏掉的ul显示出来</span>               Ul<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'block'</span><span class="token punctuation">;</span>               <span class="token comment">// 搜索到的数据循环追加到li里</span>               <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>data<span class="token punctuation">.</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                   html <span class="token operator">+=</span> <span class="token string">'&lt;li>'</span><span class="token operator">+</span>data<span class="token punctuation">.</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'&lt;/li>'</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>               <span class="token comment">// 循环的li写入ul</span>               Ul<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> html<span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>       <span class="token comment">// 1.步骤一</span>       window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token comment">// 获取输入框和ul</span>           <span class="token keyword">var</span> <span class="token constant">Q</span> <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">var</span> Ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 事件鼠标抬起时候</span>           <span class="token constant">Q</span><span class="token punctuation">.</span><span class="token function-variable function">onkeyup</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token comment">// 如果输入框不等于空</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token comment">// ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆JSONPz重点☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆</span>                   <span class="token comment">// 创建标签</span>                   <span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">//给定要跨域的地址 赋值给src</span>                   <span class="token comment">//这里是要请求的跨域的地址 我写的是百度搜索的跨域地址</span>                   script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd='</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token operator">+</span><span class="token string">'&amp;cb=demo'</span><span class="token punctuation">;</span>                   <span class="token comment">// 将组合好的带src的script标签追加到body里</span>                   document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>   </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>q<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ul<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-拦截器-文件上传下载"><a href="#9-拦截器-文件上传下载" class="headerlink" title="9.拦截器+文件上传下载"></a>9.拦截器+文件上传下载</h2><blockquote><p>概述</p></blockquote><p>SpringMVC的处理器拦截器类似于Servlet开发中的过滤器Filter,用于对处理器进行预处理和后处理。开发者可以自己定义一些拦截器来实现特定的功能。</p><p><strong>过滤器与拦截器的区别：</strong>拦截器是AOP思想的具体应用。</p><p><strong>过滤器</strong></p><ul><li>servlet规范中的一部分，任何java web工程都可以使用</li><li>在url-pattern中配置了/*之后，可以对所有要访问的资源进行拦截</li></ul><p><strong>拦截器</strong> </p><ul><li>拦截器是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才能使用</li><li>拦截器只会拦截访问的控制器方法， 如果访问的是jsp/html/css/image/js是不会进行拦截的</li></ul><blockquote><p>自定义拦截器</p></blockquote><p>那如何实现拦截器呢？</p><p>想要自定义拦截器，必须实现 HandlerInterceptor 接口。</p><p>1、新建一个Moudule ， springmvc-07-Interceptor  ， 添加web支持</p><p>2、配置web.xml 和 springmvc-servlet.xml 文件</p><p>3、编写一个拦截器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.kuang.interceptor;import org.springframework.web.servlet.HandlerInterceptor;import org.springframework.web.servlet.ModelAndView;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;public class MyInterceptor implements HandlerInterceptor &#123;   &#x2F;&#x2F;在请求处理的方法之前执行   &#x2F;&#x2F;如果返回true执行下一个拦截器   &#x2F;&#x2F;如果返回false就不执行下一个拦截器   public boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o) throws Exception &#123;       System.out.println(&quot;------------处理前------------&quot;);       return true;  &#125;   &#x2F;&#x2F;在请求处理方法执行之后执行   public void postHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView) throws Exception &#123;       System.out.println(&quot;------------处理后------------&quot;);  &#125;   &#x2F;&#x2F;在dispatcherServlet处理后执行,做清理工作.   public void afterCompletion(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) throws Exception &#123;       System.out.println(&quot;------------清理------------&quot;);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、在springmvc的配置文件中配置拦截器</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--关于拦截器的配置--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!--/** 包括路径及其子路径--></span>       <span class="token comment">&lt;!--/admin/* 拦截的是/admin/add等等这种 , /admin/add/user不会被拦截--></span>       <span class="token comment">&lt;!--/admin/** 拦截的是/admin/下的所有--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token comment">&lt;!--bean配置的就是拦截器--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.interceptor.MyInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、编写一个Controller，接收请求</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--关于拦截器的配置--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!--/** 包括路径及其子路径--></span>       <span class="token comment">&lt;!--/admin/* 拦截的是/admin/add等等这种 , /admin/add/user不会被拦截--></span>       <span class="token comment">&lt;!--/admin/** 拦截的是/admin/下的所有--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token comment">&lt;!--bean配置的就是拦截器--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.interceptor.MyInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、前端 index.jsp</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;pageContext.request.contextPath&#125;/interceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>拦截器测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7、启动tomcat 测试一下！</p><p><img src="/2021/07/15/springmvc/1626349246346.png"></p><blockquote><p>验证用户是否登录 (认证用户)</p></blockquote><p><strong>实现思路</strong></p><p>1、有一个登陆页面，需要写一个controller访问页面。</p><p>2、登陆页面有一提交表单的动作。需要在controller中处理。判断用户名密码是否正确。如果正确，向session中写入用户信息。<em>返回登陆成功。</em></p><p>3、拦截用户请求，判断用户是否登陆。如果用户已经登陆。放行， 如果用户未登陆，跳转到登陆页面</p><p><strong>测试：</strong></p><p>1、编写一个登陆页面  login.jsp</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>登录页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;pageContext.request.contextPath&#125;/user/login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>  密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、编写一个Controller处理请求</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.kuang.controller;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import javax.servlet.http.HttpSession;@Controller@RequestMapping(&quot;&#x2F;user&quot;)public class UserController &#123;   &#x2F;&#x2F;跳转到登陆页面   @RequestMapping(&quot;&#x2F;jumplogin&quot;)   public String jumpLogin() throws Exception &#123;       return &quot;login&quot;;  &#125;   &#x2F;&#x2F;跳转到成功页面   @RequestMapping(&quot;&#x2F;jumpSuccess&quot;)   public String jumpSuccess() throws Exception &#123;       return &quot;success&quot;;  &#125;   &#x2F;&#x2F;登陆提交   @RequestMapping(&quot;&#x2F;login&quot;)   public String login(HttpSession session, String username, String pwd) throws Exception &#123;       &#x2F;&#x2F; 向session记录用户身份信息       System.out.println(&quot;接收前端&#x3D;&#x3D;&#x3D;&quot;+username);       session.setAttribute(&quot;user&quot;, username);       return &quot;success&quot;;  &#125;   &#x2F;&#x2F;退出登陆   @RequestMapping(&quot;logout&quot;)   public String logout(HttpSession session) throws Exception &#123;       &#x2F;&#x2F; session 过期       session.invalidate();       return &quot;login&quot;;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、编写一个登陆成功的页面 success.jsp</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>登录成功页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>$&#123;user&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;pageContext.request.contextPath&#125;/user/logout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注销<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、在 index 页面上测试跳转！启动Tomcat 测试，未登录也可以进入主页！</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>$Title$<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>&lt;%--登录--%> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;pageContext.request.contextPath&#125;/user/jumplogin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;pageContext.request.contextPath&#125;/user/jumpSuccess<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>成功页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、编写用户登录拦截器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.kuang.interceptor;import org.springframework.web.servlet.HandlerInterceptor;import org.springframework.web.servlet.ModelAndView;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import java.io.IOException;public class LoginInterceptor implements HandlerInterceptor &#123;   public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws ServletException, IOException &#123;       &#x2F;&#x2F; 如果是登陆页面则放行       System.out.println(&quot;uri: &quot; + request.getRequestURI());       if (request.getRequestURI().contains(&quot;login&quot;)) &#123;           return true;      &#125;       HttpSession session &#x3D; request.getSession();       &#x2F;&#x2F; 如果用户已登陆也放行       if(session.getAttribute(&quot;user&quot;) !&#x3D; null) &#123;           return true;      &#125;       &#x2F;&#x2F; 用户没有登陆跳转到登陆页面       request.getRequestDispatcher(&quot;&#x2F;WEB-INF&#x2F;jsp&#x2F;login.jsp&quot;).forward(request, response);       return false;  &#125;   public void postHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView) throws Exception &#123;  &#125;      public void afterCompletion(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) throws Exception &#123;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、在Springmvc的配置文件中注册拦截器</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--关于拦截器的配置--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loginInterceptor<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.interceptor.LoginInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7、再次重启Tomcat测试！</p><p><strong>OK，测试登录拦截功能无误.</strong></p><h2 id="10-文件上传和下载"><a href="#10-文件上传和下载" class="headerlink" title="10.文件上传和下载"></a>10.文件上传和下载</h2><blockquote><p>准备工作</p></blockquote><p>文件上传是项目开发中最常见的功能之一 ,springMVC 可以很好的支持文件上传，但是SpringMVC上下文中默认没有装配MultipartResolver，因此默认情况下其不能处理文件上传工作。如果想使用Spring的文件上传功能，则需要在上下文中配置MultipartResolver。</p><p>前端表单要求：为了能上传文件，必须将表单的method设置为POST，并将enctype设置为multipart/form-data。只有在这样的情况下，浏览器才会把用户选择的文件以二进制数据发送给服务器；</p><p><strong>对表单中的 enctype 属性做个详细的说明：</strong></p><ul><li>application/x-www=form-urlencoded：默认方式，只处理表单域中的 value 属性值，采用这种编码方式的表单会将表单域中的值处理成 URL 编码方式。</li><li>multipart/form-data：这种编码方式会以二进制流的方式来处理表单数据，这种编码方式会把文件域指定文件的内容也封装到请求参数中，不会对字符编码。</li><li>text/plain：除了把空格转换为 “+” 号外，其他字符都不做编码处理，这种方式适用直接通过表单发送邮件。</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>一旦设置了enctype为multipart/form-data，浏览器即会采用二进制流的方式来处理表单数据，而对于文件上传的处理则涉及在服务器端解析原始的HTTP响应。在2003年，Apache Software Foundation发布了开源的Commons FileUpload组件，其很快成为Servlet/JSP程序员上传文件的最佳选择。</p><ul><li>Servlet3.0规范已经提供方法来处理文件上传，但这种上传需要在Servlet中完成。</li><li>而Spring MVC则提供了更简单的封装。</li><li>Spring MVC为文件上传提供了直接的支持，这种支持是用即插即用的MultipartResolver实现的。</li><li>Spring MVC使用Apache Commons FileUpload技术实现了一个MultipartResolver实现类：</li><li>CommonsMultipartResolver。因此，SpringMVC的文件上传还需要依赖Apache Commons FileUpload的组件。</li></ul><blockquote><p>文件上传</p></blockquote><p>1、导入文件上传的jar包，commons-fileupload ， Maven会自动帮我们导入他的依赖包 commons-io包；</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--文件上传--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--servlet-api导入高版本的--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、配置bean：multipartResolver</p><p>【<strong>注意！！！这个bena的id必须为：multipartResolver ， 否则上传文件会报400的错误！在这里栽过坑,教训！</strong>】</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--文件上传配置--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultEncoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token comment">&lt;!-- 上传文件大小上限，单位为字节（10485760=10M） --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maxUploadSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10485760<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maxInMemorySize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>40960<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CommonsMultipartFile 的 常用方法：</p><ul><li><strong>String getOriginalFilename()：获取上传文件的原名</strong></li><li><strong>InputStream getInputStream()：获取文件流</strong></li><li><strong>void transferTo(File dest)：将上传文件保存到一个目录文件中</strong></li></ul><p> 我们去实际测试一下</p><p>3、编写前端页面</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;form action&#x3D;&quot;&#x2F;upload&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot; method&#x3D;&quot;post&quot;&gt; &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;file&quot;&#x2F;&gt; &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;upload&quot;&gt;&lt;&#x2F;form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4、<strong>Controller</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.kuang.controller;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.multipart.commons.CommonsMultipartFile;import javax.servlet.http.HttpServletRequest;import java.io.*;@Controllerpublic class FileController &#123;   &#x2F;&#x2F;@RequestParam(&quot;file&quot;) 将name&#x3D;file控件得到的文件封装成CommonsMultipartFile 对象   &#x2F;&#x2F;批量上传CommonsMultipartFile则为数组即可   @RequestMapping(&quot;&#x2F;upload&quot;)   public String fileUpload(@RequestParam(&quot;file&quot;) CommonsMultipartFile file , HttpServletRequest request) throws IOException &#123;       &#x2F;&#x2F;获取文件名 : file.getOriginalFilename();       String uploadFileName &#x3D; file.getOriginalFilename();       &#x2F;&#x2F;如果文件名为空，直接回到首页！       if (&quot;&quot;.equals(uploadFileName))&#123;           return &quot;redirect:&#x2F;index.jsp&quot;;      &#125;       System.out.println(&quot;上传文件名 : &quot;+uploadFileName);       &#x2F;&#x2F;上传路径保存设置       String path &#x3D; request.getServletContext().getRealPath(&quot;&#x2F;upload&quot;);       &#x2F;&#x2F;如果路径不存在，创建一个       File realPath &#x3D; new File(path);       if (!realPath.exists())&#123;           realPath.mkdir();      &#125;       System.out.println(&quot;上传文件保存地址：&quot;+realPath);       InputStream is &#x3D; file.getInputStream(); &#x2F;&#x2F;文件输入流       OutputStream os &#x3D; new FileOutputStream(new File(realPath,uploadFileName)); &#x2F;&#x2F;文件输出流       &#x2F;&#x2F;读取写出       int len&#x3D;0;       byte[] buffer &#x3D; new byte[1024];       while ((len&#x3D;is.read(buffer))!&#x3D;-1)&#123;           os.write(buffer,0,len);           os.flush();      &#125;       os.close();       is.close();       return &quot;redirect:&#x2F;index.jsp&quot;;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、测试上传文件，OK！</p><p><strong>采用file.Transto 来保存上传的文件</strong></p><p>1、编写Controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;** 采用file.Transto 来保存上传的文件*&#x2F;@RequestMapping(&quot;&#x2F;upload2&quot;)public String  fileUpload2(@RequestParam(&quot;file&quot;) CommonsMultipartFile file, HttpServletRequest request) throws IOException &#123;   &#x2F;&#x2F;上传路径保存设置   String path &#x3D; request.getServletContext().getRealPath(&quot;&#x2F;upload&quot;);   File realPath &#x3D; new File(path);   if (!realPath.exists())&#123;       realPath.mkdir();  &#125;   &#x2F;&#x2F;上传文件地址   System.out.println(&quot;上传文件保存地址：&quot;+realPath);   &#x2F;&#x2F;通过CommonsMultipartFile的方法直接写文件（注意这个时候）   file.transferTo(new File(realPath +&quot;&#x2F;&quot;+ file.getOriginalFilename()));   return &quot;redirect:&#x2F;index.jsp&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、前端表单提交地址修改</p><p>3、访问提交测试，OK！</p><blockquote><p>文件下载</p></blockquote><p><strong>文件下载步骤：</strong></p><p>1、设置 response 响应头</p><p>2、读取文件 – InputStream</p><p>3、写出文件 – OutputStream</p><p>4、执行操作</p><p>5、关闭流 （先开后关）</p><p><strong>代码实现：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(value&#x3D;&quot;&#x2F;download&quot;)public String downloads(HttpServletResponse response ,HttpServletRequest request) throws Exception&#123;   &#x2F;&#x2F;要下载的图片地址   String  path &#x3D; request.getServletContext().getRealPath(&quot;&#x2F;upload&quot;);   String  fileName &#x3D; &quot;基础语法.jpg&quot;;   &#x2F;&#x2F;1、设置response 响应头   response.reset(); &#x2F;&#x2F;设置页面不缓存,清空buffer   response.setCharacterEncoding(&quot;UTF-8&quot;); &#x2F;&#x2F;字符编码   response.setContentType(&quot;multipart&#x2F;form-data&quot;); &#x2F;&#x2F;二进制传输数据   &#x2F;&#x2F;设置响应头   response.setHeader(&quot;Content-Disposition&quot;,           &quot;attachment;fileName&#x3D;&quot;+URLEncoder.encode(fileName, &quot;UTF-8&quot;));   File file &#x3D; new File(path,fileName);   &#x2F;&#x2F;2、 读取文件--输入流   InputStream input&#x3D;new FileInputStream(file);   &#x2F;&#x2F;3、 写出文件--输出流   OutputStream out &#x3D; response.getOutputStream();   byte[] buff &#x3D;new byte[1024];   int index&#x3D;0;   &#x2F;&#x2F;4、执行 写出操作   while((index&#x3D; input.read(buff))!&#x3D; -1)&#123;       out.write(buff, 0, index);       out.flush();  &#125;   out.close();   input.close();   return null;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前端</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/download<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击下载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试，文件下载OK，大家可以和我们之前学习的JavaWeb原生的方式对比一下，就可以知道这个便捷多了!</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建</title>
      <link href="/2021/07/15/bo-ke-da-jian/"/>
      <url>/2021/07/15/bo-ke-da-jian/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h1><h2 id="1-下载node-js"><a href="#1-下载node-js" class="headerlink" title="1.下载node.js"></a>1.下载node.js</h2><p><img src="/2021/07/15/bo-ke-da-jian/1625550474795.png"></p><blockquote><p>傻瓜式安装，一直下一步，成功标志：</p></blockquote><p><img src="/2021/07/15/bo-ke-da-jian/1625550514605.png"></p><h2 id="2-借助npm包管理器，安装hexo"><a href="#2-借助npm包管理器，安装hexo" class="headerlink" title="2.借助npm包管理器，安装hexo"></a>2.借助npm包管理器，安装hexo</h2><blockquote><p>安装镜像cnpm</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/15/bo-ke-da-jian/1625550900983.png"></p><blockquote><p>安装hexo框架</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">cnpm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/15/bo-ke-da-jian/1625551096624.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">hexo -v             &#x2F;&#x2F;验证是否成功<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/15/bo-ke-da-jian/1625551314845.png"></p><h2 id="3-利用hexo创建博客"><a href="#3-利用hexo创建博客" class="headerlink" title="3.利用hexo创建博客"></a>3.利用hexo创建博客</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">hexo init          &#x2F;&#x2F;用hexo创建初始化博客<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/15/bo-ke-da-jian/1625551874730.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">hexo s            &#x2F;&#x2F;启动博客（用来启动预览一下）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/15/bo-ke-da-jian/1625552027724.png"></p><h2 id="4-新建一篇文章"><a href="#4-新建一篇文章" class="headerlink" title="4.新建一篇文章"></a>4.新建一篇文章</h2><h3 id="1-新建一篇文章"><a href="#1-新建一篇文章" class="headerlink" title="1.新建一篇文章"></a>1.新建一篇文章</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">hexo n &quot;新建博客名字&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/15/bo-ke-da-jian/1625553995945.png"></p><p><img src="/2021/07/15/bo-ke-da-jian/1625554080188.png"></p><h3 id="2-编辑文章"><a href="#2-编辑文章" class="headerlink" title="2.编辑文章"></a>2.编辑文章</h3><p><img src="/2021/07/15/bo-ke-da-jian/1625554231091.png"></p><h3 id="3-存在问题"><a href="#3-存在问题" class="headerlink" title="3.存在问题"></a>3.存在问题</h3><blockquote><p>图片倒不进去</p></blockquote><h3 id="4-解决方法"><a href="#4-解决方法" class="headerlink" title="4.解决方法"></a>4.解决方法</h3><p>​    修改博客配置：</p><blockquote><p>修改博客根目录中<code>_config.yml</code>文件的配置项<code>post_asset_folder</code>为<code>true</code>：</p></blockquote><pre class="line-numbers language-none"><code class="language-none">post_asset_folder: true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完成此设置后，当你通过<code>hexo new 文件名</code>新建博客后，会产生一个和文件同名的文件夹。</p><p><img src="/2021/07/15/bo-ke-da-jian/1625555446985.png"></p><p><img src="/2021/07/15/bo-ke-da-jian/1625555487552.png"></p><p><img src="/2021/07/15/bo-ke-da-jian/1625555643287.png"></p><p>下载插件：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">npm install https:&#x2F;&#x2F;github.com&#x2F;CodeFalling&#x2F;hexo-asset-image --save上面太慢不行cnpm install https:&#x2F;&#x2F;github.com&#x2F;CodeFalling&#x2F;hexo-asset-image --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>当文章需要添加图片时，将需要添加的图片放入同名的文件夹中，同时通过相对路径索引到该图片。 </p></blockquote><p>问题解决：</p><p><img src="/2021/07/15/bo-ke-da-jian/1625555689048.png"></p><h3 id="5-发布运行"><a href="#5-发布运行" class="headerlink" title="5.发布运行"></a>5.发布运行</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">hexo clean  &#x2F;&#x2F;清理hexo g     &#x2F;&#x2F;生成hexo s     &#x2F;&#x2F;发布<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/15/bo-ke-da-jian/1625555798857.png"></p><p><img src="/2021/07/15/bo-ke-da-jian/1625555827352.png"></p><h2 id="5-在github下发布"><a href="#5-在github下发布" class="headerlink" title="5.在github下发布"></a>5.在github下发布</h2><h4 id="1-创建一个新仓库"><a href="#1-创建一个新仓库" class="headerlink" title="1.创建一个新仓库"></a>1.创建一个新仓库</h4><p><img src="/2021/07/15/bo-ke-da-jian/1625556718118.png"></p><p><img src="/2021/07/15/bo-ke-da-jian/1625556736333.png"></p><h4 id="2-在blog目录下装一个git部署的插件"><a href="#2-在blog目录下装一个git部署的插件" class="headerlink" title="2.在blog目录下装一个git部署的插件"></a>2.在blog目录下装一个git部署的插件</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">cnpm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/15/bo-ke-da-jian/1625556886403.png"></p><h4 id="3-修改config"><a href="#3-修改config" class="headerlink" title="3.修改config"></a>3.修改config</h4><p><img src="/2021/07/15/bo-ke-da-jian/1625557274686.png"></p><h4 id="4-部署到远端（前提配置了git）"><a href="#4-部署到远端（前提配置了git）" class="headerlink" title="4.部署到远端（前提配置了git）"></a>4.部署到远端（前提配置了git）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/07/15/bo-ke-da-jian/1625558279969.png"></p><p><img src="/2021/07/15/bo-ke-da-jian/1625558316156.png"></p><h4 id="5-访问"><a href="#5-访问" class="headerlink" title="5.访问"></a>5.访问</h4><p><img src="/2021/07/15/bo-ke-da-jian/1625558350363.png"></p><h2 id="6-换主题"><a href="#6-换主题" class="headerlink" title="6.换主题"></a>6.换主题</h2><pre class="line-numbers language-none"><code class="language-none">地址： https:&#x2F;&#x2F;github.com&#x2F;litten&#x2F;hexo-theme-yilia      https:&#x2F;&#x2F;github.com&#x2F;blinkfox&#x2F;hexo-theme-matery      https:&#x2F;&#x2F;gitee.com&#x2F;yafine66&#x2F;hexo-theme-matery<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/15/bo-ke-da-jian/1625558701715.png"></p><h4 id="1-克隆到本地："><a href="#1-克隆到本地：" class="headerlink" title="1.克隆到本地："></a>1.克隆到本地：</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">$ git clone https:&#x2F;&#x2F;github.com&#x2F;litten&#x2F;hexo-theme-yilia.git themes&#x2F;yilia$ git clone  https:&#x2F;&#x2F;github.com&#x2F;blinkfox&#x2F;hexo-theme-matery.git themes&#x2F;matery<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/15/bo-ke-da-jian/1625559034692.png"></p><h4 id="2-修改config"><a href="#2-修改config" class="headerlink" title="2.修改config"></a>2.修改config</h4><p><img src="/2021/07/15/bo-ke-da-jian/1625559191233.png"></p><h4 id="3-修改后重新清理创建运行"><a href="#3-修改后重新清理创建运行" class="headerlink" title="3.修改后重新清理创建运行"></a>3.修改后重新清理创建运行</h4><p><img src="/2021/07/15/bo-ke-da-jian/1625559953858.png"></p><h4 id="4-再发布到github"><a href="#4-再发布到github" class="headerlink" title="4.再发布到github"></a>4.再发布到github</h4><p><img src="/2021/07/15/bo-ke-da-jian/1625560000252.png"></p><p><img src="/2021/07/15/bo-ke-da-jian/1626338051448.png"></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shiro_test</title>
      <link href="/2021/07/15/shiro-test/"/>
      <url>/2021/07/15/shiro-test/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="shiro整合步骤"><a href="#shiro整合步骤" class="headerlink" title="shiro整合步骤"></a>shiro整合步骤</h1><h2 id="一、初步准备"><a href="#一、初步准备" class="headerlink" title="一、初步准备"></a>一、初步准备</h2><h3 id="1-新建springboot项目"><a href="#1-新建springboot项目" class="headerlink" title="1.新建springboot项目"></a>1.新建springboot项目</h3><h3 id="2-引入相应的依赖"><a href="#2-引入相应的依赖" class="headerlink" title="2.引入相应的依赖"></a>2.引入相应的依赖</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--thymeleaf--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!--web--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!--mysql--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!--lombok--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!--springboot--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!--数据源--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.19<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!--mybatis相关依赖--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-编写application-properties文件"><a href="#3-编写application-properties文件" class="headerlink" title="3.编写application.properties文件"></a>3.编写application.properties文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 应用名称spring.application.name&#x3D;shiro_test# 应用服务 WEB 访问端口server.port&#x3D;8080# 数据库驱动：spring.datasource.driver-class-name&#x3D;com.mysql.cj.jdbc.Driver# 数据源名称#spring.datasource.name&#x3D;defaultDataSourcespring.datasource.type&#x3D;com.alibaba.druid.pool.DruidDataSource# 数据库连接地址spring.datasource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;shiro_test?serverTimezone&#x3D;UTC# 数据库用户名&amp;密码：spring.datasource.username&#x3D;rootspring.datasource.password&#x3D;123456# THYMELEAF (ThymeleafAutoConfiguration)# 开启模板缓存（默认值： true ）spring.thymeleaf.cache&#x3D;true# 检查模板是否存在，然后再呈现spring.thymeleaf.check-template&#x3D;true# 检查模板位置是否正确（默认值 :true ）spring.thymeleaf.check-template-location&#x3D;true#Content-Type 的值（默认值： text&#x2F;html ）spring.thymeleaf.content-type&#x3D;text&#x2F;html# 开启 MVC Thymeleaf 视图解析（默认值： true ）spring.thymeleaf.enabled&#x3D;true# 模板编码spring.thymeleaf.encoding&#x3D;UTF-8# 要被排除在解析之外的视图名称列表，⽤逗号分隔spring.thymeleaf.excluded-view-names&#x3D;# 要运⽤于模板之上的模板模式。另⻅ StandardTemplate-ModeHandlers( 默认值： HTML5)spring.thymeleaf.mode&#x3D;HTML5# 在构建 URL 时添加到视图名称前的前缀（默认值： classpath:&#x2F;templates&#x2F; ）spring.thymeleaf.prefix&#x3D;classpath:&#x2F;templates&#x2F;# 在构建 URL 时添加到视图名称后的后缀（默认值： .html ）spring.thymeleaf.suffix&#x3D;.htmlmybatis.type-aliases-package&#x3D;com.chao.pojomybatis.mapper-locations&#x3D;mapper&#x2F;*.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-准备好网页"><a href="#4-准备好网页" class="headerlink" title="4.准备好网页"></a>4.准备好网页</h3><h3 id="5-运行项目进行简单的测试"><a href="#5-运行项目进行简单的测试" class="headerlink" title="5.运行项目进行简单的测试"></a>5.运行项目进行简单的测试</h3><p>编写登陆页面的controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controllerpublic class IndexController &#123;    @RequestMapping(&quot;&#x2F;hello&quot;)    public String hello()&#123;        return &quot;login&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><h3 id="6-初步没有问题后，加入shiro依赖"><a href="#6-初步没有问题后，加入shiro依赖" class="headerlink" title="6.初步没有问题后，加入shiro依赖"></a>6.初步没有问题后，加入shiro依赖</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--引入shiro和ehcache--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-ehcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--引入shiro整合Springboot依赖--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-此时如果启动项目会报No-bean-of-type-‘org-apache-shiro-realm-Realm’-found-的错误，是因为加入shiro后需要shiro的配置类"><a href="#7-此时如果启动项目会报No-bean-of-type-‘org-apache-shiro-realm-Realm’-found-的错误，是因为加入shiro后需要shiro的配置类" class="headerlink" title="7.此时如果启动项目会报No bean of type ‘org.apache.shiro.realm.Realm’ found.的错误，是因为加入shiro后需要shiro的配置类"></a>7.此时如果启动项目会报No bean of type ‘org.apache.shiro.realm.Realm’ found.的错误，是因为加入shiro后需要shiro的配置类</h3><h3 id="8-加入shiro的配置类ShiroConfig和自定义的realm，里面的方法环环相扣不能少"><a href="#8-加入shiro的配置类ShiroConfig和自定义的realm，里面的方法环环相扣不能少" class="headerlink" title="8.加入shiro的配置类ShiroConfig和自定义的realm，里面的方法环环相扣不能少"></a>8.加入shiro的配置类ShiroConfig和自定义的realm，里面的方法环环相扣不能少</h3><blockquote><p>shiro的配置类ShiroConfig </p><p>里面的方法一定记得加入@bean，要不不会生效</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class ShiroConfig &#123;    &#x2F;&#x2F;为了使thymleaf中的shiro可以展示     @Bean(name &#x3D; &quot;shiroDialect&quot;)    public ShiroDialect shiroDialect()&#123;        return new ShiroDialect();    &#125;    &#x2F;&#x2F;创建shiroFilter负责拦截所有请求    @Bean    public ShiroFilterFactoryBean getShiroFilterFactoryBean(DefaultWebSecurityManager defaultWebSecurityManager)&#123;        &#x2F;&#x2F;创建ShiroFilterFactoryBean对象        ShiroFilterFactoryBean shiroFilterFactoryBean &#x3D; new ShiroFilterFactoryBean();        &#x2F;&#x2F;给filter设置安全管理器        shiroFilterFactoryBean.setSecurityManager(defaultWebSecurityManager);        &#x2F;&#x2F;配置系统受限资源        &#x2F;&#x2F;配置系统公共资源        Map&lt;String,String&gt; map &#x3D; new HashMap&lt;String,String&gt;();        map.put(&quot;&#x2F;login.html&quot;,&quot;anon&quot;);&#x2F;&#x2F;anon 设置为公共资源  放行资源放在下面        map.put(&quot;&#x2F;&quot;,&quot;anon&quot;);        map.put(&quot;&#x2F;**&quot;,&quot;authc&quot;);&#x2F;&#x2F;authc 请求这个资源需要认证和授权        &#x2F;&#x2F;默认认证界面路径---当认证不通过时跳转        shiroFilterFactoryBean.setLoginUrl(&quot;&#x2F;&quot;);        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);        return shiroFilterFactoryBean;    &#125;    &#x2F;&#x2F;2.创建安全管理器    @Bean    public DefaultWebSecurityManager getDefaultWebSecurityManager(Realm realm)&#123;        DefaultWebSecurityManager defaultWebSecurityManager                                     &#x3D; new DefaultWebSecurityManager();        &#x2F;&#x2F;给安全管理器设置        defaultWebSecurityManager.setRealm(realm);        return defaultWebSecurityManager;    &#125;    &#x2F;&#x2F;3.创建自定义realm    @Bean    public Realm getRealm()&#123;        &#x2F;&#x2F;创建自定义的realm对象        CustomerRealm customerRealm &#x3D; new CustomerRealm();        return customerRealm;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>自定义的realm</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class CustomerRealm extends AuthorizingRealm &#123;    @Override    &#x2F;&#x2F;授权的方法    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) &#123;        return null;    &#125;    @Override    &#x2F;&#x2F;认证的方法    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123;        return null;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-简单的进行一下小测试，看是否拦截了需要授权的请求"><a href="#9-简单的进行一下小测试，看是否拦截了需要授权的请求" class="headerlink" title="9.简单的进行一下小测试，看是否拦截了需要授权的请求"></a>9.简单的进行一下小测试，看是否拦截了需要授权的请求</h3><blockquote><p>出了一点问题，样式消失了，因为拦截了样式链接</p></blockquote><p>解决：放行资源</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">Map&lt;String,String&gt; map &#x3D; new HashMap&lt;String,String&gt;();      map.put(&quot;&#x2F;login.html&quot;,&quot;anon&quot;);&#x2F;&#x2F;anon 设置为公共资源  放行资源放在下面      map.put(&quot;&#x2F;hello&quot;,&quot;anon&quot;);      map.put(&quot;&#x2F;assets&#x2F;**&quot;,&quot;anon&quot;);&#x2F;&#x2F;放行页面css等      map.put(&quot;&#x2F;css&#x2F;**&quot;,&quot;anon&quot;);      map.put(&quot;&#x2F;images&#x2F;**&quot;,&quot;anon&quot;);      map.put(&quot;&#x2F;js&#x2F;**&quot;,&quot;anon&quot;);      map.put(&quot;&#x2F;**&quot;,&quot;authc&quot;);&#x2F;&#x2F;authc 请求这个资源需要认证和授权<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、验证"><a href="#三、验证" class="headerlink" title="三、验证"></a>三、验证</h2><h3 id="10-先对注册的mapper进行编写"><a href="#10-先对注册的mapper进行编写" class="headerlink" title="10.先对注册的mapper进行编写"></a>10.先对注册的mapper进行编写</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Mapper@Repositorypublic interface UserDao &#123;    &#x2F;&#x2F;添加用户    public void addUser(User user);    &#x2F;&#x2F;用用户名查询用户    public User findByUserName(String username);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--增加用户--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>save<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     insert into shiro_test.t_user values(#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;salt&#125;) <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--用名字查找用户--></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findByUserName<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>String<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     select id,username,password,salt from shiro_test.t_user     where username = #&#123;username&#125; <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-对生成盐的方法进行编写"><a href="#11-对生成盐的方法进行编写" class="headerlink" title="11.对生成盐的方法进行编写"></a>11.对生成盐的方法进行编写</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class SaltUtils &#123;    &#x2F;**     * 生成salt的静态方法     * @param n     * @return     *&#x2F;    public static String getSalt(int n)&#123;        &#x2F;&#x2F;ToCharArray( )的用法，将字符串对象中的字符转换为一个字符数组        char[] chars &#x3D; &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234567890!@#$%^&amp;*()&quot;.toCharArray();        StringBuilder sb &#x3D; new StringBuilder();        for (int i &#x3D; 0; i &lt; n; i++) &#123;            char aChar &#x3D; chars[new Random().nextInt(chars.length)];            sb.append(aChar);        &#125;        return sb.toString();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-对注册的service层进行编写"><a href="#12-对注册的service层进行编写" class="headerlink" title="12.对注册的service层进行编写"></a>12.对注册的service层进行编写</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface UserService &#123;    &#x2F;&#x2F;添加用户    public void addUser(User user);    &#x2F;&#x2F;用用户名查询用户    public User findByUserName(String username);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Servicepublic class UserServiceImpl implements UserService &#123;    @Autowired    UserMapper userMapper;    @Override    public void addUser(User user) &#123;        &#x2F;&#x2F;明文密码进行md5 + salt + hash散列        &#x2F;&#x2F;处理业务调用dao        &#x2F;&#x2F;1.生成随机盐        String salt &#x3D; SaltUtils.getSalt(8);        &#x2F;&#x2F;2.将随机盐保存到数据        user.setSalt(salt);        &#x2F;&#x2F;3.明文密码进行md5 + salt + hash散列        Md5Hash md5Hash &#x3D; new Md5Hash(user.getPassword(),salt,1024);        user.setPassword(md5Hash.toHex());        userMapper.addUser(user);    &#125;    @Override    public User findByUserName(String username) &#123;        return userMapper.findByUserName(username);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-对注册的congtroller层进行编写"><a href="#13-对注册的congtroller层进行编写" class="headerlink" title="13.对注册的congtroller层进行编写"></a>13.对注册的congtroller层进行编写</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(&quot;&#x2F;addUser&quot;)   public String addUser(User user) &#123;       try &#123;           userService.addUser(user);           &#x2F;&#x2F;成功了返回登陆页面           return &quot;redirect:&#x2F;&quot;;       &#125; catch (Exception e) &#123;           e.printStackTrace();       &#125;       &#x2F;&#x2F;失败了返回注册页面       return &quot;redirect:&#x2F;register&quot;;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-放行-addUser和-register"><a href="#14-放行-addUser和-register" class="headerlink" title="14.放行/addUser和/register"></a>14.放行/addUser和/register</h3><h3 id="15-测试注册（成功）"><a href="#15-测试注册（成功）" class="headerlink" title="15.测试注册（成功）"></a>15.测试注册（成功）</h3><p><img src="/2021/07/15/shiro-test/1626269369599.png"></p><h3 id="16-由于在自定义的realm中要连接到数据库，并与数据库查出来的用户名密码比较，我们需要写一个工具类来使得在自定义的realm中也可以得到service方法的工具类ApplicationContextUtils-在工厂中获取bean的工具类"><a href="#16-由于在自定义的realm中要连接到数据库，并与数据库查出来的用户名密码比较，我们需要写一个工具类来使得在自定义的realm中也可以得到service方法的工具类ApplicationContextUtils-在工厂中获取bean的工具类" class="headerlink" title="16.由于在自定义的realm中要连接到数据库，并与数据库查出来的用户名密码比较，我们需要写一个工具类来使得在自定义的realm中也可以得到service方法的工具类ApplicationContextUtils(在工厂中获取bean的工具类)"></a>16.由于在自定义的realm中要连接到数据库，并与数据库查出来的用户名密码比较，我们需要写一个工具类来使得在自定义的realm中也可以得到service方法的工具类ApplicationContextUtils(在工厂中获取bean的工具类)</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Componentpublic class ApplicationContextUtils implements ApplicationContextAware &#123;    private static ApplicationContext context;    @Override    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123;        this.context &#x3D; applicationContext;    &#125;    &#x2F;&#x2F;根据bean名字获取工厂中指定bean 对象    public static Object getBean(String beanName)&#123;        System.out.println(&quot;beanName&quot;+beanName);        Object object&#x3D;context.getBean(beanName);        System.out.println(&quot;object&quot;+object);        return context.getBean(beanName);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>service注解没加就错了，空指针异常</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Service(&quot;userService&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h3 id="17-由于在带的盐没有实现序列化，对输入的密码进行加盐和散列时会报序列化错误，因此我们自己定义序列化"><a href="#17-由于在带的盐没有实现序列化，对输入的密码进行加盐和散列时会报序列化错误，因此我们自己定义序列化" class="headerlink" title="17.由于在带的盐没有实现序列化，对输入的密码进行加盐和散列时会报序列化错误，因此我们自己定义序列化"></a>17.由于在带的盐没有实现序列化，对输入的密码进行加盐和散列时会报序列化错误，因此我们自己定义序列化</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;自定义salt实现 实现序列化接口public class MyByteSource implements ByteSource, Serializable &#123;    private  byte[] bytes;    private String cachedHex;    private String cachedBase64;    public MyByteSource()&#123;    &#125;    public MyByteSource(byte[] bytes) &#123;        this.bytes &#x3D; bytes;    &#125;    public MyByteSource(char[] chars) &#123;        this.bytes &#x3D; CodecSupport.toBytes(chars);    &#125;    public MyByteSource(String string) &#123;        this.bytes &#x3D; CodecSupport.toBytes(string);    &#125;    public MyByteSource(ByteSource source) &#123;        this.bytes &#x3D; source.getBytes();    &#125;    public MyByteSource(File file) &#123;        this.bytes &#x3D; (new MyByteSource.BytesHelper()).getBytes(file);    &#125;    public MyByteSource(InputStream stream) &#123;        this.bytes &#x3D; (new MyByteSource.BytesHelper()).getBytes(stream);    &#125;    public static boolean isCompatible(Object o) &#123;        return o instanceof byte[] || o instanceof char[] || o instanceof String || o instanceof ByteSource || o instanceof File || o instanceof InputStream;    &#125;    public byte[] getBytes() &#123;        return this.bytes;    &#125;    public boolean isEmpty() &#123;        return this.bytes &#x3D;&#x3D; null || this.bytes.length &#x3D;&#x3D; 0;    &#125;    public String toHex() &#123;        if (this.cachedHex &#x3D;&#x3D; null) &#123;            this.cachedHex &#x3D; Hex.encodeToString(this.getBytes());        &#125;        return this.cachedHex;    &#125;    public String toBase64() &#123;        if (this.cachedBase64 &#x3D;&#x3D; null) &#123;            this.cachedBase64 &#x3D; Base64.encodeToString(this.getBytes());        &#125;        return this.cachedBase64;    &#125;    public String toString() &#123;        return this.toBase64();    &#125;    public int hashCode() &#123;        return this.bytes !&#x3D; null &amp;&amp; this.bytes.length !&#x3D; 0 ? Arrays.hashCode(this.bytes) : 0;    &#125;    public boolean equals(Object o) &#123;        if (o &#x3D;&#x3D; this) &#123;            return true;        &#125; else if (o instanceof ByteSource) &#123;            ByteSource bs &#x3D; (ByteSource)o;            return Arrays.equals(this.getBytes(), bs.getBytes());        &#125; else &#123;            return false;        &#125;    &#125;    private static final class BytesHelper extends CodecSupport &#123;        private BytesHelper() &#123;        &#125;        public byte[] getBytes(File file) &#123;            return this.toBytes(file);        &#125;        public byte[] getBytes(InputStream stream) &#123;            return this.toBytes(stream);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="18-修改我们的realm的认证方法"><a href="#18-修改我们的realm的认证方法" class="headerlink" title="18.修改我们的realm的认证方法"></a>18.修改我们的realm的认证方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Override protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123;     &#x2F;&#x2F;从传过来的token获取到的用户名     String principal &#x3D; (String) token.getPrincipal();     &#x2F;&#x2F;利用在工厂中获取bean对象的工具类获取service     UserService userService &#x3D;               (UserService) ApplicationContextUtils.getBean(&quot;userService&quot;);     &#x2F;&#x2F;根据userService查询用户     User user &#x3D; userService.findByUserName(principal);     &#x2F;&#x2F;如果查询结果不为空     if (!ObjectUtils.isEmpty(user))&#123;         &#x2F;&#x2F;就将数据库的密码返回上一层与输入密码比较（自己比较）         return new SimpleAuthenticationInfo(user.getUsername(),user.getPassword(),                 new MyByteSource(user.getSalt()), this.getName());     &#125;     return null; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="19-由于密码默认的比较方式是简单的比较，因此我们需要在realmconfig中设置成加盐和散列的比较"><a href="#19-由于密码默认的比较方式是简单的比较，因此我们需要在realmconfig中设置成加盐和散列的比较" class="headerlink" title="19.由于密码默认的比较方式是简单的比较，因此我们需要在realmconfig中设置成加盐和散列的比较"></a>19.由于密码默认的比较方式是简单的比较，因此我们需要在realmconfig中设置成加盐和散列的比较</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Bean   public Realm getRealm()&#123;       &#x2F;&#x2F;创建自定义的realm对象       CustomerRealm customerRealm &#x3D; new CustomerRealm();       &#x2F;&#x2F;修改校验凭证匹配器，因为默认的凭证匹配器是简单的比较       &#x2F;&#x2F;设置hashed凭证匹配器（不设置的话默认是简单的比较，直接用输入密码与数据库比较）       HashedCredentialsMatcher credentialsMatcher &#x3D; new HashedCredentialsMatcher();       &#x2F;&#x2F;设置md5加密       credentialsMatcher.setHashAlgorithmName(&quot;md5&quot;);       &#x2F;&#x2F;设置散列次数       credentialsMatcher.setHashIterations(1024);       customerRealm.setCredentialsMatcher(credentialsMatcher);       return customerRealm;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="20，简单测试"><a href="#20，简单测试" class="headerlink" title="20，简单测试"></a>20，简单测试</h3><blockquote><p>@Service(“userService”)注解没加，导致获取工厂bean时报空指针异常</p></blockquote><h2 id="四、授权"><a href="#四、授权" class="headerlink" title="四、授权"></a>四、授权</h2><h3 id="21-数据库的设计"><a href="#21-数据库的设计" class="headerlink" title="21.数据库的设计"></a>21.数据库的设计</h3><blockquote><p>我们分别需要5张表：（用户表，角色表，权限表由于是多对多关系，所以需要中间表进行连接）</p><p>1.用户表</p><p>2.角色表</p><p>3.权限表</p><p>4.用户角色表</p><p>5.角色权限表</p></blockquote><h3 id="22-角色类和权限类的编写和用户类的修改"><a href="#22-角色类和权限类的编写和用户类的修改" class="headerlink" title="22.角色类和权限类的编写和用户类的修改"></a>22.角色类和权限类的编写和用户类的修改</h3><blockquote><p>要实现序列化哦</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Data@Accessors(chain &#x3D; true)@AllArgsConstructor@NoArgsConstructorpublic class Role implements Serializable &#123;    private String id ;    private String name ;    &#x2F;&#x2F;定义权限的集合    private List&lt;Perms&gt; perms;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Data@Accessors(chain &#x3D; true)@AllArgsConstructor@NoArgsConstructorpublic class Perms implements Serializable &#123;    private String id ;    private String name;    private String url;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Data@Accessors(chain &#x3D; true)@AllArgsConstructor@NoArgsConstructorpublic class User implements Serializable &#123;    public  String id ;    public  String username;    public  String password;    public  String salt;    private List&lt;Role&gt; roles;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="23-认证需要用到的mapper层进行编写"><a href="#23-认证需要用到的mapper层进行编写" class="headerlink" title="23.认证需要用到的mapper层进行编写"></a>23.认证需要用到的mapper层进行编写</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Mapper@Repositorypublic interface UserMapper &#123;    &#x2F;&#x2F;添加用户    public void addUser(User user);    &#x2F;&#x2F;根据用户名查询用户    public User findByUserName(String username);        &#x2F;&#x2F;通过用户名查询角色信息    public User findRolesByUserName(String username);    &#x2F;&#x2F;根据角色id查询权限集合    List&lt;Perms&gt; findPermsByRoleId(String id);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.chao.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--增加用户--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into shiro_test.t_user values(#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;salt&#125;)    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--用名字查找用户--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findByUserName<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>String<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select id,username,password,salt from shiro_test.t_user        where username = #&#123;username&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--通过用户名查询角色信息--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findRolesByUserName<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>String<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        SELECT u.id uid,u.username,r.id,r.name rname        FROM shiro_test.t_user u                 LEFT JOIN shiro_test.t_user_role ur                           ON u.id=ur.userid                 LEFT JOIN shiro_test.t_role r                           ON ur.roleid=r.id        WHERE u.username=#&#123;username&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--resultMap对查询结果进行封装，封装成user对象--></span>    <span class="token comment">&lt;!--对userMap进行封装，封装成user对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 对查询得到的uid封装成user对象的id--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!-- 对查询得到的username封装成user对象的username--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment">&lt;!-- 对查询得到的id和name封装成role对象的id和name，并形成一个list集合--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>roles<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Role<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rname<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--根据角色id查询权限集合--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findPermsByRoleId<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>String<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Perms<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        SELECT p.id,p.NAME,p.url        FROM shiro_test.t_role r                 LEFT JOIN shiro_test.t_role_perms rp                           ON r.id=rp.roleid                 LEFT JOIN shiro_test.t_perms p ON rp.permsid=p.id        WHERE r.id=#&#123;id&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/15/shiro-test/1626320817378.png"></p><p><img src="/2021/07/15/shiro-test/1626320893736.png"></p><h3 id="24-认证需要用到的service层进行编写"><a href="#24-认证需要用到的service层进行编写" class="headerlink" title="24.认证需要用到的service层进行编写"></a>24.认证需要用到的service层进行编写</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface UserService &#123;    &#x2F;&#x2F;添加用户    public void addUser(User user);    &#x2F;&#x2F;根据用户名查询用户    public User findByUserName(String username);    &#x2F;&#x2F;通过用户名查询角色信息    public User findRolesByUserName(String username);    &#x2F;&#x2F;根据角色id查询权限集合    List&lt;Perms&gt; findPermsByRoleId(String id);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Service(&quot;userService&quot;)public class UserServiceImpl implements UserService &#123;    @Autowired    UserMapper userMapper;    @Override    public void addUser(User user) &#123;        &#x2F;&#x2F;明文密码进行md5 + salt + hash散列        &#x2F;&#x2F;处理业务调用dao        &#x2F;&#x2F;1.生成随机盐        String salt &#x3D; SaltUtils.getSalt(8);        &#x2F;&#x2F;2.将随机盐保存到数据        user.setSalt(salt);        &#x2F;&#x2F;3.明文密码进行md5 + salt + hash散列        Md5Hash md5Hash &#x3D; new Md5Hash(user.getPassword(),salt,1024);        user.setPassword(md5Hash.toHex());        userMapper.addUser(user);    &#125;    &#x2F;&#x2F;根据用户名查询用户    @Override    public User findByUserName(String username) &#123;        return userMapper.findByUserName(username);    &#125;    &#x2F;&#x2F;通过用户名查询角色信息    @Override    public User findRolesByUserName(String username) &#123;        return userMapper.findRolesByUserName(username);    &#125;    &#x2F;&#x2F;根据角色id查询权限集合    @Override    public List&lt;Perms&gt; findPermsByRoleId(String id) &#123;        return userMapper.findPermsByRoleId(id);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="25-对自定义realm的认证层进行编写"><a href="#25-对自定义realm的认证层进行编写" class="headerlink" title="25.对自定义realm的认证层进行编写"></a>25.对自定义realm的认证层进行编写</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class CustomerRealm extends AuthorizingRealm &#123;    @Override    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) &#123;        &#x2F;&#x2F;获取身份信息        String primaryPrincipal &#x3D; (String) principals.getPrimaryPrincipal();        &#x2F;&#x2F;利用在工厂中获取bean对象的工具类获取service（service上必须给个别名）        UserService userService &#x3D; (UserService) ApplicationContextUtils.getBean(&quot;userService&quot;);        &#x2F;&#x2F;根据userService查询用户（其中带着用户的角色信息）        User user &#x3D; userService.findRolesByUserName(primaryPrincipal);        &#x2F;&#x2F;判断用户的角色信息是否为空        if (!CollectionUtils.isEmpty(user.getRoles()))&#123;            &#x2F;&#x2F;如果不为空，就对用户赋予角色            SimpleAuthorizationInfo simpleAuthorizationInfo &#x3D; new SimpleAuthorizationInfo();            &#x2F;&#x2F;用增强for循环对用户进行角色赋予            for (Role role:user.getRoles())&#123;                &#x2F;&#x2F;用addRole方法进行角色赋予                simpleAuthorizationInfo.addRole(role.getName());                &#x2F;&#x2F;用for循环遍历角色信息时，进行角色的权限查询                &#x2F;&#x2F;根据userService查询角色权限                List&lt;Perms&gt; perms &#x3D; userService.findPermsByRoleId(role.getId());                &#x2F;&#x2F;如果权限不为空就进行权限赋予                if(!CollectionUtils.isEmpty(perms) &amp;&amp; perms.get(0)!&#x3D;null )&#123;                    &#x2F;&#x2F;用增强for循环对角色行权限赋予                    for (Perms perm: perms)                        simpleAuthorizationInfo.addStringPermission(perm.getName());                &#125;            &#125;            return simpleAuthorizationInfo;        &#125;        return null;    &#125;    &#x2F;&#x2F;认证的方法    @Override    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123;        &#x2F;&#x2F;从传过来的token获取到的用户名        String principal &#x3D; (String) token.getPrincipal();        &#x2F;&#x2F;利用在工厂中获取bean对象的工具类获取service        UserService userService &#x3D; (UserService) ApplicationContextUtils.getBean(&quot;userService&quot;);        &#x2F;&#x2F;根据userService查询用户        User user &#x3D; userService.findByUserName(principal);        System.out.println(user);        &#x2F;&#x2F;如果查询结果不为空        if (!ObjectUtils.isEmpty(user))&#123;            &#x2F;&#x2F;就将数据库的密码和盐返回上一层与输入密码比较（自己比较）            return new SimpleAuthenticationInfo(user.getUsername(),user.getPassword(),                    new MyByteSource(user.getSalt()), this.getName());        &#125;        return null;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="26-对前端页面加上shiro，controller登录登出"><a href="#26-对前端页面加上shiro，controller登录登出" class="headerlink" title="26.对前端页面加上shiro，controller登录登出"></a>26.对前端页面加上shiro，controller登录登出</h3><blockquote><p>引入shiro-thymeleaf 依赖</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;dependency&gt;    &lt;groupId&gt;com.github.theborakompanioni&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;thymeleaf-extras-shiro&lt;&#x2F;artifactId&gt;    &lt;version&gt;2.0.0&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;    &lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;&#x2F;artifactId&gt;&lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;html xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; xmlns:th&#x3D;&quot;http:&#x2F;&#x2F;www.thymeleaf.org&quot;      xmlns:shiro&#x3D;&quot;http:&#x2F;&#x2F;www.pollix.at&#x2F;thymeleaf&#x2F;shiro&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>controller</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(&quot;&#x2F;login&quot;)   public String login(String username, String password,String code,HttpSession session) &#123;       &#x2F;&#x2F;比较验证码       String codes &#x3D; (String) session.getAttribute(&quot;code&quot;);       try&#123;       if (codes.equalsIgnoreCase(code))&#123;           &#x2F;&#x2F;获取主体对象           Subject subject &#x3D; SecurityUtils.getSubject();           subject.login(new UsernamePasswordToken(username, password));           return &quot;redirect:&#x2F;index&quot;;       &#125;else&#123;           throw new RuntimeException(&quot;验证码错误!&quot;);       &#125;       &#125; catch (UnknownAccountException e) &#123;           e.printStackTrace();           System.out.println(&quot;用户名错误!&quot;);       &#125; catch (IncorrectCredentialsException e) &#123;           e.printStackTrace();           System.out.println(&quot;密码错误!&quot;);       &#125;catch (Exception e)&#123;           e.printStackTrace();           System.out.println(e.getMessage());       &#125;       return &quot;redirect:&#x2F;&quot;;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(&quot;logout&quot;)  public String logout() &#123;      Subject subject &#x3D; SecurityUtils.getSubject();      subject.logout();&#x2F;&#x2F;退出用户      return &quot;redirect:&#x2F;&quot;;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="27-进行测试"><a href="#27-进行测试" class="headerlink" title="27.进行测试"></a>27.进行测试</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">shiro:</span>hasRole</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>admin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dropdown-toggle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon-picture <span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>menu-text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 商品管理 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>arrow icon-angle-down<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submenu<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:void(0)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>advertising.html<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>商品管理<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iframeurl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon-double-angle-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>广告管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:void(0)<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Sort_ads.html<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>商品分类<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iframeurl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon-double-angle-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>分类管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">shiro:</span>hasRole</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==有admin的用户：==</p><p><img src="/2021/07/15/shiro-test/1626324933200.png"></p><p>==没有的用户：==</p><p><img src="/2021/07/15/shiro-test/1626324997123.png"></p><p>添加更多的用户测试：</p><blockquote><p>改成中文也可以</p></blockquote><p><img src="/2021/07/15/shiro-test/1626325163460.png"></p><p><img src="/2021/07/15/shiro-test/1626331058265.png"></p><p><img src="/2021/07/15/shiro-test/1626331079520.png"></p><p><img src="/2021/07/15/shiro-test/1626331099599.png"></p><p>测试成功</p><h2 id="五、添加缓存"><a href="#五、添加缓存" class="headerlink" title="五、添加缓存"></a>五、添加缓存</h2><h3 id="28-加入验证码验证"><a href="#28-加入验证码验证" class="headerlink" title="28.加入验证码验证"></a>28.加入验证码验证</h3><h4 id="1-加入验证码工具类"><a href="#1-加入验证码工具类" class="headerlink" title="1.加入验证码工具类"></a>1.加入验证码工具类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;** *@描述   验证码生成 *&#x2F;public class VerifyCodeUtils&#123;    &#x2F;&#x2F;使用到Algerian字体，系统里没有的话需要安装字体，字体只显示大写，去掉了1,0,i,o几个容易混淆的字符    public static final String VERIFY_CODES &#x3D; &quot;23456789ABCDEFGHJKLMNPQRSTUVWXYZ&quot;;    private static Random random &#x3D; new Random();    &#x2F;**     * 使用系统默认字符源生成验证码     * @param verifySize    验证码长度     * @return     *&#x2F;    public static String generateVerifyCode(int verifySize)&#123;        return generateVerifyCode(verifySize, VERIFY_CODES);    &#125;    &#x2F;**     * 使用指定源生成验证码     * @param verifySize    验证码长度     * @param sources   验证码字符源     * @return     *&#x2F;    public static String generateVerifyCode(int verifySize, String sources)&#123;        if(sources &#x3D;&#x3D; null || sources.length() &#x3D;&#x3D; 0)&#123;            sources &#x3D; VERIFY_CODES;        &#125;        int codesLen &#x3D; sources.length();        Random rand &#x3D; new Random(System.currentTimeMillis());        StringBuilder verifyCode &#x3D; new StringBuilder(verifySize);        for(int i &#x3D; 0; i &lt; verifySize; i++)&#123;            verifyCode.append(sources.charAt(rand.nextInt(codesLen-1)));        &#125;        return verifyCode.toString();    &#125;    &#x2F;**     * 生成随机验证码文件,并返回验证码值     * @param w     * @param h     * @param outputFile     * @param verifySize     * @return     * @throws IOException     *&#x2F;    public static String outputVerifyImage(int w, int h, File outputFile, int verifySize) throws IOException&#123;        String verifyCode &#x3D; generateVerifyCode(verifySize);        outputImage(w, h, outputFile, verifyCode);        return verifyCode;    &#125;    &#x2F;**     * 输出随机验证码图片流,并返回验证码值     * @param w     * @param h     * @param os     * @param verifySize     * @return     * @throws IOException     *&#x2F;    public static String outputVerifyImage(int w, int h, OutputStream os, int verifySize) throws IOException&#123;        String verifyCode &#x3D; generateVerifyCode(verifySize);        outputImage(w, h, os, verifyCode);        return verifyCode;    &#125;    &#x2F;**     * 生成指定验证码图像文件     * @param w     * @param h     * @param outputFile     * @param code     * @throws IOException     *&#x2F;    public static void outputImage(int w, int h, File outputFile, String code) throws IOException&#123;        if(outputFile &#x3D;&#x3D; null)&#123;            return;        &#125;        File dir &#x3D; outputFile.getParentFile();        if(!dir.exists())&#123;            dir.mkdirs();        &#125;        try&#123;            outputFile.createNewFile();            FileOutputStream fos &#x3D; new FileOutputStream(outputFile);            outputImage(w, h, fos, code);            fos.close();        &#125; catch(IOException e)&#123;            throw e;        &#125;    &#125;    &#x2F;**     * 输出指定验证码图片流     * @param w     * @param h     * @param os     * @param code     * @throws IOException     *&#x2F;    public static void outputImage(int w, int h, OutputStream os, String code) throws IOException&#123;        int verifySize &#x3D; code.length();        BufferedImage image &#x3D; new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);        Random rand &#x3D; new Random();        Graphics2D g2 &#x3D; image.createGraphics();        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);        Color[] colors &#x3D; new Color[5];        Color[] colorSpaces &#x3D; new Color[] &#123; Color.WHITE, Color.CYAN,                Color.GRAY, Color.LIGHT_GRAY, Color.MAGENTA, Color.ORANGE,                Color.PINK, Color.YELLOW &#125;;        float[] fractions &#x3D; new float[colors.length];        for(int i &#x3D; 0; i &lt; colors.length; i++)&#123;            colors[i] &#x3D; colorSpaces[rand.nextInt(colorSpaces.length)];            fractions[i] &#x3D; rand.nextFloat();        &#125;        Arrays.sort(fractions);        g2.setColor(Color.GRAY);&#x2F;&#x2F; 设置边框色        g2.fillRect(0, 0, w, h);        Color c &#x3D; getRandColor(200, 250);        g2.setColor(c);&#x2F;&#x2F; 设置背景色        g2.fillRect(0, 2, w, h-4);        &#x2F;&#x2F;绘制干扰线        Random random &#x3D; new Random();        g2.setColor(getRandColor(160, 200));&#x2F;&#x2F; 设置线条的颜色        for (int i &#x3D; 0; i &lt; 20; i++) &#123;            int x &#x3D; random.nextInt(w - 1);            int y &#x3D; random.nextInt(h - 1);            int xl &#x3D; random.nextInt(6) + 1;            int yl &#x3D; random.nextInt(12) + 1;            g2.drawLine(x, y, x + xl + 40, y + yl + 20);        &#125;        &#x2F;&#x2F; 添加噪点        float yawpRate &#x3D; 0.05f;&#x2F;&#x2F; 噪声率        int area &#x3D; (int) (yawpRate * w * h);        for (int i &#x3D; 0; i &lt; area; i++) &#123;            int x &#x3D; random.nextInt(w);            int y &#x3D; random.nextInt(h);            int rgb &#x3D; getRandomIntColor();            image.setRGB(x, y, rgb);        &#125;        shear(g2, w, h, c);&#x2F;&#x2F; 使图片扭曲        g2.setColor(getRandColor(100, 160));        int fontSize &#x3D; h-4;        Font font &#x3D; new Font(&quot;Algerian&quot;, Font.ITALIC, fontSize);        g2.setFont(font);        char[] chars &#x3D; code.toCharArray();        for(int i &#x3D; 0; i &lt; verifySize; i++)&#123;            AffineTransform affine &#x3D; new AffineTransform();            affine.setToRotation(Math.PI &#x2F; 4 * rand.nextDouble() * (rand.nextBoolean() ? 1 : -1), (w &#x2F; verifySize) * i + fontSize&#x2F;2, h&#x2F;2);            g2.setTransform(affine);            g2.drawChars(chars, i, 1, ((w-10) &#x2F; verifySize) * i + 5, h&#x2F;2 + fontSize&#x2F;2 - 10);        &#125;        g2.dispose();        ImageIO.write(image, &quot;jpg&quot;, os);    &#125;    private static Color getRandColor(int fc, int bc) &#123;        if (fc &gt; 255)            fc &#x3D; 255;        if (bc &gt; 255)            bc &#x3D; 255;        int r &#x3D; fc + random.nextInt(bc - fc);        int g &#x3D; fc + random.nextInt(bc - fc);        int b &#x3D; fc + random.nextInt(bc - fc);        return new Color(r, g, b);    &#125;    private static int getRandomIntColor() &#123;        int[] rgb &#x3D; getRandomRgb();        int color &#x3D; 0;        for (int c : rgb) &#123;            color &#x3D; color &lt;&lt; 8;            color &#x3D; color | c;        &#125;        return color;    &#125;    private static int[] getRandomRgb() &#123;        int[] rgb &#x3D; new int[3];        for (int i &#x3D; 0; i &lt; 3; i++) &#123;            rgb[i] &#x3D; random.nextInt(255);        &#125;        return rgb;    &#125;    private static void shear(Graphics g, int w1, int h1, Color color) &#123;        shearX(g, w1, h1, color);        shearY(g, w1, h1, color);    &#125;    private static void shearX(Graphics g, int w1, int h1, Color color) &#123;        int period &#x3D; random.nextInt(2);        boolean borderGap &#x3D; true;        int frames &#x3D; 1;        int phase &#x3D; random.nextInt(2);        for (int i &#x3D; 0; i &lt; h1; i++) &#123;            double d &#x3D; (double) (period &gt;&gt; 1)                    * Math.sin((double) i &#x2F; (double) period                    + (6.2831853071795862D * (double) phase)                    &#x2F; (double) frames);            g.copyArea(0, i, w1, 1, (int) d, 0);            if (borderGap) &#123;                g.setColor(color);                g.drawLine((int) d, i, 0, i);                g.drawLine((int) d + w1, i, w1, i);            &#125;        &#125;    &#125;    private static void shearY(Graphics g, int w1, int h1, Color color) &#123;        int period &#x3D; random.nextInt(40) + 10; &#x2F;&#x2F; 50;        boolean borderGap &#x3D; true;        int frames &#x3D; 20;        int phase &#x3D; 7;        for (int i &#x3D; 0; i &lt; w1; i++) &#123;            double d &#x3D; (double) (period &gt;&gt; 1)                    * Math.sin((double) i &#x2F; (double) period                    + (6.2831853071795862D * (double) phase)                    &#x2F; (double) frames);            g.copyArea(i, 0, 1, h1, 0, (int) d);            if (borderGap) &#123;                g.setColor(color);                g.drawLine(i, (int) d, i, 0);                g.drawLine(i, (int) d + h1, i, h1);            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-在登陆界面加上验证码的位置"><a href="#2-在登陆界面加上验证码的位置" class="headerlink" title="2.在登陆界面加上验证码的位置"></a>2.在登陆界面加上验证码的位置</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;input name&#x3D;&quot;code&quot; type&#x3D;&quot;text&quot;   id&#x3D;&quot;Codes_text&quot;&#x2F;&gt;   &lt;i&gt;验证码&lt;&#x2F;i&gt;   &lt;div class&#x3D;&quot;Codes_region&quot;&gt;   &lt;img th:src&#x3D;&quot;@&#123;&#x2F;getImage&#125;&quot; alt&#x3D;&quot;&quot;&gt;   &lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-controller层"><a href="#3-controller层" class="headerlink" title="3.controller层"></a>3.controller层</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(&quot;getImage&quot;)    public void getImage(HttpSession session, HttpServletResponse response) throws IOException &#123;        &#x2F;&#x2F;生成验证码        String code &#x3D; VerifyCodeUtils.generateVerifyCode(4);        &#x2F;&#x2F;验证码放入session        session.setAttribute(&quot;code&quot;,code);        &#x2F;&#x2F;验证码存入图片        ServletOutputStream os &#x3D; response.getOutputStream();        response.setContentType(&quot;image&#x2F;png&quot;);        VerifyCodeUtils.outputImage(80,38,os,code);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-放行验证码"><a href="#4-放行验证码" class="headerlink" title="4.放行验证码"></a>4.放行验证码</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">map.put(&quot;&#x2F;getImage&quot;,&quot;anon&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-效果图"><a href="#5-效果图" class="headerlink" title="5.效果图"></a>5.效果图</h4><p><img src="/2021/07/15/shiro-test/1626331930875.png"></p><h4 id="6-修改认证流程（先判断验证码）"><a href="#6-修改认证流程（先判断验证码）" class="headerlink" title="6.修改认证流程（先判断验证码）"></a>6.修改认证流程（先判断验证码）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(&quot;&#x2F;login&quot;)   public String login(String username, String password,String code,HttpSession session) &#123;       &#x2F;&#x2F;比较验证码       String codes &#x3D; (String) session.getAttribute(&quot;code&quot;);       try&#123;       if (codes.equalsIgnoreCase(code))&#123;           &#x2F;&#x2F;获取主体对象           Subject subject &#x3D; SecurityUtils.getSubject();           subject.login(new UsernamePasswordToken(username, password));           return &quot;redirect:&#x2F;hello&quot;;       &#125;else&#123;           throw new RuntimeException(&quot;验证码错误!&quot;);       &#125;       &#125; catch (UnknownAccountException e) &#123;           e.printStackTrace();           System.out.println(&quot;用户名错误!&quot;);       &#125; catch (IncorrectCredentialsException e) &#123;           e.printStackTrace();           System.out.println(&quot;密码错误!&quot;);       &#125;catch (Exception e)&#123;           e.printStackTrace();           System.out.println(e.getMessage());       &#125;       return &quot;redirect:&#x2F;&quot;;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="29-使用shiro默认的缓存EhCache"><a href="#29-使用shiro默认的缓存EhCache" class="headerlink" title="29.使用shiro默认的缓存EhCache"></a>29.使用shiro默认的缓存EhCache</h3><h5 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--引入shiro和ehcache--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-ehcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-开启缓存"><a href="#2-开启缓存" class="headerlink" title="2.开启缓存"></a>2.开启缓存</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;3.创建自定义realm    @Bean    public Realm getRealm()&#123;        CustomerRealm customerRealm &#x3D; new CustomerRealm();        &#x2F;&#x2F;修改凭证校验匹配器        HashedCredentialsMatcher credentialsMatcher &#x3D; new HashedCredentialsMatcher();        &#x2F;&#x2F;设置加密算法为md5        credentialsMatcher.setHashAlgorithmName(&quot;MD5&quot;);        &#x2F;&#x2F;设置散列次数        credentialsMatcher.setHashIterations(1024);        customerRealm.setCredentialsMatcher(credentialsMatcher);        &#x2F;&#x2F;开启缓存管理器        customerRealm.setCachingEnabled(true);   &#x2F;&#x2F;开启全局缓存        customerRealm.setAuthenticationCachingEnabled(true);  &#x2F;&#x2F;开启认证缓存        customerRealm.setAuthenticationCacheName(&quot;AuthenticationCache&quot;); &#x2F;&#x2F;设置名字        customerRealm.setAuthorizationCachingEnabled(true);   &#x2F;&#x2F;开启授权缓存        customerRealm.setAuthorizationCacheName(&quot;AuthorizationCache&quot;);  &#x2F;&#x2F;设置名字        customerRealm.setCacheManager(new EhCacheManager());        return customerRealm;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-启动刷新页面进行测试"><a href="#3-启动刷新页面进行测试" class="headerlink" title="3.启动刷新页面进行测试"></a>3.启动刷新页面进行测试</h5><ul><li>注意:如果控制台没有任何sql展示说明缓存已经开启</li></ul><h3 id="30-shiro使用redis作为缓存实现"><a href="#30-shiro使用redis作为缓存实现" class="headerlink" title="30.shiro使用redis作为缓存实现"></a>30.shiro使用redis作为缓存实现</h3><h4 id="1-引入redis依赖"><a href="#1-引入redis依赖" class="headerlink" title="1.引入redis依赖"></a>1.引入redis依赖</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--redis整合springboot--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-配置redis连接"><a href="#2-配置redis连接" class="headerlink" title="2.配置redis连接"></a>2.配置redis连接</h4><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">#端口号spring.redis.port&#x3D;6379#主机地址spring.redis.host&#x3D;localhost#用的是0号库spring.redis.database&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/15/shiro-test/400f9d80d4a3173b8b73b9db5de700f0.png"></p><h4 id="3-启动redis服务"><a href="#3-启动redis服务" class="headerlink" title="3.启动redis服务"></a>3.启动redis服务</h4><p><img src="/2021/07/15/shiro-test/dc1f9b0577d2170b95f6febaf078c5e6.png"></p><h4 id="4-开发RedisCacheManager"><a href="#4-开发RedisCacheManager" class="headerlink" title="4.开发RedisCacheManager"></a>4.开发RedisCacheManager</h4><p><strong>自定义shiro缓存管理器</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">import org.apache.shiro.cache.Cache;import org.apache.shiro.cache.CacheException;import org.apache.shiro.cache.CacheManager;&#x2F;&#x2F;自定义shiro缓存管理器public class RedisCacheManager implements CacheManager &#123;    &#x2F;&#x2F;参数1:认证或者是授权缓存的统一名称    @Override    public &lt;K, V&gt; Cache&lt;K, V&gt; getCache(String cacheName) throws CacheException &#123;        System.out.println(cacheName);        return new RedisCache&lt;K,V&gt;(cacheName);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-开RedisCache实现"><a href="#5-开RedisCache实现" class="headerlink" title="5.开RedisCache实现"></a>5.开RedisCache实现</h4><p><strong>自定义redis缓存的实现</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;自定义redis缓存的实现public class RedisCache&lt;k,v&gt; implements Cache&lt;k,v&gt; &#123;    private String cacheName;    public RedisCache() &#123;    &#125;    public RedisCache(String cacheName) &#123;        this.cacheName &#x3D; cacheName;    &#125;    @Override    public v get(k k) throws CacheException &#123;        System.out.println(&quot;get key:&quot;+k);        return (v) getRedisTemplate().opsForHash().get(this.cacheName,k.toString());    &#125;    @Override    public v put(k k, v v) throws CacheException &#123;        System.out.println(&quot;put key: &quot;+k);        System.out.println(&quot;put value:&quot;+v);        getRedisTemplate().opsForHash().put(this.cacheName,k.toString(),v);        return null;    &#125;    &#x2F;&#x2F;退出登录时会清楚缓存，如果没有退出，下次登陆会报错    @Override    public v remove(k k) throws CacheException &#123;        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;remove&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);        return (v) getRedisTemplate().opsForHash().delete(this.cacheName,k.toString());    &#125;    &#x2F;&#x2F;缓存刷新的时候调用    @Override    public void clear() throws CacheException &#123;        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;clear&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);        getRedisTemplate().delete(this.cacheName);    &#125;    @Override    public int size() &#123;        return getRedisTemplate().opsForHash().size(this.cacheName).intValue();    &#125;    @Override    public Set&lt;k&gt; keys() &#123;        return getRedisTemplate().opsForHash().keys(this.cacheName);    &#125;    @Override    public Collection&lt;v&gt; values() &#123;        return getRedisTemplate().opsForHash().values(this.cacheName);    &#125;    private RedisTemplate getRedisTemplate()&#123;        RedisTemplate redisTemplate &#x3D; (RedisTemplate) ApplicationContextUtils.getBean(&quot;redisTemplate&quot;);        redisTemplate.setKeySerializer(new StringRedisSerializer());        redisTemplate.setHashKeySerializer(new StringRedisSerializer());        return redisTemplate;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-开启redis缓存管理器"><a href="#6-开启redis缓存管理器" class="headerlink" title="6.开启redis缓存管理器"></a>6.开启redis缓存管理器</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;开启return customerRealm缓存管理器     customerRealm.setCachingEnabled(true);   &#x2F;&#x2F;开启全局缓存     customerRealm.setCacheManager(new RedisCacheManager());     customerRealm.setAuthenticationCachingEnabled(true);  &#x2F;&#x2F;开启认证缓存     customerRealm.setAuthenticationCacheName(&quot;AuthenticationCache&quot;); &#x2F;&#x2F;设置名字     customerRealm.setAuthorizationCachingEnabled(true);   &#x2F;&#x2F;开启授权缓存     customerRealm.setAuthorizationCacheName(&quot;AuthorizationCache&quot;);  &#x2F;&#x2F;设置名字     return customerRealm;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-测试"><a href="#7-测试" class="headerlink" title="7.测试"></a>7.测试</h4><p>==登陆成功后==</p><p><img src="/2021/07/15/shiro-test/1626334520343.png"></p><h2 id="六、完结"><a href="#六、完结" class="headerlink" title="六、完结"></a>六、完结</h2>]]></content>
      
      
      <categories>
          
          <category> 练习测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shiro练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shiro</title>
      <link href="/2021/07/15/shiro/"/>
      <url>/2021/07/15/shiro/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="shiro"><a href="#shiro" class="headerlink" title="shiro"></a>shiro</h1><hr><h2 id="一、权限的管理"><a href="#一、权限的管理" class="headerlink" title="一、权限的管理"></a>一、权限的管理</h2><h3 id="1-1-什么是权限管理"><a href="#1-1-什么是权限管理" class="headerlink" title="1.1 什么是权限管理"></a>1.1 什么是权限管理</h3><p>​        基本上涉及到用户参与的系统都要进行权限管理，权限管理属于系统安全的范畴，权限管理实现对用户访问系统的控制，按照安全规则或者安全策略控制用户可以访问而且只能访问自己被授权的资源。</p><p>​        权限管理包括用户身份认证和授权两部分，简称认证授权。对于需要访问控制的资源用户首先经过身份认证，认证通过后用户具有该资源的访问权限方可访问。</p><h3 id="1-2-什么是身份认证"><a href="#1-2-什么是身份认证" class="headerlink" title="1.2 什么是身份认证"></a>1.2 什么是身份认证</h3><p>​        身份认证，就是判断一个用户是否为合法用户的处理过程。最常用的简单身份认证方式是系统通过核对用户输入的用户名和口令，看其是否与系统中存储的该用户的用户名和口令一致，来判断用户身份是否正确。对于采用指纹等系统，则出示指纹；对于硬件Key等刷卡系统，则需要刷卡。</p><h3 id="1-3-什么是授权"><a href="#1-3-什么是授权" class="headerlink" title="1.3 什么是授权"></a>1.3 什么是授权</h3><p>​        授权，即访问控制，控制谁能访问哪些资源。主体进行身份认证后需要分配权限方可访问系统的资源，对于某些资源没有权限是无法访问的</p><h2 id="二、什么是shiro"><a href="#二、什么是shiro" class="headerlink" title="二、什么是shiro"></a>二、什么是shiro</h2><blockquote><p>​        Apache Shiro™ is a powerful and easy-to-use Java security framework that performs authentication, authorization, cryptography, and session management. With Shiro’s easy-to-understand API, you can quickly and easily secure any application – from the smallest mobile applications to the largest web and enterprise applications.</p><p>​        Shiro 是一个功能强大且易于使用的Java安全框架，它执行身份验证、授权、加密和会话管理。使用Shiro易于理解的API，您可以快速轻松地保护任何应用程序—从最小的移动应用程序到最大的web和企业应用程序。</p></blockquote><p>​        <code>Shiro是apache旗下一个开源框架，它将软件系统的安全认证相关的功能抽取出来，实现用户身份认证，权限授权、加密、会话管理等功能，组成了一个通用的安全认证框架。</code></p><blockquote><p>shiro参考手册：<a href="https://shiro.apache.org/reference.html">https://shiro.apache.org/reference.html</a></p></blockquote><h2 id="三、shiro的核心架构"><a href="#三、shiro的核心架构" class="headerlink" title="三、shiro的核心架构"></a>三、shiro的核心架构</h2><p><img src="/2021/07/15/shiro/1625735818678.png"></p><h3 id="3-1-Subject"><a href="#3-1-Subject" class="headerlink" title="3.1 Subject"></a>3.1 Subject</h3><p>​        <code>Subject即主体</code>，外部应用与subject进行交互，subject记录了当前操作用户，将用户的概念理解为当前操作的主体，可能是一个通过浏览器请求的用户，也可能是一个运行的程序。</p><p>​        Subject在shiro中是一个接口，接口中定义了很多认证授相关的方法，外部程序通过subject进行认证授，而subject是通过SecurityManager安全管理器进行认证授权</p><h3 id="3-2-SecurityManager"><a href="#3-2-SecurityManager" class="headerlink" title="3.2 SecurityManager"></a>3.2 SecurityManager</h3><p>​        <code>SecurityManager即安全管理器</code>，对全部的subject进行安全管理，它是shiro的核心，负责对所有的subject进行安全管理。通过SecurityManager可以完成subject的认证、授权等，实质上SecurityManager是通过Authenticator进行认证，通过Authorizer进行授权，通过SessionManager进行会话管理等。</p><p><code>SecurityManager是一个接口，继承了Authenticator, Authorizer, SessionManager这三个接口。</code></p><h3 id="3-3-Authenticator"><a href="#3-3-Authenticator" class="headerlink" title="3.3 Authenticator"></a>3.3 Authenticator</h3><p>​        <code>Authenticator即认证器</code>，对用户身份进行认证，Authenticator是一个接口，shiro提供ModularRealmAuthenticator实现类，通过ModularRealmAuthenticator基本上可以满足大多数需求，也可以自定义认证器。</p><h3 id="3-4-Authorizer"><a href="#3-4-Authorizer" class="headerlink" title="3.4 Authorizer"></a>3.4 Authorizer</h3><p>​        <code>        Authorizer即授权器</code>，用户通过认证器认证通过，在访问功能时需要通过授权器判断用户是否有此功能的操作权限。</p><h3 id="3-5-Realm"><a href="#3-5-Realm" class="headerlink" title="3.5 Realm"></a>3.5 Realm</h3><p>​        <code>        Realm即领域</code>，相当于datasource数据源，securityManager进行安全认证需要通过Realm获取用户权限数据，比如：如果用户身份数据在数据库那么realm就需要从数据库获取用户身份信息。</p><p> 注意：不要把realm理解成只是从数据源取数据，在realm中还有认证授权校验的相关的代码。</p><h3 id="3-6-SessionManager"><a href="#3-6-SessionManager" class="headerlink" title="3.6 SessionManager"></a>3.6 SessionManager</h3><p>​        <code>        sessionManager即会话管理</code>，shiro框架定义了一套会话管理，它不依赖web容器的session，所以shiro可以使用在非web应用上，也可以将分布式应用的会话集中在一点管理，此特性可使它实现单点登录。</p><h3 id="3-7-SessionDAO"><a href="#3-7-SessionDAO" class="headerlink" title="3.7 SessionDAO"></a>3.7 SessionDAO</h3><p><code>        SessionDAO即会话dao</code>，是对session会话操作的一套接口，比如要将session存储到数据库，可以通过jdbc将会话存储到数据库。</p><h3 id="3-8-CacheManager"><a href="#3-8-CacheManager" class="headerlink" title="3.8 CacheManager"></a>3.8 CacheManager</h3><p>​        <code>        CacheManager即缓存管理</code>，将用户权限数据存储在缓存，这样可以提高性能。</p><h3 id="3-9-Cryptography"><a href="#3-9-Cryptography" class="headerlink" title="3.9 Cryptography"></a>3.9 Cryptography</h3><p>​        <code>        Cryptography即密码管理</code>，shiro提供了一套加密/解密的组件，方便开发。比如提供常用的散列、加/解密等功能。</p><h2 id="四、shiro中的认证"><a href="#四、shiro中的认证" class="headerlink" title="四、shiro中的认证"></a>四、shiro中的认证</h2><h3 id="4-1-认证"><a href="#4-1-认证" class="headerlink" title="4.1 认证"></a>4.1 认证</h3><p>身份认证，就是判断一个用户是否为合法用户的处理过程。最常用的简单身份认证方式是系统通过核对用户输入的用户名和口令，看其是否与系统中存储的该用户的用户名和口令一致，来判断用户身份是否正确。</p><h3 id="4-2-shiro中认证的关键对象"><a href="#4-2-shiro中认证的关键对象" class="headerlink" title="4.2 shiro中认证的关键对象"></a>4.2 shiro中认证的关键对象</h3><ul><li><strong>Subject：主体</strong></li></ul><p>访问系统的用户，主体可以是用户、程序等，进行认证的都称为主体；</p><ul><li><strong>Principal：身份信息</strong></li></ul><p>是主体（subject）进行身份认证的标识，标识必须具有<code>唯一性</code>，如用户名、手机号、邮箱地址等，一个主体可以有多个身份，但是必须有一个主身份（Primary Principal）。</p><ul><li><strong>credential：凭证信息</strong></li></ul><p>是只有主体自己知道的安全信息，如密码、证书等。</p><h3 id="4-3-认证流程"><a href="#4-3-认证流程" class="headerlink" title="4.3 认证流程"></a>4.3 认证流程</h3><p><img src="/2021/07/15/shiro/c525acf54f0ed950d6da0b848fba8f7f.png"></p><h3 id="4-4-认证的开发"><a href="#4-4-认证的开发" class="headerlink" title="4.4 认证的开发"></a>4.4 认证的开发</h3><h5 id="1-创建项目并引入依赖"><a href="#1-创建项目并引入依赖" class="headerlink" title="1. 创建项目并引入依赖"></a>1. 创建项目并引入依赖</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-引入shiro配置文件"><a href="#2-引入shiro配置文件" class="headerlink" title="2. 引入shiro配置文件"></a>2. 引入shiro配置文件</h5><p>配置文件：名称随意，以 .ini 结尾，放在 resources 目录下</p><p><strong>注意</strong>：在实际的项目开发中并不会使用这种方式，这种方法可以用来初学时练手</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini">[users]zhangsan&#x3D;123456lisi&#x3D;456789<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/15/shiro/ba195d09272780fdee5b1b285c49dbce.png"></p><h5 id="3-开发认证代码"><a href="#3-开发认证代码" class="headerlink" title="3.开发认证代码"></a>3.开发认证代码</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.lut.test;import org.apache.shiro.SecurityUtils;import org.apache.shiro.authc.IncorrectCredentialsException;import org.apache.shiro.authc.UnknownAccountException;import org.apache.shiro.authc.UsernamePasswordToken;import org.apache.shiro.mgt.DefaultSecurityManager;import org.apache.shiro.realm.text.IniRealm;import org.apache.shiro.subject.Subject;public class test01 &#123;    public static void main(String[] args) &#123;        &#x2F;&#x2F;1.创建安全管理器对象        DefaultSecurityManager securityManager &#x3D; new DefaultSecurityManager();        &#x2F;&#x2F;2.给安全管理器设置realm        securityManager.setRealm(new IniRealm(&quot;classpath:shiro.ini&quot;));                &#x2F;&#x2F;可能没有set方法，所以直接用有参构造         SecurityManager securityManager &#x3D; new DefaultSecurityManager(new IniRealm(&quot;classpath:shiro.ini&quot;) &#123;&#125;);                    &#x2F;&#x2F;3.SecurityUtils给全局安全工具类设置安全管理器        SecurityUtils.setSecurityManager(securityManager);        &#x2F;&#x2F;4.关键对象subject主体        Subject subject &#x3D; SecurityUtils.getSubject();        &#x2F;&#x2F;5.创建令牌        UsernamePasswordToken token &#x3D; new UsernamePasswordToken(&quot;zhangsan&quot;,&quot;123789&quot;);        try &#123;            System.out.println(&quot;认证状态&quot;+subject.isAuthenticated());&#x2F;&#x2F;fasle            &#x2F;&#x2F;用户认证            subject.login(token);            System.out.println(&quot;认证状态&quot;+subject.isAuthenticated());        &#125;catch (UnknownAccountException e)&#123;            e.printStackTrace();            System.out.println(&quot;认证失败，用户名不存在&quot;);        &#125;catch (IncorrectCredentialsException e)&#123;            e.printStackTrace();            System.out.println(&quot;认证失败，密码错误&quot;);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-常见的异常类型"><a href="#4-常见的异常类型" class="headerlink" title="4.常见的异常类型"></a>4.常见的异常类型</h5><pre class="line-numbers language-none"><code class="language-none">AuthenticationException 登陆时报的错，下面基本是他的子类<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>DisabledAccountException（帐号被禁用）</li><li>UnknownAccountException（用户名错误）</li><li>IncorrectCredentialsException（密码错误）</li><li>LockedAccountException（帐号被锁定）</li><li>ExcessiveAttemptsException（登录失败次数过多）</li><li>ExpiredCredentialsException（凭证过期）等</li></ul><hr><h3 id="4-5-自定义Realm"><a href="#4-5-自定义Realm" class="headerlink" title="4.5 自定义Realm"></a>4.5 自定义Realm</h3><p>通过分析源码可得：</p><blockquote><p>认证：</p><p>1.最终执行用户名比较是 在SimpleAccountRealm类 的 doGetAuthenticationInfo 方法中完成用户名校验</p><p>2.最终密码校验是在 AuthenticatingRealm类 的 assertCredentialsMatch方法 中</p><p>总结：</p><p>AuthenticatingRealm 认证realm doGetAuthenticationInf</p><p>AuthorizingRealm 授权realm doGetAuthorizationInfo</p></blockquote><hr><p>自定义Realm的作用：放弃使用.ini文件，使用数据库查询</p><p>上边的程序使用的是Shiro自带的IniRealm，IniRealm从ini配置文件中读取用户的信息，大部分情况下需要从系统的数据库中读取用户信息，所以需要自定义realm。</p><h5 id="1-shiro提供的Realm"><a href="#1-shiro提供的Realm" class="headerlink" title="1.shiro提供的Realm"></a>1.shiro提供的Realm</h5><p><img src="/2021/07/15/shiro/aec0096cd637ac6df43f8212e3ff95b3.png"></p><h5 id="2-根据认证源码认证使用的是SimpleAccountRealm"><a href="#2-根据认证源码认证使用的是SimpleAccountRealm" class="headerlink" title="2.根据认证源码认证使用的是SimpleAccountRealm"></a>2.根据认证源码认证使用的是SimpleAccountRealm</h5><p><img src="/2021/07/15/shiro/e9229269698a66b32a74812fa6ddaa7d.png"></p><p><code>SimpleAccountRealm的部分源码中有两个方法一个是 认证 一个是 授权</code>,它继承了AuthorizingRealm方法</p><p>源码部分：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class SimpleAccountRealm extends AuthorizingRealm &#123;&#x2F;&#x2F;.......省略    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123;        UsernamePasswordToken upToken &#x3D; (UsernamePasswordToken) token;        SimpleAccount account &#x3D; getUser(upToken.getUsername());        if (account !&#x3D; null) &#123;            if (account.isLocked()) &#123;                throw new LockedAccountException(&quot;Account [&quot; + account + &quot;] is locked.&quot;);            &#125;            if (account.isCredentialsExpired()) &#123;                String msg &#x3D; &quot;The credentials for account [&quot; + account + &quot;] are expired&quot;;                throw new ExpiredCredentialsException(msg);            &#125;        &#125;        return account;    &#125;    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) &#123;        String username &#x3D; getUsername(principals);        USERS_LOCK.readLock().lock();        try &#123;            return this.users.get(username);        &#125; finally &#123;            USERS_LOCK.readLock().unlock();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-自定义realm"><a href="#3-自定义realm" class="headerlink" title="3.自定义realm"></a>3.自定义realm</h5><blockquote><p>为了使我们以后将认证/授权的实现变成从数据库读取数据的话，我们需要继承AuthorizingRealm方法，；来定义我们自己的realm方法。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.lut.realm;import org.apache.shiro.authc.AuthenticationException;import org.apache.shiro.authc.AuthenticationInfo;import org.apache.shiro.authc.AuthenticationToken;import org.apache.shiro.authc.SimpleAuthenticationInfo;import org.apache.shiro.authz.AuthorizationInfo;import org.apache.shiro.realm.AuthorizingRealm;import org.apache.shiro.subject.PrincipalCollection;&#x2F;** * 自定义Realm *&#x2F;public class CustomerRealm extends AuthorizingRealm &#123;    &#x2F;&#x2F;授权    @Override    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) &#123;        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);        return null;    &#125;    &#x2F;&#x2F;认证    @Override    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123;        &#x2F;&#x2F;在token中获取 用户名        String principal &#x3D; (String) token.getPrincipal();        System.out.println(principal);        &#x2F;&#x2F;实际开发中应当 根据身份信息使用jdbc mybatis查询相关数据库        &#x2F;&#x2F;在这里只做简单的演示        &#x2F;&#x2F;假设username,password是从数据库获得的信息        String username&#x3D;&quot;zhangsan&quot;;        String password&#x3D;&quot;123456&quot;;        if(username.equals(principal))&#123;            &#x2F;&#x2F;参数1:返回 数据库中正确的用户名 &#x3D; 输入的用户名，if已经进来了            &#x2F;&#x2F;参数2:返回数据库中正确密码            &#x2F;&#x2F;参数3:提供当前realm的名字 this.getName();            SimpleAuthenticationInfo simpleAuthenticationInfo &#x3D; new SimpleAuthenticationInfo(principal,password,this.getName());            &#x2F;&#x2F;校验完用户名，把用户名带正确密码返回给他的父类自己去判断密码            return simpleAuthenticationInfo;        &#125;        return null;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-使用自定义Realm认证"><a href="#4-使用自定义Realm认证" class="headerlink" title="4.使用自定义Realm认证"></a>4.使用自定义Realm认证</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.lut.test;import com.lut.realm.CustomerRealm;import org.apache.shiro.SecurityUtils;import org.apache.shiro.authc.IncorrectCredentialsException;import org.apache.shiro.authc.UnknownAccountException;import org.apache.shiro.authc.UsernamePasswordToken;import org.apache.shiro.mgt.DefaultSecurityManager;import org.apache.shiro.subject.Subject;&#x2F;** * 测试自定义的Realm *&#x2F;public class TestAuthenticatorCusttomerRealm &#123;    public static void main(String[] args) &#123;        &#x2F;&#x2F;1.创建安全管理对象 securityManager        DefaultSecurityManager defaultSecurityManager &#x3D; new DefaultSecurityManager();        &#x2F;&#x2F;2.给安全管理器设置realm（设置为自定义realm获取认证数据）        defaultSecurityManager.setRealm(new CustomerRealm());        &#x2F;&#x2F;IniRealm realm &#x3D; new IniRealm(&quot;classpath:shiro.ini&quot;);        &#x2F;&#x2F;3.给安装工具类中设置默认安全管理器        SecurityUtils.setSecurityManager(defaultSecurityManager);        &#x2F;&#x2F;4.获取主体对象subject        Subject subject &#x3D; SecurityUtils.getSubject();        &#x2F;&#x2F;5.创建token令牌        UsernamePasswordToken token &#x3D; new UsernamePasswordToken(&quot;zhangsan&quot;, &quot;123&quot;);        try &#123;            subject.login(token);&#x2F;&#x2F;用户登录            System.out.println(&quot;登录成功~~&quot;);        &#125; catch (UnknownAccountException e) &#123;            e.printStackTrace();            System.out.println(&quot;用户名错误!!&quot;);        &#125;catch (IncorrectCredentialsException e)&#123;            e.printStackTrace();            System.out.println(&quot;密码错误!!!&quot;);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-使用MD5-Salt-Hash"><a href="#4-6-使用MD5-Salt-Hash" class="headerlink" title="4.6 使用MD5+Salt+Hash"></a>4.6 使用MD5+Salt+Hash</h3><p><strong>补充：MD5算法</strong></p><p>作用：一般用来加密或者签名（校验和）</p><p>特点：MD5算法不可逆，如果内容相同无论执行多少次md5生成结果始终是一致</p><p>网络上提供的MD5在线解密一般是用穷举的方法</p><p>生成结果：始终是一个16进制32位长度字符串</p><p>面试：如何比较a.txt与b.txt两个文件内容是否一致</p><p><img src="/2021/07/15/shiro/1625914918223.png"></p><p><strong>MD5的基本使用：</strong></p><blockquote><p>用set方法给Md5Hash赋值，不能得到加密</p><p>必须用构造方法才行</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class TestShiroMD5 &#123;    public static void main(String[] args) &#123;        &#x2F;&#x2F;创建一个md5的算法        Md5Hash md5Hash &#x3D;new Md5Hash();        &#x2F;&#x2F;用set方法赋值        md5Hash.setBytes(&quot;123&quot;.getBytes());        &#x2F;&#x2F;用toHex方法得到加密的结果        String s &#x3D; md5Hash.toHex();        System.out.println(s);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">313233<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/15/shiro/1625917866664.png"></p><blockquote><p>用构造方法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.lut.test;import org.apache.shiro.crypto.hash.Md5Hash;public class TestShiroMD5 &#123;        public static void main(String[] args) &#123;        &#x2F;&#x2F;使用md5        Md5Hash md5Hash &#x3D; new Md5Hash(&quot;123&quot;);        System.out.println(md5Hash.toHex());        &#x2F;&#x2F;使用MD5 + salt处理        Md5Hash md5Hash1 &#x3D; new Md5Hash(&quot;123&quot;, &quot;X0*7ps&quot;);        System.out.println(md5Hash1.toHex());        &#x2F;&#x2F;使用md5 + salt + hash散列（参数代表要散列多少次，一般是 1024或2048）        Md5Hash md5Hash2 &#x3D; new Md5Hash(&quot;123&quot;, &quot;X0*7ps&quot;, 1024);        System.out.println(md5Hash2.toHex());    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">202cb962ac59075b964b07152d234b708a83592a02263bfe6752b2b5b03a4799e4f9bf3e0c58f045e62c23c533fcf633<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>实际应用：将 盐和散列 后的值存在数据库中，自动realm从数据库取出盐和加密后的值由shiro完成密码校验。</p></blockquote><h5 id="1-自定义md5-salt的realm"><a href="#1-自定义md5-salt的realm" class="headerlink" title="1.自定义md5+salt的realm"></a>1.自定义md5+salt的realm</h5><blockquote><p>从数据库取出该用户注册时的盐的字符</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.lut.realm;import org.apache.shiro.authc.AuthenticationException;import org.apache.shiro.authc.AuthenticationInfo;import org.apache.shiro.authc.AuthenticationToken;import org.apache.shiro.authc.SimpleAuthenticationInfo;import org.apache.shiro.authz.AuthorizationInfo;import org.apache.shiro.authz.SimpleAuthorizationInfo;import org.apache.shiro.realm.AuthorizingRealm;import org.apache.shiro.subject.PrincipalCollection;import org.apache.shiro.util.ByteSource;&#x2F;** * 使用自定义realm 加入md5 + salt +hash *&#x2F;public class CustomerMd5Realm extends AuthorizingRealm &#123;    &#x2F;&#x2F;授权    @Override    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) &#123;        return null;    &#125;    @Override    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123;        &#x2F;&#x2F;获取 token中的 用户名        String principal &#x3D; (String) token.getPrincipal();        &#x2F;&#x2F;假设这是从数据库查询到的信息        String username&#x3D;&quot;zhangsan&quot;;        String password&#x3D;&quot;7268f6d32ec8d6f4c305ae92395b00e8&quot;;&#x2F;&#x2F;加密后        &#x2F;&#x2F;由于对密码进行校核时使用的时equals方法，因此我们要在比较前将用户输入的密码        &#x2F;&#x2F;也进行md5+salt处理，然后传回去        &#x2F;&#x2F;根据用户名查询数据库        if (username.equals(principal)) &#123;            &#x2F;&#x2F;参数1:数据库用户名            &#x2F;&#x2F;参数2:数据库md5+salt之后的密码            &#x2F;&#x2F;参数3:注册时的随机盐            &#x2F;&#x2F;参数4:realm的名字            return new SimpleAuthenticationInfo(principal,                    password,                    ByteSource.Util.bytes(&quot;@#$*&amp;QU7O0!&quot;),                    this.getName());        &#125;        return null;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-使用md5-salt-认证"><a href="#2-使用md5-salt-认证" class="headerlink" title="2.使用md5+salt 认证"></a>2.使用md5+salt 认证</h5><blockquote><p>认证时设置realm使用的加密算法和散列次数</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.lut.test;import com.lut.realm.CustomerMd5Realm;import org.apache.shiro.SecurityUtils;import org.apache.shiro.authc.IncorrectCredentialsException;import org.apache.shiro.authc.UnknownAccountException;import org.apache.shiro.authc.UsernamePasswordToken;import org.apache.shiro.authc.credential.HashedCredentialsMatcher;import org.apache.shiro.mgt.DefaultSecurityManager;import org.apache.shiro.subject.Subject;import java.util.Arrays;public class TestCustomerMd5RealmAuthenicator &#123;    public static void main(String[] args) &#123;        &#x2F;&#x2F;1.创建安全管理器        DefaultSecurityManager defaultSecurityManager &#x3D; new DefaultSecurityManager();        &#x2F;&#x2F;2.注入realm        CustomerMd5Realm realm &#x3D; new CustomerMd5Realm();        &#x2F;&#x2F;3.设置realm使用hash凭证匹配器        HashedCredentialsMatcher credentialsMatcher &#x3D; new HashedCredentialsMatcher();        &#x2F;&#x2F;声明：使用的算法        credentialsMatcher.setHashAlgorithmName(&quot;md5&quot;);        &#x2F;&#x2F;声明：散列次数        credentialsMatcher.setHashIterations(1024);        realm.setCredentialsMatcher(credentialsMatcher);        defaultSecurityManager.setRealm(realm);        &#x2F;&#x2F;4.将安全管理器注入安全工具        SecurityUtils.setSecurityManager(defaultSecurityManager);        &#x2F;&#x2F;5.通过安全工具类获取subject        Subject subject &#x3D; SecurityUtils.getSubject();        &#x2F;&#x2F;6.认证        UsernamePasswordToken token &#x3D; new UsernamePasswordToken(&quot;zhangsan&quot;, &quot;123&quot;);        try &#123;            subject.login(token);            System.out.println(&quot;登录成功&quot;);        &#125; catch (UnknownAccountException e) &#123;            e.printStackTrace();            System.out.println(&quot;用户名错误&quot;);        &#125;catch (IncorrectCredentialsException e)&#123;            e.printStackTrace();            System.out.println(&quot;密码错误&quot;);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="五、shiro中的授权"><a href="#五、shiro中的授权" class="headerlink" title="五、shiro中的授权"></a>五、shiro中的授权</h2><h3 id="5-1-授权"><a href="#5-1-授权" class="headerlink" title="5.1 授权"></a>5.1 授权</h3><p>授权，即访问控制，控制谁能访问哪些资源。主体进行身份认证后需要分配权限方可访问系统的资源，对于某些资源没有权限是无法访问的。</p><h3 id="5-2-关键对象"><a href="#5-2-关键对象" class="headerlink" title="5.2 关键对象"></a>5.2 关键对象</h3><p><strong>授权可简单理解为who对what(which)进行How操作：</strong></p><p><code>Who，即主体（Subject）</code>，主体需要访问系统中的资源。</p><p><code>What，即资源（Resource)</code>，如系统菜单、页面、按钮、类方法、系统商品信息等。资源包括<code>资源类型</code>和<code>资源实例</code>，比如<code>商品信息为资源类型</code>，类型为t01的商品为<code>资源实例</code>，编号为001的商品信息也属于资源实例。</p><p><code>How，权限/许可（Permission)</code>，规定了主体对资源的操作许可，权限离开资源没有意义，如用户查询权限、用户添加权限、某个类方法的调用权限、编号为001用户的修改权限等，通过权限可知主体对哪些资源都有哪些操作许可。</p><h3 id="5-3-授权流程"><a href="#5-3-授权流程" class="headerlink" title="5.3 授权流程"></a>5.3 授权流程</h3><p><img src="/2021/07/15/shiro/2776d1da95d468069505ec23d87fe23e.png"></p><h3 id="5-4-授权方式"><a href="#5-4-授权方式" class="headerlink" title="5.4 授权方式"></a>5.4 授权方式</h3><ul><li><p><strong>基于角色的访问控制</strong></p><ul><li><p>RBAC基于角色的访问控制（Role-Based Access Control）是以角色为中心进行访问控制</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">if(subject.hasRole(&quot;admin&quot;))&#123;   &#x2F;&#x2F;操作什么资源&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>基于资源的访问控制</strong></p><ul><li><p>RBAC基于资源的访问控制（Resource-Based Access Control）是以资源为中心进行访问控制</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">if(subject.isPermission(&quot;user:update:01&quot;))&#123; &#x2F;&#x2F;资源实例  &#x2F;&#x2F;对资源01用户具有修改的权限&#125;if(subject.isPermission(&quot;user:update:*&quot;))&#123;  &#x2F;&#x2F;资源类型  &#x2F;&#x2F;对 所有的资源 用户具有更新的权限&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="5-5-权限字符串"><a href="#5-5-权限字符串" class="headerlink" title="5.5 权限字符串"></a>5.5 权限字符串</h3><p> 权限字符串的规则是：<strong>资源标识符：操作：资源实例标识符</strong>，意思是对哪个资源的哪个实例具有什么操作，“:”是资源/操作/实例的分割符，权限字符串也可以使用*通配符。</p><p>例子：</p><ul><li>用户创建权限：user:create，或user:create:*</li><li>用户修改实例001的权限：user:update:001</li><li>用户实例001的所有权限：user:*：001</li></ul><h3 id="5-6-shiro中授权编程实现方式"><a href="#5-6-shiro中授权编程实现方式" class="headerlink" title="5.6 shiro中授权编程实现方式"></a>5.6 shiro中授权编程实现方式</h3><ul><li><p><strong>编程式</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">Subject subject &#x3D; SecurityUtils.getSubject();if(subject.hasRole(“admin”)) &#123;&#x2F;&#x2F;有权限&#125; else &#123;&#x2F;&#x2F;无权限&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>注解式</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequiresRoles(&quot;admin&quot;)public void hello() &#123;&#x2F;&#x2F;有权限&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>标签式</strong></p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">JSP&#x2F;GSP 标签：在JSP&#x2F;GSP 页面通过相应的标签完成：&lt;shiro:hasRole name&#x3D;&quot;admin&quot;&gt;&lt;!— 有权限—&gt;&lt;&#x2F;shiro:hasRole&gt;注意: Thymeleaf 中使用shiro需要额外集成!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="5-7-开发授权"><a href="#5-7-开发授权" class="headerlink" title="5.7 开发授权"></a>5.7 开发授权</h3><h5 id="1-realm的实现"><a href="#1-realm的实现" class="headerlink" title="1.realm的实现"></a>1.realm的实现</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.lut.realm;import org.apache.shiro.authc.AuthenticationException;import org.apache.shiro.authc.AuthenticationInfo;import org.apache.shiro.authc.AuthenticationToken;import org.apache.shiro.authc.SimpleAuthenticationInfo;import org.apache.shiro.authz.AuthorizationInfo;import org.apache.shiro.authz.SimpleAuthorizationInfo;import org.apache.shiro.realm.AuthorizingRealm;import org.apache.shiro.subject.PrincipalCollection;import org.apache.shiro.util.ByteSource;&#x2F;** * 使用自定义realm 加入md5 + salt +hash * 实现授权操作 *&#x2F;public class CustomerMd5Realm extends AuthorizingRealm &#123;    &#x2F;&#x2F;授权    @Override    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) &#123;        &#x2F;&#x2F;拿到角色的初始身份信息，即用户名        String primaryPrincipal &#x3D; (String)principals.getPrimaryPrincipal();        System.out.println(&quot;身份信息: &quot;+primaryPrincipal); &#x2F;&#x2F;用户名        &#x2F;&#x2F;根据身份信息 用户名 获取当前用户的角色信息，以及权限信息        SimpleAuthorizationInfo simpleAuthorizationInfo &#x3D; new SimpleAuthorizationInfo();        &#x2F;&#x2F;假设 admin,user 是从数据库查到的 角色信息        simpleAuthorizationInfo.addRole(&quot;admin&quot;);        simpleAuthorizationInfo.addRole(&quot;user&quot;);        &#x2F;&#x2F;假设 ... 是从数据库查到的 权限信息赋值给权限对象        simpleAuthorizationInfo.addStringPermission(&quot;user:*:01&quot;);        simpleAuthorizationInfo.addStringPermission(&quot;prodect:*&quot;);&#x2F;&#x2F;第三个参数为*省略        return simpleAuthorizationInfo;    &#125;    &#x2F;&#x2F;认证    @Override    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123;        &#x2F;&#x2F;获取 token中的 用户名        String principal &#x3D; (String) token.getPrincipal();        &#x2F;&#x2F;假设这是从数据库查询到的信息        String username&#x3D;&quot;zhangsan&quot;;        String password&#x3D;&quot;7268f6d32ec8d6f4c305ae92395b00e8&quot;;&#x2F;&#x2F;加密后        &#x2F;&#x2F;根据用户名查询数据库        if (username.equals(principal)) &#123;            &#x2F;&#x2F;参数1:数据库用户名            &#x2F;&#x2F;参数2:数据库md5+salt之后的密码            &#x2F;&#x2F;参数3:注册时的随机盐            &#x2F;&#x2F;参数4:realm的名字            return new SimpleAuthenticationInfo(principal,                    password,                    ByteSource.Util.bytes(&quot;@#$*&amp;QU7O0!&quot;),                    this.getName());        &#125;        return null;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-授权"><a href="#2-授权" class="headerlink" title="2.授权"></a>2.授权</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.lut.test;import com.lut.realm.CustomerMd5Realm;import org.apache.commons.collections.ArrayStack;import org.apache.shiro.SecurityUtils;import org.apache.shiro.authc.IncorrectCredentialsException;import org.apache.shiro.authc.UnknownAccountException;import org.apache.shiro.authc.UsernamePasswordToken;import org.apache.shiro.authc.credential.HashedCredentialsMatcher;import org.apache.shiro.mgt.DefaultSecurityManager;import org.apache.shiro.subject.Subject;import java.util.Arrays;public class TestCustomerMd5RealmAuthenicator &#123;    public static void main(String[] args) &#123;        &#x2F;&#x2F;1.创建安全管理器        DefaultSecurityManager defaultSecurityManager &#x3D; new DefaultSecurityManager();        &#x2F;&#x2F;2.注入realm        CustomerMd5Realm realm &#x3D; new CustomerMd5Realm();        &#x2F;&#x2F;3.设置realm使用hash凭证匹配器        HashedCredentialsMatcher credentialsMatcher &#x3D; new HashedCredentialsMatcher();        &#x2F;&#x2F;声明：使用的算法        credentialsMatcher.setHashAlgorithmName(&quot;md5&quot;);        &#x2F;&#x2F;声明：散列次数        credentialsMatcher.setHashIterations(1024);        realm.setCredentialsMatcher(credentialsMatcher);        defaultSecurityManager.setRealm(realm);        &#x2F;&#x2F;4.将安全管理器注入安全工具        SecurityUtils.setSecurityManager(defaultSecurityManager);        &#x2F;&#x2F;5.通过安全工具类获取subject        Subject subject &#x3D; SecurityUtils.getSubject();        &#x2F;&#x2F;6.认证        UsernamePasswordToken token &#x3D; new UsernamePasswordToken(&quot;zhangsan&quot;, &quot;123&quot;);        try &#123;            subject.login(token);            System.out.println(&quot;登录成功&quot;);        &#125; catch (UnknownAccountException e) &#123;            e.printStackTrace();            System.out.println(&quot;用户名错误&quot;);        &#125;catch (IncorrectCredentialsException e)&#123;            e.printStackTrace();            System.out.println(&quot;密码错误&quot;);        &#125;        &#x2F;&#x2F;授权        if (subject.isAuthenticated())&#123;            &#x2F;&#x2F;基于角色权限控制            System.out.println(subject.hasRole(&quot;admin&quot;));            &#x2F;&#x2F;基于多角色的权限控制            &#x2F;&#x2F; 两个角色，要调用我们自定义realm的授权方法两次            System.out.println(subject.hasAllRoles(Arrays.asList(&quot;admin&quot;, &quot;user&quot;)));&#x2F;&#x2F;true            System.out.println(subject.hasAllRoles(Arrays.asList(&quot;admin&quot;, &quot;manager&quot;)));&#x2F;&#x2F;false            &#x2F;&#x2F;是否具有其中一个角色            &#x2F;&#x2F;判断是否有这三个角色，要调用我们自定义realm的授权方法三次            boolean[] booleans &#x3D; subject.hasRoles(Arrays.asList(&quot;admin&quot;, &quot;user&quot;, &quot;manager&quot;));            for (boolean aBoolean : booleans) &#123;                System.out.println(aBoolean);            &#125;            System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;这是一个分隔符&#x3D;&#x3D;&#x3D;&#x3D;&quot;);            &#x2F;&#x2F;基于权限字符串的访问控制  资源标识符：操作：资源类型            &#x2F;&#x2F;用户具有的权限 user:*:01  prodect:*            System.out.println(&quot;权限:&quot;+subject.isPermitted(&quot;user:update:01&quot;));            System.out.println(&quot;权限:&quot;+subject.isPermitted(&quot;prodect:update:02&quot;));            &#x2F;&#x2F;分别具有哪些权限            boolean[] permitted &#x3D; subject.isPermitted(&quot;user:*:01&quot;, &quot;user:update:02&quot;);            for (boolean b : permitted) &#123;                System.out.println(b);            &#125;            &#x2F;&#x2F;同时具有哪些权限            boolean permittedAll &#x3D; subject.isPermittedAll(&quot;prodect:*:01&quot;, &quot;prodect:update:03&quot;);            System.out.println(permittedAll);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六-整合SpringBoot项目实战"><a href="#六-整合SpringBoot项目实战" class="headerlink" title="六.整合SpringBoot项目实战"></a>六.整合SpringBoot项目实战</h2><h3 id="6-1-整合思路"><a href="#6-1-整合思路" class="headerlink" title="6.1 整合思路"></a>6.1 整合思路</h3><p><img src="/2021/07/15/shiro/1625983208990.png"></p><h3 id="6-2-配置环境"><a href="#6-2-配置环境" class="headerlink" title="6.2 配置环境"></a>6.2 配置环境</h3><h4 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h4><p><img src="/2021/07/15/shiro/692dccb7ef0552d109c28ec3de186286.png" alt="image-20200523100842032"></p><h4 id="2-引入依赖"><a href="#2-引入依赖" class="headerlink" title="2.引入依赖"></a>2.引入依赖</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--引入JSP解析依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat.embed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tomcat-embed-jasper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-修改视图"><a href="#3-修改视图" class="headerlink" title="3.修改视图"></a>3.修改视图</h4><p>application.properties 文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server.port&#x3D;8080server.servlet.context-path&#x3D;&#x2F;shirospring.application.name&#x3D;shirospring.mvc.view.prefix&#x3D;&#x2F;spring.mvc.view.suffix&#x3D;.jsp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-修改配置"><a href="#4-修改配置" class="headerlink" title="4.修改配置"></a>4.修改配置</h4><p>JSP 与IDEA 与SpringBoot存在一定的<strong>不兼容</strong>，修改此配置即可解决</p><p><img src="/2021/07/15/shiro/c521fe8e3781699d4ad914c010ac2f63.png"></p><blockquote><p>系统主页</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;%@page contentType&#x3D;&quot;text&#x2F;html;utf-8&quot; pageEncoding&#x3D;&quot;utf-8&quot; isELIgnored&#x3D;&quot;false&quot; %&gt;&lt;!doctype html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;meta name&#x3D;&quot;viewport&quot;          content&#x3D;&quot;width&#x3D;device-width, user-scalable&#x3D;no, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, minimum-scale&#x3D;1.0&quot;&gt;    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;    &lt;title&gt;Document&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;%--    受限资源--%&gt;&lt;h1&gt;系统主页&lt;&#x2F;h1&gt;&lt;ul&gt;    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;用户管理&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;商品管理&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;订单管理&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;物流管理&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>登陆界面</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;%@page contentType&#x3D;&quot;text&#x2F;html;utf-8&quot; pageEncoding&#x3D;&quot;utf-8&quot; isELIgnored&#x3D;&quot;false&quot; %&gt;&lt;!doctype html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;meta name&#x3D;&quot;viewport&quot;          content&#x3D;&quot;width&#x3D;device-width, user-scalable&#x3D;no, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, minimum-scale&#x3D;1.0&quot;&gt;    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;    &lt;title&gt;Document&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;%--    受限资源--%&gt;&lt;h1&gt;用户登录&lt;&#x2F;h1&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/15/shiro/20210130155519.png"></p><blockquote><p>引入shiro依赖</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;!--引入shiro整合Springboot依赖--&gt;&lt;dependency&gt;  &lt;groupId&gt;org.apache.shiro&lt;&#x2F;groupId&gt;  &lt;artifactId&gt;shiro-spring-boot-starter&lt;&#x2F;artifactId&gt;  &lt;version&gt;1.5.3&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-简单使用"><a href="#6-3-简单使用" class="headerlink" title="6.3 简单使用"></a>6.3 简单使用</h3><h4 id="1-创建配置类"><a href="#1-创建配置类" class="headerlink" title="1.创建配置类"></a>1.创建配置类</h4><p><img src="/2021/07/15/shiro/1625988412144.png"></p><p>用来整合shiro框架相关的配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.lut.config;import com.lut.shiro.realms.CustomerRealm;import org.apache.shiro.authc.credential.HashedCredentialsMatcher;import org.apache.shiro.realm.Realm;import org.apache.shiro.spring.web.ShiroFilterFactoryBean;import org.apache.shiro.web.mgt.DefaultWebSecurityManager;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import java.util.HashMap;import java.util.Map;&#x2F;** * 用来整合shiro框架相关的配置类 *&#x2F;@Configurationpublic class ShiroConfig &#123;    &#x2F;&#x2F;1.创建shiroFilter  &#x2F;&#x2F;负责拦截所有请求    @Bean    public ShiroFilterFactoryBean getShiroFilterFactoryBean(DefaultWebSecurityManager defaultWebSecurityManager)&#123;        ShiroFilterFactoryBean shiroFilterFactoryBean &#x3D; new ShiroFilterFactoryBean();        &#x2F;&#x2F;给filter设置安全管理器        shiroFilterFactoryBean.setSecurityManager(defaultWebSecurityManager);        &#x2F;&#x2F;配置系统受限资源        &#x2F;&#x2F;配置系统公共资源        Map&lt;String,String&gt; map &#x3D; new HashMap&lt;String,String&gt;();        map.put(&quot;&#x2F;index.jsp&quot;,&quot;authc&quot;);&#x2F;&#x2F;authc 请求这个资源需要认证和授权        &#x2F;&#x2F;默认认证界面路径---当认证不通过时跳转        shiroFilterFactoryBean.setLoginUrl(&quot;&#x2F;login.jsp&quot;);        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);        return shiroFilterFactoryBean;    &#125;    &#x2F;&#x2F;2.创建安全管理器    @Bean    public DefaultWebSecurityManager getDefaultWebSecurityManager(Realm realm)&#123;        DefaultWebSecurityManager defaultWebSecurityManager &#x3D; new DefaultWebSecurityManager();        &#x2F;&#x2F;给安全管理器设置        defaultWebSecurityManager.setRealm(realm);        return defaultWebSecurityManager;    &#125;    &#x2F;&#x2F;3.创建自定义realm    @Bean    public Realm getRealm()&#123;        CustomerRealm customerRealm &#x3D; new CustomerRealm();        return customerRealm;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-自定义realm"><a href="#2-自定义realm" class="headerlink" title="2.自定义realm"></a>2.自定义realm</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.lut.shiro.realms;import org.apache.shiro.authc.AuthenticationException;import org.apache.shiro.authc.AuthenticationInfo;import org.apache.shiro.authc.AuthenticationToken;import org.apache.shiro.authc.SimpleAuthenticationInfo;import org.apache.shiro.authz.AuthorizationInfo;import org.apache.shiro.authz.SimpleAuthorizationInfo;import org.apache.shiro.realm.AuthorizingRealm;import org.apache.shiro.subject.PrincipalCollection;import org.springframework.util.CollectionUtils;import org.springframework.util.ObjectUtils;import java.util.List;&#x2F;&#x2F;自定义realmpublic class CustomerRealm extends AuthorizingRealm &#123;    @Override    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) &#123;        return null;    &#125;    @Override    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123;        return null;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-JSP文件"><a href="#3-JSP文件" class="headerlink" title="3.JSP文件"></a>3.JSP文件</h4><p>index.jsp</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@page contentType&#x3D;&quot;text&#x2F;html;utf-8&quot; pageEncoding&#x3D;&quot;utf-8&quot; isELIgnored&#x3D;&quot;false&quot; %&gt;&lt;!doctype html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;meta name&#x3D;&quot;viewport&quot;          content&#x3D;&quot;width&#x3D;device-width, user-scalable&#x3D;no, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, minimum-scale&#x3D;1.0&quot;&gt;    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;    &lt;title&gt;Document&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;%--    受限资源--%&gt;    &lt;h1&gt;系统主页&lt;&#x2F;h1&gt;    &lt;ul&gt;        &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;用户管理&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;        &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;商品管理&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;        &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;订单管理&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;        &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;物流管理&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;    &lt;&#x2F;ul&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>login.jsp</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@page contentType&#x3D;&quot;text&#x2F;html;utf-8&quot; pageEncoding&#x3D;&quot;utf-8&quot; isELIgnored&#x3D;&quot;false&quot; %&gt;&lt;!doctype html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;meta name&#x3D;&quot;viewport&quot;          content&#x3D;&quot;width&#x3D;device-width, user-scalable&#x3D;no, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, minimum-scale&#x3D;1.0&quot;&gt;    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;    &lt;title&gt;Document&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;h1&gt;登录界面&lt;&#x2F;h1&gt;    &lt;form action&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;user&#x2F;login&quot; method&#x3D;&quot;post&quot;&gt;        用户名:&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; &gt; &lt;br&#x2F;&gt;        密码  : &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;password&quot;&gt; &lt;br&gt;        &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;登录&quot;&gt;    &lt;&#x2F;form&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-简单测试"><a href="#4-简单测试" class="headerlink" title="4.简单测试"></a>4.简单测试</h4><p>访问：<a href="http://localhost:8080/shiro/index.jsp">http://localhost:8080/shiro/index.jsp</a></p><p>由于没有验证成功，会跳转到登录页面</p><p><img src="/2021/07/15/shiro/d33d26165742426e7a4ecaf9c0d962eb.png"></p><p>目前项目结构：</p><p><img src="/2021/07/15/shiro/1625989491973.png"></p><h3 id="6-4-常见过滤器"><a href="#6-4-常见过滤器" class="headerlink" title="6.4 常见过滤器"></a>6.4 常见过滤器</h3><ul><li>注意: <strong>shiro提供和多个默认的过滤器，我们可以用这些过滤器来配置控制指定url的权限：</strong></li></ul><table><thead><tr><th>配置缩写</th><th>对应的过滤器</th><th>功能</th></tr></thead><tbody><tr><td><strong>anon</strong></td><td>AnonymousFilter</td><td>指定url可以匿名访问（访问时不需要认证授权）</td></tr><tr><td><strong>authc</strong></td><td>FormAuthenticationFilter</td><td>指定url需要<strong>form表单</strong>登录，默认会从请求中获取<code>username</code>、<code>password</code>,<code>rememberMe</code>等参数并尝试登录，如果登录不了就会跳转到loginUrl配置的路径。我们也可以用这个过滤器做默认的登录逻辑，但是一般都是我们自己在控制器写登录逻辑的，自己写的话出错返回的信息都可以定制嘛。</td></tr><tr><td>authcBasic</td><td>BasicHttpAuthenticationFilter</td><td>指定url需要basic登录</td></tr><tr><td>logout</td><td>LogoutFilter</td><td>登出过滤器，配置指定url就可以实现退出功能，非常方便</td></tr><tr><td>noSessionCreation</td><td>NoSessionCreationFilter</td><td>禁止创建会话</td></tr><tr><td>perms</td><td>PermissionsAuthorizationFilter</td><td>需要指定权限才能访问</td></tr><tr><td>port</td><td>PortFilter</td><td>需要指定端口才能访问</td></tr><tr><td>rest</td><td>HttpMethodPermissionFilter</td><td>将http请求方法转化成相应的动词来构造一个权限字符串，这个感觉意义不大，有兴趣自己看源码的注释</td></tr><tr><td>roles</td><td>RolesAuthorizationFilter</td><td>需要指定角色才能访问</td></tr><tr><td>ssl</td><td>SslFilter</td><td>需要https请求才能访问</td></tr><tr><td>user</td><td>UserFilter</td><td>需要已登录或“记住我”的用户才能访问</td></tr></tbody></table><h3 id="6-5-认证和退出实现"><a href="#6-5-认证和退出实现" class="headerlink" title="6.5 认证和退出实现"></a>6.5 认证和退出实现</h3><h4 id="6-5-1-登录实现"><a href="#6-5-1-登录实现" class="headerlink" title="6.5.1 登录实现"></a>6.5.1 登录实现</h4><h4 id="1-login-jsp"><a href="#1-login-jsp" class="headerlink" title="1.login.jsp"></a>1.login.jsp</h4><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@page contentType&#x3D;&quot;text&#x2F;html;utf-8&quot; pageEncoding&#x3D;&quot;utf-8&quot; isELIgnored&#x3D;&quot;false&quot; %&gt;&lt;!doctype html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;meta name&#x3D;&quot;viewport&quot;          content&#x3D;&quot;width&#x3D;device-width, user-scalable&#x3D;no, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, minimum-scale&#x3D;1.0&quot;&gt;    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;    &lt;title&gt;Document&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;h1&gt;登录界面&lt;&#x2F;h1&gt;    &lt;form action&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;user&#x2F;login&quot; method&#x3D;&quot;post&quot;&gt;        用户名:&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; &gt; &lt;br&#x2F;&gt;        密码  : &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;password&quot;&gt; &lt;br&gt;        &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;登录&quot;&gt;    &lt;&#x2F;form&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/15/shiro/b68e76ab37bf5dc6445deacdd6d41990.png"></p><h4 id="2-UserController"><a href="#2-UserController" class="headerlink" title="2.UserController"></a>2.UserController</h4><blockquote><p>此处没有创建安全管理器就使用SecurityUtils获取主题对象，是因为在web环境下，我们在config中配置了安全管理器，他就会自动给shiro的安全工具类注入安全管理器</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.lut.controller;import org.apache.shiro.SecurityUtils;import org.apache.shiro.authc.IncorrectCredentialsException;import org.apache.shiro.authc.UnknownAccountException;import org.apache.shiro.authc.UsernamePasswordToken;import org.apache.shiro.subject.Subject;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import javax.servlet.ServletOutputStream;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import java.io.IOException;@Controller@RequestMapping(&quot;user&quot;)public class UserController &#123;    &#x2F;**     * 用来处理身份认证     * @param username     * @param password     * @return     *&#x2F;    @RequestMapping(&quot;login&quot;)    public String login(String username, String password) &#123;        try &#123;            &#x2F;&#x2F;获取主体对象            Subject subject &#x3D; SecurityUtils.getSubject();            subject.login(new UsernamePasswordToken(username, password));            return &quot;redirect:&#x2F;index.jsp&quot;;        &#125; catch (UnknownAccountException e) &#123;            e.printStackTrace();            System.out.println(&quot;用户名错误!&quot;);        &#125; catch (IncorrectCredentialsException e) &#123;            e.printStackTrace();            System.out.println(&quot;密码错误!&quot;);        &#125; catch (Exception e) &#123;            e.printStackTrace();            System.out.println(e.getMessage());        &#125;        return &quot;redirect:&#x2F;login.jsp&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>在认证过程中使用subject.login进行认证</strong></li></ul><h4 id="3-自定义Realm"><a href="#3-自定义Realm" class="headerlink" title="3.自定义Realm"></a>3.自定义Realm</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.lut.shiro.realms;import org.apache.shiro.authc.AuthenticationException;import org.apache.shiro.authc.AuthenticationInfo;import org.apache.shiro.authc.AuthenticationToken;import org.apache.shiro.authc.SimpleAuthenticationInfo;import org.apache.shiro.authz.AuthorizationInfo;import org.apache.shiro.authz.SimpleAuthorizationInfo;import org.apache.shiro.realm.AuthorizingRealm;import org.apache.shiro.subject.PrincipalCollection;import org.springframework.util.CollectionUtils;import org.springframework.util.ObjectUtils;import java.util.List;&#x2F;&#x2F;自定义realmpublic class CustomerRealm extends AuthorizingRealm &#123;    @Override    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) &#123;        return null;    &#125;    @Override    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123;        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);        &#x2F;&#x2F;从传过来的token获取到的用户名        String principal &#x3D; (String) token.getPrincipal();        System.out.println(&quot;用户名&quot;+principal);        &#x2F;&#x2F;假设是从数据库获得的 用户名，密码        String password_db&#x3D;&quot;123&quot;;        String username_db&#x3D;&quot;zhangsan&quot;;        if (username_db.equals(principal))&#123;&#x2F;&#x2F;            SimpleAuthenticationInfo simpleAuthenticationInfo &#x3D;            return new SimpleAuthenticationInfo(principal,&quot;123&quot;, this.getName());        &#125;        return null;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-ShiroConfig"><a href="#4-ShiroConfig" class="headerlink" title="4.ShiroConfig"></a>4.ShiroConfig</h4><p>主要的Shiro配置类中声明：哪些是需要验证的资源，哪些是公开的资源</p><p>注意：先配置公共资源，后配置需要认证/授权的资源</p><p>此时认证功能没有md5和随机盐的认证</p><blockquote><p>map.put(“/**”,”authc”);  //出了login以外所有资源都得认证</p><p>要想将一些资源设为公共资源必须把map.put(“/user/login”,”anon”);放在map.put(“/**”,”authc”);之前</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.lut.config;import com.lut.shiro.realms.CustomerRealm;import org.apache.shiro.authc.credential.HashedCredentialsMatcher;import org.apache.shiro.realm.Realm;import org.apache.shiro.spring.web.ShiroFilterFactoryBean;import org.apache.shiro.web.mgt.DefaultWebSecurityManager;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import java.util.HashMap;import java.util.Map;&#x2F;** * 用来整合shiro框架相关的配置类 *&#x2F;@Configurationpublic class ShiroConfig &#123;    &#x2F;&#x2F;1.创建shiroFilter  &#x2F;&#x2F;负责拦截所有请求    @Bean    public ShiroFilterFactoryBean getShiroFilterFactoryBean(DefaultWebSecurityManager defaultWebSecurityManager)&#123;        ShiroFilterFactoryBean shiroFilterFactoryBean &#x3D; new ShiroFilterFactoryBean();        &#x2F;&#x2F;给filter设置安全管理器        shiroFilterFactoryBean.setSecurityManager(defaultWebSecurityManager);        &#x2F;&#x2F;配置系统受限资源        &#x2F;&#x2F;配置系统公共资源        Map&lt;String,String&gt; map &#x3D; new HashMap&lt;String,String&gt;();        map.put(&quot;&#x2F;user&#x2F;login&quot;,&quot;anon&quot;);&#x2F;&#x2F;anon 设置为公共资源  放行资源放在下面        map.put(&quot;&#x2F;user&#x2F;register&quot;,&quot;anon&quot;);&#x2F;&#x2F;anon 设置为公共资源  放行资源放在下面        map.put(&quot;&#x2F;register.jsp&quot;,&quot;anon&quot;);&#x2F;&#x2F;anon 设置为公共资源  放行资源放在下面        map.put(&quot;&#x2F;user&#x2F;getImage&quot;,&quot;anon&quot;);        map.put(&quot;&#x2F;**&quot;,&quot;authc&quot;);&#x2F;&#x2F;authc 请求这个资源需要认证和授权        &#x2F;&#x2F;默认认证界面路径---当认证不通过时跳转        shiroFilterFactoryBean.setLoginUrl(&quot;&#x2F;login.jsp&quot;);        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);        return shiroFilterFactoryBean;    &#125;    &#x2F;&#x2F;2.创建安全管理器    @Bean    public DefaultWebSecurityManager getDefaultWebSecurityManager(Realm realm)&#123;        DefaultWebSecurityManager defaultWebSecurityManager &#x3D; new DefaultWebSecurityManager();        &#x2F;&#x2F;给安全管理器设置        defaultWebSecurityManager.setRealm(realm);        return defaultWebSecurityManager;    &#125;    &#x2F;&#x2F;3.创建自定义realm    @Bean    public Realm getRealm()&#123;        CustomerRealm customerRealm &#x3D; new CustomerRealm();        return customerRealm;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-5-2-退出认证"><a href="#6-5-2-退出认证" class="headerlink" title="6.5.2 退出认证"></a>6.5.2 退出认证</h4><h4 id="1-index-jsp"><a href="#1-index-jsp" class="headerlink" title="1.index.jsp"></a>1.index.jsp</h4><p>添加登出链接</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@page contentType&#x3D;&quot;text&#x2F;html;utf-8&quot; pageEncoding&#x3D;&quot;utf-8&quot; isELIgnored&#x3D;&quot;false&quot; %&gt;&lt;!doctype html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;meta name&#x3D;&quot;viewport&quot;          content&#x3D;&quot;width&#x3D;device-width, user-scalable&#x3D;no, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, minimum-scale&#x3D;1.0&quot;&gt;    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;    &lt;title&gt;Document&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;%--受限资源--%&gt;&lt;h1&gt;系统主页&lt;&#x2F;h1&gt;&lt;a href&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;user&#x2F;logout&quot;&gt;退出登录&lt;&#x2F;a&gt;&lt;ul&gt;    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;用户管理&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;商品管理&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;订单管理&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;    &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;物流管理&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-UserController-1"><a href="#2-UserController-1" class="headerlink" title="2.UserController"></a>2.UserController</h4><blockquote><p>subject.login(new UsernamePasswordToken(username, password)); //登录用户</p><p>subject.logout();//退出用户</p><p>如果没有点击退出的话，会有缓存资源，可以直接进来，因此我们得退出</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.lut.controller;import org.apache.shiro.SecurityUtils;import org.apache.shiro.authc.IncorrectCredentialsException;import org.apache.shiro.authc.UnknownAccountException;import org.apache.shiro.authc.UsernamePasswordToken;import org.apache.shiro.subject.Subject;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import javax.servlet.ServletOutputStream;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import java.io.IOException;@Controller@RequestMapping(&quot;user&quot;)public class UserController &#123;    &#x2F;**     * 退出登录     *&#x2F;    @RequestMapping(&quot;logout&quot;)    public String logout() &#123;        Subject subject &#x3D; SecurityUtils.getSubject();        subject.logout();&#x2F;&#x2F;退出用户        return &quot;redirect:&#x2F;login.jsp&quot;;    &#125;    &#x2F;**     * 用来处理身份认证     * @param username     * @param password     * @return     *&#x2F;    @RequestMapping(&quot;login&quot;)    public String login(String username, String password) &#123;        try &#123;            &#x2F;&#x2F;获取主体对象            Subject subject &#x3D; SecurityUtils.getSubject();            subject.login(new UsernamePasswordToken(username, password));            return &quot;redirect:&#x2F;index.jsp&quot;;        &#125; catch (UnknownAccountException e) &#123;            e.printStackTrace();            System.out.println(&quot;用户名错误!&quot;);        &#125; catch (IncorrectCredentialsException e) &#123;            e.printStackTrace();            System.out.println(&quot;密码错误!&quot;);        &#125; catch (Exception e) &#123;            e.printStackTrace();            System.out.println(e.getMessage());        &#125;        return &quot;redirect:&#x2F;login.jsp&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h4><p>登录正常，登出正常，未登录和登出后不能访问index.jsp</p><p><img src="/2021/07/15/shiro/20210130155523.png"></p><h3 id="6-7-MD5、Salt的认证实现"><a href="#6-7-MD5、Salt的认证实现" class="headerlink" title="6.7 MD5、Salt的认证实现"></a>6.7 MD5、Salt的认证实现</h3><h4 id="6-7-1-用户注册-随机盐处理"><a href="#6-7-1-用户注册-随机盐处理" class="headerlink" title="6.7.1 用户注册+随机盐处理"></a>6.7.1 用户注册+随机盐处理</h4><h5 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--mybatis相关依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--mysql--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.38<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--druid--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.19<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-application-properties"><a href="#2-application-properties" class="headerlink" title="2.application.properties"></a>2.application.properties</h5><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"># 应用服务 WEB 访问端口server.port&#x3D;8080server.servlet.context-path&#x3D;&#x2F;shirospring.application.name&#x3D;shirospring.mvc.view.prefix&#x3D;&#x2F;spring.mvc.view.suffix&#x3D;.jsp#数据库spring.datasource.type&#x3D;com.alibaba.druid.pool.DruidDataSourcespring.datasource.driver-class-name&#x3D;com.mysql.jdbc.Driverspring.datasource.url &#x3D; jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;shiro?serverTimezone&#x3D;UTC&amp;characterEncoding&#x3D;utf8spring.datasource.username &#x3D; rootspring.datasource.password &#x3D; 123456#mybatismybatis.type-aliases-package&#x3D;com.chao.springboot_jsp_shiro.entitymybatis.mapper-locations&#x3D;mapper&#x2F;*.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-创建数据库"><a href="#3-创建数据库" class="headerlink" title="3.创建数据库"></a>3.创建数据库</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SET NAMES utf8mb4;SET FOREIGN_KEY_CHECKS &#x3D; 0;-- ------------------------------ Table structure for t_user-- ----------------------------DROP TABLE IF EXISTS &#96;t_user&#96;;CREATE TABLE &#96;t_user&#96; (  &#96;id&#96; int(6) NOT NULL AUTO_INCREMENT,  &#96;username&#96; varchar(40) DEFAULT NULL,  &#96;password&#96; varchar(40) DEFAULT NULL,  &#96;salt&#96; varchar(255) DEFAULT NULL,  PRIMARY KEY (&#96;id&#96;)) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;2 DEFAULT CHARSET&#x3D;utf8;SET FOREIGN_KEY_CHECKS &#x3D; 1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/15/shiro/4e59d15f4a7e9835259110ea8b51f60f.png"></p><p><img src="/2021/07/15/shiro/1625994554965.png"></p><h5 id="4-创建entity"><a href="#4-创建entity" class="headerlink" title="4.创建entity"></a>4.创建entity</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.lut.entity;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;import lombok.experimental.Accessors;@Data@Accessors(chain &#x3D; true)@AllArgsConstructor@NoArgsConstructorpublic class User &#123;    private String  id;    private String username;    private String password;    private String salt;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-创建DAO接口"><a href="#5-创建DAO接口" class="headerlink" title="5.创建DAO接口"></a>5.创建DAO接口</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.lut.dao;import com.lut.entity.User;import org.apache.ibatis.annotations.Mapper;@Mapperpublic interface UserDao &#123;    void save(User user);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6-开发mapper配置文件"><a href="#6-开发mapper配置文件" class="headerlink" title="6.开发mapper配置文件"></a>6.开发mapper配置文件</h5><p>注意：mapper文件的位置要在 application.properties配置的目录下面</p><p><strong>注意：mapper文件的命名 与 Dao接口保持一致</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lut.dao.UserDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>save<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into t_user values(#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;salt&#125;)    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在图中，标红的地方要保持命名一致，不然会有莫名其妙的BUG</strong></p><p><img src="/2021/07/15/shiro/35d23af18fe1f2002841269319028516.png"></p><h5 id="7-开发service接口"><a href="#7-开发service接口" class="headerlink" title="7.开发service接口"></a>7.开发service接口</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.lut.service;import com.lut.entity.User;public interface UserService &#123;    &#x2F;&#x2F;注册用户方法    void register(User user);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="8-创建salt工具类"><a href="#8-创建salt工具类" class="headerlink" title="8.创建salt工具类"></a>8.创建salt工具类</h5><blockquote><p>写成静态类，不用new可以直接调用</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.lut.utils;import java.util.Random;public class SaltUtils &#123;    &#x2F;**     * 生成salt的静态方法     * @param n     * @return     *&#x2F;    public static String getSalt(int n)&#123;        char[] chars &#x3D; &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234567890!@#$%^&amp;*()&quot;.toCharArray();        StringBuilder sb &#x3D; new StringBuilder();        for (int i &#x3D; 0; i &lt; n; i++) &#123;            char aChar &#x3D; chars[new Random().nextInt(chars.length)];            sb.append(aChar);        &#125;        return sb.toString();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="9-开发service实现类"><a href="#9-开发service实现类" class="headerlink" title="9.开发service实现类"></a>9.开发service实现类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.lut.service;import com.lut.dao.UserDao;import com.lut.entity.User;import com.lut.utils.SaltUtils;import org.apache.shiro.crypto.hash.Md5Hash;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.transaction.annotation.Transactional;import org.springframework.stereotype.Service;@Service@Transactionalpublic class UserServiceImpl implements UserService &#123;    @Autowired    private UserDao userDAO;    @Override    public void register(User user) &#123;        &#x2F;&#x2F;处理业务调用dao        &#x2F;&#x2F;1.生成随机盐        String salt &#x3D; SaltUtils.getSalt(8);        &#x2F;&#x2F;2.将随机盐保存到数据        user.setSalt(salt);        &#x2F;&#x2F;3.明文密码进行md5 + salt + hash散列        Md5Hash md5Hash &#x3D; new Md5Hash(user.getPassword(),salt,1024);        user.setPassword(md5Hash.toHex());        userDAO.save(user);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="10-开发Controller"><a href="#10-开发Controller" class="headerlink" title="10.开发Controller"></a>10.开发Controller</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controller@RequestMapping(&quot;user&quot;)public class UserController &#123;    @Autowired    private UserService userService;    &#x2F;**     * 用户注册     *&#x2F;    @RequestMapping(&quot;register&quot;)    public String register(User user) &#123;        try &#123;            userService.register(user);            return &quot;redirect:&#x2F;login.jsp&quot;;        &#125;catch (Exception e)&#123;            e.printStackTrace();            return &quot;redirect:&#x2F;register.jsp&quot;;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="11-设置公共资源"><a href="#11-设置公共资源" class="headerlink" title="11.设置公共资源"></a>11.设置公共资源</h5><p>在ShiroConfig中添加</p><pre class="line-numbers language-none"><code class="language-none">map.put(&quot;&#x2F;user&#x2F;register&quot;,&quot;anon&quot;);&#x2F;&#x2F;anon 设置为公共资源 map.put(&quot;&#x2F;register.jsp&quot;,&quot;anon&quot;);&#x2F;&#x2F;anon 设置为公共资源  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="12-测试"><a href="#12-测试" class="headerlink" title="12.测试"></a>12.测试</h5><p>添加成功</p><p><img src="/2021/07/15/shiro/5725e49a9b7ad4bb4b7fe7c017c851ed.png"></p><h4 id="6-7-2-开发数据库认证"><a href="#6-7-2-开发数据库认证" class="headerlink" title="6.7.2 开发数据库认证"></a>6.7.2 开发数据库认证</h4><blockquote><p>将realm里面的假数据换成数据库的数据</p></blockquote><p><img src="/2021/07/15/shiro/1626003962830.png"></p><h5 id="1-开发DAO"><a href="#1-开发DAO" class="headerlink" title="1.开发DAO"></a>1.开发DAO</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Mapperpublic interface UserDAO &#123;        void save(User user);&#x2F;&#x2F;根据身份信息认证的方法    User findByUserName(String username);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-开发mapper配置文件"><a href="#2-开发mapper配置文件" class="headerlink" title="2.开发mapper配置文件"></a>2.开发mapper配置文件</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findByUserName<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>String<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  select id,username,password,salt from t_user  where username = #&#123;username&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-开发Service接口"><a href="#3-开发Service接口" class="headerlink" title="3.开发Service接口"></a>3.开发Service接口</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface UserService &#123;    &#x2F;&#x2F;注册用户方法    void register(User user);    &#x2F;&#x2F;根据用户名查询业务的方法    User findByUserName(String username);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-开发Service实现类"><a href="#4-开发Service实现类" class="headerlink" title="4.开发Service实现类"></a>4.开发Service实现类</h5><p><strong>注意：一定别忘记添加注解：@Service(“userService”)</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Service(&quot;userService&quot;)@Transactionalpublic class UserServiceImpl implements UserService &#123;    @Autowired    private UserDAO userDAO;    @Override    public User findByUserName(String username) &#123;        return userDAO.findByUserName(username);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-开发工厂工具类"><a href="#5-开发工厂工具类" class="headerlink" title="5.开发工厂工具类"></a>5.开发工厂工具类</h5><blockquote><p><strong>在工厂中获取bean对象的工具类</strong>（因为自己的realm中不能直接使用service层）</p></blockquote><p>ApplicationContextUtils</p><blockquote><p>这个类的作用就是在springboot创建的时候，就会将bean创建的工厂以参数的形式返回</p><p>根据bean名字获取工厂中指定bean 对象(默认是类名的首字母小写，例如（UserService ==&gt;用userService)</p><p>或者在service注解中给个名字userService，例如：</p><p>UserService userService = (UserService) ApplicationContextUtils.getBean(“userService”);</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.lut.utils;import org.springframework.beans.BeansException;import org.springframework.context.ApplicationContext;import org.springframework.context.ApplicationContextAware;import org.springframework.stereotype.Component;@Componentpublic class ApplicationContextUtils implements ApplicationContextAware &#123;    private static ApplicationContext context;    @Override    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123;        this.context &#x3D; applicationContext;    &#125;    &#x2F;&#x2F;根据bean名字获取工厂中指定bean 对象    public static Object getBean(String beanName)&#123;        System.out.println(&quot;beanName&quot;+beanName);        Object object&#x3D;context.getBean(beanName);        System.out.println(&quot;object&quot;+object);        return context.getBean(beanName);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6-修改自定义realm"><a href="#6-修改自定义realm" class="headerlink" title="6.修改自定义realm"></a>6.修改自定义realm</h5><p><img src="/2021/07/15/shiro/1626014915686.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;自定义realmpublic class CustomerRealm extends AuthorizingRealm &#123;    @Override    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) &#123;        return null;    &#125;    @Override    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123;        &#x2F;&#x2F;根据身份信息&#x2F;&#x2F;从传过来的token获取到的用户名        String principal &#x3D; (String) token.getPrincipal();        &#x2F;&#x2F;在工厂中获取service对象        UserService userService &#x3D; (UserService) ApplicationContextUtils.getBean(&quot;userService&quot;);        &#x2F;&#x2F;根据身份信息查询        User user &#x3D; userService.findByUserName(principal);        System.out.println(&quot;User:&quot;+user);        &#x2F;&#x2F;用户不为空        if(!ObjectUtils.isEmpty(user))&#123;            &#x2F;&#x2F;返回数据库信息            SimpleAuthenticationInfo simpleAuthenticationInfo &#x3D; new SimpleAuthenticationInfo(user.getUsername(), user.getPassword(),                    ByteSource.Util.bytes(user.getSalt()), this.getName());            return simpleAuthenticationInfo;        &#125;        return null;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7-修改ShiroConfig中realm"><a href="#7-修改ShiroConfig中realm" class="headerlink" title="7.修改ShiroConfig中realm"></a>7.修改ShiroConfig中realm</h5><p>使用凭证匹配器以及hash散列</p><blockquote><p>不设置的话默认是简单的比较，直接用输入密码与数据库比较</p></blockquote><p>以及在 getShiroFilterFactoryBean 中添加公共资源</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.lut.config;import com.lut.shiro.realms.CustomerRealm;import org.apache.shiro.authc.credential.HashedCredentialsMatcher;import org.apache.shiro.realm.Realm;import org.apache.shiro.spring.web.ShiroFilterFactoryBean;import org.apache.shiro.web.mgt.DefaultWebSecurityManager;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import java.util.HashMap;import java.util.Map;&#x2F;** * 用来整合shiro框架相关的配置类 *&#x2F;@Configurationpublic class ShiroConfig &#123;    &#x2F;&#x2F;1.创建shiroFilter  &#x2F;&#x2F;负责拦截所有请求    @Bean    public ShiroFilterFactoryBean getShiroFilterFactoryBean(DefaultWebSecurityManager defaultWebSecurityManager)&#123;        ShiroFilterFactoryBean shiroFilterFactoryBean &#x3D; new ShiroFilterFactoryBean();        &#x2F;&#x2F;给filter设置安全管理器        shiroFilterFactoryBean.setSecurityManager(defaultWebSecurityManager);        &#x2F;&#x2F;配置系统受限资源        &#x2F;&#x2F;配置系统公共资源        Map&lt;String,String&gt; map &#x3D; new HashMap&lt;String,String&gt;();        map.put(&quot;&#x2F;user&#x2F;login&quot;,&quot;anon&quot;);&#x2F;&#x2F;anon 设置为公共资源  放行资源放在下面        map.put(&quot;&#x2F;user&#x2F;register&quot;,&quot;anon&quot;);&#x2F;&#x2F;anon 设置为公共资源  放行资源放在下面        map.put(&quot;&#x2F;register.jsp&quot;,&quot;anon&quot;);&#x2F;&#x2F;anon 设置为公共资源  放行资源放在下面        map.put(&quot;&#x2F;user&#x2F;getImage&quot;,&quot;anon&quot;);        map.put(&quot;&#x2F;**&quot;,&quot;authc&quot;);&#x2F;&#x2F;authc 请求这个资源需要认证和授权        &#x2F;&#x2F;默认认证界面路径---当认证不通过时跳转        shiroFilterFactoryBean.setLoginUrl(&quot;&#x2F;login.jsp&quot;);        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);        return shiroFilterFactoryBean;    &#125;    &#x2F;&#x2F;2.创建安全管理器    @Bean    public DefaultWebSecurityManager getDefaultWebSecurityManager(Realm realm)&#123;        DefaultWebSecurityManager defaultWebSecurityManager &#x3D; new DefaultWebSecurityManager();        &#x2F;&#x2F;给安全管理器设置        defaultWebSecurityManager.setRealm(realm);        return defaultWebSecurityManager;    &#125;    @Bean    public Realm getRealm()&#123;        CustomerRealm customerRealm &#x3D; new CustomerRealm();        &#x2F;&#x2F;设置hashed凭证匹配器（不设置的话默认是简单的比较，直接用输入密码与数据库比较）        HashedCredentialsMatcher credentialsMatcher &#x3D; new HashedCredentialsMatcher();        &#x2F;&#x2F;设置md5加密        credentialsMatcher.setHashAlgorithmName(&quot;md5&quot;);        &#x2F;&#x2F;设置散列次数        credentialsMatcher.setHashIterations(1024);        customerRealm.setCredentialsMatcher(credentialsMatcher);        return customerRealm;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="8-启动测试"><a href="#8-启动测试" class="headerlink" title="8.启动测试"></a>8.启动测试</h5><p><img src="/2021/07/15/shiro/20210130155526.png"></p><h5 id="9-思路疏通"><a href="#9-思路疏通" class="headerlink" title="9.思路疏通"></a>9.思路疏通</h5><blockquote><p>注册</p></blockquote><p><img src="/2021/07/15/shiro/1626061956544.png"></p><blockquote><p>登录</p></blockquote><p><img src="/2021/07/15/shiro/1626059995672.png"></p><h3 id="6-8-授权实现"><a href="#6-8-授权实现" class="headerlink" title="6.8 授权实现"></a>6.8 授权实现</h3><h4 id="6-8-1-没有数据库"><a href="#6-8-1-没有数据库" class="headerlink" title="6.8.1 没有数据库"></a>6.8.1 没有数据库</h4><blockquote><p>用假数据</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.chao.springboot_jsp_shiro.realms;import com.chao.springboot_jsp_shiro.entity.User;import com.chao.springboot_jsp_shiro.service.UserService;import com.chao.springboot_jsp_shiro.utils.ApplicationContextUtils;import org.apache.shiro.authc.AuthenticationException;import org.apache.shiro.authc.AuthenticationInfo;import org.apache.shiro.authc.AuthenticationToken;import org.apache.shiro.authc.SimpleAuthenticationInfo;import org.apache.shiro.authz.AuthorizationInfo;import org.apache.shiro.authz.SimpleAuthorizationInfo;import org.apache.shiro.realm.AuthorizingRealm;import org.apache.shiro.subject.PrincipalCollection;import org.apache.shiro.util.ByteSource;import org.springframework.util.ObjectUtils;import org.springframework.web.servlet.handler.UserRoleAuthorizationInterceptor;public class CustomerRealm extends AuthorizingRealm &#123;    @Override   &#x2F;&#x2F;授权    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) &#123;        &#x2F;&#x2F;获取身份信息        String primaryPrincipal &#x3D; (String) principals.getPrimaryPrincipal();        &#x2F;&#x2F;根据主身分信息获取角色和权限信息        if(&quot;zhangsan&quot;.equals(primaryPrincipal))&#123;            SimpleAuthorizationInfo simpleAuthorizationInfo &#x3D; new SimpleAuthorizationInfo();            simpleAuthorizationInfo.addRole(&quot;user&quot;);            simpleAuthorizationInfo.addStringPermission(&quot;user:*:*&quot;);             return simpleAuthorizationInfo;        &#125;        return null;    &#125;    @Override    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123;        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);        &#x2F;&#x2F;从传过来的token获取到的用户名        String principal &#x3D; (String) token.getPrincipal();        UserService userService &#x3D; (UserService) ApplicationContextUtils.getBean(&quot;userService&quot;);        User user &#x3D; userService.findByUserName(principal);&#x2F;&#x2F;        &#x2F;&#x2F;假设是从数据库获得的 用户名，密码&#x2F;&#x2F;        String password_db&#x3D;&quot;123&quot;;&#x2F;&#x2F;        String username_db&#x3D;&quot;zhangsan&quot;;        if (!ObjectUtils.isEmpty(user))&#123;&#x2F;&#x2F;            SimpleAuthenticationInfo simpleAuthenticationInfo &#x3D;            return new SimpleAuthenticationInfo(user.getUsername(),user.getPassword(),                        ByteSource.Util.bytes(user.getSalt()), this.getName());        &#125;        return null;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-页面资源授权"><a href="#1-页面资源授权" class="headerlink" title="1.页面资源授权"></a>1.页面资源授权</h5><blockquote><p>需要引入shiro的标签  &lt;%@taglib prefix=”shiro” uri=”<a href="http://shiro.apache.org/tags&quot;">http://shiro.apache.org/tags&quot;</a> %&gt;</p></blockquote><blockquote><p>&lt;shiro:hasAnyRoles name=”user_manager,admin,addinfo_manager”&gt;    //多个角色</p><p>&lt;shiro:hasRole name=”admin”&gt;             //一个角色</p><p>&lt;shiro:hasPermission name=”user:add:*”&gt;   //权限</p></blockquote><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@page contentType&#x3D;&quot;text&#x2F;html;utf-8&quot; pageEncoding&#x3D;&quot;utf-8&quot; isELIgnored&#x3D;&quot;false&quot; %&gt;&lt;%@taglib prefix&#x3D;&quot;shiro&quot; uri&#x3D;&quot;http:&#x2F;&#x2F;shiro.apache.org&#x2F;tags&quot; %&gt;&lt;!doctype html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;meta name&#x3D;&quot;viewport&quot;          content&#x3D;&quot;width&#x3D;device-width, user-scalable&#x3D;no, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, minimum-scale&#x3D;1.0&quot;&gt;    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;    &lt;title&gt;Document&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;%--    受限资源--%&gt;&lt;h1&gt;系统主页&lt;&#x2F;h1&gt;&lt;a href&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;user&#x2F;logout&quot;&gt;退出登录&lt;&#x2F;a&gt;&lt;ul&gt;    &lt;shiro:hasAnyRoles name&#x3D;&quot;user_manager,admin,addinfo_manager,user&quot;&gt;        &lt;li&gt;&lt;a href&#x3D;&quot;&quot;&gt;用户管理&lt;&#x2F;a&gt;            &lt;ul&gt;                &lt;shiro:hasPermission name&#x3D;&quot;user:add:*&quot;&gt;                    &lt;li&gt;&lt;a href&#x3D;&quot;&quot;&gt;添加&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                &lt;&#x2F;shiro:hasPermission&gt;                &lt;shiro:hasPermission name&#x3D;&quot;user:delete:*&quot;&gt;                    &lt;li&gt;&lt;a href&#x3D;&quot;&quot;&gt;删除&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                &lt;&#x2F;shiro:hasPermission&gt;                &lt;shiro:hasPermission name&#x3D;&quot;user:update:*&quot;&gt;                    &lt;li&gt;&lt;a href&#x3D;&quot;&quot;&gt;修改&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                &lt;&#x2F;shiro:hasPermission&gt;                &lt;shiro:hasPermission name&#x3D;&quot;user:find:*&quot;&gt;                    &lt;li&gt;&lt;a href&#x3D;&quot;&quot;&gt;查询&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;                &lt;&#x2F;shiro:hasPermission&gt;            &lt;&#x2F;ul&gt;        &lt;&#x2F;li&gt;    &lt;&#x2F;shiro:hasAnyRoles&gt;    &lt;shiro:hasAnyRoles name&#x3D;&quot;order_manager,admin,addinfo_manager&quot;&gt;        &lt;li&gt;&lt;a href&#x3D;&quot;&quot;&gt;订单管理&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;        &lt;ul&gt;            &lt;shiro:hasPermission name&#x3D;&quot;order:add:*&quot;&gt;                &lt;li&gt;&lt;a href&#x3D;&quot;&quot;&gt;添加&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;            &lt;&#x2F;shiro:hasPermission&gt;            &lt;shiro:hasPermission name&#x3D;&quot;order:delete:*&quot;&gt;                &lt;li&gt;&lt;a href&#x3D;&quot;&quot;&gt;删除&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;            &lt;&#x2F;shiro:hasPermission&gt;            &lt;shiro:hasPermission name&#x3D;&quot;order:update:*&quot;&gt;                &lt;li&gt;&lt;a href&#x3D;&quot;&quot;&gt;修改&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;            &lt;&#x2F;shiro:hasPermission&gt;            &lt;shiro:hasPermission name&#x3D;&quot;order:find:*&quot;&gt;                &lt;li&gt;&lt;a href&#x3D;&quot;&quot;&gt;查询&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;            &lt;&#x2F;shiro:hasPermission&gt;        &lt;&#x2F;ul&gt;    &lt;&#x2F;shiro:hasAnyRoles&gt;    &lt;shiro:hasRole name&#x3D;&quot;admin&quot;&gt;        &lt;li&gt;&lt;a href&#x3D;&quot;&quot;&gt;商品管理&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;        &lt;li&gt;&lt;a href&#x3D;&quot;&quot;&gt;物流管理&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;    &lt;&#x2F;shiro:hasRole&gt;    &lt;shiro:hasRole name&#x3D;&quot;user&quot;&gt;        &lt;li&gt;&lt;a href&#x3D;&quot;&quot;&gt;仅普通用户可见&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;        &lt;li&gt;&lt;a href&#x3D;&quot;&quot;&gt;公共资源&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;    &lt;&#x2F;shiro:hasRole&gt;&lt;&#x2F;ul&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-代码方式授权"><a href="#2-代码方式授权" class="headerlink" title="2.代码方式授权"></a>2.代码方式授权</h5><blockquote><p>点击跳转的时候显示无权访问，然后重定向回来</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controller@RequestMapping(&quot;order&quot;)public class OrderController &#123;    @RequestMapping(&quot;save&quot;)    public String save()&#123;        System.out.println(&quot;进入方法&quot;);        &#x2F;&#x2F;基于角色        &#x2F;&#x2F;获取主体对象        Subject subject &#x3D; SecurityUtils.getSubject();        &#x2F;&#x2F;代码方式        if (subject.hasRole(&quot;admin&quot;)) &#123;            System.out.println(&quot;保存订单!&quot;);        &#125;else&#123;            System.out.println(&quot;无权访问!&quot;);        &#125;        &#x2F;&#x2F;基于权限字符串        &#x2F;&#x2F;....        return &quot;redirect:&#x2F;index.jsp&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-方法调用授权"><a href="#3-方法调用授权" class="headerlink" title="3.方法调用授权"></a>3.方法调用授权</h5><ul><li><blockquote><p>@RequiresRoles 用来基于角色进行授权  //用来判断角色  同时具有 admin user</p></blockquote></li><li><blockquote><p>@RequiresPermissions 用来基于权限进行授权  //用来判断权限字符串</p></blockquote><blockquote><p>不满足进不去直接报500  </p></blockquote></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">import org.apache.shiro.authz.annotation.RequiresPermissions;import org.apache.shiro.authz.annotation.RequiresRoles;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;@Controller@RequestMapping(&quot;order&quot;)public class OrderController &#123;    @RequiresRoles(value&#x3D;&#123;&quot;admin&quot;,&quot;user&quot;&#125;)&#x2F;&#x2F;用来判断角色  同时具有 admin user    @RequiresPermissions(&quot;user:update:01&quot;) &#x2F;&#x2F;用来判断权限字符串    @RequestMapping(&quot;save&quot;)    public String save()&#123;        System.out.println(&quot;进入方法&quot;);        return &quot;redirect:&#x2F;index.jsp&quot;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-8-2-连接数据库"><a href="#6-8-2-连接数据库" class="headerlink" title="6.8.2 连接数据库"></a>6.8.2 连接数据库</h4><h5 id="4-授权数据持久化"><a href="#4-授权数据持久化" class="headerlink" title="4.授权数据持久化"></a>4.授权数据持久化</h5><p><img src="/2021/07/15/shiro/22f9601b4e44546152bcb77840022607.png"></p><blockquote><p>数据如果是多对多，就必须要第三张表进行关联</p></blockquote><blockquote><p>注意：权限表达式的冒号一定要用英文的</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SET NAMES utf8mb4;SET FOREIGN_KEY_CHECKS &#x3D; 0;-- ------------------------------ Table structure for t_perms-- ----------------------------DROP TABLE IF EXISTS &#96;t_perms&#96;;CREATE TABLE &#96;t_pers&#96; (  &#96;id&#96; int(6) NOT NULL AUTO_INCREMENT,  &#96;name&#96; varchar(80) DEFAULT NULL,  &#96;url&#96; varchar(255) DEFAULT NULL,  PRIMARY KEY (&#96;id&#96;)) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;-- ------------------------------ Table structure for t_role-- ----------------------------DROP TABLE IF EXISTS &#96;t_role&#96;;CREATE TABLE &#96;t_role&#96; (  &#96;id&#96; int(6) NOT NULL AUTO_INCREMENT,  &#96;name&#96; varchar(60) DEFAULT NULL,  PRIMARY KEY (&#96;id&#96;)) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;-- ------------------------------ Table structure for t_role_perms-- ----------------------------DROP TABLE IF EXISTS &#96;t_role_perms&#96;;CREATE TABLE &#96;t_role_perms&#96; (  &#96;id&#96; int(6) NOT NULL,  &#96;roleid&#96; int(6) DEFAULT NULL,  &#96;permsid&#96; int(6) DEFAULT NULL,  PRIMARY KEY (&#96;id&#96;)) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;-- ------------------------------ Table structure for t_user-- ----------------------------DROP TABLE IF EXISTS &#96;t_user&#96;;CREATE TABLE &#96;t_user&#96; (  &#96;id&#96; int(6) NOT NULL AUTO_INCREMENT,  &#96;username&#96; varchar(40) DEFAULT NULL,  &#96;password&#96; varchar(40) DEFAULT NULL,  &#96;salt&#96; varchar(255) DEFAULT NULL,  PRIMARY KEY (&#96;id&#96;)) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;2 DEFAULT CHARSET&#x3D;utf8;-- ------------------------------ Table structure for t_user_role-- ----------------------------DROP TABLE IF EXISTS &#96;t_user_role&#96;;CREATE TABLE &#96;t_user_role&#96; (  &#96;id&#96; int(6) NOT NULL,  &#96;userid&#96; int(6) DEFAULT NULL,  &#96;roleid&#96; int(6) DEFAULT NULL,  PRIMARY KEY (&#96;id&#96;)) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;SET FOREIGN_KEY_CHECKS &#x3D; 1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/15/shiro/7a14a0cb1c4e5441655da56a27b703e3.png"></p><h5 id="5-创建实体类"><a href="#5-创建实体类" class="headerlink" title="5.创建实体类"></a>5.创建实体类</h5><p>User</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Data@Accessors(chain &#x3D; true)@AllArgsConstructor@NoArgsConstructorpublic class User implements Serializable &#123;    private String id;    private String username;    private String password;    private String salt;    &#x2F;&#x2F;定义角色集合    private List&lt;Role&gt; roles;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Role</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Data@Accessors(chain &#x3D; true)@AllArgsConstructor@NoArgsConstructorpublic class Role implements Serializable &#123;    private String id;    private String name;    &#x2F;&#x2F;定义权限的集合    private List&lt;Perms&gt; perms;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Perms</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Data@Accessors(chain &#x3D; true)@AllArgsConstructor@NoArgsConstructorpublic class Perms implements Serializable &#123;    private String id;    private String name;    private String url;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6-创建dao方法"><a href="#6-创建dao方法" class="headerlink" title="6.创建dao方法"></a>6.创建dao方法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;根据用户名查询所有角色User findRolesByUserName(String username);&#x2F;&#x2F;根据角色id查询权限集合List&lt;Perms&gt; findPermsByRoleId(String id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7-mapper实现"><a href="#7-mapper实现" class="headerlink" title="7.mapper实现"></a>7.mapper实现</h5><blockquote><p>resultType可以把查询结果封装到pojo类型中，但必须pojo类的属性名和查询到的数据库表的字段名一致。 </p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uid<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token comment">&lt;!--角色信息--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>roles<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Role<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rname<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span>    //将查询到的id，rname变成User类中的list<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Role</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findRolesByUserName<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>String<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT u.id uid,u.username,r.id,r.NAME rname  FROM t_user u  LEFT JOIN t_user_role ur  ON u.id=ur.userid  LEFT JOIN t_role r  ON ur.roleid=r.id  WHERE u.username=#&#123;username&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>findPermsByRoleId<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>String<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Perms<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  SELECT p.id,p.NAME,p.url,r.NAME  FROM t_role r  LEFT JOIN t_role_perms rp  ON r.id=rp.roleid  LEFT JOIN t_perms p ON rp.permsid=p.id  WHERE r.id=#&#123;id&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="8-Service接口"><a href="#8-Service接口" class="headerlink" title="8.Service接口"></a>8.Service接口</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;根据用户名查询所有角色User findRolesByUserName(String username);&#x2F;&#x2F;根据角色id查询权限集合List&lt;Perms&gt; findPermsByRoleId(String id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="9-Service实现"><a href="#9-Service实现" class="headerlink" title="9.Service实现"></a>9.Service实现</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Overridepublic List&lt;Perms&gt; findPermsByRoleId(String id) &#123;  return userDAO.findPermsByRoleId(id);&#125;@Overridepublic User findRolesByUserName(String username) &#123;  return userDAO.findRolesByUserName(username);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="10-修改自定义realm"><a href="#10-修改自定义realm" class="headerlink" title="10.修改自定义realm"></a>10.修改自定义realm</h5><p><strong>注意：</strong>如果你创建了一个用户，并为这个用户授予了一个角色，但这个角色并未关联任何的 授权字符串，那么调用数据库获得的结果是 List<Perms> perms=[null]，此时 perms已经被初始化，里面只有一个属性null，使用判空的方法无法判别，此时继续遍历会报出空指针异常，此时应当添加判断条件 <strong>perms.get(0)!=null</strong></Perms></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;自定义realmpublic class CustomerRealm extends AuthorizingRealm &#123;    @Override    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) &#123;        &#x2F;&#x2F;获取身份信息        String primaryPrincipal &#x3D; (String) principals.getPrimaryPrincipal();        System.out.println(&quot;调用授权验证: &quot;+primaryPrincipal);        &#x2F;&#x2F;根据主身份信息获取角色 和 权限信息        UserService userService &#x3D; (UserService) ApplicationContextUtils.getBean(&quot;userService&quot;);        User user &#x3D; userService.findRolesByUserName(primaryPrincipal);        System.out.println(&quot;user:&quot;+user);        &#x2F;&#x2F;授权角色信息        if(!CollectionUtils.isEmpty(user.getRoles()))&#123;            SimpleAuthorizationInfo simpleAuthorizationInfo &#x3D; new SimpleAuthorizationInfo();            user.getRoles().forEach(role-&gt;&#123;                simpleAuthorizationInfo.addRole(role.getName()); &#x2F;&#x2F;添加角色信息                &#x2F;&#x2F;权限信息                List&lt;Perms&gt; perms &#x3D; userService.findPermsByRoleId(role.getId());                System.out.println(&quot;perms:&quot;+perms);                if(!CollectionUtils.isEmpty(perms) &amp;&amp; perms.get(0)!&#x3D;null )&#123;                    perms.forEach(perm-&gt;&#123;                        simpleAuthorizationInfo.addStringPermission(perm.getName());                    &#125;);                &#125;            &#125;);            return simpleAuthorizationInfo;        &#125;        return null;    &#125;    @Override    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123;        &#x2F;&#x2F;根据身份信息&#x2F;&#x2F;从传过来的token获取到的用户名        String principal &#x3D; (String) token.getPrincipal();        &#x2F;&#x2F;在工厂中获取service对象        UserService userService &#x3D; (UserService) ApplicationContextUtils.getBean(&quot;userService&quot;);        &#x2F;&#x2F;根据身份信息查询        User user &#x3D; userService.findByUserName(principal);        System.out.println(&quot;User:&quot;+user);        &#x2F;&#x2F;用户不为空        if(!ObjectUtils.isEmpty(user))&#123;            &#x2F;&#x2F;返回数据库信息            SimpleAuthenticationInfo simpleAuthenticationInfo &#x3D; new SimpleAuthenticationInfo(user.getUsername(), user.getPassword(),                    ByteSource.Util.bytes(user.getSalt()), this.getName());            return simpleAuthenticationInfo;        &#125;        return null;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="11-向数据库添加信息"><a href="#11-向数据库添加信息" class="headerlink" title="11.向数据库添加信息"></a>11.向数据库添加信息</h5><p><img src="/2021/07/15/shiro/ebf4432b6fb9ce36a39a2a3354445f80.png"></p><p>简单来说：</p><p>用户 admin 具有 admin的角色，具有 对于 user，order的所有权限</p><p>用户 zhangsan 具有 user的角色，没有权限，只能访问公共资源</p><p>用户 usermanager 具有 user_manager的角色，具有 对于 user的所有权限</p><p>用户 ordermanager 具有 order_manager的角色，具有 对于 order的所有权限</p><p>用户 addinfomanager 具有 addinfo_manager的角色，具有 对于 user,order 的添加权限</p><h5 id="12-启动测试"><a href="#12-启动测试" class="headerlink" title="12.启动测试"></a>12.启动测试</h5><p><img src="/2021/07/15/shiro/31495a26d43f4f2214bf3c895d85bb28.png"></p><h3 id="6-9-使用CacheManager"><a href="#6-9-使用CacheManager" class="headerlink" title="6.9 使用CacheManager"></a>6.9 使用CacheManager</h3><h4 id="6-9-1-Cache-作用"><a href="#6-9-1-Cache-作用" class="headerlink" title="6.9.1 Cache 作用"></a>6.9.1 Cache 作用</h4><ul><li>Cache 缓存: <strong>计算机内存中一段数据</strong></li><li>作用: <strong>用来减轻DB的访问压力,从而提高系统的查询效率</strong></li><li>流程:</li></ul><p><img src="/2021/07/15/shiro/bc4e606c8eb9cd230dba11edc9693bb2.png"></p><h4 id="6-9-2-使用shiro中默认EhCache实现缓存"><a href="#6-9-2-使用shiro中默认EhCache实现缓存" class="headerlink" title="6.9.2 使用shiro中默认EhCache实现缓存"></a>6.9.2 使用shiro中默认EhCache实现缓存</h4><h5 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--引入shiro和ehcache--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-ehcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-开启缓存"><a href="#2-开启缓存" class="headerlink" title="2.开启缓存"></a>2.开启缓存</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;3.创建自定义realm    @Bean    public Realm getRealm()&#123;        CustomerRealm customerRealm &#x3D; new CustomerRealm();        &#x2F;&#x2F;修改凭证校验匹配器        HashedCredentialsMatcher credentialsMatcher &#x3D; new HashedCredentialsMatcher();        &#x2F;&#x2F;设置加密算法为md5        credentialsMatcher.setHashAlgorithmName(&quot;MD5&quot;);        &#x2F;&#x2F;设置散列次数        credentialsMatcher.setHashIterations(1024);        customerRealm.setCredentialsMatcher(credentialsMatcher);        &#x2F;&#x2F;开启缓存管理器        customerRealm.setCachingEnabled(true);   &#x2F;&#x2F;开启全局缓存        customerRealm.setAuthenticationCachingEnabled(true);  &#x2F;&#x2F;开启认证缓存        customerRealm.setAuthenticationCacheName(&quot;AuthenticationCache&quot;); &#x2F;&#x2F;设置名字        customerRealm.setAuthorizationCachingEnabled(true);   &#x2F;&#x2F;开启授权缓存        customerRealm.setAuthorizationCacheName(&quot;AuthorizationCache&quot;);  &#x2F;&#x2F;设置名字        customerRealm.setCacheManager(new EhCacheManager());        return customerRealm;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-启动刷新页面进行测试"><a href="#3-启动刷新页面进行测试" class="headerlink" title="3.启动刷新页面进行测试"></a>3.启动刷新页面进行测试</h5><ul><li>注意:如果控制台没有任何sql展示说明缓存已经开启</li></ul><h4 id="6-9-3-shiro中使用Redis作为缓存实现"><a href="#6-9-3-shiro中使用Redis作为缓存实现" class="headerlink" title="6.9.3 shiro中使用Redis作为缓存实现"></a>6.9.3 shiro中使用Redis作为缓存实现</h4><h5 id="1-引入redis依赖"><a href="#1-引入redis依赖" class="headerlink" title="1.引入redis依赖"></a>1.引入redis依赖</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--redis整合springboot--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-配置redis连接"><a href="#2-配置redis连接" class="headerlink" title="2.配置redis连接"></a>2.配置redis连接</h5><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">#端口号spring.redis.port&#x3D;6379#主机地址spring.redis.host&#x3D;localhost#用的是0号库spring.redis.database&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/15/shiro/400f9d80d4a3173b8b73b9db5de700f0.png"></p><h5 id="3-启动redis服务"><a href="#3-启动redis服务" class="headerlink" title="3.启动redis服务"></a>3.启动redis服务</h5><p><img src="/2021/07/15/shiro/dc1f9b0577d2170b95f6febaf078c5e6.png"></p><h5 id="4-开发RedisCacheManager"><a href="#4-开发RedisCacheManager" class="headerlink" title="4.开发RedisCacheManager"></a>4.开发RedisCacheManager</h5><p><strong>自定义shiro缓存管理器</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.lut.shiro.cache;import org.apache.shiro.cache.Cache;import org.apache.shiro.cache.CacheException;import org.apache.shiro.cache.CacheManager;&#x2F;&#x2F;自定义shiro缓存管理器public class RedisCacheManager implements CacheManager &#123;    &#x2F;&#x2F;参数1:认证或者是授权缓存的统一名称    @Override    public &lt;K, V&gt; Cache&lt;K, V&gt; getCache(String cacheName) throws CacheException &#123;        System.out.println(cacheName);        return new RedisCache&lt;K,V&gt;(cacheName);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-开RedisCache实现"><a href="#5-开RedisCache实现" class="headerlink" title="5.开RedisCache实现"></a>5.开RedisCache实现</h5><p><strong>自定义redis缓存的实现</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.lut.shiro.cache;import com.lut.utils.ApplicationContextUtils;import org.apache.shiro.cache.Cache;import org.apache.shiro.cache.CacheException;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.redis.serializer.StringRedisSerializer;import java.util.Collection;import java.util.Set;&#x2F;&#x2F;自定义redis缓存的实现public class RedisCache&lt;k,v&gt; implements Cache&lt;k,v&gt; &#123;    private String cacheName;    public RedisCache() &#123;    &#125;    public RedisCache(String cacheName) &#123;        this.cacheName &#x3D; cacheName;    &#125;    @Override    public v get(k k) throws CacheException &#123;        System.out.println(&quot;get key:&quot;+k);        return (v) getRedisTemplate().opsForHash().get(this.cacheName,k.toString());    &#125;    @Override    public v put(k k, v v) throws CacheException &#123;        System.out.println(&quot;put key: &quot;+k);        System.out.println(&quot;put value:&quot;+v);        getRedisTemplate().opsForHash().put(this.cacheName,k.toString(),v);        return null;    &#125;    &#x2F;&#x2F;退出登录时会清楚缓存，如果没有退出，下次登陆会报错    @Override    public v remove(k k) throws CacheException &#123;        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;remove&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);        return (v) getRedisTemplate().opsForHash().delete(this.cacheName,k.toString());    &#125;    &#x2F;&#x2F;缓存刷新的时候调用    @Override    public void clear() throws CacheException &#123;        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;clear&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);        getRedisTemplate().delete(this.cacheName);    &#125;    @Override    public int size() &#123;        return getRedisTemplate().opsForHash().size(this.cacheName).intValue();    &#125;    @Override    public Set&lt;k&gt; keys() &#123;        return getRedisTemplate().opsForHash().keys(this.cacheName);    &#125;    @Override    public Collection&lt;v&gt; values() &#123;        return getRedisTemplate().opsForHash().values(this.cacheName);    &#125;    private RedisTemplate getRedisTemplate()&#123;        RedisTemplate redisTemplate &#x3D; (RedisTemplate) ApplicationContextUtils.getBean(&quot;redisTemplate&quot;);        redisTemplate.setKeySerializer(new StringRedisSerializer());        redisTemplate.setHashKeySerializer(new StringRedisSerializer());        return redisTemplate;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6-启动项目测试发现报错"><a href="#6-启动项目测试发现报错" class="headerlink" title="6.启动项目测试发现报错"></a>6.启动项目测试发现报错</h5><p><img src="/2021/07/15/shiro/190c398497f64ee25629dedf8c398e8b.png"></p><p><img src="/2021/07/15/shiro/5811c1057c27f6a3403aafc623e0134a.png"></p><ul><li><p>错误解释: <strong>由于shiro中提供的simpleByteSource实现没有实现序列化,所有在认证时出现错误信息</strong></p></li><li><blockquote><p>序列化：让定义的pojo类上都实现序列化接口 Serializable</p></blockquote><p><img src="/2021/07/15/shiro/1626156365782.png"></p></li><li><p>解决方案: <strong>需要自动salt实现序列化</strong></p><ul><li><p>实现 实体类 序列化</p></li><li><p><strong>自定义salt实现 实现序列化接口</strong></p><blockquote><p>解决方法一（还是有问题不建议），请使用第二种</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.chao.springboot_jsp_shiro.salt;import org.apache.shiro.codec.Base64;import org.apache.shiro.codec.CodecSupport;import org.apache.shiro.codec.Hex;import org.apache.shiro.util.ByteSource;import org.apache.shiro.util.SimpleByteSource;import java.io.File;import java.io.InputStream;import java.io.Serializable;import java.util.Arrays;&#x2F;&#x2F;自定义salt实现序列化接口  public class MyByteSource extends SimpleByteSource implements Serializable &#123;     public  MyByteSource(String string)&#123;         super(string);     &#125;  &#125; @Override      protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123;          System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);            &#x2F;&#x2F;从传过来的token获取到的用户名          String principal &#x3D; (String) token.getPrincipal();          UserService userService &#x3D; (UserService) ApplicationContextUtils.getBean(&quot;userService&quot;);          User user &#x3D; userService.findByUserName(principal);    &#x2F;&#x2F;        &#x2F;&#x2F;假设是从数据库获得的 用户名，密码  &#x2F;&#x2F;        String password_db&#x3D;&quot;123&quot;;  &#x2F;&#x2F;        String username_db&#x3D;&quot;zhangsan&quot;;            if (!ObjectUtils.isEmpty(user))&#123;  &#x2F;&#x2F;            SimpleAuthenticationInfo simpleAuthenticationInfo &#x3D;              return new SimpleAuthenticationInfo(user.getUsername(),user.getPassword(),                          new MyByteSource(user.getSalt()), this.getName());          &#125;  &#x2F;&#x2F;把上面的改成自己的MyByteSource          return null;      &#125;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/15/shiro/1626157085209.png"></p><blockquote><p>解决方法二</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.lut.shiro.salt;import org.apache.shiro.codec.Base64;import org.apache.shiro.codec.CodecSupport;import org.apache.shiro.codec.Hex;import org.apache.shiro.util.ByteSource; import java.io.File;import java.io.InputStream;import java.io.Serializable;import java.util.Arrays;&#x2F;&#x2F;自定义salt实现 实现序列化接口public class MyByteSource implements ByteSource, Serializable &#123;  private  byte[] bytes;  private String cachedHex;  private String cachedBase64;    public MyByteSource()&#123;    &#125;    public MyByteSource(byte[] bytes) &#123;      this.bytes &#x3D; bytes;  &#125;    public MyByteSource(char[] chars) &#123;      this.bytes &#x3D; CodecSupport.toBytes(chars);  &#125;    public MyByteSource(String string) &#123;      this.bytes &#x3D; CodecSupport.toBytes(string);  &#125;    public MyByteSource(ByteSource source) &#123;      this.bytes &#x3D; source.getBytes();  &#125;    public MyByteSource(File file) &#123;      this.bytes &#x3D; (new com.lut.shiro.salt.MyByteSource.BytesHelper()).getBytes(file);  &#125;    public MyByteSource(InputStream stream) &#123;      this.bytes &#x3D; (new com.lut.shiro.salt.MyByteSource.BytesHelper()).getBytes(stream);  &#125;    public static boolean isCompatible(Object o) &#123;      return o instanceof byte[] || o instanceof char[] || o instanceof String || o instanceof ByteSource || o instanceof File || o instanceof InputStream;  &#125;    public byte[] getBytes() &#123;      return this.bytes;  &#125;    public boolean isEmpty() &#123;      return this.bytes &#x3D;&#x3D; null || this.bytes.length &#x3D;&#x3D; 0;&#125;  public String toHex() &#123;      if (this.cachedHex &#x3D;&#x3D; null) &#123;          this.cachedHex &#x3D; Hex.encodeToString(this.getBytes());      &#125;        return this.cachedHex;  &#125;    public String toBase64() &#123;      if (this.cachedBase64 &#x3D;&#x3D; null) &#123;          this.cachedBase64 &#x3D; Base64.encodeToString(this.getBytes());      &#125;        return this.cachedBase64;  &#125;    public String toString() &#123;      return this.toBase64();  &#125;  public int hashCode() &#123;      return this.bytes !&#x3D; null &amp;&amp; this.bytes.length !&#x3D; 0 ? Arrays.hashCode(this.bytes) : 0;  &#125;    public boolean equals(Object o) &#123;      if (o &#x3D;&#x3D; this) &#123;          return true;      &#125; else if (o instanceof ByteSource) &#123;          ByteSource bs &#x3D; (ByteSource)o;          return Arrays.equals(this.getBytes(), bs.getBytes());      &#125; else &#123;          return false;      &#125;  &#125;    private static final class BytesHelper extends CodecSupport &#123;      private BytesHelper() &#123;      &#125;        public byte[] getBytes(File file) &#123;          return this.toBytes(file);      &#125;        public byte[] getBytes(InputStream stream) &#123;          return this.toBytes(stream);      &#125;  &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">- 在realm中使用自定义salt@Overrideprotected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123;  System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);  &#x2F;&#x2F;根据身份信息  String principal &#x3D; (String) token.getPrincipal();  &#x2F;&#x2F;在工厂中获取service对象  UserService userService &#x3D; (UserService) ApplicationContextUtils.getBean(&quot;userService&quot;);  User user &#x3D; userService.findByUserName(principal);  if(!ObjectUtils.isEmpty(user))&#123;    return new SimpleAuthenticationInfo(user.getUsername(),user.getPassword(),                                       new MyByteSource(user.getSalt()),this.getName());  &#125;  return null;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="/2021/07/15/shiro/48819135850a21827beec7a0e56f1cf3.png"></p></li></ul><h5 id="7-再次启动测试-发现可以成功放入redis缓存"><a href="#7-再次启动测试-发现可以成功放入redis缓存" class="headerlink" title="7.再次启动测试,发现可以成功放入redis缓存"></a>7.再次启动测试,发现可以成功放入redis缓存</h5><p><img src="/2021/07/15/shiro/1aeb9a30f66990bb0a6e640a778b2803.png"></p><p><img src="/2021/07/15/shiro/b04487c1ba9dbbd9b45861255be89107.png"></p><h5 id="8-发现一个小bug-自己想的不知道对不对"><a href="#8-发现一个小bug-自己想的不知道对不对" class="headerlink" title="8.发现一个小bug(自己想的不知道对不对)"></a>8.发现一个小bug(自己想的不知道对不对)</h5><blockquote><p>我发现如果我们只进行了登录，而没有进行登出操作时，我们redis的缓存会一直在，当我们重新登陆时就会报错，因此我们可以在登录的时候先清除一下缓存，然后再登录就可避免这种事情，不过这样缓存中每次只能有一个数据，我们在不同浏览器登录时可能会有bug，需要注意</p></blockquote><blockquote><p>方法：在类RedisCache中加入清楚缓存的方法</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;此方法是为了清除一下redis的缓存   public void clear2() throws CacheException &#123;       System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;clear2222&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);       getRedisTemplate().execute(new RedisCallback() &#123;           @Override           public Object doInRedis(RedisConnection redisConnection) throws DataAccessException &#123;               redisConnection.flushDb();               return null;           &#125;       &#125;);   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在controller中/login开始时调用此方法击溃了</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(&quot;login&quot;)   public String login(String username, String password) &#123;              new RedisCache&lt;&gt;().clear2(); &#x2F;&#x2F;这个东西的调用是因为，如果忘了退出，       &#x2F;&#x2F; 缓存不会清除，下一次登录会报错，因此，在登陆的时候先清一下缓存                            try &#123;           &#x2F;&#x2F;获取主体对象           Subject subject &#x3D; SecurityUtils.getSubject();           subject.login(new UsernamePasswordToken(username, password));           return &quot;redirect:&#x2F;index.jsp&quot;;       &#125; catch (UnknownAccountException e) &#123;           e.printStackTrace();           System.out.println(&quot;用户名错误!&quot;);       &#125; catch (IncorrectCredentialsException e) &#123;           e.printStackTrace();           System.out.println(&quot;密码错误!&quot;);       &#125; catch (Exception e) &#123;           e.printStackTrace();           System.out.println(e.getMessage());       &#125;       return &quot;redirect:&#x2F;login.jsp&quot;;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-9-4-加入验证码验证"><a href="#6-9-4-加入验证码验证" class="headerlink" title="6.9.4 加入验证码验证"></a>6.9.4 加入验证码验证</h4><h5 id="1-验证码工具类"><a href="#1-验证码工具类" class="headerlink" title="1.验证码工具类"></a>1.验证码工具类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.lut.utils;import javax.imageio.ImageIO;import java.awt.*;import java.awt.geom.AffineTransform;import java.awt.image.BufferedImage;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.OutputStream;import java.util.Arrays;import java.util.Random;&#x2F;** *@创建人  cx *@创建时间  2018&#x2F;11&#x2F;27 17:36 *@描述   验证码生成 *&#x2F;public class VerifyCodeUtils&#123;    &#x2F;&#x2F;使用到Algerian字体，系统里没有的话需要安装字体，字体只显示大写，去掉了1,0,i,o几个容易混淆的字符    public static final String VERIFY_CODES &#x3D; &quot;23456789ABCDEFGHJKLMNPQRSTUVWXYZ&quot;;    private static Random random &#x3D; new Random();    &#x2F;**     * 使用系统默认字符源生成验证码     * @param verifySize    验证码长度     * @return     *&#x2F;    public static String generateVerifyCode(int verifySize)&#123;        return generateVerifyCode(verifySize, VERIFY_CODES);    &#125;    &#x2F;**     * 使用指定源生成验证码     * @param verifySize    验证码长度     * @param sources   验证码字符源     * @return     *&#x2F;    public static String generateVerifyCode(int verifySize, String sources)&#123;        if(sources &#x3D;&#x3D; null || sources.length() &#x3D;&#x3D; 0)&#123;            sources &#x3D; VERIFY_CODES;        &#125;        int codesLen &#x3D; sources.length();        Random rand &#x3D; new Random(System.currentTimeMillis());        StringBuilder verifyCode &#x3D; new StringBuilder(verifySize);        for(int i &#x3D; 0; i &lt; verifySize; i++)&#123;            verifyCode.append(sources.charAt(rand.nextInt(codesLen-1)));        &#125;        return verifyCode.toString();    &#125;    &#x2F;**     * 生成随机验证码文件,并返回验证码值     * @param w     * @param h     * @param outputFile     * @param verifySize     * @return     * @throws IOException     *&#x2F;    public static String outputVerifyImage(int w, int h, File outputFile, int verifySize) throws IOException&#123;        String verifyCode &#x3D; generateVerifyCode(verifySize);        outputImage(w, h, outputFile, verifyCode);        return verifyCode;    &#125;    &#x2F;**     * 输出随机验证码图片流,并返回验证码值     * @param w     * @param h     * @param os     * @param verifySize     * @return     * @throws IOException     *&#x2F;    public static String outputVerifyImage(int w, int h, OutputStream os, int verifySize) throws IOException&#123;        String verifyCode &#x3D; generateVerifyCode(verifySize);        outputImage(w, h, os, verifyCode);        return verifyCode;    &#125;    &#x2F;**     * 生成指定验证码图像文件     * @param w     * @param h     * @param outputFile     * @param code     * @throws IOException     *&#x2F;    public static void outputImage(int w, int h, File outputFile, String code) throws IOException&#123;        if(outputFile &#x3D;&#x3D; null)&#123;            return;        &#125;        File dir &#x3D; outputFile.getParentFile();        if(!dir.exists())&#123;            dir.mkdirs();        &#125;        try&#123;            outputFile.createNewFile();            FileOutputStream fos &#x3D; new FileOutputStream(outputFile);            outputImage(w, h, fos, code);            fos.close();        &#125; catch(IOException e)&#123;            throw e;        &#125;    &#125;    &#x2F;**     * 输出指定验证码图片流     * @param w     * @param h     * @param os     * @param code     * @throws IOException     *&#x2F;    public static void outputImage(int w, int h, OutputStream os, String code) throws IOException&#123;        int verifySize &#x3D; code.length();        BufferedImage image &#x3D; new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);        Random rand &#x3D; new Random();        Graphics2D g2 &#x3D; image.createGraphics();        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);        Color[] colors &#x3D; new Color[5];        Color[] colorSpaces &#x3D; new Color[] &#123; Color.WHITE, Color.CYAN,                Color.GRAY, Color.LIGHT_GRAY, Color.MAGENTA, Color.ORANGE,                Color.PINK, Color.YELLOW &#125;;        float[] fractions &#x3D; new float[colors.length];        for(int i &#x3D; 0; i &lt; colors.length; i++)&#123;            colors[i] &#x3D; colorSpaces[rand.nextInt(colorSpaces.length)];            fractions[i] &#x3D; rand.nextFloat();        &#125;        Arrays.sort(fractions);        g2.setColor(Color.GRAY);&#x2F;&#x2F; 设置边框色        g2.fillRect(0, 0, w, h);        Color c &#x3D; getRandColor(200, 250);        g2.setColor(c);&#x2F;&#x2F; 设置背景色        g2.fillRect(0, 2, w, h-4);        &#x2F;&#x2F;绘制干扰线        Random random &#x3D; new Random();        g2.setColor(getRandColor(160, 200));&#x2F;&#x2F; 设置线条的颜色        for (int i &#x3D; 0; i &lt; 20; i++) &#123;            int x &#x3D; random.nextInt(w - 1);            int y &#x3D; random.nextInt(h - 1);            int xl &#x3D; random.nextInt(6) + 1;            int yl &#x3D; random.nextInt(12) + 1;            g2.drawLine(x, y, x + xl + 40, y + yl + 20);        &#125;        &#x2F;&#x2F; 添加噪点        float yawpRate &#x3D; 0.05f;&#x2F;&#x2F; 噪声率        int area &#x3D; (int) (yawpRate * w * h);        for (int i &#x3D; 0; i &lt; area; i++) &#123;            int x &#x3D; random.nextInt(w);            int y &#x3D; random.nextInt(h);            int rgb &#x3D; getRandomIntColor();            image.setRGB(x, y, rgb);        &#125;        shear(g2, w, h, c);&#x2F;&#x2F; 使图片扭曲        g2.setColor(getRandColor(100, 160));        int fontSize &#x3D; h-4;        Font font &#x3D; new Font(&quot;Algerian&quot;, Font.ITALIC, fontSize);        g2.setFont(font);        char[] chars &#x3D; code.toCharArray();        for(int i &#x3D; 0; i &lt; verifySize; i++)&#123;            AffineTransform affine &#x3D; new AffineTransform();            affine.setToRotation(Math.PI &#x2F; 4 * rand.nextDouble() * (rand.nextBoolean() ? 1 : -1), (w &#x2F; verifySize) * i + fontSize&#x2F;2, h&#x2F;2);            g2.setTransform(affine);            g2.drawChars(chars, i, 1, ((w-10) &#x2F; verifySize) * i + 5, h&#x2F;2 + fontSize&#x2F;2 - 10);        &#125;        g2.dispose();        ImageIO.write(image, &quot;jpg&quot;, os);    &#125;    private static Color getRandColor(int fc, int bc) &#123;        if (fc &gt; 255)            fc &#x3D; 255;        if (bc &gt; 255)            bc &#x3D; 255;        int r &#x3D; fc + random.nextInt(bc - fc);        int g &#x3D; fc + random.nextInt(bc - fc);        int b &#x3D; fc + random.nextInt(bc - fc);        return new Color(r, g, b);    &#125;    private static int getRandomIntColor() &#123;        int[] rgb &#x3D; getRandomRgb();        int color &#x3D; 0;        for (int c : rgb) &#123;            color &#x3D; color &lt;&lt; 8;            color &#x3D; color | c;        &#125;        return color;    &#125;    private static int[] getRandomRgb() &#123;        int[] rgb &#x3D; new int[3];        for (int i &#x3D; 0; i &lt; 3; i++) &#123;            rgb[i] &#x3D; random.nextInt(255);        &#125;        return rgb;    &#125;    private static void shear(Graphics g, int w1, int h1, Color color) &#123;        shearX(g, w1, h1, color);        shearY(g, w1, h1, color);    &#125;    private static void shearX(Graphics g, int w1, int h1, Color color) &#123;        int period &#x3D; random.nextInt(2);        boolean borderGap &#x3D; true;        int frames &#x3D; 1;        int phase &#x3D; random.nextInt(2);        for (int i &#x3D; 0; i &lt; h1; i++) &#123;            double d &#x3D; (double) (period &gt;&gt; 1)                    * Math.sin((double) i &#x2F; (double) period                    + (6.2831853071795862D * (double) phase)                    &#x2F; (double) frames);            g.copyArea(0, i, w1, 1, (int) d, 0);            if (borderGap) &#123;                g.setColor(color);                g.drawLine((int) d, i, 0, i);                g.drawLine((int) d + w1, i, w1, i);            &#125;        &#125;    &#125;    private static void shearY(Graphics g, int w1, int h1, Color color) &#123;        int period &#x3D; random.nextInt(40) + 10; &#x2F;&#x2F; 50;        boolean borderGap &#x3D; true;        int frames &#x3D; 20;        int phase &#x3D; 7;        for (int i &#x3D; 0; i &lt; w1; i++) &#123;            double d &#x3D; (double) (period &gt;&gt; 1)                    * Math.sin((double) i &#x2F; (double) period                    + (6.2831853071795862D * (double) phase)                    &#x2F; (double) frames);            g.copyArea(i, 0, 1, h1, 0, (int) d);            if (borderGap) &#123;                g.setColor(color);                g.drawLine(i, (int) d, i, 0);                g.drawLine(i, (int) d + h1, i, h1);            &#125;        &#125;    &#125;        &#x2F;&#x2F;这个方法没用，可以注销&#x2F;&#x2F;    public static void main(String[] args) throws IOException &#123; &#x2F;&#x2F;       &#x2F;&#x2F;获取验证码 &#x2F;&#x2F;       String s &#x3D; generateVerifyCode(4); &#x2F;&#x2F;       &#x2F;&#x2F;将验证码放入图片中 &#x2F;&#x2F;       outputImage(260,60,new File(&quot;&#x2F;Users&#x2F;chenyannan&#x2F;Desktop&#x2F;安工资料&#x2F;aa.jpg&quot;),s); &#x2F;&#x2F;       System.out.println(s);  &#x2F;&#x2F;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-开发页面加入验证码"><a href="#2-开发页面加入验证码" class="headerlink" title="2.开发页面加入验证码"></a>2.开发页面加入验证码</h5><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;form action&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;user&#x2F;login&quot; method&#x3D;&quot;post&quot;&gt;    用户名:&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; &gt; &lt;br&#x2F;&gt;    密码  : &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;password&quot;&gt; &lt;br&gt;    请输入验证码: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;code&quot;&gt;&lt;img src&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;user&#x2F;getImage&quot; alt&#x3D;&quot;&quot;&gt;&lt;br&gt;    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;登录&quot;&gt;&lt;&#x2F;form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-开发控制器"><a href="#3-开发控制器" class="headerlink" title="3.开发控制器"></a>3.开发控制器</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(&quot;getImage&quot;)public void getImage(HttpSession session, HttpServletResponse response) throws IOException &#123;  &#x2F;&#x2F;生成验证码  String code &#x3D; VerifyCodeUtils.generateVerifyCode(4);  &#x2F;&#x2F;验证码放入session  session.setAttribute(&quot;code&quot;,code);  &#x2F;&#x2F;验证码存入图片  ServletOutputStream os &#x3D; response.getOutputStream();  response.setContentType(&quot;image&#x2F;png&quot;);  VerifyCodeUtils.outputImage(220,60,os,code);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-放行验证码"><a href="#4-放行验证码" class="headerlink" title="4.放行验证码"></a>4.放行验证码</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">map.put(&quot;&#x2F;user&#x2F;getImage&quot;,&quot;anon&quot;);&#x2F;&#x2F;验证码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/15/shiro/622c929dca9cb0e1bc019cef00b099e6.png"></p><p><img src="/2021/07/15/shiro/1626170386743.png"></p><h5 id="5-修改认证流程"><a href="#5-修改认证流程" class="headerlink" title="5.修改认证流程"></a>5.修改认证流程</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(&quot;login&quot;)    public String login(String username, String password,String code,HttpSession session) &#123;        &#x2F;&#x2F;比较验证码        String codes &#x3D; (String) session.getAttribute(&quot;code&quot;);        try &#123;            if (codes.equalsIgnoreCase(code))&#123;                &#x2F;&#x2F;获取主体对象                Subject subject &#x3D; SecurityUtils.getSubject();                    subject.login(new UsernamePasswordToken(username, password));                    return &quot;redirect:&#x2F;index.jsp&quot;;            &#125;else&#123;                throw new RuntimeException(&quot;验证码错误!&quot;);            &#125;        &#125; catch (UnknownAccountException e) &#123;            e.printStackTrace();            System.out.println(&quot;用户名错误!&quot;);        &#125; catch (IncorrectCredentialsException e) &#123;            e.printStackTrace();            System.out.println(&quot;密码错误!&quot;);        &#125;catch (Exception e)&#123;            e.printStackTrace();            System.out.println(e.getMessage());        &#125;        return &quot;redirect:&#x2F;login.jsp&quot;;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6-修改salt不能序列化的问题"><a href="#6-修改salt不能序列化的问题" class="headerlink" title="6.修改salt不能序列化的问题"></a>6.修改salt不能序列化的问题</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;自定义salt实现  实现序列化接口public class MyByteSource implements ByteSource,Serializable &#123;    private  byte[] bytes;    private String cachedHex;    private String cachedBase64;    &#x2F;&#x2F;加入无参数构造方法实现序列化和反序列化    public MyByteSource()&#123;    &#125;    public MyByteSource(byte[] bytes) &#123;        this.bytes &#x3D; bytes;    &#125;    public MyByteSource(char[] chars) &#123;        this.bytes &#x3D; CodecSupport.toBytes(chars);    &#125;    public MyByteSource(String string) &#123;        this.bytes &#x3D; CodecSupport.toBytes(string);    &#125;    public MyByteSource(ByteSource source) &#123;        this.bytes &#x3D; source.getBytes();    &#125;    public MyByteSource(File file) &#123;        this.bytes &#x3D; (new MyByteSource.BytesHelper()).getBytes(file);    &#125;    public MyByteSource(InputStream stream) &#123;        this.bytes &#x3D; (new MyByteSource.BytesHelper()).getBytes(stream);    &#125;    public static boolean isCompatible(Object o) &#123;        return o instanceof byte[] || o instanceof char[] || o instanceof String || o instanceof ByteSource || o instanceof File || o instanceof InputStream;    &#125;    public byte[] getBytes() &#123;        return this.bytes;    &#125;    public boolean isEmpty() &#123;        return this.bytes &#x3D;&#x3D; null || this.bytes.length &#x3D;&#x3D; 0;    &#125;    public String toHex() &#123;        if (this.cachedHex &#x3D;&#x3D; null) &#123;            this.cachedHex &#x3D; Hex.encodeToString(this.getBytes());        &#125;        return this.cachedHex;    &#125;    public String toBase64() &#123;        if (this.cachedBase64 &#x3D;&#x3D; null) &#123;            this.cachedBase64 &#x3D; Base64.encodeToString(this.getBytes());        &#125;        return this.cachedBase64;    &#125;    public String toString() &#123;        return this.toBase64();    &#125;    public int hashCode() &#123;        return this.bytes !&#x3D; null &amp;&amp; this.bytes.length !&#x3D; 0 ? Arrays.hashCode(this.bytes) : 0;    &#125;    public boolean equals(Object o) &#123;        if (o &#x3D;&#x3D; this) &#123;            return true;        &#125; else if (o instanceof ByteSource) &#123;            ByteSource bs &#x3D; (ByteSource)o;            return Arrays.equals(this.getBytes(), bs.getBytes());        &#125; else &#123;            return false;        &#125;    &#125;    private static final class BytesHelper extends CodecSupport &#123;        private BytesHelper() &#123;        &#125;        public byte[] getBytes(File file) &#123;            return this.toBytes(file);        &#125;        public byte[] getBytes(InputStream stream) &#123;            return this.toBytes(stream);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7-启动测试"><a href="#7-启动测试" class="headerlink" title="7.启动测试"></a>7.启动测试</h5><p><img src="/2021/07/15/shiro/c943a648e344fb3e9ac217a84f5ac494.png"></p><h4 id="6-9-5-JSP中Shiro常用标签"><a href="#6-9-5-JSP中Shiro常用标签" class="headerlink" title="6.9.5 JSP中Shiro常用标签"></a>6.9.5 JSP中Shiro常用标签</h4><blockquote><p>想要在主页面拿到用户的主身分信息直接用下面标签</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">[<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">shiro:</span>principal</span><span class="token punctuation">/></span></span>]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此模块参考：<a href="https://www.cnblogs.com/fancongcong/p/8093258.html">https://www.cnblogs.com/fancongcong/p/8093258.html</a></p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;shiro:guest&gt;    游客访问 &lt;a href &#x3D; &quot;login.jsp&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;shiro:guest&gt; user 标签：用户已经通过认证\记住我 登录后显示响应的内容&lt;shiro:user&gt;    欢迎[&lt;shiro:principal&#x2F;&gt;]登录 &lt;a href &#x3D; &quot;logout&quot;&gt;退出&lt;&#x2F;a&gt;&lt;&#x2F;shiro:user&gt; authenticated标签：用户身份验证通过，即 Subjec.login 登录成功 不是记住我登录的&lt;shiro:authenticted&gt;    用户[&lt;shiro:principal&#x2F;&gt;] 已身份验证通过&lt;&#x2F;shiro:authenticted&gt; notAuthenticated标签：用户未进行身份验证，即没有调用Subject.login进行登录,包括&quot;记住我&quot;也属于未进行身份验证&lt;shiro:notAuthenticated&gt;    未身份验证(包括&quot;记住我&quot;)&lt;&#x2F;shiro:notAuthenticated&gt;  principal 标签：显示用户身份信息，默认调用Subjec.getPrincipal()获取，即Primary Principal&lt;shiro:principal property &#x3D; &quot;username&quot;&#x2F;&gt; hasRole标签：如果当前Subject有角色将显示body体内的内容&lt;shiro:hashRole name &#x3D; &quot;admin&quot;&gt;    用户[&lt;shiro:principal&#x2F;&gt;]拥有角色admin&lt;&#x2F;shiro:hashRole&gt; hasAnyRoles标签：如果Subject有任意一个角色(或的关系)将显示body体里的内容&lt;shiro:hasAnyRoles name &#x3D; &quot;admin,user&quot;&gt;    用户[&lt;shiro:pricipal&#x2F;&gt;]拥有角色admin 或者 user&lt;&#x2F;shiro:hasAnyRoles&gt; lacksRole:如果当前 Subjec没有角色将显示body体内的内容&lt;shiro:lacksRole name &#x3D; &quot;admin&quot;&gt;    用户[&lt;shiro:pricipal&#x2F;&gt;]没有角色admin&lt;&#x2F;shiro:lacksRole&gt; hashPermission:如果当前Subject有权限将显示body体内容&lt;shiro:hashPermission name &#x3D; &quot;user:create&quot;&gt;    用户[&lt;shiro:pricipal&#x2F;&gt;] 拥有权限user:create&lt;&#x2F;shiro:hashPermission&gt; lacksPermission:如果当前Subject没有权限将显示body体内容&lt;shiro:lacksPermission name &#x3D; &quot;org:create&quot;&gt;    用户[&lt;shiro:pricipal&#x2F;&gt;] 没有权限org:create&lt;&#x2F;shiro:lacksPermission&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、Shiro整合springboot之thymeleaf权限控制"><a href="#七、Shiro整合springboot之thymeleaf权限控制" class="headerlink" title="七、Shiro整合springboot之thymeleaf权限控制"></a>七、Shiro整合springboot之thymeleaf权限控制</h2><h3 id="1-引入扩展依赖"><a href="#1-引入扩展依赖" class="headerlink" title="1.引入扩展依赖"></a>1.引入扩展依赖</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;dependency&gt;    &lt;groupId&gt;com.github.theborakompanioni&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;thymeleaf-extras-shiro&lt;&#x2F;artifactId&gt;    &lt;version&gt;2.0.0&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;    &lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;&#x2F;artifactId&gt;&lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>配置</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">spring.thymeleaf.cache&#x3D;falsespring.thymeleaf.suffix&#x3D;.htmlspring.mvc.view.prefix&#x3D;&#x2F;templates<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-页面中引入命名空间"><a href="#2-页面中引入命名空间" class="headerlink" title="2.页面中引入命名空间"></a>2.页面中引入命名空间</h3><blockquote><p>xmlns:shiro=“<a href="http://www.pollix.at/thymeleaf/shiro%E2%80%9D">http://www.pollix.at/thymeleaf/shiro”</a> </p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>shiro</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.pollix.at/thymeleaf/shiro<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>设置跳转页面</p></blockquote><p><img src="/2021/07/15/shiro/1626181161165.png"></p><blockquote><p>修改路径</p></blockquote><p><img src="/2021/07/15/shiro/1626181198487.png"></p><h3 id="3-常见权限控制标签使用"><a href="#3-常见权限控制标签使用" class="headerlink" title="3.常见权限控制标签使用"></a>3.常见权限控制标签使用</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 验证当前用户是否为“访客”，即未认证（包含未记住）的用户。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">shiro:</span>guest</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Please <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>login.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 认证通过或已记住的用户。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">shiro:</span>user</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    Welcome back John! Not John? Click <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>login.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> to login.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 已认证通过的用户。不包含已记住的用户，这是与user标签的区别所在。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">shiro:</span>authenticated</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    Hello, <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">shiro:</span>principal</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>, how are you today?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">shiro:</span>authenticated</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateAccount.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Update your contact information<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 输出当前用户信息，通常为登录帐号信息。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Hello, <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">shiro:</span>principal</span><span class="token punctuation">/></span></span>, how are you today?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 未认证通过用户，与authenticated标签相对应。与guest标签的区别是，该标签包含已记住用户。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">shiro:</span>notAuthenticated</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    Please <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>login.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> in order to update your credit card information.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 验证当前用户是否属于该角色。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">shiro:</span>hasRole</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>admin<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>admin.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Administer the system<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 拥有该角色 --></span><span class="token comment">&lt;!-- 与hasRole标签逻辑相反，当用户不属于该角色时验证通过。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">shiro:</span>lacksRole</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>developer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 没有该角色 --></span>    Sorry, you are not allowed to developer the system.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 验证当前用户是否属于以下所有角色。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">shiro:</span>hasAllRoles</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>developer, 2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 角色与判断 --></span>    You are a developer and a admin.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 验证当前用户是否属于以下任意一个角色。  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">shiro:</span>hasAnyRoles</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>admin, vip, developer,1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 角色或判断 --></span>    You are a admin, vip, or developer.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--验证当前用户是否拥有指定权限。  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">shiro:</span>hasPermission</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userInfo:add<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createUser.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 拥有权限 --></span><span class="token comment">&lt;!-- 与hasPermission标签逻辑相反，当前用户没有制定权限时，验证通过。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">shiro:</span>lacksPermission</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userInfo:del<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 没有权限 --></span>    Sorry, you are not allowed to delete user accounts.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 验证当前用户是否拥有以下所有角色。 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">shiro:</span>hasAllPermissions</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userInfo:view, userInfo:add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 权限与判断 --></span>    You can see or add users.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 验证当前用户是否拥有以下任意一个权限。  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">shiro:</span>hasAnyPermissions</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userInfo:view, userInfo:del<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 权限或判断 --></span>    You can see or delete users.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">shiro:</span>hasPermission</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pp<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>createUser.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Create a new User<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-加入shiro的方言配置"><a href="#4-加入shiro的方言配置" class="headerlink" title="4.加入shiro的方言配置"></a>4.加入shiro的方言配置</h3><ul><li><strong>页面标签不起作用一定要记住在ShiroConfig加入方言处理</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Bean(name &#x3D; &quot;shiroDialect&quot;)public ShiroDialect shiroDialect()&#123;  return new ShiroDialect();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/15/shiro/1626336693417.png"></p>]]></content>
      
      
      <categories>
          
          <category> 认证授权 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shiro笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6月16日，大唐芙蓉园游记</title>
      <link href="/2021/07/07/6-yue-16-ri-da-tang-fu-rong-yuan-you-ji/"/>
      <url>/2021/07/07/6-yue-16-ri-da-tang-fu-rong-yuan-you-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="6月16日，大唐芙蓉园游记"><a href="#6月16日，大唐芙蓉园游记" class="headerlink" title="6月16日，大唐芙蓉园游记"></a>6月16日，大唐芙蓉园游记</h1><h3 id="1-中午必须来顿泡沫"><a href="#1-中午必须来顿泡沫" class="headerlink" title="1.中午必须来顿泡沫"></a>1.中午必须来顿泡沫</h3><p><img src="/2021/07/07/6-yue-16-ri-da-tang-fu-rong-yuan-you-ji/1625645685068.png"></p><h3 id="2-大师兄鲍晓玲"><a href="#2-大师兄鲍晓玲" class="headerlink" title="2.大师兄鲍晓玲"></a>2.大师兄鲍晓玲</h3><p><img src="/2021/07/07/6-yue-16-ri-da-tang-fu-rong-yuan-you-ji/1625645783017.png"></p><h3 id="3-年年岁岁花相似，岁岁年年人不同"><a href="#3-年年岁岁花相似，岁岁年年人不同" class="headerlink" title="3.年年岁岁花相似，岁岁年年人不同"></a>3.年年岁岁花相似，岁岁年年人不同</h3><p><img src="/2021/07/07/6-yue-16-ri-da-tang-fu-rong-yuan-you-ji/1625645887191.png"></p><p><img src="/2021/07/07/6-yue-16-ri-da-tang-fu-rong-yuan-you-ji/1625645901736.png"></p><h3 id="4-春江潮水连海平，海上明月共潮生"><a href="#4-春江潮水连海平，海上明月共潮生" class="headerlink" title="4.春江潮水连海平，海上明月共潮生"></a>4.春江潮水连海平，海上明月共潮生</h3><p><img src="/2021/07/07/6-yue-16-ri-da-tang-fu-rong-yuan-you-ji/1625646111902.png"></p><p><img src="/2021/07/07/6-yue-16-ri-da-tang-fu-rong-yuan-you-ji/1625646214101.png"></p><h3 id="5-天长地久有时尽，此恨绵绵无绝期"><a href="#5-天长地久有时尽，此恨绵绵无绝期" class="headerlink" title="5.天长地久有时尽，此恨绵绵无绝期"></a>5.天长地久有时尽，此恨绵绵无绝期</h3><p><img src="/2021/07/07/6-yue-16-ri-da-tang-fu-rong-yuan-you-ji/1625646338771.png"></p><p><img src="/2021/07/07/6-yue-16-ri-da-tang-fu-rong-yuan-you-ji/1625646355146.png"></p><h3 id="6-海底捞必须安排上"><a href="#6-海底捞必须安排上" class="headerlink" title="6.海底捞必须安排上"></a>6.海底捞必须安排上</h3><p><img src="/2021/07/07/6-yue-16-ri-da-tang-fu-rong-yuan-you-ji/1625646403259.png"></p><h3 id="7-遇见飞天杨玉环"><a href="#7-遇见飞天杨玉环" class="headerlink" title="7.遇见飞天杨玉环"></a>7.遇见飞天杨玉环</h3><p><img src="/2021/07/07/6-yue-16-ri-da-tang-fu-rong-yuan-you-ji/1625646437118.png"></p><p><img src="/2021/07/07/6-yue-16-ri-da-tang-fu-rong-yuan-you-ji/1625646449449.png"></p><h3 id="8-人体描边—-鲍晓玲"><a href="#8-人体描边—-鲍晓玲" class="headerlink" title="8.人体描边—-鲍晓玲"></a>8.人体描边—-鲍晓玲</h3><p><img src="/2021/07/07/6-yue-16-ri-da-tang-fu-rong-yuan-you-ji/1625646496275.png"></p><h3 id="9-时空与我在此交错"><a href="#9-时空与我在此交错" class="headerlink" title="9.时空与我在此交错"></a>9.时空与我在此交错</h3><p><img src="/2021/07/07/6-yue-16-ri-da-tang-fu-rong-yuan-you-ji/1625646679264.png"></p><h3 id="10-欢迎下次光临"><a href="#10-欢迎下次光临" class="headerlink" title="10.欢迎下次光临"></a>10.欢迎下次光临</h3>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6月16日，大唐芙蓉园游记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器购买及宝塔环境部署说明</title>
      <link href="/2021/07/07/fu-wu-qi-gou-mai-ji-bao-ta-huan-jing-bu-shu-shuo-ming/"/>
      <url>/2021/07/07/fu-wu-qi-gou-mai-ji-bao-ta-huan-jing-bu-shu-shuo-ming/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="服务器购买及宝塔环境部署说明"><a href="#服务器购买及宝塔环境部署说明" class="headerlink" title="服务器购买及宝塔环境部署说明"></a>服务器购买及宝塔环境部署说明</h1><h1 id="服务器相关知识"><a href="#服务器相关知识" class="headerlink" title="服务器相关知识"></a>服务器相关知识</h1><blockquote><p>为什么程序员都需要一个自己的服务器？</p></blockquote><p>1、作为一个程序员，必须要发布自己的网站和项目<br>2、练习Linux操作<br>3、自己的远程仓库、远程数据库、远程tomcat…搭建在服务器上<br>4、练习，Linux进行任意的环境部署操作</p><blockquote><p>服务器如何购买？</p></blockquote><p>尽量打折的时候买<br>香港服务器可以避免备案，但尽量不要自己挂VPN，会被封<br><img src="/2021/07/07/fu-wu-qi-gou-mai-ji-bao-ta-huan-jing-bu-shu-shuo-ming/20200603110611759.png"></p><blockquote><p>买完服务器之后该做什么</p></blockquote><p>服务器就是一个远程Linux<br>1、在阿里云购买的，需要开通安全组设置；端口映射（端口映射都需要在阿里云的面板安装）<br><img src="/2021/07/07/fu-wu-qi-gou-mai-ji-bao-ta-huan-jing-bu-shu-shuo-ming/20200603111220813.png"><br>2、获取服务器的公网ip地址：修改实例名称和密码，第一次修改需要重启，使用Xshell远程连接<br>170.11.11.11 root 123456<br><img src="/2021/07/07/fu-wu-qi-gou-mai-ji-bao-ta-huan-jing-bu-shu-shuo-ming/20200603112144497.png"></p><blockquote><p>连接到服务器之后，我们需要搭建环境！</p></blockquote><p>1、傻瓜式（宝塔面板）</p><blockquote><p>查看面板入口</p><p>/etc/init.d/bt default </p><p>关闭安全入口：</p><p>rm -f /www/server/panel/data/admin_path.pl </p></blockquote><p>宝塔面板安装教学：<a href="https://www.bt.cn/bbs/thread-19376-1-1.html">https://www.bt.cn/bbs/thread-19376-1-1.html</a></p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">yum install -y wget &amp;&amp; wget -O install.sh http:&#x2F;&#x2F;download.bt.cn&#x2F;install&#x2F;install_6.0.sh &amp;&amp; sh install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载完毕之后，就可以得到一个地址：宝塔的管理面板</p><ul><li>url</li><li>username</li><li>password</li><li><img src="/2021/07/07/fu-wu-qi-gou-mai-ji-bao-ta-huan-jing-bu-shu-shuo-ming/20200603113130373.png"></li><li><img src="/2021/07/07/fu-wu-qi-gou-mai-ji-bao-ta-huan-jing-bu-shu-shuo-ming/1620799838475.png"></li></ul><blockquote><p>一键部署应用</p></blockquote><p><img src="/2021/07/07/fu-wu-qi-gou-mai-ji-bao-ta-huan-jing-bu-shu-shuo-ming/20200603152612136.png"></p><blockquote><p>端口开启<br><img src="/2021/07/07/fu-wu-qi-gou-mai-ji-bao-ta-huan-jing-bu-shu-shuo-ming/20200603152804140.png"></p></blockquote><blockquote><p>放入网站进行访问</p></blockquote><p>比如tomcat就直接放到webapps目录下<br>特殊的网站：开源项目，就是按照自己的操作来</p><blockquote><p>上传文件尽量使用XFTP</p></blockquote><blockquote><p>网站如果访问测试失败，一定是防火墙问题（Linux服务器，阿里云安全组面板）</p></blockquote><p>war直接丢到tomcat即可<br>jar直接用java -jar 执行即可</p><p>2、<strong>命令式（原生）</strong></p>]]></content>
      
      
      <categories>
          
          <category> 其他笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器购买及宝塔环境部署说明 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux简单命令</title>
      <link href="/2021/07/07/linux-jian-dan-ming-ling/"/>
      <url>/2021/07/07/linux-jian-dan-ming-ling/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Linux简单命令"><a href="#Linux简单命令" class="headerlink" title="Linux简单命令"></a>Linux简单命令</h1><h2 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h2><table><thead><tr><th align="center">命令</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">sync</td><td align="center">将数据由内存同步到硬盘中</td></tr><tr><td align="center">shutdown</td><td align="center">关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机：</td></tr><tr><td align="center">shutdown –h 10</td><td align="center">这个命令告诉大家，计算机将在10分钟后关机</td></tr><tr><td align="center">shutdown –h now</td><td align="center">立马关机</td></tr><tr><td align="center">shutdown –h 20:25</td><td align="center">系统会在今天20:25关机</td></tr><tr><td align="center">shutdown –h +10</td><td align="center">十分钟后关机</td></tr><tr><td align="center">shutdown –r now</td><td align="center">系统立马重启</td></tr><tr><td align="center">shutdown –r +10</td><td align="center">系统十分钟后重启</td></tr><tr><td align="center">reboot</td><td align="center">就是重启，等同于 shutdown –r now</td></tr><tr><td align="center">halt</td><td align="center">关闭系统，等同于shutdown –h now 和 poweroff</td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table><table><thead><tr><th align="center">命令</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">ls</td><td align="center">列出目录</td></tr><tr><td align="center">cd</td><td align="center">切换目录</td></tr><tr><td align="center">pwd</td><td align="center">显示目前的目录</td></tr><tr><td align="center">mkdir</td><td align="center">创建一个新的目录</td></tr><tr><td align="center">rmdir</td><td align="center">删除一个空的目录</td></tr><tr><td align="center">cp</td><td align="center">复制文件或目录</td></tr><tr><td align="center">rm</td><td align="center">移除文件或目录</td></tr><tr><td align="center">mv</td><td align="center">移动文件与目录，或修改文件与目录的名称</td></tr><tr><td align="center">ls -al</td><td align="center">将目录下的所有文件列出来(含属性与隐藏档)</td></tr><tr><td align="center">cd..</td><td align="center">返回上一级目录</td></tr><tr><td align="center"><code>ll</code>或者<code>ls –l</code></td><td align="center">显示一个文件的属性以及文件所属的用户和组</td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center">cat</td><td align="center">由第一行开始显示文件内容</td></tr><tr><td align="center">tac</td><td align="center">从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</td></tr><tr><td align="center">nl</td><td align="center">显示的时候，顺道输出行号！</td></tr><tr><td align="center">more</td><td align="center">一页一页的显示文件内容</td></tr><tr><td align="center">less</td><td align="center">与 more 类似，但是比 more 更好的是，他可以往前翻页！</td></tr><tr><td align="center">head</td><td align="center">只看头几行</td></tr><tr><td align="center">tail</td><td align="center">只看尾巴几行</td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 其他笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux简单命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>员工登录系统</title>
      <link href="/2021/07/07/yuan-gong-deng-lu-xi-tong/"/>
      <url>/2021/07/07/yuan-gong-deng-lu-xi-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="员工登陆系统"><a href="#员工登陆系统" class="headerlink" title="员工登陆系统"></a>员工登陆系统</h1><p>  idea快捷键</p><table><thead><tr><th align="center">Ctrl+Alt+L</th><th align="center">格式化代码</th></tr></thead><tbody><tr><td align="center">Ctrl+F</td><td align="center">在当前文件进行文本查找</td></tr><tr><td align="center">Ctrl + O</td><td align="center">选择可重写的方法</td></tr><tr><td align="center">Ctrl + I</td><td align="center">选择可继承的方法</td></tr><tr><td align="center">Ctrl+F12</td><td align="center">查找类中的方法</td></tr><tr><td align="center">Ctrl+N</td><td align="center">全局查找方法</td></tr></tbody></table><p>yml连接数据库</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">spring:  datasource:    username: root    password: 123456    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;springboot?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8    driver-class-name: com.mysql.cj.jdbc.Driver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1616842675354-1625641715260.png"></p><p><img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1617353519302-1625641715261.png"></p><p>properties连接数据库</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">spring.datasource.url &#x3D; jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;user?serverTimezone&#x3D;UTCspring.datasource.username &#x3D; rootspring.datasource.password &#x3D; lidayongspring.datasource.driverClassName &#x3D; com.mysql.cj.jdbc.Driver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>创建boot项目</p></li><li><p>导入依赖</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">       &#x2F;&#x2F;thymeleaf依赖&#x2F;&#x2F;thymeleaf前段的框架：  &#x2F;&#x2F;每个要包裹的名字前要加th：&#x2F;&#x2F;@&#123;&#125;包裹住引入web静态资源       &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;&#x2F;artifactId&gt;        &lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;lombok可以帮忙写get&#x2F;set方法，只需要加上注解&#x2F;&#x2F;@Data&#x2F;&#x2F;@AllArgsConstructor 有参构造&#x2F;&#x2F;@NoArgsConstructor  无参构造        &lt;dependency&gt;            &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;            &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;        &lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>页面位置</p><p><img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1616740727931-1625641715261.png"></p><p>网页放在templates里面</p><p>css等样式放在static里面方便thymeleaf识别</p></li><li><p>设置Mvc视图解析器</p><p><code> controller层也可以实现</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controllerpublic class indexController &#123;    &#x2F;&#x2F;可以自己在config里面写&#x2F;&#x2F;    @RequestMapping(&#123;&quot;&#x2F;&quot;,&quot;index.html&quot;&#125;)&#x2F;&#x2F;    public String index()&#123;&#x2F;&#x2F;        return &quot;index&quot;;&#x2F;&#x2F;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">@ResponseBody注解不返回页面，直接返回return里面的值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1616740755098-1625641715261.png"></p></li><li><p>国际化操作</p><p><img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1616740770972-1625641715261.png"></p><p>在resource文件夹下创建如下的格式文件</p><p><img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1616740787835-1625641715261.png"></p><p>对国际化进行配置</p><p><img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1616740807481-1625641715261.png"></p><p><img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1616740823553-1625641715261.png"></p><p>配置文件写好以后需要在MvcConfig里面进行@Bean配置实现托管</p><p><img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1616740838055-1625641715261.png"></p><p>最后在需要国际化的网页中进行操作</p><p><img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1616740852862-1625641715261.png"></p><ol start="6"><li><p>实现页面的登陆功能</p><p>（1） 书写controller层</p><p><img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1616740870385-1625641715261.png"></p><p><img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1616740881907-1625641715261.png"></p></li></ol></li></ol><ol start="7"><li><p>登陆拦截器</p><p>因为登陆的时候不仅可以通过输入正确的密码，而且可以直接通过去访问登陆成功后的页面的链接对页面进行访问，达不到我们登陆的目的，因此需要设置登陆拦截器</p><p><code>登录拦截器我们用到了Mvc的拦截功能，必须写一个配置类</code></p><p>（1）在controller层给出判断拦截的条件</p><p><img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1616740898158-1625641715261.png"></p><p>（2）写配置文件</p><p><img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1616740912376-1625641715261.png"></p><p>（3） 注册到MvcConfig里面</p><p><img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1616740925363-1625641715261.png"></p><p>（4）将登陆页面的名字换成我们的登录名（获取session中的名字对应的值）</p><p><img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1616740940246-1625641715261.png"></p><p>（5）css,js样式放行要具体到文件夹</p><p><code>（6）HTML导入css和js样式的时候的路径一定要对</code></p></li><li><p>展示员工列表</p><p><img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1616740957674-1625641715261.png"></p><p><img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1616740971007-1625641715261.png"></p><p><img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1616740987102-1625641715261.png"></p></li><li><p>添加员工</p><p><img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1616741003398-1625641715261.png"></p><p><img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1616741018330-1625641715261.png"></p></li></ol><p>疑惑：为啥直接传回去就是一个employy对象？</p><ol start="10"><li><p>修改员工</p><p>首先，我们需要将要修改的员工的信息返回到form表单里，</p><p><img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1616741408056-1625641715261.png"></p><p>controller层接受数据，遍历员工</p><p><img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1616741821687-1625641715261.png"></p><p>对修改页面进行操作，使员工信息可以展示在修改页面，方便修改</p><p><img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1616742117069-1625641715261.png"></p><p>修改好信息后返回给后台，与增加员工一样，重定向跳转</p><p><img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1616743150243-1625641715261.png"></p><p>出现问题了，直接点添加，他不会修改以前的，而是新增了一个新的，因此我们在修改的时候返回对象时应该将其id属性也返回</p><p><img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1616743457322-1625641715261.png"></p></li><li><p>删除员工</p><p><img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1616745897837-1625641715262.png"></p><p><img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1616745933230-1625641715262.png"></p></li><li><p>设置404页面以及500等错误页面</p><p><img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1616746177117-1625641715262.png"></p></li><li><p>注销</p><p><img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1616751277480-1625641715262.png"></p><p><img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1616751339417-1625641715262.png"></p></li><li><p>整合JDBC</p><p>（1）导入依赖</p><p><img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1616844228635-1625641715262.png"></p><p>（2）配置数据库</p><p> <img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1616844284753-1625641715262.png"></p><p>（3）查询所有</p><p><img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1616844429697-1625641715262.png"></p><p>（4）添加员工</p><p><img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1616845123996-1625641715262.png"></p><p><img src="/2021/07/07/yuan-gong-deng-lu-xi-tong/1625641816481.png"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 员工登录系统笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swagger</title>
      <link href="/2021/07/07/swagger/"/>
      <url>/2021/07/07/swagger/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="Swagger简介"><a href="#Swagger简介" class="headerlink" title="Swagger简介"></a>Swagger简介</h2><p><strong>前后端分离</strong></p><p>Vue + SpringBoot<br>后端<strong>时代</strong>：前端只用管理静态页面；html ⇒ 后端。模板引擎JSP ⇒ 后端是主力。</p><p>前后端分离时代：</p><ul><li>后端：后端控制层，服务层，数据访问层【后端团队】</li><li>前端：前端控制层，视图层【前端团队】<ul><li>伪造后端数据，json。已经存在了，不需要后端，前端工程依旧能够跑起来。</li></ul></li><li>前后端如何交互？ ===&gt; API</li><li>前后端相对独立，松耦合；</li><li>前后端甚至可以部署在不同的服务器上；</li></ul><p>产生一个问题：</p><ul><li>前后端集成联调，前端人员无法和后端人员无法做到，“即时协商，尽早解决”，最终导致问题集中爆发；</li></ul><p>解决方案：</p><ul><li>首先指定schema[计划的提纲]，实时更新最新API，降低集成的风险；</li><li>早些年：指定word计划文档；</li><li>前后端分离：<ul><li>前端测试后端接口：postman</li><li>后端提供接口，需要实时更新最新的消息及改动！</li></ul></li></ul><h2 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h2><ul><li>号称世界上最流行的Api框架</li><li>RestFul Api 文档在线自动生成工具 =&gt; Api文档与Api定义同步更新</li><li>直接运行，可以在线测试API接口；</li><li>支持多种语言：（Java、Php…）</li></ul><p>官网：<a href="https://swagger.io/">https://swagger.io/</a></p><p>在项目中使用swagger需要springbox；</p><ul><li>swagger2</li><li>ui</li></ul><h2 id="SpringBoot集成Swagger"><a href="#SpringBoot集成Swagger" class="headerlink" title="SpringBoot集成Swagger"></a>SpringBoot集成Swagger</h2><ol><li>新建一个SpringBoot - web项目</li><li>导入相关依赖<br><img src="/2021/07/07/swagger/20210121215648715.png"></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;io.springfox&#x2F;springfox-swagger2 --&gt;&lt;dependency&gt;    &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;springfox-swagger2&lt;&#x2F;artifactId&gt;    &lt;version&gt;2.9.2&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;io.springfox&#x2F;springfox-swagger-ui --&gt;&lt;dependency&gt;    &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;springfox-swagger-ui&lt;&#x2F;artifactId&gt;    &lt;version&gt;2.9.2&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>编写一个Hello工程</li><li>配置Swagger ==&gt; Config</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.kuang.swagger.config;import org.springframework.context.annotation.Configuration;import springfox.documentation.swagger2.annotations.EnableSwagger2;@Configuration@EnableSwagger2   &#x2F;&#x2F; 开启Swagger2public class SwaggerConfig &#123;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>测试运行 <a href="http://localhost:8080/swagger-ui.html![](Swagger/20210121233447652.png)">http://localhost:8080/swagger-ui.html![](Swagger/20210121233447652.png)</a></li></ol><h2 id="配置Swagger"><a href="#配置Swagger" class="headerlink" title="配置Swagger"></a>配置Swagger</h2><p>swagger的bean实例Docket；（在上面SwaggerConfig 类中添加）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configuration@EnableSwagger2   &#x2F;&#x2F; 开启Swagger2public class SwaggerConfig &#123;    &#x2F;&#x2F;配置了swagger的Docket 的 bean 实例    @Bean    public Docket docket()&#123;        return new Docket(DocumentationType.SWAGGER_2)                .apiInfo(apiInfo());    &#125;    &#x2F;&#x2F;配置 swagger 信息 &#x3D; apiInfo    private ApiInfo apiInfo()&#123;        &#x2F;&#x2F;作者信息        Contact contact &#x3D; new Contact(&quot;秦疆&quot;, &quot;https:&#x2F;&#x2F;blog.kuangstudy.com&#x2F;&quot;, &quot;24736743@qq.com&quot;);        return new ApiInfo(&quot;狂神的SwaggerAPI文档&quot;,                &quot;即时在小的帆也能远航&quot;,                &quot;v1.0&quot;,                &quot;http:&#x2F;&#x2F;blog.kuangstudy.com&#x2F;&quot;,                contact,                &quot;Apache 2.0&quot;,                &quot;http:&#x2F;&#x2F;www.apache.org&#x2F;licenses&#x2F;LICENSE-2.0&quot;,                new ArrayList()        );    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Swagger配置扫描接口"><a href="#Swagger配置扫描接口" class="headerlink" title="Swagger配置扫描接口"></a>Swagger配置扫描接口</h2><p>Docket.select()<br>接着上面的docket() 讲解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;配置了swagger的Docket 的 bean 实例    @Bean    public Docket docket()&#123;        return new Docket(DocumentationType.SWAGGER_2)                .apiInfo(apiInfo())                .select()                &#x2F;&#x2F; RequestHandlerSelectors, 配置要扫描的包                &#x2F;&#x2F; basePackage(): 指定要扫描的包                &#x2F;&#x2F; any(): 扫描全部                &#x2F;&#x2F; none(): 都不扫描                &#x2F;&#x2F; withClassAnnotation : 扫描类上的注解, 参数是一个注解的反射对象                &#x2F;&#x2F; 例如：withClassAnnotation(RestController.class) 只扫描类上有@RestController的生成文档                &#x2F;&#x2F; withMethodAnnotation: 扫描方法上的注解, 参数是一个注解的反射对象                .apis(RequestHandlerSelectors.basePackage(&quot;com.kuang.swagger.controller&quot;))                &#x2F;&#x2F; paths(): 过滤什么路径                .paths(PathSelectors.ant(&quot;&#x2F;kuang&#x2F;**&quot;))                .build();  &#x2F;&#x2F;build    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置是否启动Swagger（<strong>enable 是否启动Swagger， 如果为false， 则Swagger 不能再浏览器中访问</strong>）<br><img src="/2021/07/07/swagger/20210122002055264.png"><br>问题：我只希望我的Swagger在生产环境中使用，在发布的时候不使用？<br>解题思路：</p><ul><li>判断是不是生产环境 flag = false</li><li>注入enable(flag)</li></ul><p>解题步骤：<br>1.先在resources目录下创建两个properties文件，如下图<br><img src="/2021/07/07/swagger/20210122162603350.png"><br>接下来在application.properties文件中激活环境</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">spring.profiles.active&#x3D;dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在application-dev.properties中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">server.port&#x3D;8081<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在application-pro.properties中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">server.port&#x3D;8082<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.接着上面的docket()，在方法中加入形参Environment获取application.properties中的设置的环境</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> @Bean public Docket docket(Environment environment)&#123;     &#x2F;&#x2F; 设置要显示的Swagger环境     Profiles profiles &#x3D; Profiles.of(&quot;dev&quot;, &quot;test&quot;);     &#x2F;&#x2F; 通过 environment.acceptsProfiles(profiles) 判断是否处在自己设定的环境当中     boolean flag &#x3D; environment.acceptsProfiles(profiles);     return new Docket(DocumentationType.SWAGGER_2)             .apiInfo(apiInfo())             &#x2F;&#x2F;此处判断是生产环境 flag 就是为true 就可以访问Swagger             .enable(flag)                          .select()             .apis(RequestHandlerSelectors.basePackage(&quot;com.kuang.swagger.controller&quot;))&#x2F;&#x2F;                .paths(PathSelectors.ant(&quot;&#x2F;kuang&#x2F;**&quot;))             .build();  &#x2F;&#x2F;build &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.在浏览器上请求<a href="http://localhost:8081/swagger-ui.html#/%E5%B0%B1%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AESwagger%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E4%BF%AE%E6%94%B9spring.profiles.active%E4%B8%BApro">http://localhost:8081/swagger-ui.html#/就可以访问Swagger，我们可以修改spring.profiles.active为pro</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">spring.profiles.active&#x3D;pro<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在浏览器上请求<a href="http://localhost:8082/swagger-ui.html#/%E4%BC%9A%E5%87%BA%E7%8E%B0%F0%9F%98%B1">http://localhost:8082/swagger-ui.html#/会出现😱</a> Could not render e, see the console.</p><h2 id="配置API文档的分组"><a href="#配置API文档的分组" class="headerlink" title="配置API文档的分组"></a>配置API文档的分组</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">.groupName(&quot;狂神&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置多个分组，多个Docket实例即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Beanpublic Docket docket1()&#123;    return new Docket(DocumentationType.SWAGGER_2).groupName(&quot;A&quot;);&#125;@Beanpublic Docket docket2()&#123;    return new Docket(DocumentationType.SWAGGER_2).groupName(&quot;B&quot;);&#125;@Beanpublic Docket docket3()&#123;    return new Docket(DocumentationType.SWAGGER_2).groupName(&quot;C&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Swagger中就会出现多个分组<br><img src="/2021/07/07/swagger/20210122165758163.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.kuang.swagger.pojo;import io.swagger.annoations.ApiModel;import io.swagger.annotations.ApiModelProperty;@ApiModel(&quot;用户实体类&quot;)public class User &#123;    @ApiModelProperty(&quot;用户名&quot;)    public String username;    @ApiModelProperty(&quot;密码&quot;)    public String password;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.kuang.swagger.controller;import com.kuang.swagger.pojo.User;import io.swagger.annotations.ApiOperation;import io.swagger.annotations.ApiParam;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RestController;@RestControllerpublic class HelloController &#123;    @GetMapping(value &#x3D; &quot;&#x2F;hello&quot;)    public String hello()&#123;        return &quot;hello&quot;;    &#125;    &#x2F;&#x2F; 只要我们的接口中，返回值中存在实体类, 他就会扫描到Swagger中    @PostMapping(value &#x3D; &quot;&#x2F;user&quot;)    public User user()&#123;        return new User();    &#125;    @ApiOperation(&quot;hello控制类&quot;)    @GetMapping(value &#x3D; &quot;&#x2F;hello2&quot;)    public String hello2(@ApiParam(&quot;用户名&quot;) String username)&#123;        return &quot;hello &quot; + username;    &#125;    @ApiOperation(&quot;Post测试类&quot;)    @GetMapping(value &#x3D; &quot;&#x2F;postt&quot;)    public User postt(@ApiParam(&quot;用户名&quot;) User user)&#123;        return user;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实践步骤"><a href="#实践步骤" class="headerlink" title="实践步骤"></a>实践步骤</h3><ol><li>导入依赖</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>在启动类上添加注解</li></ol><p><img src="/2021/07/07/swagger/image-20230726195059848.png"></p><ol start="3"><li>创建swagger的配置类</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.chao.config;import java.util.function.Predicate;@Configurationpublic class swaggerConfiguration &#123;    @Bean    public Docket docket()&#123;        Docket docket &#x3D; new Docket(DocumentationType.SWAGGER_2);        docket                .apiInfo(apiInfo())            .enable(false)  &#x2F;&#x2F;是否开启swagger                            &#x2F;&#x2F; build模式,返回一个建造者                .select()                            &#x2F;&#x2F; api的配置路径                &#x2F;&#x2F; RequestHandlerSelectors, 配置要扫描的包                &#x2F;&#x2F; basePackage(): 指定要扫描的包                &#x2F;&#x2F; any(): 扫描全部                &#x2F;&#x2F; none(): 都不扫描                &#x2F;&#x2F; withClassAnnotation : 扫描类上的注解, 参数是一个注解的反射对象                &#x2F;&#x2F; 例如：withClassAnnotation(RestController.class) 只扫描类上有@RestController的生成文档                &#x2F;&#x2F; withMethodAnnotation: 扫描方法上的注解, 参数是一个注解的反射对象                .apis(RequestHandlerSelectors.basePackage(&quot;com.chao.controller&quot;))                            &#x2F;&#x2F; paths(): 过滤什么路径                &#x2F;&#x2F;例如.paths(PathSelectors.ant(&quot;&#x2F;kuang&#x2F;**&quot;))指的是只有链接带有&#x2F;kuang&#x2F;才被扫描                &#x2F;&#x2F;.paths(Predicates.or(PathSelectors.regex(&quot;&#x2F;kuang&#x2F;**&quot;),                &#x2F;&#x2F;                        PathSelectors.regex(&quot;&#x2F;kuang1&#x2F;**&quot;),                &#x2F;&#x2F;                        PathSelectors.regex(&quot;&#x2F;kuang2&#x2F;**&quot;)))                &#x2F;&#x2F;这三个路径都可以                &#x2F;&#x2F;paths(PathSelectors.any())扫描所有                .paths(PathSelectors.any())                .build();        return docket;    &#125;    &#x2F;&#x2F;配置 swagger 信息    private ApiInfo apiInfo() &#123;        return new ApiInfoBuilder()                &#x2F;&#x2F;作者信息                .contact(new Contact(&quot;任宜超&quot;,&quot;www.hahaha.com&quot;,&quot;727958639@qq.com&quot;))                &#x2F;&#x2F; 文档标题                .title(&quot;AI能力平台-监控服务-接口API&quot;)                &#x2F;&#x2F; 接口概述                .description(&quot;AI能力平台-监控服务接口，包括前端接口在内&quot;)                &#x2F;&#x2F; 版本号                .version(&quot;1.0&quot;)                &#x2F;&#x2F; 服务的域名                .termsOfServiceUrl(&quot;https:&#x2F;&#x2F;www.jiutian.com&quot;).build();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>常用注解</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Api(tags&#x3D;&quot;youController&quot;)   tags： 生成文档的名称（也可以定义多个）     description：描述信息     放在类上        @ApiOperation(value &#x3D; &quot;这是post方法&quot;,notes &#x3D; &quot;学习一下&quot;)    value:方法名                            notes：描述        @ApiParam(name &#x3D; &quot;名字&quot;,value &#x3D; &quot;描述&quot;,required &#x3D; true) String a, String b                            required：该参数是否为必要的                                @ApiIgnore   一般放在方法上，该方法就不会生成api文档                                                                @ApiImplicitParam(name &#x3D; &quot;a&quot;,value &#x3D; &quot;描述&quot;,required &#x3D; false,paramType &#x3D; &quot;字符串&quot;,dataType &#x3D; &quot;String&quot;)  放在方法上用于描述方法输入参数信息    @ApiModel(value &#x3D; &quot;自定义名字&quot;,description &#x3D; &quot;描述&quot;)                     放在实体类上，如果这个实体类成为任意一个生成api文档方法的返回值时会被解析                                                                @ApiModelProperty(value &#x3D; &quot;主键&quot;,name &#x3D; &quot;名字&quot;,required &#x3D; false,hidden &#x3D; false,example &#x3D; &quot;任宜超&quot;)                                放在实体类的参数上面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/2021/07/07/swagger/image-20230726195329815.png" style="zoom: 80%;"><p><img src="/2021/07/07/swagger/image-20230726195356735.png"></p><img src="/2021/07/07/swagger/image-20230726195409126.png" style="zoom:80%;"><img src="/2021/07/07/swagger/image-20230726195454316.png" style="zoom:80%;"><img src="/2021/07/07/swagger/image-20230726195509655.png" style="zoom:80%;"><p><img src="/2021/07/07/swagger/image-20230726195530467.png"></p><p>==想让自己的swagger只在测试环境中使用，在生产环境不使用==</p><p>在配置中定义开发环境：</p><p><img src="/2021/07/07/swagger/image-20230726202921327.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> @Bean public Docket docket(Environment environment)&#123;     Docket docket &#x3D; new Docket(DocumentationType.SWAGGER_2);     Profiles profiles &#x3D; Profiles.of(&quot;dev&quot;);          &#x2F;&#x2F;判断生产环境是不是dev，是的话flag才是true，才可以让后面的swagger开启     boolean flag &#x3D; environment.acceptsProfiles(profiles);     docket             .apiInfo(apiInfo())         .enable(flag)  &#x2F;&#x2F;是否开启swagger                      &#x2F;&#x2F; build模式,返回一个建造者             .select()                      &#x2F;&#x2F; api的配置路径             &#x2F;&#x2F; RequestHandlerSelectors, 配置要扫描的包             &#x2F;&#x2F; basePackage(): 指定要扫描的包             &#x2F;&#x2F; any(): 扫描全部             &#x2F;&#x2F; none(): 都不扫描             &#x2F;&#x2F; withClassAnnotation : 扫描类上的注解, 参数是一个注解的反射对象             &#x2F;&#x2F; 例如：withClassAnnotation(RestController.class) 只扫描类上有@RestController的生成文档             &#x2F;&#x2F; withMethodAnnotation: 扫描方法上的注解, 参数是一个注解的反射对象             .apis(RequestHandlerSelectors.basePackage(&quot;com.chao.controller&quot;))                      &#x2F;&#x2F; paths(): 过滤什么路径             &#x2F;&#x2F;例如.paths(PathSelectors.ant(&quot;&#x2F;kuang&#x2F;**&quot;))指的是只有链接带有&#x2F;kuang&#x2F;才被扫描             &#x2F;&#x2F;.paths(Predicates.or(PathSelectors.regex(&quot;&#x2F;kuang&#x2F;**&quot;),             &#x2F;&#x2F;                        PathSelectors.regex(&quot;&#x2F;kuang1&#x2F;**&quot;),             &#x2F;&#x2F;                        PathSelectors.regex(&quot;&#x2F;kuang2&#x2F;**&quot;)))             &#x2F;&#x2F;这三个路径都可以             &#x2F;&#x2F;paths(PathSelectors.any())扫描所有             .paths(PathSelectors.any())             .build();     return docket; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/swagger/image-20230726203220296.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>我们可以通过Swagger给一些比较比较难理解的属性后接口，增加注释信息</li><li>接口文档实时更新</li><li>可以在线测试</li></ol>]]></content>
      
      
      <categories>
          
          <category> 其他笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swagger笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring</title>
      <link href="/2021/07/07/spring/"/>
      <url>/2021/07/07/spring/</url>
      
        <content type="html"><![CDATA[<hr><hr><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="1、Spring"><a href="#1、Spring" class="headerlink" title="1、Spring"></a>1、Spring</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><ul><li>Spring：春天——&gt;给软件行业带来了春天！</li><li>2002，首次推出了Spring框架的雏形：interface21框架！</li><li>Spring框架即以interface21框架为基础，经过重新设计，并不断丰富其内涵，于2004年3月24日发布了1.0正式版。</li><li><strong>Rod Johnson</strong>，Spring Framework创始人，著名作者。很难想象Rod Johnson的学历，真的让好多人大吃一惊，他是悉尼大学的博士，然而他的专业不是计算机，而是音乐学。</li><li>Spring理念：使现有的技术更加容易使用，本身是一个大杂烩，整合了现有的技术框架！</li><li>SSH：Struct2 + Spring + Hibernate!</li><li>SSM：SpringMVC + Spring + Mybatis!</li></ul><p>官网：<a href="https://spring.io/projects/spring-framework#overview">https://spring.io/projects/spring-framework#overview</a><br>官方下载地址：<a href="https://repo.spring.io/release/org/springframework/spring/">https://repo.spring.io/release/org/springframework/spring/</a><br>GitHub：<a href="https://github.com/spring-projects/spring-framework">https://github.com/spring-projects/spring-framework</a></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-优点"><a href="#1-2-优点" class="headerlink" title="1.2 优点"></a>1.2 优点</h3><ul><li>Spring是一个开源的免费的框架（容器）！</li><li>Spring是一个轻量级的、非入侵式的框架！</li><li>控制反转（IOC），面向切面编程（AOP）！</li><li>支持事务的处理，对框架整合的支持！</li></ul><p>总结一句话：Spring就是一个轻量级的控制反转（IOC）和面向切面编程（AOP）的框架！</p><h3 id="1-3-组成"><a href="#1-3-组成" class="headerlink" title="1.3 组成"></a>1.3 组成</h3><p><img src="/2021/07/07/spring/20201109101410173-1626351096689.png" alt="在这里插入图片描述"></p><h3 id="1-4-拓展"><a href="#1-4-拓展" class="headerlink" title="1.4 拓展"></a>1.4 拓展</h3><p>现代化的Java开发！说白就是基于Spring的开发！</p><ul><li>Spring Boot<ul><li>一个快速开发的脚手架。</li><li>基于SpringBoot可以快速的开发单个微服务。</li><li>约定大于配置。</li></ul></li><li>Spring Cloud<ul><li>SpringCloud是基于SpringBoot实现的。</li></ul></li></ul><p>因为现在大多数公司都在使用SpringBoot进行快速开发，学习SpringBoot的前提，需要完全掌握Spring及SpringMVC！<strong>承上启下的作用！</strong></p><p><strong>弊端：发展了太久之后，违背了原来的理念！配置十分繁琐，人称：“配置地狱！”</strong></p><h2 id="2、IOC理论推导"><a href="#2、IOC理论推导" class="headerlink" title="2、IOC理论推导"></a>2、IOC理论推导</h2><ol><li>UserDao 接口</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface UserDao &#123;    void getUser();&#125;123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>UserDaoImpl 实现类</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class UserDaoImpl implements UserDao &#123;    public void getUser() &#123;        System.out.println(&quot;默认获取用户数据&quot;);    &#125;&#125;12345<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>UserService 业务接口</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface UserService &#123;    void getUser();&#125;123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>UserServiceImpl 业务实现类</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class UserServiceImpl implements UserService &#123;    private UserDao userDao &#x3D; new UserDaoImpl();    public void getUser() &#123;        userDao.getUser();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>测试</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class MyTest &#123;    public static void main(String[] args) &#123;        &#x2F;&#x2F;用户实际调用的是业务层，dao层他们不需要接触！        UserService userService &#x3D; new UserServiceImpl();        userService.getUser();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在我们之前的业务中，用户的需求可能会影响我们原来的代码，我们需要根据用户的需求去修改原代码！如果程序代码量十分大，修改一次的成本代价十分昂贵！<br><img src="/2021/07/07/spring/20201109112133683-1626351096689.png" alt="在这里插入图片描述"></p><p>我们使用一个Set接口实现，已经发生了革命性的变化！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">private UserDao userDao;&#x2F;&#x2F;利用set进行动态实现值的注入！public void setUserDao(UserDao userDao) &#123;    this.userDao &#x3D; userDao;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>之前，程序是主动创建对象！控制权在程序猿手上！</li><li>使用了set注入后，程序不再具有主动性，而是变成了被动的接收对象！</li></ul><p>这种思想，从本质上解决了问题，我们程序猿不用再去管理对象的创建了。系统的耦合性大大降低~，可以更加专注的在业务的实现上！这是IOC的原型！<br><img src="/2021/07/07/spring/20201109112157443-1626351096689.png" alt="在这里插入图片描述"></p><h3 id="IOC本质"><a href="#IOC本质" class="headerlink" title="IOC本质"></a>IOC本质</h3><p><strong>控制反转IoC（Inversion of Control），是一种设计思想，DI（依赖注入）是实现IoC的一种方法</strong>，也有人认为DI只是IoC的另一种说法。没有IoC的程序中，我们使用面向对象编程，对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，个人认为所谓控制反转就是：获得依赖对象的方式反转了。</p><p>采用XML方式配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把两者合为一体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到了零配置的目的。<br><strong>控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是依赖注入（Dependency Injection，DI）。</strong></p><h2 id="3、HelloSpring"><a href="#3、HelloSpring" class="headerlink" title="3、HelloSpring"></a>3、HelloSpring</h2><ol><li>新建一个maven项目，编写实体类</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Hello &#123;    private String str;    public String getStr() &#123;        return str;    &#125;    public void setStr(String str) &#123;        this.str &#x3D; str;    &#125;    @Override    public String toString() &#123;        return &quot;Hello&#123;&quot; +                &quot;str&#x3D;&#39;&quot; + str + &#39;\&#39;&#39; +                &#39;&#125;&#39;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>编写xml配置文件</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--使用Spring来创建对象，在Spring这些都称为Bean    类型 变量名 = new 类型();    Hello hello = new Hello();    id = 变量名    class = new的对象    property 相当于给对象中的属性设置一个值！        --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.Hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>str<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Spring<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>测试</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class MyTest &#123;    public static void main(String[] args) &#123;        &#x2F;&#x2F;获取Spring的上下文对象！        ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);        &#x2F;&#x2F;我们的对象现在都在Spring中的管理了，我们需要使用，直接去里面取出来就可以！        Hello hello &#x3D; (Hello) context.getBean(&quot;hello&quot;);        System.out.println(hello.toString());    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思考问题？</strong></p><ul><li>Hello对象是谁创建的？<br>Hello对象是由Spring创建的。</li><li>Hello对象的属性是怎么设置的？<br>Hello对象的属性是由Spring容器设置的。</li></ul><p>这个过程就叫控制反转：</p><p><strong>控制</strong>：谁来控制对象的创建，传统应用程序的对象是由程序本身控制创建的，使用Spring后，对象是由Spring来创建的。</p><p><strong>反转</strong>：程序本身不创建对象，而变成被动的接收对象。</p><p><strong>依赖注入</strong>：就是利用set方法来进行注入的。</p><p>IOC是一种编程思想，由主动的编程变成被动的接收。</p><p>可以通过new ClassPathXmlApplicationContext去浏览一下底层源码。</p><p><strong>OK，到了现在，我们彻底不用在程序中去改动了，要实现不同的操作，只需要在xml配置文件中进行修改，所谓的IOC，一句话搞定：对象由Spring来创建，管理，装配！</strong></p><h2 id="4、IOC创建对象的方式（2020-11-10）"><a href="#4、IOC创建对象的方式（2020-11-10）" class="headerlink" title="4、IOC创建对象的方式（2020-11-10）"></a>4、IOC创建对象的方式（2020-11-10）</h2><ol><li><p>使用无参构造创建对象，默认！</p></li><li><p>假设我们要使用有参构造创建对象。</p><ol><li>下标赋值</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--第一种方式：下标赋值    --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>狂神说Java<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>类型</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--第二种方式：通过类型的创建，不建议使用    --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lifa<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>参数名</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--第三种方式：直接通过参数名来设置    --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>李发<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>总结：在配置文件加载的时候，容器中管理的对象就已经初始化了！</p><h2 id="5、Spring配置"><a href="#5、Spring配置" class="headerlink" title="5、Spring配置"></a>5、Spring配置</h2><h3 id="5-1-别名"><a href="#5-1-别名" class="headerlink" title="5.1 别名"></a>5.1 别名</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--别名，如果添加了别名，我们也可以使用别名获取到这个对象--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alias</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userNew<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-2-Bean的配置"><a href="#5-2-Bean的配置" class="headerlink" title="5.2 Bean的配置"></a>5.2 Bean的配置</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--id：bean的唯一标识符，也就是相当于我们学的对象名class：bean对象所对应的全限定名：包名+类名name：也是别名，而且name可以同时取多个别名    --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userT<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.UserT<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user2 u2,u3;u4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>黑心白莲<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-import"><a href="#5-3-import" class="headerlink" title="5.3 import"></a>5.3 import</h3><p>这个import。一般用于团队开发使用，它可以将多个配置文件，导入合并为一个。<br>假设，现在项目中有多个人开发，这三个人负责不同的类开发，不同的类需要注册在不同的bean中，我们可以利用import将所有人的beans.xml合并为一个总的！</p><ul><li><p>张三</p></li><li><p>李四</p></li><li><p>王五</p></li><li><p>applicationContext.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean2.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bean3.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>使用的时候，直接使用总的配置就可以了。</p><h2 id="6、依赖注入"><a href="#6、依赖注入" class="headerlink" title="6、依赖注入"></a>6、依赖注入</h2><h3 id="6-1-构造器注入"><a href="#6-1-构造器注入" class="headerlink" title="6.1 构造器注入"></a>6.1 构造器注入</h3><p>前面已经介绍过，参考<strong>4、IOC创建对象的方式</strong></p><h3 id="6-2-Set方式注入【重点】"><a href="#6-2-Set方式注入【重点】" class="headerlink" title="6.2 Set方式注入【重点】"></a>6.2 Set方式注入【重点】</h3><ul><li>依赖注入：Set注入<ul><li>依赖：bean对象的创建依赖于容器！</li><li>注入：bean对象中的所有属性，由容器来注入！</li></ul></li></ul><p>【环境搭建】</p><ol><li>复杂类型</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Address &#123;    private String address;    public String getAddress() &#123;        return address;    &#125;    public void setAddress(String address) &#123;        this.address &#x3D; address;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>真实测试对象</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Student &#123;    private String name;    private Address address;    private String[] books;    private List&lt;String&gt; hobbies;    private Map&lt;String,String&gt; card;    private Set&lt;String&gt; games;    private String wife;    private Properties info;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>beans.xml</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--第一种：普通值注入，value        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>黑心白莲<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>测试类</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class MyTest &#123;    public static void main(String[] args) &#123;        ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);        Student student &#x3D; (Student) context.getBean(&quot;student&quot;);        System.out.println(student.getName());    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>完善注入信息</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.Address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>西安<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--第一种：普通值注入，value        --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>黑心白莲<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--第二种：        --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--数组        --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>红楼梦<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>西游记<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>水浒传<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>三国演义<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--List        --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>打篮球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>看电影<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>敲代码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--Map        --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>身份证<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456789987456321<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>银行卡<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>359419496419481649<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--Set        --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>games<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>LOL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>COC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>BOB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--NULL        --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wife<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>null</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--Properties        --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>20191029<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>102.0913.524.4585<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>黑心白莲<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-拓展方式注入"><a href="#6-3-拓展方式注入" class="headerlink" title="6.3 拓展方式注入"></a>6.3 拓展方式注入</h3><p>我们可以使用p命名空间和c命名空间进行注入<br>官方解释：<br><img src="/2021/07/07/spring/20201110193916911-1626351096689.png" alt="在这里插入图片描述"><br>使用：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>c</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/c<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--p命名空间注入，可以直接注入属性的值：property--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>黑心白莲<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>age</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--c命名空间注入，通过构造器注入：constructor-args--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>狂神<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>age</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>22<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Testpublic void test2()&#123;    ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;userbeans.xml&quot;);    User user &#x3D; context.getBean(&quot;user&quot;,User.class);    System.out.println(user);    User user2 &#x3D; context.getBean(&quot;user2&quot;,User.class);    System.out.println(user2);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意点：p命名和c命名空间不能直接使用，需要导入xml约束！</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">xmlns:p="http://www.springframework.org/schema/p"xmlns:c="http://www.springframework.org/schema/c"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-4-bean的作用域"><a href="#6-4-bean的作用域" class="headerlink" title="6.4 bean的作用域"></a>6.4 bean的作用域</h3><p><img src="/2021/07/07/spring/20201111101635200-1626351096690.png" alt="在这里插入图片描述"></p><ol><li>单例模式（Spring默认机制）</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>狂神<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>age</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>22<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>原型模式：每次从容器中get的时候，都会产生一个新对象！</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>狂神<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>age</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>22<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>其余的request、session、application、这些只能在web开发中使用到！</li></ol><h2 id="7-自动装配"><a href="#7-自动装配" class="headerlink" title="7.自动装配"></a>7.自动装配</h2><h3 id="7-1Bean的自动装配"><a href="#7-1Bean的自动装配" class="headerlink" title="7.1Bean的自动装配"></a>7.1Bean的自动装配</h3><blockquote><p>自动装配说明</p></blockquote><ul><li>自动装配是使用spring满足bean依赖的一种方法</li><li>spring会在应用上下文中为某个bean寻找其依赖的bean。</li></ul><p>Spring中bean有三种装配机制，分别是：</p><ol><li>在xml中显式配置；</li><li>在java中显式配置；</li><li>隐式的bean发现机制和自动装配。</li></ol><p>这里我们主要讲第三种：自动化的装配bean。</p><p>Spring的自动装配需要从两个角度来实现，或者说是两个操作：</p><ol><li>组件扫描(component scanning)：spring会自动发现应用上下文中所创建的bean；</li><li>自动装配(autowiring)：spring自动满足bean之间的依赖，也就是我们说的IoC/DI；</li></ol><p>组件扫描和自动装配组合发挥巨大威力，使得显示的配置降低到最少。</p><p><strong>推荐不使用自动装配xml配置 , 而使用注解 .</strong></p><blockquote><p>测试环境搭建</p></blockquote><p>1、新建一个项目</p><p>2、新建两个实体类，Cat  Dog  都有一个叫的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Cat &#123;   public void shout() &#123;       System.out.println(&quot;miao~&quot;);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Dog &#123;   public void shout() &#123;       System.out.println(&quot;wang~&quot;);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、新建一个用户类 User</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class User &#123;   private Cat cat;   private Dog dog;   private String str;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、编写Spring配置文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>str<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>qinjiang<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class MyTest &#123;   @Test   public void testMethodAutowire() &#123;       ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);       User user &#x3D; (User) context.getBean(&quot;user&quot;);       user.getCat().shout();       user.getDog().shout();  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果正常输出，环境OK</p><blockquote><p>byName</p></blockquote><p><strong>autowire byName (按名称自动装配)</strong></p><p>由于在手动配置xml过程中，常常发生字母缺漏和大小写等错误，而无法对其进行检查，使得开发效率降低。</p><p>采用自动装配将避免这些错误，并且使配置简单化。</p><p>测试：</p><p>1、修改bean配置，增加一个属性  autowire=”byName”</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>str<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>qinjiang<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2、再次测试，结果依旧成功输出！</p><p>3、我们将 cat 的bean id修改为 catXXX</p><p>4、再次测试， 执行时报空指针java.lang.NullPointerException。因为按byName规则找不对应set方法，真正的setCat就没执行，对象就没有初始化，所以调用时就会报空指针错误。</p><p><strong>小结：</strong></p><p>当一个bean节点带有 autowire byName的属性时。</p><ol><li><p>将查找其类中所有的set方法名，例如setCat，获得将set去掉并且首字母小写的字符串，即cat。</p></li><li><p>去spring容器中寻找是否有此字符串名称id的对象。</p></li><li><p>如果有，就取出注入；如果没有，就报空指针异常。</p></li></ol><blockquote><p>byType</p></blockquote><p><strong>autowire byType (按类型自动装配)</strong></p><p>使用autowire byType首先需要保证：同一类型的对象，在spring容器中唯一。如果不唯一，会报不唯一的异常。</p><pre class="line-numbers language-none"><code class="language-none">NoUniqueBeanDefinitionException<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试：</p><p>1、将user的bean配置修改一下 ： autowire=”byType”</p><p>2、测试，正常输出</p><p>3、在注册一个cat 的bean对象！</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>str<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>qinjiang<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、测试，报错：NoUniqueBeanDefinitionException</p><p>5、删掉cat2，将cat的bean名称改掉！测试！因为是按类型装配，所以并不会报异常，也不影响最后的结果。甚至将id属性去掉，也不影响结果。</p><p>这就是按照类型自动装配！</p><p>使用注解</p><blockquote><p>使用注解</p></blockquote><p>jdk1.5开始支持注解，spring2.5开始全面支持注解。</p><p>准备工作：利用注解的方式注入属性。</p><p>1、在spring配置文件中引入context文件头</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">xmlns:context="http://www.springframework.org/schema/context"http://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context.xsd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、开启属性注解支持！</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="7-1-1-Autowired"><a href="#7-1-1-Autowired" class="headerlink" title="7.1.1@Autowired"></a>7.1.1@Autowired</h4><ul><li>@Autowired是按类型自动转配的，不支持id匹配。</li><li>需要导入 spring-aop的包！</li></ul><p>测试：</p><p>1、将User类中的set方法去掉，使用@Autowired注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class User &#123;   @Autowired   private Cat cat;   @Autowired   private Dog dog;   private String str;   public Cat getCat() &#123;       return cat;  &#125;   public Dog getDog() &#123;       return dog;  &#125;   public String getStr() &#123;       return str;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、此时配置文件内容</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、测试，成功输出结果！</p><p>【小狂神科普时间】</p><p>@Autowired(required=false)  说明：false，对象可以为null；true，对象必须存对象，不能为null。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;如果允许对象为null，设置required &#x3D; false,默认为true@Autowired(required &#x3D; false)private Cat cat;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="7-1-2-Qualifier"><a href="#7-1-2-Qualifier" class="headerlink" title="7.1.2@Qualifier"></a>7.1.2@Qualifier</h4><ul><li>@Autowired是根据类型自动装配的，加上@Qualifier则可以根据byName的方式自动装配</li><li>@Qualifier不能单独使用。</li></ul><p>测试实验步骤：</p><p>1、配置文件修改内容，保证类型存在对象。且名字不为类的默认名字！</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、没有加Qualifier测试，直接报错</p><p>3、在属性上添加Qualifier注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Autowired@Qualifier(value &#x3D; &quot;cat2&quot;)private Cat cat;@Autowired@Qualifier(value &#x3D; &quot;dog2&quot;)private Dog dog;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试，成功输出！</p><h4 id="7-1-3-Resource"><a href="#7-1-3-Resource" class="headerlink" title="7.1.3@Resource"></a>7.1.3@Resource</h4><ul><li>@Resource如有指定的name属性，先按该属性进行byName方式查找装配；</li><li>其次再进行默认的byName方式进行装配；</li><li>如果以上都不成功，则按byType的方式自动装配。</li><li>都不成功，则报异常。</li></ul><p>实体类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class User &#123;   &#x2F;&#x2F;如果允许对象为null，设置required &#x3D; false,默认为true   @Resource(name &#x3D; &quot;cat2&quot;)   private Cat cat;   @Resource   private Dog dog;   private String str;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>beans.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：结果OK</p><p>配置文件2：beans.xml ， 删掉cat2</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cat1<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>实体类上只保留注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Resourceprivate Cat cat;@Resourceprivate Dog dog;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>结果：OK</p><p>结论：先进行byName查找，失败；再进行byType查找，成功。</p><h3 id="7-2小结"><a href="#7-2小结" class="headerlink" title="7.2小结"></a>7.2小结</h3><p>@Autowired与@Resource异同：</p><blockquote><p>1、@Autowired与@Resource都可以用来装配bean。都可以写在字段上，或写在setter方法上。</p></blockquote><blockquote><p>2、@Autowired默认按类型装配（属于spring规范），默认情况下必须要求依赖对象必须存在，如果要允许null 值，可以设置它的required属性为false，如：@Autowired(required=false) ，如果我们想使用名称装配可以结合@Qualifier注解进行使用</p></blockquote><blockquote><p>3、@Resource（属于J2EE复返），默认按照名称进行装配，名称可以通过name属性进行指定。如果没有指定name属性，当注解写在字段上时，默认取字段名进行按照名称查找，如果注解写在setter方法上默认取属性名进行装配。当找不到与名称匹配的bean时才按照类型进行装配。但是需要注意的是，如果name属性一旦指定，就只会按照名称进行装配。</p></blockquote><p>它们的作用相同都是用注解方式注入对象，但执行顺序不同。@Autowired先byType，@Resource先byName。</p><h2 id="8-使用注解开发"><a href="#8-使用注解开发" class="headerlink" title="8.使用注解开发"></a>8.使用注解开发</h2><p>使用注解开发</p><blockquote><p>说明</p></blockquote><p>在spring4之后，想要使用注解形式，必须得要引入aop的包</p><p><img src="/2021/07/07/spring/640-1626343163520.webp" alt="图片"></p><p>在配置文件当中，还得要引入一个context约束</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Bean的实现</p></blockquote><p>我们之前都是使用 bean 的标签进行bean注入，但是实际开发中，我们一般都会使用注解！</p><p>1、配置扫描哪些包下的注解</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--指定注解扫描包--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2、在指定包下编写类，增加注解</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">@Component("user")// 相当于配置文件中 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>当前注解的类<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>public class User &#123;   public String name = "秦疆";&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Testpublic void test()&#123;   ApplicationContext applicationContext &#x3D;       new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);   User user &#x3D; (User) applicationContext.getBean(&quot;user&quot;);   System.out.println(user.name);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>属性注入</p></blockquote><p>使用注解注入属性</p><p>1、可以不用提供set方法，直接在直接名上添加@value(“值”)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Component(&quot;user&quot;)&#x2F;&#x2F; 相当于配置文件中 &lt;bean id&#x3D;&quot;user&quot; class&#x3D;&quot;当前注解的类&quot;&#x2F;&gt;public class User &#123;   @Value(&quot;秦疆&quot;)   &#x2F;&#x2F; 相当于配置文件中 &lt;property name&#x3D;&quot;name&quot; value&#x3D;&quot;秦疆&quot;&#x2F;&gt;   public String name;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、如果提供了set方法，在set方法上添加@value(“值”);</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Component(&quot;user&quot;)public class User &#123;   public String name;   @Value(&quot;秦疆&quot;)   public void setName(String name) &#123;       this.name &#x3D; name;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>衍生注解</p></blockquote><p>我们这些注解，就是替代了在配置文件当中配置步骤而已！更加的方便快捷！</p><p><strong>@Component三个衍生注解</strong></p><p>为了更好的进行分层，Spring可以使用其它三个注解，功能一样，目前使用哪一个功能都一样。</p><ul><li>@Controller：web层</li><li>@Service：service层</li><li>@Repository：dao层</li></ul><p>写上这些注解，就相当于将这个类交给Spring管理装配了！</p><blockquote><p>自动装配注解</p></blockquote><p>在Bean的自动装配已经讲过了，可以回顾！</p><blockquote><p>作用域</p></blockquote><p>@scope</p><ul><li>singleton：默认的，Spring会采用单例模式创建这个对象。关闭工厂 ，所有的对象都会销毁。</li><li>prototype：多例模式。关闭工厂 ，所有的对象不会销毁。内部的垃圾回收机制会回收</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controller(&quot;user&quot;)@Scope(&quot;prototype&quot;)public class User &#123;   @Value(&quot;秦疆&quot;)   public String name;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>小结</p></blockquote><p><strong>XML与注解比较</strong></p><ul><li>XML可以适用任何场景 ，结构清晰，维护方便</li><li>注解不是自己提供的类使用不了，开发简单方便</li></ul><p><strong>xml与注解整合开发</strong> ：推荐最佳实践</p><ul><li>xml管理Bean</li><li>注解完成属性注入</li><li>使用过程中， 可以不用扫描，扫描是为了类上的注解</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>作用：</p><ul><li>进行注解驱动注册，从而使注解生效</li><li>用于激活那些已经在spring容器里注册过的bean上面的注解，也就是显示的向Spring注册</li><li>如果不扫描包，就需要手动配置bean</li><li>如果不加注解驱动，则注入的值为null！</li></ul><blockquote><p>基于Java类进行配置</p></blockquote><p>JavaConfig 原来是 Spring 的一个子项目，它通过 Java 类的方式提供 Bean 的定义信息，在 Spring4 的版本， JavaConfig 已正式成为 Spring4 的核心功能 。</p><p>测试：</p><p>1、编写一个实体类，Dog</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Component  &#x2F;&#x2F;将这个类标注为Spring的一个组件，放到容器中！public class Dog &#123;   public String name &#x3D; &quot;dog&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、新建一个config配置包，编写一个MyConfig配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configuration  &#x2F;&#x2F;代表这是一个配置类public class MyConfig &#123;   @Bean &#x2F;&#x2F;通过方法注册一个bean，这里的返回值就Bean的类型，方法名就是bean的id！   public Dog dog()&#123;       return new Dog();  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Testpublic void test2()&#123;   ApplicationContext applicationContext &#x3D;           new AnnotationConfigApplicationContext(MyConfig.class);   Dog dog &#x3D; (Dog) applicationContext.getBean(&quot;dog&quot;);   System.out.println(dog.name);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、成功输出结果！</p><p><strong>导入其他配置如何做呢？</strong></p><p>1、我们再编写一个配置类！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configuration  &#x2F;&#x2F;代表这是一个配置类public class MyConfig2 &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2、在之前的配置类中我们来选择导入这个配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configuration@Import(MyConfig2.class)  &#x2F;&#x2F;导入合并其他配置类，类似于配置文件中的 inculde 标签public class MyConfig &#123;   @Bean   public Dog dog()&#123;       return new Dog();  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于这种Java类的配置方式，我们在之后的SpringBoot 和 SpringCloud中还会大量看到，我们需要知道这些注解的作用即可！</p><h2 id="9-静态-动态代理模式"><a href="#9-静态-动态代理模式" class="headerlink" title="9.静态/动态代理模式"></a>9.静态/动态代理模式</h2><p>代理模式:</p><p>为什么要学习代理模式，因为AOP的底层机制就是动态代理！</p><p>代理模式：</p><ul><li>静态代理</li><li>动态代理</li></ul><p>学习aop之前 , 我们要先了解一下代理模式！</p><p><img src="/2021/07/07/spring/640-1626343507463.webp"></p><blockquote><h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4></blockquote><p><strong>静态代理角色分析</strong></p><ul><li><p>抽象角色 : 一般使用接口或者抽象类来实现</p></li><li><p>真实角色 : 被代理的角色</p></li><li><p>代理角色 : 代理真实角色 ; 代理真实角色后 , 一般会做一些附属的操作 .</p></li><li><p>客户  :  使用代理角色来进行一些操作 .</p></li></ul><p><strong>代码实现</strong></p><p>Rent . java 即抽象角色</p><pre class="line-numbers language-javjavaa" data-language="javjavaa"><code class="language-javjavaa">&#x2F;&#x2F;抽象角色：租房public interface Rent &#123;   public void rent();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Host . java 即真实角色</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;真实角色: 房东，房东要出租房子public class Host implements Rent&#123;   public void rent() &#123;       System.out.println(&quot;房屋出租&quot;);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Proxy . java 即代理角色</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;代理角色：中介public class Proxy implements Rent &#123;   private Host host;   public Proxy() &#123; &#125;   public Proxy(Host host) &#123;       this.host &#x3D; host;  &#125;   &#x2F;&#x2F;租房   public void rent()&#123;       seeHouse();       host.rent();       fare();  &#125;   &#x2F;&#x2F;看房   public void seeHouse()&#123;       System.out.println(&quot;带房客看房&quot;);  &#125;   &#x2F;&#x2F;收中介费   public void fare()&#123;       System.out.println(&quot;收中介费&quot;);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Client . java 即客户</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;客户类，一般客户都会去找代理！public class Client &#123;   public static void main(String[] args) &#123;       &#x2F;&#x2F;房东要租房       Host host &#x3D; new Host();       &#x2F;&#x2F;中介帮助房东       Proxy proxy &#x3D; new Proxy(host);       &#x2F;&#x2F;你去找中介！       proxy.rent();  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析：在这个过程中，你直接接触的就是中介，就如同现实生活中的样子，你看不到房东，但是你依旧租到了房东的房子通过代理，这就是所谓的代理模式，程序源自于生活，所以学编程的人，一般能够更加抽象的看待生活中发生的事情。</p><p><strong>静态代理的好处:</strong></p><ul><li>可以使得我们的真实角色更加纯粹 . 不再去关注一些公共的事情 .</li><li>公共的业务由代理来完成 . 实现了业务的分工 ,</li><li>公共业务发生扩展时变得更加集中和方便 .</li></ul><p>缺点 :</p><ul><li>类多了 , 多了代理类 , 工作量变大了 . 开发效率降低 .</li></ul><p>我们想要静态代理的好处，又不想要静态代理的缺点，所以 , 就有了动态代理 !</p><blockquote><h4 id="静态代理再理解"><a href="#静态代理再理解" class="headerlink" title="静态代理再理解"></a>静态代理再理解</h4></blockquote><p>同学们练习完毕后，我们再来举一个例子，巩固大家的学习！</p><p>练习步骤：</p><p>1、创建一个抽象角色，比如咋们平时做的用户业务，抽象起来就是增删改查！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;抽象角色：增删改查业务public interface UserService &#123;   void add();   void delete();   void update();   void query();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、我们需要一个真实对象来完成这些增删改查操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;真实对象，完成增删改查操作的人public class UserServiceImpl implements UserService &#123;   public void add() &#123;       System.out.println(&quot;增加了一个用户&quot;);  &#125;   public void delete() &#123;       System.out.println(&quot;删除了一个用户&quot;);  &#125;   public void update() &#123;       System.out.println(&quot;更新了一个用户&quot;);  &#125;   public void query() &#123;       System.out.println(&quot;查询了一个用户&quot;);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、需求来了，现在我们需要增加一个日志功能，怎么实现！</p><ul><li>思路1 ：在实现类上增加代码 【麻烦！】</li><li>思路2：使用代理来做，能够不改变原来的业务情况下，实现此功能就是最好的了！</li></ul><p>4、设置一个代理类来处理日志！代理角色</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;代理角色，在这里面增加日志的实现public class UserServiceProxy implements UserService &#123;   private UserServiceImpl userService;   public void setUserService(UserServiceImpl userService) &#123;       this.userService &#x3D; userService;  &#125;   public void add() &#123;       log(&quot;add&quot;);       userService.add();  &#125;   public void delete() &#123;       log(&quot;delete&quot;);       userService.delete();  &#125;   public void update() &#123;       log(&quot;update&quot;);       userService.update();  &#125;   public void query() &#123;       log(&quot;query&quot;);       userService.query();  &#125;   public void log(String msg)&#123;       System.out.println(&quot;执行了&quot;+msg+&quot;方法&quot;);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、测试访问类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Client &#123;   public static void main(String[] args) &#123;       &#x2F;&#x2F;真实业务       UserServiceImpl userService &#x3D; new UserServiceImpl();       &#x2F;&#x2F;代理类       UserServiceProxy proxy &#x3D; new UserServiceProxy();       &#x2F;&#x2F;使用代理类实现日志功能！       proxy.setUserService(userService);       proxy.add();  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>OK，到了现在代理模式大家应该都没有什么问题了，重点大家需要理解其中的思想；</p><p>我们在不改变原来的代码的情况下，实现了对原有功能的增强，这是AOP中最核心的思想</p><p>聊聊AOP：纵向开发，横向开发</p><p><img src="/2021/07/07/spring/1626343666016.png"></p><blockquote><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4></blockquote><ul><li><p>动态代理的角色和静态代理的一样 .</p></li><li><p>动态代理的代理类是动态生成的 . 静态代理的代理类是我们提前写好的</p></li><li><p>动态代理分为两类 : 一类是基于接口动态代理 , 一类是基于类的动态代理</p></li><li><ul><li>基于接口的动态代理—-JDK动态代理</li><li>基于类的动态代理–cglib</li><li>现在用的比较多的是 javasist 来生成动态代理 . 百度一下javasist</li><li>我们这里使用JDK的原生代码来实现，其余的道理都是一样的！、</li></ul></li></ul><p><strong>JDK的动态代理需要了解两个类</strong></p><p>核心 : InvocationHandler   和   Proxy  ， 打开JDK帮助文档看看</p><p>【InvocationHandler：调用处理程序】</p><p><img src="/2021/07/07/spring/1626343692028.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">Object invoke(Object proxy, 方法 method, Object[] args)；&#x2F;&#x2F;参数&#x2F;&#x2F;proxy - 调用该方法的代理实例&#x2F;&#x2F;method -所述方法对应于调用代理实例上的接口方法的实例。方法对象的声明类将是该方法声明的接口，它可以是代理类继承该方法的代理接口的超级接口。&#x2F;&#x2F;args -包含的方法调用传递代理实例的参数值的对象的阵列，或null如果接口方法没有参数。原始类型的参数包含在适当的原始包装器类的实例中，例如java.lang.Integer或java.lang.Boolean 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【Proxy  : 代理】</p><p><img src="/2021/07/07/spring/640-1626343507462.webp"></p><p><img src="/2021/07/07/spring/640-1626343507478.webp"></p><p><img src="/2021/07/07/spring/640-1626343507484.webp"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;生成代理类public Object getProxy()&#123;   return Proxy.newProxyInstance(this.getClass().getClassLoader(),                                 rent.getClass().getInterfaces(),this);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码实现</strong> </p><p>抽象角色和真实角色和之前的一样！</p><p>Rent . java 即抽象角色</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;抽象角色：租房public interface Rent &#123;   public void rent();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Host . java 即真实角色</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;真实角色: 房东，房东要出租房子public class Host implements Rent&#123;   public void rent() &#123;       System.out.println(&quot;房屋出租&quot;);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ProxyInvocationHandler. java 即代理角色</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class ProxyInvocationHandler implements InvocationHandler &#123;   private Rent rent;   public void setRent(Rent rent) &#123;       this.rent &#x3D; rent;  &#125;   &#x2F;&#x2F;生成代理类，重点是第二个参数，获取要代理的抽象角色！之前都是一个角色，现在可以代理一类角色   public Object getProxy()&#123;       return Proxy.newProxyInstance(this.getClass().getClassLoader(),               rent.getClass().getInterfaces(),this);  &#125;   &#x2F;&#x2F; proxy : 代理类 method : 代理类的调用处理程序的方法对象.   &#x2F;&#x2F; 处理代理实例上的方法调用并返回结果   @Override   public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;       seeHouse();       &#x2F;&#x2F;核心：本质利用反射实现！       Object result &#x3D; method.invoke(rent, args);       fare();       return result;  &#125;   &#x2F;&#x2F;看房   public void seeHouse()&#123;       System.out.println(&quot;带房客看房&quot;);  &#125;   &#x2F;&#x2F;收中介费   public void fare()&#123;       System.out.println(&quot;收中介费&quot;);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Client . java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;租客public class Client &#123;   public static void main(String[] args) &#123;       &#x2F;&#x2F;真实角色       Host host &#x3D; new Host();       &#x2F;&#x2F;代理实例的调用处理程序       ProxyInvocationHandler pih &#x3D; new ProxyInvocationHandler();       pih.setRent(host); &#x2F;&#x2F;将真实角色放置进去！       Rent proxy &#x3D; (Rent)pih.getProxy(); &#x2F;&#x2F;动态生成对应的代理类！       proxy.rent();  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>核心：<strong>一个动态代理 , 一般代理某一类业务 , 一个动态代理可以代理多个类，代理的是接口！、</strong></p><blockquote><h4 id="深化理解"><a href="#深化理解" class="headerlink" title="深化理解"></a>深化理解</h4></blockquote><p>我们来使用动态代理实现代理我们后面写的UserService！</p><p>我们也可以编写一个通用的动态代理实现的类！所有的代理对象设置为Object即可！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class ProxyInvocationHandler implements InvocationHandler &#123;   private Object target;   public void setTarget(Object target) &#123;       this.target &#x3D; target;  &#125;   &#x2F;&#x2F;生成代理类   public Object getProxy()&#123;       return Proxy.newProxyInstance(this.getClass().getClassLoader(),               target.getClass().getInterfaces(),this);  &#125;   &#x2F;&#x2F; proxy : 代理类   &#x2F;&#x2F; method : 代理类的调用处理程序的方法对象.   public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;       log(method.getName());       Object result &#x3D; method.invoke(target, args);       return result;  &#125;   public void log(String methodName)&#123;       System.out.println(&quot;执行了&quot;+methodName+&quot;方法&quot;);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Test &#123;   public static void main(String[] args) &#123;       &#x2F;&#x2F;真实对象       UserServiceImpl userService &#x3D; new UserServiceImpl();       &#x2F;&#x2F;代理对象的调用处理程序       ProxyInvocationHandler pih &#x3D; new ProxyInvocationHandler();       pih.setTarget(userService); &#x2F;&#x2F;设置要代理的对象       UserService proxy &#x3D; (UserService)pih.getProxy(); &#x2F;&#x2F;动态生成代理类！       proxy.delete();  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试，增删改查，查看结果！</p><blockquote><h5 id="动态代理的好处"><a href="#动态代理的好处" class="headerlink" title="动态代理的好处"></a>动态代理的好处</h5></blockquote><p>静态代理有的它都有，静态代理没有的，它也有！</p><ul><li>可以使得我们的真实角色更加纯粹 . 不再去关注一些公共的事情 .</li><li>公共的业务由代理来完成 . 实现了业务的分工 ,</li><li>公共业务发生扩展时变得更加集中和方便 .</li><li>一个动态代理 , 一般代理某一类业务</li><li>一个动态代理可以代理多个类，代理的是接口！</li></ul><h2 id="10-AOP就这么简单"><a href="#10-AOP就这么简单" class="headerlink" title="10.AOP就这么简单"></a>10.AOP就这么简单</h2><blockquote><p>什么是AOP</p></blockquote><p>​        AOP（Aspect Oriented Programming）意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p><img src="/2021/07/07/spring/640.png"></p><blockquote><p>Aop在Spring中的作用</p></blockquote><p>提供声明式事务；允许用户自定义切面</p><p>以下名词需要了解下：</p><ul><li>横切关注点：跨越应用程序多个模块的方法或功能。即是，与我们业务逻辑无关的，但是我们需要关注的部分，就是横切关注点。如日志 , 安全 , 缓存 , 事务等等 ….</li><li>切面（ASPECT）：横切关注点 被模块化 的特殊对象。即，它是一个类。</li><li>通知（Advice）：切面必须要完成的工作。即，它是类中的一个方法。</li><li>目标（Target）：被通知对象。</li><li>代理（Proxy）：向目标对象应用通知之后创建的对象。</li><li>切入点（PointCut）：切面通知 执行的 “地点”的定义。</li><li>连接点（JointPoint）：与切入点匹配的执行点。</li></ul><p><img src="/2021/07/07/spring/1626343950887.png"></p><p>SpringAOP中，通过Advice定义横切逻辑，Spring中支持5种类型的Advice:</p><p><img src="/2021/07/07/spring/1626343967013.png"></p><p>即 Aop 在 不改变原有代码的情况下 , 去增加新的功能 .</p><blockquote><p>使用Spring实现Aop</p></blockquote><p>【重点】使用AOP织入，需要导入一个依赖包！</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>dependency><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第一种方式</strong></p><p><strong>通过 Spring API 实现</strong></p><p>首先编写我们的业务接口和实现类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface UserService &#123;   public void add();   public void delete();   public void update();   public void search();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class UserServiceImpl implements UserService&#123;   @Override   public void add() &#123;       System.out.println(&quot;增加用户&quot;);  &#125;   @Override   public void delete() &#123;       System.out.println(&quot;删除用户&quot;);  &#125;   @Override   public void update() &#123;       System.out.println(&quot;更新用户&quot;);  &#125;   @Override   public void search() &#123;       System.out.println(&quot;查询用户&quot;);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后去写我们的增强类 , 我们编写两个 , 一个前置增强 一个后置增强</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class Log implements MethodBeforeAdvice &#123;   &#x2F;&#x2F;method : 要执行的目标对象的方法   &#x2F;&#x2F;objects : 被调用的方法的参数   &#x2F;&#x2F;Object : 目标对象   @Override   public void before(Method method, Object[] objects, Object o) throws Throwable &#123;       System.out.println( o.getClass().getName() + &quot;的&quot; + method.getName() + &quot;方法被执行了&quot;);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class AfterLog implements AfterReturningAdvice &#123;   &#x2F;&#x2F;returnValue 返回值   &#x2F;&#x2F;method被调用的方法   &#x2F;&#x2F;args 被调用的方法的对象的参数   &#x2F;&#x2F;target 被调用的目标对象   @Override   public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable &#123;       System.out.println(&quot;执行了&quot; + target.getClass().getName()       +&quot;的&quot;+method.getName()+&quot;方法,&quot;       +&quot;返回值：&quot;+returnValue);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后去spring的文件中注册 , 并实现aop切入实现 , 注意导入约束 .</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;      xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;      xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;      xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop.xsd&quot;&gt;   &lt;!--注册bean--&gt;   &lt;bean id&#x3D;&quot;userService&quot; class&#x3D;&quot;com.kuang.service.UserServiceImpl&quot;&#x2F;&gt;   &lt;bean id&#x3D;&quot;log&quot; class&#x3D;&quot;com.kuang.log.Log&quot;&#x2F;&gt;   &lt;bean id&#x3D;&quot;afterLog&quot; class&#x3D;&quot;com.kuang.log.AfterLog&quot;&#x2F;&gt;   &lt;!--aop的配置--&gt;   &lt;aop:config&gt;       &lt;!--切入点 expression:表达式匹配要执行的方法--&gt;       &lt;aop:pointcut id&#x3D;&quot;pointcut&quot; expression&#x3D;&quot;execution(* com.kuang.service.UserServiceImpl.*(..))&quot;&#x2F;&gt;       &lt;!--执行环绕; advice-ref执行方法 . pointcut-ref切入点--&gt;       &lt;aop:advisor advice-ref&#x3D;&quot;log&quot; pointcut-ref&#x3D;&quot;pointcut&quot;&#x2F;&gt;       &lt;aop:advisor advice-ref&#x3D;&quot;afterLog&quot; pointcut-ref&#x3D;&quot;pointcut&quot;&#x2F;&gt;   &lt;&#x2F;aop:config&gt;&lt;&#x2F;beans&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class MyTest &#123;   @Test   public void test()&#123;       ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);       UserService userService &#x3D; (UserService) context.getBean(&quot;userService&quot;);       userService.search();  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Aop的重要性 : 很重要 . 一定要理解其中的思路 , 主要是思想的理解这一块 .</p><p>Spring的Aop就是将公共的业务 (日志 , 安全等) 和领域业务结合起来 , 当执行领域业务时 , 将会把公共业务加进来 . 实现公共业务的重复利用 . 领域业务更纯粹 , 程序猿专注领域业务 , 其本质还是动态代理 . </p><p><strong>第二种方式</strong></p><p><strong>自定义类来实现Aop</strong></p><p>目标业务类不变依旧是userServiceImpl</p><p>第一步 : 写我们自己的一个切入类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class DiyPointcut &#123;   public void before()&#123;       System.out.println(&quot;---------方法执行前---------&quot;);  &#125;   public void after()&#123;       System.out.println(&quot;---------方法执行后---------&quot;);  &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>去spring中配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;!--第二种方式自定义实现--&gt;&lt;!--注册bean--&gt;&lt;bean id&#x3D;&quot;diy&quot; class&#x3D;&quot;com.kuang.config.DiyPointcut&quot;&#x2F;&gt;&lt;!--aop的配置--&gt;&lt;aop:config&gt;   &lt;!--第二种方式：使用AOP的标签实现--&gt;   &lt;aop:aspect ref&#x3D;&quot;diy&quot;&gt;       &lt;aop:pointcut id&#x3D;&quot;diyPonitcut&quot; expression&#x3D;&quot;execution(* com.kuang.service.UserServiceImpl.*(..))&quot;&#x2F;&gt;       &lt;aop:before pointcut-ref&#x3D;&quot;diyPonitcut&quot; method&#x3D;&quot;before&quot;&#x2F;&gt;       &lt;aop:after pointcut-ref&#x3D;&quot;diyPonitcut&quot; method&#x3D;&quot;after&quot;&#x2F;&gt;   &lt;&#x2F;aop:aspect&gt;&lt;&#x2F;aop:config&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class MyTest &#123;   @Test   public void test()&#123;       ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);       UserService userService &#x3D; (UserService) context.getBean(&quot;userService&quot;);       userService.add();  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第三种方式</strong></p><p><strong>使用注解实现</strong></p><p>第一步：编写一个注解实现的增强类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.kuang.config;import org.aspectj.lang.ProceedingJoinPoint;import org.aspectj.lang.annotation.After;import org.aspectj.lang.annotation.Around;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Before;@Aspectpublic class AnnotationPointcut &#123;   @Before(&quot;execution(* com.kuang.service.UserServiceImpl.*(..))&quot;)   public void before()&#123;       System.out.println(&quot;---------方法执行前---------&quot;);  &#125;   @After(&quot;execution(* com.kuang.service.UserServiceImpl.*(..))&quot;)   public void after()&#123;       System.out.println(&quot;---------方法执行后---------&quot;);  &#125;   @Around(&quot;execution(* com.kuang.service.UserServiceImpl.*(..))&quot;)   public void around(ProceedingJoinPoint jp) throws Throwable &#123;       System.out.println(&quot;环绕前&quot;);       System.out.println(&quot;签名:&quot;+jp.getSignature());       &#x2F;&#x2F;执行目标方法proceed       Object proceed &#x3D; jp.proceed();       System.out.println(&quot;环绕后&quot;);       System.out.println(proceed);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步：在Spring配置文件中，注册bean，并增加支持注解的配置</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--第三种方式:注解实现--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>annotationPointcut<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.config.AnnotationPointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>aop:aspectj-autoproxy：说明</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">通过aop命名空间的&lt;aop:aspectj-autoproxy &#x2F;&gt;声明自动为spring容器中那些配置@aspectJ切面的bean创建代理，织入切面。当然，spring 在内部依旧采用AnnotationAwareAspectJAutoProxyCreator进行自动代理的创建工作，但具体实现的细节已经被&lt;aop:aspectj-autoproxy &#x2F;&gt;隐藏起来了&lt;aop:aspectj-autoproxy &#x2F;&gt;有一个proxy-target-class属性，默认为false，表示使用jdk动态代理织入增强，当配为&lt;aop:aspectj-autoproxy  poxy-target-class&#x3D;&quot;true&quot;&#x2F;&gt;时，表示使用CGLib动态代理技术织入增强。不过即使proxy-target-class设置为false，如果目标类没有声明接口，则spring将自动使用CGLib动态代理。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="11-整合MyBatis"><a href="#11-整合MyBatis" class="headerlink" title="11.整合MyBatis"></a>11.整合MyBatis</h2><blockquote><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4></blockquote><p>1、导入相关jar包</p><p>junit</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mybatis</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mysql-connector-java</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>spring相关</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.10.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.10.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>aspectJ AOP 织入器</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mybatis-spring整合包 【重点】</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置Maven静态资源过滤问题！</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、编写配置文件</p><p>3、代码实现</p><blockquote><h4 id="回忆MyBatis"><a href="#回忆MyBatis" class="headerlink" title="回忆MyBatis"></a>回忆MyBatis</h4></blockquote><p><strong>编写pojo实体类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.kuang.pojo;public class User &#123;   private int id;  &#x2F;&#x2F;id   private String name;   &#x2F;&#x2F;姓名   private String pwd;   &#x2F;&#x2F;密码&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实现mybatis的配置文件</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>       <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>       <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useUnicode=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=utf8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>UserDao接口编写</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface UserMapper &#123;   public List&lt;User&gt; selectUser();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>接口对应的Mapper映射文件</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>       <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>       <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.dao.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectUser<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from user   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Testpublic void selectUser() throws IOException &#123;   String resource &#x3D; &quot;mybatis-config.xml&quot;;   InputStream inputStream &#x3D; Resources.getResourceAsStream(resource);   SqlSessionFactory sqlSessionFactory &#x3D; new SqlSessionFactoryBuilder().build(inputStream);   SqlSession sqlSession &#x3D; sqlSessionFactory.openSession();   UserMapper mapper &#x3D; sqlSession.getMapper(UserMapper.class);   List&lt;User&gt; userList &#x3D; mapper.selectUser();   for (User user: userList)&#123;       System.out.println(user);  &#125;   sqlSession.close();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h4 id="MyBatis-Spring学习"><a href="#MyBatis-Spring学习" class="headerlink" title="MyBatis-Spring学习"></a>MyBatis-Spring学习</h4></blockquote><p>引入Spring之前需要了解mybatis-spring包中的一些重要类；</p><p><a href="http://www.mybatis.org/spring/zh/index.html">http://www.mybatis.org/spring/zh/index.html</a></p><p><img src="/2021/07/07/spring/640-1626344306660.png"></p><p><strong>什么是 MyBatis-Spring？</strong></p><p>MyBatis-Spring 会帮助你将 MyBatis 代码无缝地整合到 Spring 中。</p><p><strong>知识基础</strong></p><p>在开始使用 MyBatis-Spring 之前，你需要先熟悉 Spring 和 MyBatis 这两个框架和有关它们的术语。这很重要</p><p>MyBatis-Spring 需要以下版本：</p><table><thead><tr><th align="left">MyBatis-Spring</th><th align="left">MyBatis</th><th align="left">Spring 框架</th><th align="left">Spring Batch</th><th align="left">Java</th></tr></thead><tbody><tr><td align="left">2.0</td><td align="left">3.5+</td><td align="left">5.0+</td><td align="left">4.0+</td><td align="left">Java 8+</td></tr><tr><td align="left">1.3</td><td align="left">3.4+</td><td align="left">3.2.2+</td><td align="left">2.1+</td><td align="left">Java 6+</td></tr></tbody></table><p>如果使用 Maven 作为构建工具，仅需要在 pom.xml 中加入以下代码即可：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要和 Spring 一起使用 MyBatis，需要在 Spring 应用上下文中定义至少两样东西：一个 SqlSessionFactory 和至少一个数据映射器类。</p><p>在 MyBatis-Spring 中，可使用SqlSessionFactoryBean来创建 SqlSessionFactory。要配置这个工厂 bean，只需要把下面代码放在 Spring 的 XML 配置文件中：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意：SqlSessionFactory需要一个 DataSource（数据源）。这可以是任意的 DataSource，只需要和配置其它 Spring 数据库连接一样配置它就可以了。</p><p>在基础的 MyBatis 用法中，是通过 SqlSessionFactoryBuilder 来创建 SqlSessionFactory 的。而在 MyBatis-Spring 中，则使用 SqlSessionFactoryBean 来创建。</p><p>在 MyBatis 中，你可以使用 SqlSessionFactory 来创建 SqlSession。一旦你获得一个 session 之后，你可以使用它来执行映射了的语句，提交或回滚连接，最后，当不再需要它的时候，你可以关闭 session。</p><p>SqlSessionFactory有一个唯一的必要属性：用于 JDBC 的 DataSource。这可以是任意的 DataSource 对象，它的配置方法和其它 Spring 数据库连接是一样的。</p><p>一个常用的属性是 configLocation，它用来指定 MyBatis 的 XML 配置文件路径。它在需要修改 MyBatis 的基础配置非常有用。通常，基础配置指的是 &lt; settings&gt; 或 &lt; typeAliases&gt;元素。</p><p>需要注意的是，这个配置文件并不需要是一个完整的 MyBatis 配置。确切地说，任何环境配置（<environments>），数据源（<DataSource>）和 MyBatis 的事务管理器（<transactionManager>）都会被忽略。SqlSessionFactoryBean 会创建它自有的 MyBatis 环境配置（Environment），并按要求设置自定义环境的值。</transactionManager></DataSource></environments></p><p>SqlSessionTemplate 是 MyBatis-Spring 的核心。作为 SqlSession 的一个实现，这意味着可以使用它无缝代替你代码中已经在使用的 SqlSession。</p><p>模板可以参与到 Spring 的事务管理中，并且由于其是线程安全的，可以供多个映射器类使用，你应该总是用 SqlSessionTemplate 来替换 MyBatis 默认的 DefaultSqlSession 实现。在同一应用程序中的不同类之间混杂使用可能会引起数据一致性的问题。</p><p>可以使用 SqlSessionFactory 作为构造方法的参数来创建 SqlSessionTemplate 对象。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>现在，这个 bean 就可以直接注入到你的 DAO bean 中了。你需要在你的 bean 中添加一个 SqlSession 属性，就像下面这样：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class UserDaoImpl implements UserDao &#123; private SqlSession sqlSession; public void setSqlSession(SqlSession sqlSession) &#123;   this.sqlSession &#x3D; sqlSession;&#125; public User getUser(String userId) &#123;   return sqlSession.getMapper...;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按下面这样，注入 SqlSessionTemplate：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.sample.dao.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><h4 id="整合实现一"><a href="#整合实现一" class="headerlink" title="整合实现一"></a>整合实现一</h4></blockquote><p>1、引入Spring配置文件beans.xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、配置数据源替换mybaits的数据源</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--配置数据源：数据源有非常多，可以使用第三方的，也可使使用Spring的--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useUnicode=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=utf8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、配置SqlSessionFactory，关联MyBatis</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--配置SqlSessionFactory--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token comment">&lt;!--关联Mybatis--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:mybatis-config.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:com/kuang/dao/*.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、注册sqlSessionTemplate，关联sqlSessionFactory；</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--注册sqlSessionTemplate , 关联sqlSessionFactory--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--利用构造器注入--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、增加Dao接口的实现类；私有化sqlSessionTemplate</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class UserDaoImpl implements UserMapper &#123;   &#x2F;&#x2F;sqlSession不用我们自己创建了，Spring来管理   private SqlSessionTemplate sqlSession;   public void setSqlSession(SqlSessionTemplate sqlSession) &#123;       this.sqlSession &#x3D; sqlSession;  &#125;   public List&lt;User&gt; selectUser() &#123;       UserMapper mapper &#x3D; sqlSession.getMapper(UserMapper.class);       return mapper.selectUser();  &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、注册bean实现</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.dao.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSession<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>7、测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> @Test public void test2()&#123;     ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);     UserMapper mapper &#x3D; (UserMapper) context.getBean(&quot;userDao&quot;);     List&lt;User&gt; user &#x3D; mapper.selectUser();     System.out.println(user);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果成功输出！现在我们的Mybatis配置文件的状态！发现都可以被Spring整合！</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>       <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>       <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h4 id="整合实现二"><a href="#整合实现二" class="headerlink" title="整合实现二"></a>整合实现二</h4></blockquote><p>mybatis-spring1.2.3版以上的才有这个 .</p><p>官方文档截图 :</p><p>dao继承Support类 , 直接利用 getSqlSession() 获得 , 然后直接注入SqlSessionFactory . 比起方式1 , 不需要管理SqlSessionTemplate , 而且对事务的支持更加友好 . 可跟踪源码查看</p><p><img src="/2021/07/07/spring/640-1626344306673.png"></p><p>测试：</p><p>1、将我们上面写的UserDaoImpl修改一下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class UserDaoImpl extends SqlSessionDaoSupport implements UserMapper &#123;   public List&lt;User&gt; selectUser() &#123;       UserMapper mapper &#x3D; getSqlSession().getMapper(UserMapper.class);       return mapper.selectUser();  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、修改bean的配置</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.dao.UserDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3、测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Testpublic void test2()&#123;   ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);   UserMapper mapper &#x3D; (UserMapper) context.getBean(&quot;userDao&quot;);   List&lt;User&gt; user &#x3D; mapper.selectUser();   System.out.println(user);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结 : 整合到spring以后可以完全不要mybatis的配置文件，除了这些方式可以实现整合之外，我们还可以使用注解来实现，这个等我们后面学习SpringBoot的时候还会测试整合！</strong></p><h2 id="12-声明式事务"><a href="#12-声明式事务" class="headerlink" title="12.声明式事务"></a>12.声明式事务</h2><blockquote><h4 id="回顾事务"><a href="#回顾事务" class="headerlink" title="回顾事务"></a>回顾事务</h4></blockquote><ul><li>事务在项目开发过程非常重要，涉及到数据的一致性的问题，不容马虎！</li><li>事务管理是企业级应用程序开发中必备技术，用来确保数据的完整性和一致性。</li></ul><p>事务就是把一系列的动作当成一个独立的工作单元，这些动作要么全部完成，要么全部不起作用。</p><p><strong>事务四个属性ACID</strong></p><ol><li><p>原子性（atomicity）</p></li><li><ul><li>事务是原子性操作，由一系列动作组成，事务的原子性确保动作要么全部完成，要么完全不起作用</li></ul></li><li><p>一致性（consistency）</p></li><li><ul><li>一旦所有事务动作完成，事务就要被提交。数据和资源处于一种满足业务规则的一致性状态中</li></ul></li><li><p>隔离性（isolation）</p></li><li><ul><li>可能多个事务会同时处理相同的数据，因此每个事务都应该与其他事务隔离开来，防止数据损坏</li></ul></li><li><p>持久性（durability）</p></li><li><ul><li>事务一旦完成，无论系统发生什么错误，结果都不会受到影响。通常情况下，事务的结果被写到持久化存储器中</li></ul></li></ol><blockquote><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4></blockquote><p>将上面的代码拷贝到一个新项目中</p><p>在之前的案例中，我们给userDao接口新增两个方法，删除和增加用户；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;添加一个用户int addUser(User user);&#x2F;&#x2F;根据id删除用户int deleteUser(int id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mapper文件，我们故意把 deletes 写错，测试！</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>insert into user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>deletes from user where id = #&#123;id&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写接口的实现类，在实现类中，我们去操作一波</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class UserDaoImpl extends SqlSessionDaoSupport implements UserMapper &#123;   &#x2F;&#x2F;增加一些操作   public List&lt;User&gt; selectUser() &#123;       User user &#x3D; new User(4,&quot;小明&quot;,&quot;123456&quot;);       UserMapper mapper &#x3D; getSqlSession().getMapper(UserMapper.class);       mapper.addUser(user);       mapper.deleteUser(4);       return mapper.selectUser();  &#125;   &#x2F;&#x2F;新增   public int addUser(User user) &#123;       UserMapper mapper &#x3D; getSqlSession().getMapper(UserMapper.class);       return mapper.addUser(user);  &#125;   &#x2F;&#x2F;删除   public int deleteUser(int id) &#123;       UserMapper mapper &#x3D; getSqlSession().getMapper(UserMapper.class);       return mapper.deleteUser(id);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Testpublic void test2()&#123;   ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);   UserMapper mapper &#x3D; (UserMapper) context.getBean(&quot;userDao&quot;);   List&lt;User&gt; user &#x3D; mapper.selectUser();   System.out.println(user);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>报错：sql异常，delete写错了</p><p>结果 ：插入成功！</p><p>没有进行事务的管理；我们想让他们都成功才成功，有一个失败，就都失败，我们就应该需要<strong>事务！</strong></p><p>以前我们都需要自己手动管理事务，十分麻烦！</p><p>但是Spring给我们提供了事务管理，我们只需要配置即可；</p><blockquote><p>Spring中的事务管理</p></blockquote><p>Spring在不同的事务管理API之上定义了一个抽象层，使得开发人员不必了解底层的事务管理API就可以使用Spring的事务管理机制。Spring支持编程式事务管理和声明式的事务管理。</p><p><strong>编程式事务管理</strong></p><ul><li>将事务管理代码嵌到业务方法中来控制事务的提交和回滚</li><li>缺点：必须在每个事务操作业务逻辑中包含额外的事务管理代码</li></ul><p><strong>声明式事务管理</strong></p><ul><li>一般情况下比编程式事务好用。</li><li>将事务管理代码从业务方法中分离出来，以声明的方式来实现事务管理。</li><li>将事务管理作为横切关注点，通过aop方法模块化。Spring中通过Spring AOP框架支持声明式事务管理。</li></ul><p><strong>使用Spring管理事务，注意头文件的约束导入 : tx</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">xmlns:tx="http://www.springframework.org/schema/tx"http://www.springframework.org/schema/txhttp://www.springframework.org/schema/tx/spring-tx.xsd"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>事务管理器</strong></p><ul><li>无论使用Spring的哪种事务管理策略（编程式或者声明式）事务管理器都是必须的。</li><li>就是 Spring的核心事务管理抽象，管理封装了一组独立于技术的方法。</li></ul><p><strong>JDBC事务</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>配置好事务管理器后我们需要去配置事务的通知</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--配置事务通知--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!--配置哪些方法使用什么样的事务,配置事务的传播特性--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delete<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>spring事务传播特性：</strong></p><p>事务传播行为就是多个事务方法相互调用时，事务如何在这些方法间传播。spring支持7种事务传播行为：</p><ul><li>propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是最常见的选择。</li><li>propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。</li><li>propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。</li><li>propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。</li><li>propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</li><li>propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。</li><li>propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作</li></ul><p>Spring 默认的事务传播行为是 PROPAGATION_REQUIRED，它适合于绝大多数的情况。</p><p>假设 ServiveX#methodX() 都工作在事务环境下（即都被 Spring 事务增强了），假设程序中存在如下的调用链：Service1#method1()-&gt;Service2#method2()-&gt;Service3#method3()，那么这 3 个服务类的 3 个方法通过 Spring 的事务传播机制都工作在同一个事务中。</p><p>就好比，我们刚才的几个方法存在调用，所以会被放在一组事务当中！</p><p><strong>配置AOP</strong></p><p>导入aop的头文件！</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--配置aop织入事务--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txPointcut<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>execution(* com.kuang.dao.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>txPointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>进行测试</strong></p><p>删掉刚才插入的数据，再次测试！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Testpublic void test2()&#123;   ApplicationContext context &#x3D; new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);   UserMapper mapper &#x3D; (UserMapper) context.getBean(&quot;userDao&quot;);   List&lt;User&gt; user &#x3D; mapper.selectUser();   System.out.println(user);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>思考问题？</p></blockquote><p>为什么需要配置事务？</p><ul><li>如果不配置，就需要我们手动提交控制事务；</li><li>事务在项目开发过程非常重要，涉及到数据的一致性的问题，不容马虎！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis Plus</title>
      <link href="/2021/07/07/mybatis-plus/"/>
      <url>/2021/07/07/mybatis-plus/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Mybatis-plus学习笔记"><a href="#Mybatis-plus学习笔记" class="headerlink" title="Mybatis-plus学习笔记"></a>Mybatis-plus学习笔记</h1><p>学习MyBatis-Plus之前要先学MyBatis–&gt;Spring—&gt;SpringMVC</p><p>为什么要学它?MyBatisPlus可以节省我们大量的时间,所有CRUD代码都可以自动完成</p><p>JPA, tk-mapper ,MyBatisPlus</p><p>偷懒用的!</p><blockquote><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2></blockquote><p>是什么?</p><p>官网:<a href="https://baomidou.com/">https://baomidou.com/</a></p><p><img src="/2021/07/07/mybatis-plus/20200930150243845.png"></p><p><img src="/2021/07/07/mybatis-plus/20200930150327276.png"></p><blockquote><h2 id="2-特性"><a href="#2-特性" class="headerlink" title="2.特性"></a>2.特性</h2></blockquote><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h2 id="1-快速入门"><a href="#1-快速入门" class="headerlink" title="1.快速入门"></a>1.快速入门</h2><p>地址:<a href="https://baomidou.com/guide/quick-start.html#%E5%88%9D%E5%A7%8B%E5%8C%96%E5%B7%A5%E7%A8%8B">https://baomidou.com/guide/quick-start.html#%E5%88%9D%E5%A7%8B%E5%8C%96%E5%B7%A5%E7%A8%8B</a></p><p>使用第三方插件:</p><ol><li>导入对应的依赖</li><li>研究依赖如何配置</li><li>代码如何编写</li><li>提高扩展技术能力</li></ol><blockquote><p>步骤</p></blockquote><p>1.创建数据库 <code>mybatis_plus</code></p><p>2.创建数据库</p><p>创建表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">DROP TABLE IF EXISTS user;CREATE TABLE user(id BIGINT(20) NOT NULL COMMENT &#39;主键ID&#39;,name VARCHAR(30) NULL DEFAULT NULL COMMENT &#39;姓名&#39;,age INT(11) NULL DEFAULT NULL COMMENT &#39;年龄&#39;,email VARCHAR(50) NULL DEFAULT NULL COMMENT &#39;邮箱&#39;,PRIMARY KEY (id));--真实开发环境中,version(乐观锁),deleted(逻辑删除),gmt_create,gmt_modified<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插入数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">DELETE FROM user;INSERT INTO user (id, name, age, email) VALUES(1, &#39;Jone&#39;, 18, &#39;test1@baomidou.com&#39;),(2, &#39;Jack&#39;, 20, &#39;test2@baomidou.com&#39;),(3, &#39;Tom&#39;, 28, &#39;test3@baomidou.com&#39;),(4, &#39;Sandy&#39;, 21, &#39;test4@baomidou.com&#39;),(5, &#39;Billie&#39;, 24, &#39;test5@baomidou.com&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/mybatis-plus/20200930150344676.png"></p><p>3.编写项目,初始化项目! 使用SpringBoot初始化!</p><p>4.导入依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--mysql--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--lombok--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--mybatis-plus--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明:我们使用mybatis-plus 可以节省我们大量的代码,尽量不要同时导入mybatis和mybatis-plus因为版本有差异!</p><p>5.连接数据库!这一步和mybatis相同!</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"># mysql 5 驱动不同  com.mysql.jdbc.Driver# mysql 8 驱动不同 com.mysql.cj.jdbc.Driver . 需要增加时区的配置 serverTimezone&#x3D;GMT%2B8spring.datasource.username&#x3D;codeyuaiiaospring.datasource.password&#x3D;3615yuhaijiaospring.datasource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis_plus?useSSL&#x3D;false&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8spring.datasource.driver-class-name&#x3D;com.mysql.cj.jdbc.Driver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.传统的方式pojo-dao(连接mybatis,配置mapper.xml文件)-service-controller</p><p>6.使用了mybatis-plus之后</p><ul><li><p>pojo</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Data@AllArgsConstructor@NoArgsConstructorpublic class User &#123;    private Long id;    private String name;    private Integer age;    private String email;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>mapper接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">import com.baomidou.mybatisplus.core.mapper.BaseMapper;import com.codeyuaiiao.pojo.User;import org.springframework.stereotype.Repository;&#x2F;&#x2F;在对应的mapper上面继承基本的类 BaseMapper@Repository&#x2F;&#x2F;代表持久层public interface UserMapper extends BaseMapper&lt;User&gt; &#123;    &#x2F;&#x2F;所有CRUD操作都已经编写完成了    &#x2F;&#x2F;你不需要向以前一样配置一大堆文件了!&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意点:需要在主启动类<code>MybatisPlusApplication</code>上扫描我们Mapper包下的所有接口</p><p><code>@MapperScan(&quot;com.codeyuaiiao.mapper&quot;)</code></p></li><li><p>测试类中测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootTestclass MybatisPlusApplicationTests &#123;    &#x2F;&#x2F;继承了BaseMapper, 所有的方法都来自己父类    &#x2F;&#x2F;我们也可以编写自己的扩展方法    @Autowired    private UserMapper userMapper;    @Test    void contextLoads() &#123;        &#x2F;&#x2F;参数是一个Wrapper , 条件构造器,这里我们先不用 --null        &#x2F;&#x2F;查询全部用户        List&lt;User&gt; users &#x3D; userMapper.selectList(null);        users.forEach(System.out::println);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查询结果:</p></li></ul><p><img src="/2021/07/07/mybatis-plus/20200930150413201.png"></p><blockquote><p>思考问题</p><ol><li>sql谁帮我们写的?—mybatis-plus</li><li>方法谁帮我们写的?—mybatis-pluss</li></ol></blockquote><h2 id="2-配置日志"><a href="#2-配置日志" class="headerlink" title="2.配置日志"></a>2.配置日志</h2><p>我们所有的sql是不可见的,我们希望知道他是怎么执行的,所以我们必须看日志!</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"># 配置日志  (默认控制台输出)mybatis-plus.configuration.log-impl&#x3D;org.apache.ibatis.logging.stdout.StdOutImpl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/07/07/mybatis-plus/20200930150425185.png"></p><p>配置完日志之后你会喜欢上mybatis-plus!</p><h2 id="3-CRUD扩展"><a href="#3-CRUD扩展" class="headerlink" title="3.CRUD扩展"></a>3.CRUD扩展</h2><h3 id="1-插入数据"><a href="#1-插入数据" class="headerlink" title="1.插入数据"></a>1.插入数据</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Testpublic void testInsert()&#123;    User user &#x3D; new User();    user.setName(&quot;codeyuaiiao&quot;);    user.setAge(3);    user.setEmail(&quot;747557612@qq.com&quot;);    int result &#x3D; userMapper.insert(user);    System.out.println(result);    System.out.println(user);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/mybatis-plus/20200930150437175.png"></p><blockquote><p>注意点:数据库插入的id默认值为:全局的唯一id</p></blockquote><h3 id="2-主键生成策略"><a href="#2-主键生成策略" class="headerlink" title="2.主键生成策略"></a>2.主键生成策略</h3><blockquote><p>默认 ID_WORKER 全局唯一id</p><p>对应数据库中的主键(uuid.自增id.雪花算法.redis.zookeeper)</p></blockquote><p>分布式系统唯一id生成:<a href="https://www.cnblogs.com/haoxinyue/p/5208136.html">https://www.cnblogs.com/haoxinyue/p/5208136.html</a></p><p><strong>雪花算法</strong>😦<strong>Twitter的snowflake算法</strong>)</p><p>snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0.可以保证几乎全球唯一</p><blockquote><p>主键自增</p></blockquote><p>我们需要配置主键自增:</p><ol><li><p>实体类字段上<code>@TableId(type = IdType.AUTO)</code></p></li><li><p>数据库字段一定要是<strong>自增</strong>!</p><p><img src="/2021/07/07/mybatis-plus/20200930150449191.png"></p><p><img src="/2021/07/07/mybatis-plus/20200930150459128.png"></p></li></ol><p><img src="/2021/07/07/mybatis-plus/20200930150508407.png"></p><blockquote><p>其余源码解释</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public enum IdType &#123;         AUTO(0),&#x2F;&#x2F;数据库ID自增      NONE(1),&#x2F;&#x2F;该类型为未设置主键类型          INPUT(2),&#x2F;&#x2F;用户输入ID       &#x2F;&#x2F;该类型可以通过自己注册自动填充插件进行填充      &#x2F;&#x2F;以下3种类型、只有当插入对象ID 为空，才自动填充。         ID_WORKER(3),&#x2F;&#x2F;全局唯一ID (idWorker)          UUID(4),&#x2F;&#x2F;全局唯一ID (UUID)              ID_WORKER_STR(5);&#x2F;&#x2F;字符串全局唯一ID (idWorker 的字符串表示)    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-更新数据"><a href="#3-更新数据" class="headerlink" title="3.更新数据"></a>3.更新数据</h3><blockquote><p>动态sql</p></blockquote><p>注意:updateById()参数是 一个对象!</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;测试更新@Testpublic void testUpdate()&#123;    User user &#x3D; new User();    user.setId(2L);    user.setName(&quot;阿峧不是山交&quot;);    &#x2F;&#x2F;        注意:updateById()参数是 一个对象!    int i &#x3D; userMapper.updateById(user);    System.out.println(i);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/mybatis-plus/20200930150523190.png"></p><p><img src="/2021/07/07/mybatis-plus/20200930150543666.png"></p><p>所有的sql都是动态帮你配置的</p><h3 id="4-自动填充"><a href="#4-自动填充" class="headerlink" title="4.自动填充"></a>4.自动填充</h3><p>创建时间 . 修改时间! 这些个操作都是自动化完成的,我们不希望手动更新!</p><p>阿里巴巴开发手册:所有的数据库表:gmt_create .gmt_modified几乎所有的表都要配置上!而且需要自动化!</p><blockquote><p>方式一:数据库级别</p></blockquote><p>1.在表中新增字段 create_time , update_time</p><p><img src="/2021/07/07/mybatis-plus/20200930150615744.png"></p><p>2.再次测试插入方法,我们需要先把实体类同步</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">private Data creatTime;private Data updateTime;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再次更新查看结果即可</p><p><img src="/2021/07/07/mybatis-plus/20200930150634402.png"></p><blockquote><p>方式二:代码级别</p></blockquote><p>1.删除数据库默认值</p><p><img src="/2021/07/07/mybatis-plus/20200930150644351.png"></p><p>2.实体类字段属性上添加注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;记住用util包下的Date!!&#x2F;&#x2F;字段添加填充内容@TableField(fill &#x3D; FieldFill.INSERT)private Data creatTime;@TableField(fill &#x3D; FieldFill.INSERT_UPDATE)private Data updateTime;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.编写处理器来处理这个注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.codeyuaiiao.handler;import com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;import lombok.extern.slf4j.Slf4j;import org.apache.ibatis.reflection.MetaObject;import org.springframework.stereotype.Component;import java.util.Date;@Slf4j@Component &#x2F;&#x2F;把处理器加到IOC容器中public class MyMetaObjectHandler implements MetaObjectHandler &#123;    &#x2F;&#x2F;插入时的填充策略    @Override    public void insertFill(MetaObject metaObject) &#123;        log.info(&quot;Start insert fill.... &quot;);        this.setFieldValByName(&quot;createTime&quot;,new Date(),metaObject);        this.setFieldValByName(&quot;updateTime&quot;,new Date(),metaObject);    &#125;    &#x2F;&#x2F;更新时的填充策略    @Override    public void updateFill(MetaObject metaObject) &#123;        log.info(&quot;Start update fill.... &quot;);        this.setFieldValByName(&quot;updateTime&quot;,new Date(),metaObject);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.编写处理器来处理这个注解即可!</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.codeyuaiiao.handler;import com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;import lombok.extern.slf4j.Slf4j;import org.apache.ibatis.reflection.MetaObject;import org.springframework.stereotype.Component;import java.util.Date;@Slf4j@Component &#x2F;&#x2F;把处理器加到IOC容器中public class MyMetaObjectHandler implements MetaObjectHandler &#123;    &#x2F;&#x2F;插入时的填充策略    @Override    public void insertFill(MetaObject metaObject) &#123;        log.info(&quot;Start insert fill.... &quot;);        this.setFieldValByName(&quot;createTime&quot;,new Date(),metaObject);        this.setFieldValByName(&quot;updateTime&quot;,new Date(),metaObject);    &#125;    &#x2F;&#x2F;更新时的填充策略    @Override    public void updateFill(MetaObject metaObject) &#123;        log.info(&quot;Start update fill.... &quot;);        this.setFieldValByName(&quot;updateTime&quot;,new Date(),metaObject);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.测试插入</p><p>5测试更新,观察时间即可!</p><h3 id="5-乐观锁-amp-悲观锁"><a href="#5-乐观锁-amp-悲观锁" class="headerlink" title="5.乐观锁&amp;悲观锁"></a>5.乐观锁&amp;悲观锁</h3><blockquote><p>乐观锁: 顾名思义十分乐观,他总是认为不会出现问题,无论干什么都不去上锁!如果出现了问题,再次更新值测试</p><p>悲观锁;顾名思义十分悲观,他总是认为出现问题,无论干什么都会上锁!再去操作!</p></blockquote><p>我们这里主要讲解 乐观锁机制!</p><p>乐观锁实现方式:</p><ul><li>取出记录时,获取当前version</li><li>更新时,带上这个version</li><li>执行更新时,set version = newVersion where version = oldVersion</li><li>如果version不对,就更新失败</li></ul><h3 id="6-查询操作"><a href="#6-查询操作" class="headerlink" title="6.查询操作"></a>6.查询操作</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;测试查询@Testpublic void testSelectById()&#123;    User user &#x3D; userMapper.selectById(1L);    System.out.println(user);&#125;&#x2F;&#x2F;测试批量查询public void testSelectBatchId()&#123;    List&lt;User&gt; users &#x3D; userMapper.selectBatchIds(Arrays.asList(1, 2, 3));    users.forEach(System.out::println);&#125;&#x2F;&#x2F;按条件查询之--使用Map操作@Testpublic void testSelectBatchIds()&#123;    HashMap&lt;String, Object&gt; map &#x3D; new HashMap&lt;&gt;();    map.put(&quot;name&quot;,&quot;阿峧说java&quot;);    map.put(&quot;age&quot;,&quot;18&quot;);    List&lt;User&gt; users &#x3D; userMapper.selectByMap(map);    users.forEach(System.out::println);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在工作中会遇见逻辑删除</p><h3 id="7-逻辑删除"><a href="#7-逻辑删除" class="headerlink" title="7.逻辑删除"></a>7.逻辑删除</h3><blockquote><p>物理删除:从数据库中直接移除</p><p>逻辑删除: 在数据库中没有被移除,而是通过一个变量来让他失效! deleted=0=&gt;deleted=1</p></blockquote><p>管理员可以查看被删除的记录!防止数据的丢失,类似于回收站!</p><p>测试:</p><p>1.在数据表中增加一个deleted字段</p><p><img src="/2021/07/07/mybatis-plus/20200930150703144.png"></p><p>2.实体类中增加属性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;逻辑删除@TableLogicprivate Integer deleted;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;注册逻辑删除@Beanpublic ISqlInjector sqlInjector()&#123;    return new LogicSqlInjector();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"># 配置逻辑删除mybatis-plus.global-config.db-config.logic-delete-value&#x3D;1mybatis-plus.global-config.db-config.logic-not-delete-value&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>走的是更新操作,不是删除操作</p><p><img src="/2021/07/07/mybatis-plus/2020093015071649.png"></p></blockquote><blockquote><p>查询的时候会自动过滤删除的数据</p><p><img src="/2021/07/07/mybatis-plus/20200930150728942.png"></p></blockquote><p>以上的所有CRUD操作及其扩展,我们都必须精通掌握!会大大提好你的工作和写项目的效率</p><h2 id="4-性能分析插件"><a href="#4-性能分析插件" class="headerlink" title="4.性能分析插件"></a>4.性能分析插件</h2><p>我们在平时的开发中,会遇到一些慢sql.</p><p>MP也提供了性能分析插件,如果超过这个时间就停止运行!</p><p>1.导入插件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Bean    @Profile(&#123;&quot;dev&quot;,&quot;test&quot;&#125;) &#x2F;&#x2F;设置dev 和 test环境开启    public PerformanceInterceptor performanceInterceptor()&#123;        PerformanceInterceptor performanceInterceptor &#x3D; new PerformanceInterceptor();        performanceInterceptor.setMaxTime(1);        performanceInterceptor.setFormat(true);        return performanceInterceptor;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>记住在SpringBoot中配置环境为 dev或者test环境</p><p>application.properties中添加设置开发环境</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">#设置开发环境spring.profiles.active&#x3D;dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.测试查询</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Test    public void testSelectBatchId()&#123;        List&lt;User&gt; users &#x3D; userMapper.selectBatchIds(Arrays.asList(1, 2, 3));        users.forEach(System.out::println);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/mybatis-plus/20200930150745143.png"></p><h2 id="5-条件构造器"><a href="#5-条件构造器" class="headerlink" title="5.条件构造器"></a>5.条件构造器</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.kuang;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import com.kuang.mapper.UserMapper;import com.kuang.pojo.User;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import java.util.List;import java.util.Map;@SpringBootTestpublic class WrapperTest &#123;    @Autowired    private UserMapper userMapper;    @Test    void contextLoads() &#123;        &#x2F;&#x2F; 查询name不为空的用户，并且邮箱不为空的用户，年龄大于等于12        QueryWrapper&lt;User&gt; wrapper &#x3D; new QueryWrapper&lt;&gt;();        wrapper                .isNotNull(&quot;name&quot;)                .isNotNull(&quot;email&quot;)                .ge(&quot;age&quot;,12);        userMapper.selectList(wrapper).forEach(System.out::println); &#x2F;&#x2F; 和我们刚才学习的map对比一下    &#125;    @Test    void test2()&#123;        &#x2F;&#x2F; 查询名字狂神说        QueryWrapper&lt;User&gt; wrapper &#x3D; new QueryWrapper&lt;&gt;();        wrapper.eq(&quot;name&quot;,&quot;狂神说&quot;);        User user &#x3D; userMapper.selectOne(wrapper); &#x2F;&#x2F; 查询一个数据，出现多个结果使用List 或者 Map        System.out.println(user);    &#125;    @Test    void test3()&#123;        &#x2F;&#x2F; 查询年龄在 20 ~ 30 岁之间的用户        QueryWrapper&lt;User&gt; wrapper &#x3D; new QueryWrapper&lt;&gt;();        wrapper.between(&quot;age&quot;,20,30); &#x2F;&#x2F; 区间        Integer count &#x3D; userMapper.selectCount(wrapper);&#x2F;&#x2F; 查询结果数        System.out.println(count);    &#125;    &#x2F;&#x2F; 模糊查询    @Test    void test4()&#123;        &#x2F;&#x2F; 查询年龄在 20 ~ 30 岁之间的用户        QueryWrapper&lt;User&gt; wrapper &#x3D; new QueryWrapper&lt;&gt;();        &#x2F;&#x2F; 左和右  t%        wrapper                .notLike(&quot;name&quot;,&quot;e&quot;)                .likeRight(&quot;email&quot;,&quot;t&quot;);        List&lt;Map&lt;String, Object&gt;&gt; maps &#x3D; userMapper.selectMaps(wrapper);        maps.forEach(System.out::println);    &#125;    &#x2F;&#x2F; 模糊查询    @Test    void test5()&#123;        QueryWrapper&lt;User&gt; wrapper &#x3D; new QueryWrapper&lt;&gt;();        &#x2F;&#x2F; id 在子查询中查出来        wrapper.inSql(&quot;id&quot;,&quot;select id from user where id&lt;3&quot;);        List&lt;Object&gt; objects &#x3D; userMapper.selectObjs(wrapper);        objects.forEach(System.out::println);    &#125;    &#x2F;&#x2F;测试六    @Test    void test6()&#123;        QueryWrapper&lt;User&gt; wrapper &#x3D; new QueryWrapper&lt;&gt;();        &#x2F;&#x2F; 通过id进行排序        wrapper.orderByAsc(&quot;id&quot;);        List&lt;User&gt; users &#x3D; userMapper.selectList(wrapper);        users.forEach(System.out::println);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-代码自动生成-非常NB"><a href="#6-代码自动生成-非常NB" class="headerlink" title="6.代码自动生成**非常NB"></a>6.代码自动生成**非常NB</h2><p>dao、pojo、service、controller都给我自己去编写完成！</p><p>AutoGenerator 是 MyBatis-Plus 的代码生成器，通过 AutoGenerator 可以快速生成 Entity、</p><p>Mapper、Mapper XML、Service、Controller 等各个模块的代码，极大的提升了开发效率。</p><p>只需要改实体类名字 和包名 还有 数据库配置即可</p><p>测试:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">import com.baomidou.mybatisplus.annotation.DbType; import com.baomidou.mybatisplus.annotation.FieldFill; import com.baomidou.mybatisplus.annotation.IdType; import com.baomidou.mybatisplus.annotation.TableField; import com.baomidou.mybatisplus.generator.AutoGenerator; import com.baomidou.mybatisplus.generator.config.DataSourceConfig; import com.baomidou.mybatisplus.generator.config.GlobalConfig; import com.baomidou.mybatisplus.generator.config.PackageConfig; import com.baomidou.mybatisplus.generator.config.StrategyConfig; import com.baomidou.mybatisplus.generator.config.po.TableFill; import com.baomidou.mybatisplus.generator.config.rules.DateType; import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy; import java.util.ArrayList; &#x2F;&#x2F; 代码自动生成器 public class KuangCode &#123;public static void main(String[] args) &#123;    &#x2F;&#x2F; 需要构建一个 代码自动生成器 对象     AutoGenerator mpg &#x3D; new AutoGenerator();         &#x2F;&#x2F; 配置策略     &#x2F;&#x2F; 1、全局配置     GlobalConfig gc &#x3D; new GlobalConfig();    String projectPath &#x3D; System.getProperty(&quot;user.dir&quot;);     gc.setOutputDir(projectPath+&quot;&#x2F;src&#x2F;main&#x2F;java&quot;);    gc.setAuthor(&quot;狂神说&quot;); gc.setOpen(false);    gc.setFileOverride(false);        &#x2F;&#x2F; 是否覆盖    gc.setServiceName(&quot;%sService&quot;);        &#x2F;&#x2F; 去Service的I前缀    gc.setIdType(IdType.ID_WORKER);    gc.setDateType(DateType.ONLY_DATE);    gc.setSwagger2(true);    mpg.setGlobalConfig(gc);        &#x2F;&#x2F;2、设置数据源    DataSourceConfig dsc &#x3D; new DataSourceConfig();    dsc.setUrl(&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;kuang_community? useSSL&#x3D;false&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8&amp;serverTimezone&#x3D;GMT%2B8&quot;);    dsc.setDriverName(&quot;com.mysql.cj.jdbc.Driver&quot;);    dsc.setUsername(&quot;root&quot;);    dsc.setPassword(&quot;123456&quot;);    dsc.setDbType(DbType.MYSQL); mpg.setDataSource(dsc);        &#x2F;&#x2F;3、包的配置    PackageConfig pc &#x3D; new PackageConfig();    &#x2F;&#x2F;只需要改实体类名字 和包名 还有 数据库配置即可    pc.setModuleName(&quot;blog&quot;); pc.setParent(&quot;com.kuang&quot;);    pc.setEntity(&quot;entity&quot;); pc.setMapper(&quot;mapper&quot;);    pc.setService(&quot;service&quot;); pc.setController(&quot;controller&quot;);    mpg.setPackageInfo(pc);        &#x2F;&#x2F;4、策略配置    StrategyConfig strategy &#x3D; new StrategyConfig();  strategy.setInclude(&quot;blog_tags&quot;,&quot;course&quot;,&quot;links&quot;,&quot;sys_settings&quot;,&quot;user_record&quot;,&quot; user_say&quot;);        &#x2F;&#x2F; 设置要映射的表名    strategy.setNaming(NamingStrategy.underline_to_camel);    strategy.setColumnNaming(NamingStrategy.underline_to_camel);    strategy.setEntityLombokModel(true);        &#x2F;&#x2F; 自动lombok；    strategy.setLogicDeleteFieldName(&quot;deleted&quot;);         &#x2F;&#x2F; 自动填充配置    TableFill gmtCreate &#x3D; new TableFill(&quot;gmt_create&quot;, FieldFill.INSERT);    TableFill gmtModified &#x3D; new TableFill(&quot;gmt_modified&quot;, FieldFill.INSERT_UPDATE);    ArrayList&lt;TableFill&gt; tableFills &#x3D; new ArrayList&lt;&gt;();    tableFills.add(gmtCreate); tableFills.add(gmtModified);    strategy.setTableFillList(tableFills);        &#x2F;&#x2F; 乐观锁    strategy.setVersionFieldName(&quot;version&quot;);    strategy.setRestControllerStyle(true);    strategy.setControllerMappingHyphenStyle(true);        &#x2F;&#x2F; localhost:8080&#x2F;hello_id_2     mpg.setStrategy(strategy);    mpg.execute(); &#x2F;&#x2F;执行 &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis Plus笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2021/07/07/mysql/"/>
      <url>/2021/07/07/mysql/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p>解决时区问题： <a href="https://jingyan.baidu.com/article/597a0643a0faa9712a524322.html">https://jingyan.baidu.com/article/597a0643a0faa9712a524322.html</a> </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">spring.datasource.url &#x3D; jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;user?serverTimezone&#x3D;UTCspring.datasource.username &#x3D; rootspring.datasource.password &#x3D; 123456spring.datasource.driverClassName &#x3D; com.mysql.cj.jdbc.Driver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="1、初识MySQL"><a href="#1、初识MySQL" class="headerlink" title="1、初识MySQL"></a>1、初识MySQL</h1><p>JavaEE：企业级Java开发 Web</p><p>前端（页面：展示：数据）</p><p>后台 （连接点：连接数据库JDBC,连接前端（控制视图跳转，给前端传递数据））</p><p>数据库（存数据，Txt,Excel,Word）</p><blockquote><p>只会写代码，学好数据库，基本混饭吃：</p><p>操作系统，数据结构与算法！当一个不错的程序猿！</p><p>离散数学，数字电路，体系结构，编译原理。+实战经验，优秀程序猿</p></blockquote><h3 id="1-1为什么学数据库"><a href="#1-1为什么学数据库" class="headerlink" title="1.1为什么学数据库"></a>1.1为什么学数据库</h3><p>1、岗位需求</p><p>2、现在的世界，大数据时代，得数据者得天下</p><p>3、被迫需求：存数据</p><p><code>4、数据库是所有软件体系中最核心的存在</code> DBA</p><h3 id="1-2-什么是数据库"><a href="#1-2-什么是数据库" class="headerlink" title="1.2 什么是数据库"></a>1.2 什么是数据库</h3><p>数据库：(DB,DataBase)</p><p>概念:数据仓库，软件，安装在操作系统之（windows,Linux。mac）上的！SQL,可以存储大量的数据，500万!</p><p>作用:存储数据，管理数据 Excel</p><h3 id="1-3-数据库分类"><a href="#1-3-数据库分类" class="headerlink" title="1.3 数据库分类"></a>1.3 数据库分类</h3><p>关系型数据库：(SQL)</p><ul><li>MySQL, Oracle, sql Server, DB2, SQLite</li><li>通过表和表之间，行和列之间的关系进行数据的存储</li></ul><p>非关系型数据库：(NoSQL) Not Only SQL</p><ul><li>Redis, MongDB</li><li>非关系型数据库，对象存储，通过对象自身的属性来决定。</li></ul><p>**DBMS(数据库管理系统) **</p><ul><li>数据库的管理软件，科学有效的管理我们的数据，维护和获取</li><li>MySQL ，数据管理系统！</li></ul><h3 id="1-4-MySQL简介"><a href="#1-4-MySQL简介" class="headerlink" title="1.4 MySQL简介"></a>1.4 MySQL简介</h3><p>MySQL是一个**<a href="https://baike.baidu.com/item/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/696511">关系型数据库管理系统</a>**</p><p>前世： 瑞典MySQL AB 公司</p><p>今身： 属于 <a href="https://baike.baidu.com/item/Oracle">Oracle</a> 旗下产品</p><p>MySQL是最好的 <a href="https://baike.baidu.com/item/RDBMS/1048260">RDBMS</a> (Relational Database Management System，关系数据库管理系统) 应用软件之一。</p><p>开源的数据库软件</p><p>体积小，速度快，总体拥有成本低，招人成本比较低。</p><p>中小型网站，或者大型网站，集群</p><p>官网： <a href="https://www.mysql.com/">https://www.mysql.com/</a></p><h3 id="1-5连接数据库"><a href="#1-5连接数据库" class="headerlink" title="1.5连接数据库"></a>1.5连接数据库</h3><p>命令行连接！</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">mysql -u root -p123456 --连接数据库update mysql.user set authentication_string&#x3D;password(&#39;123456&#39;) where user&#x3D;&#39;root&#39; and Host&#x3D;&#39;localhost&#39;;  --修改密码flush privileges;--刷新权限----------------------------------------------------所有语句使用;结尾--show databases;--查看所有的数据库mysql&gt; use school--切换数据库， use 数据库名Database changed--show tables;--查看数据库中所有的表describe student;--显示数据库中所有的表的信息create database westos;--创建一个数据库exit;--退出连接--单行注释（sql本来注释）&#x2F;*多行注释*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2、操作数据库"><a href="#2、操作数据库" class="headerlink" title="2、操作数据库"></a>2、操作数据库</h1><p>操作数据库》操作数据库中的表》操作数据库中表的数据</p><p><strong>MySQL关键字不区分大小写</strong></p><h3 id="2-1操作数据库"><a href="#2-1操作数据库" class="headerlink" title="2.1操作数据库"></a>2.1操作数据库</h3><p>1.创建数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE DATABASE IF NOT EXISTS westos;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.删除数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">DROP DATABASE IF EXISTS westos<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.使用数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- &#96;&#96;,如果你的表名或者字段名是一个特殊字符，需要带&#96;&#96;USE &#39;school&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4.产看数据库</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SHOW DATABASES--查看所有数据库<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2数据库的列类型"><a href="#2-2数据库的列类型" class="headerlink" title="2.2数据库的列类型"></a>2.2数据库的列类型</h3><blockquote><p>数值</p></blockquote><ul><li>tinyint 十分小的数据 1个字节</li><li>smallint 较小的数据 2个字节</li><li>mediumint 中等大小 3个字节</li><li><strong>int 标准的整数 4个字节（常用）</strong></li><li>bigint 较大的数据 8个字节</li><li>float 浮点数 4个字节</li><li>double 浮点数 8个字节 （精度问题）</li><li>decimal 字符串形式的浮点数,金融计算的时候，一般用</li></ul><blockquote><p>字符串</p></blockquote><ul><li>char 字符串固定大小 0-255</li><li><strong>varchar 可变字符串 0-65535</strong>（常用）</li><li>tinytext 微型文本 2^8-1</li><li><strong>text 文本串 2^16-1</strong> (保存大文本)</li></ul><blockquote><p>时间日期</p></blockquote><p>java.util.Date</p><ul><li>date YYYY-MM-DD，日期</li><li>time HH:mm:ss 时间格式</li><li><strong>datetime YYYY-MM-DD HH:mm:ss 最常用的时间格式</strong></li><li><strong>timestamp 时间戳 1970.1.1到现在的毫秒数（常用）</strong></li><li>year 年份表示</li></ul><blockquote><p>null</p></blockquote><ul><li>没有值，未知</li><li><strong>注意，不要使用null进行运算</strong>，结果为null</li></ul><h3 id="2-3数据库的字段类型（重点）"><a href="#2-3数据库的字段类型（重点）" class="headerlink" title="2.3数据库的字段类型（重点）"></a>2.3数据库的字段类型（重点）</h3><p>unsigened:</p><ul><li>无符号的整数</li><li>声明该列不能声明负数</li></ul><p>zerofill:</p><ul><li>0填充的</li><li>10的长度 1 – 0000000001 不足位数用0 填充</li></ul><p>自增：</p><ul><li>通常理解为自增，自动在上一条记录的基础上+1</li><li>通常用来设计唯一的主键 index,必须是整数类似</li><li>可以自定义设置主键自增的起始值和步长</li></ul><p>非空 NULL not Null</p><ul><li>假设设置为 not null，如何不给他赋值，就会报错</li><li>NULL 如果不填写，默认为NULL</li></ul><p>默认：</p><ul><li>设置默认的值！</li></ul><h3 id="2-4-创建数据库表"><a href="#2-4-创建数据库表" class="headerlink" title="2.4 创建数据库表"></a>2.4 创建数据库表</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">--目标:创建一个schoo1数据库--创建学生表(列,字段)使用SQL 创建--学号int 登录密码varchar(20)姓名,性别varchar(2),出生日期(datatime)，家庭住址，emai1--注意点，使用英文()，表的名称和字段尽量使用括起来-- AUTO_ INCREMENT 自增--字符串使用单引号括起来!--所有的语句后面加，(英文的)，最后一个不用加-- PRIMARY KEY 主键，一般- 一个表只有一个唯一 -的主键!CREATE DATABASE schoolCREATE TABLE IF NOT EXISTS &#96;student&#96; (&#96;id&#96; INT(4) NOT NULL AUTO_INCREMENT COMMENT &#39;学号&#39;,&#96;name&#96; VARCHAR(30) NOT NULL DEFAULT &#39;匿名&#39; COMMENT &#39;姓名&#39;,&#96;pwd&#96; VARCHAR(20) NOT NULL DEFAULT &#39;123456&#39; COMMENT &#39;密码&#39;,&#96;sex&#96; VARCHAR(2) NOT NULL DEFAULT &#39;男&#39; COMMENT &#39;性别&#39;,&#96;birthday&#96; DATETIME DEFAULT NULL COMMENT &#39;出生日期&#39;,&#96;address&#96; VARCHAR(100) DEFAULT NULL COMMENT &#39;家庭住址&#39;,&#96;email&#96; VARCHAR(50) DEFAULT NULL COMMENT &#39;邮箱&#39;,PRIMARY KEY (&#96;id&#96;))ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>格式</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE TABLE [IF NOT EXISTS] &#96;表名&#96;（&#96;字段名&#96; 列类型[属性][索引][注释],&#96;字段名&#96; 列类型[属性][索引][注释],...&#96;字段名&#96; 列类型[属性][索引][注释]）[表类型][表的字符集设置][注释]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用命令</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SHOW CREATE DATABASE school -- 查看创建数据库的语句SHOW CREATE TABLE student -- 查看student数据表的定义语句DESC student -- 显示表的结构<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-5数据表的类型"><a href="#2-5数据表的类型" class="headerlink" title="2.5数据表的类型"></a>2.5数据表的类型</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 关于数据库引擎&#x2F;*INNODB 默认使用MYISAM 早些年使用*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th></th><th>MYISAM</th><th>INNODB</th></tr></thead><tbody><tr><td>事务支持</td><td>不支持</td><td>支持</td></tr><tr><td>数据行锁定</td><td>不支持</td><td>支持</td></tr><tr><td>外键约束</td><td>不支持</td><td>支持</td></tr><tr><td>全文索引</td><td>支持</td><td>不支持</td></tr><tr><td>表空间的大小</td><td>较小</td><td>较大，约为MYISAM的两倍</td></tr></tbody></table><p>常规使用操作：</p><ul><li>MYISAM 节约空间，速度较快，</li><li>INNODB 安全性高，事务处理，多表多用户操作</li></ul><blockquote><p>在物理空间存在的位置</p></blockquote><p>所有的数据库文件都存在data目录下，一个文件夹就对应一个数据库</p><p>本质还是文件的存储</p><p>MySQL 引擎在物理文件上的区别</p><ul><li>innoDB 在数据库表中，只有一个*.frm文件，以及上级目录下的ibdata1文件</li><li>MYISAM 对应的文件<ul><li>*.frm - 表结构的定义文件</li><li>*. MYD -数据文件</li><li>*.MYI 索引文件</li></ul></li></ul><blockquote><p>设置数据库字符集编码</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CHARTSET&#x3D;UTF8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不设置的话，会是mysql默认的字符集编码-（不支持中文）</p><p>可以在my.ini中配置默认的编码</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">character-set-server&#x3D;utf8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-6修改删除表"><a href="#2-6修改删除表" class="headerlink" title="2.6修改删除表"></a>2.6修改删除表</h3><blockquote><p>修改alter</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 修改表名 ALTER TABLE 旧表面 AS 新表名ALTER TABLE student RENAME  AS student1-- 增加表的字段 ALTER TABLE 表名 ADD 字段名 列属性ALTER TABLE student1 ADD age INT(11)-- 修改表的字段（重命名，修改约束）ALTER TABLE student1 MODIFY age VARCHAR(11)  -- 修改约束ALTER TABLE student1 CHANGE age age1 INT(1)  -- 字段重命名-- 删除表的字段ALTER TABLE student1 DROP age1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>删除</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 删除表DROP TABLE IF EXISTS student1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>所有的创建和删除操作尽量加上判断，以免报错</strong></p><p>注意点：</p><ul><li>`` 字段名，使用这个包裹</li><li>注释 – /**/</li><li>sql 关键字大小写不敏感，建议写小写</li><li>所有的符号全部用英文</li></ul><h1 id="3、MySQL数据管理"><a href="#3、MySQL数据管理" class="headerlink" title="3、MySQL数据管理"></a>3、MySQL数据管理</h1><h3 id="3-1外键（了解）"><a href="#3-1外键（了解）" class="headerlink" title="3.1外键（了解）"></a>3.1外键（了解）</h3><blockquote><p>方式一：在创建表的时候，增加约束（麻烦，比较复杂）</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE TABLE &#96;grade&#96;(&#96;gradeid&#96; INT(10) NOT NULL AUTO_INCREMENT COMMENT &#39;年级id&#39;,&#96;gradename&#96; VARCHAR(50) NOT NULL COMMENT &#39;年级名称&#39;,PRIMARY KEY (&#96;gradeid&#96;))ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8-- 学生表的 gradeid 字段 要去引用年级表的gradeid-- 定义外键KEY-- 给这个外键添加约束（执行引用） references 引用CREATE TABLE IF NOT EXISTS &#96;student&#96; (&#96;id&#96; INT(4) NOT NULL AUTO_INCREMENT COMMENT &#39;学号&#39;,&#96;name&#96; VARCHAR(30) NOT NULL DEFAULT &#39;匿名&#39; COMMENT &#39;姓名&#39;,&#96;pwd&#96; VARCHAR(20) NOT NULL DEFAULT &#39;123456&#39; COMMENT &#39;密码&#39;,&#96;sex&#96; VARCHAR(2) NOT NULL DEFAULT &#39;男&#39; COMMENT &#39;性别&#39;,&#96;birthday&#96; DATETIME DEFAULT NULL COMMENT &#39;出生日期&#39;,&#96;gradeid&#96; INT(10) NOT NULL COMMENT &#39;学生年级&#39;,&#96;address&#96; VARCHAR(100) DEFAULT NULL COMMENT &#39;家庭住址&#39;,&#96;email&#96; VARCHAR(50) DEFAULT NULL COMMENT &#39;邮箱&#39;,PRIMARY KEY (&#96;id&#96;),KEY &#96;FK_gardeid&#96; (&#96;gradeid&#96;),-- 学生表的 gradeid 字段 要去引用年级表的gradeid   CONSTRAINT &#96;FK_gardeid&#96; FOREIGN KEY (&#96;gradeid&#96;) REFERENCES &#96;grade&#96; (gradeid))ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>删除有外键关系的表的时候，必须先删除引用的表（从表），再删除被引用的表（主表）</p><blockquote><p>方式二： 创建表成功后添加外键</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE TABLE &#96;grade&#96;(&#96;gradeid&#96; INT(10) NOT NULL AUTO_INCREMENT COMMENT &#39;年级id&#39;,&#96;gradename&#96; VARCHAR(50) NOT NULL COMMENT &#39;年级名称&#39;,PRIMARY KEY (&#96;gradeid&#96;))ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8-- 学生表的 gradeid 字段 要去引用年级表的gradeid-- 定义外键KEY-- 给这个外键添加约束（执行引用） references 引用CREATE TABLE IF NOT EXISTS &#96;student&#96; (&#96;id&#96; INT(4) NOT NULL AUTO_INCREMENT COMMENT &#39;学号&#39;,&#96;name&#96; VARCHAR(30) NOT NULL DEFAULT &#39;匿名&#39; COMMENT &#39;姓名&#39;,&#96;pwd&#96; VARCHAR(20) NOT NULL DEFAULT &#39;123456&#39; COMMENT &#39;密码&#39;,&#96;sex&#96; VARCHAR(2) NOT NULL DEFAULT &#39;男&#39; COMMENT &#39;性别&#39;,&#96;birthday&#96; DATETIME DEFAULT NULL COMMENT &#39;出生日期&#39;,&#96;gradeid&#96; INT(10) NOT NULL COMMENT &#39;学生年级&#39;,&#96;address&#96; VARCHAR(100) DEFAULT NULL COMMENT &#39;家庭住址&#39;,&#96;email&#96; VARCHAR(50) DEFAULT NULL COMMENT &#39;邮箱&#39;,PRIMARY KEY (&#96;id&#96;))ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8-- 创建表的时候没有外键关系ALTER TABLE &#96;student&#96;ADD CONSTRAINT &#96;FK_gradeid&#96; FOREIGN KEY (&#96;gradeid&#96;) REFERENCES &#96;grade&#96;(&#96;gradeid&#96;);-- ALTER TABLE&#96;表&#96;  ADD CONSTRAINT 约束名 FOREIGN KEY（作为外键的列） 引用到哪个表的哪个字段<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上的操作都是物理外键，数据库级别外键，不建议使用。（避免数据库过多造成困扰）</p><p><strong>最佳实践</strong></p><ul><li>数据库就是单纯的表，只用来存数据，只有行（数据）和列（字段）</li><li>我们想使用多张表的数据，想使用外键（程序去实现）</li></ul><h3 id="3-2-DML语言（全记住）"><a href="#3-2-DML语言（全记住）" class="headerlink" title="3.2 DML语言（全记住）"></a>3.2 DML语言（全记住）</h3><p>数据库意义：数据存储，数据管理</p><p>DML语言：数据操作语言</p><ul><li>Insert ：添加</li><li>update ：修改</li><li>delete：删除</li></ul><h3 id="3-3添加"><a href="#3-3添加" class="headerlink" title="3.3添加"></a>3.3添加</h3><blockquote><p>insert</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 插入语句（添加）-- insert into 表名（[字段一], [字段二]）values(&#39;值1&#39;),(&#39;值2&#39;)INSERT INTO &#96;grade&#96; (&#96;gradename&#96;) VALUES(&#39;大四&#39;)-- 由于主键自增我们可以省略（如何不写表的字段，他会一一匹配）INSERT INTO &#96;grade&#96; VALUES(&#39;大三&#39;)INSERT INTO &#96;grade&#96; (&#96;gradeid&#96;,&#96;gradename&#96;) VALUES (&#39;大三&#39;,&#39;null&#39;)-- 一般写插入语句，我们一定要数据和字段一一对应。-- 插入多个字段INSERT INTO &#96;grade&#96;(&#96;gradename&#96;) VALUES (&#39;大二&#39;),(&#39;大一&#39;);INSERT INTO &#96;student&#96;(&#96;name&#96;) VALUES (&#39;张三&#39;)INSERT INTO &#96;student&#96;(&#96;name&#96;,&#96;pwd&#96;,&#96;sex&#96;) VALUES (&#39;张三&#39;,&#39;aaaaa&#39;,&#39;男&#39;)INSERT INTO &#96;student&#96;(&#96;name&#96;,&#96;pwd&#96;,&#96;sex&#96;) VALUES (&#39;李四&#39;,&#39;aaaaa&#39;,&#39;男&#39;),(&#39;王五&#39;,&#39;23232&#39;,&#39;女&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>语法：– insert into 表名（[字段一], [字段二]）values(‘值1’),(‘值2’)</p><p>注意事项：</p><p>1.字段和字段之间用英文逗号分开</p><p>2.字段可以省略，但是后面的值必须一一对应</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">INSERT INTO &#96;student2&#96;(&#96;name&#96;,&#96;pwd&#96;,&#96;sex&#96;) VALUES (&#39;张三&#39;,&#39;aaaaa&#39;,&#39;男&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.可以同时插入多条数据，VALUES后面的值需要使用，隔开即可</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">INSERT INTO &#96;student&#96;(&#96;name&#96;,&#96;pwd&#96;,&#96;sex&#96;) VALUES (&#39;李四&#39;,&#39;aaaaa&#39;,&#39;男&#39;),(&#39;王五&#39;,&#39;23232&#39;,&#39;女&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-4-修改"><a href="#3-4-修改" class="headerlink" title="3.4 修改"></a>3.4 修改</h3><blockquote><p>update 修改谁（条件） set 原来的值=新值</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 修改学员名字UPDATE &#96;student&#96; SET &#96;name&#96;&#x3D;&#39;任宜超&#39; WHERE id &#x3D;1;-- 不指定条件的情况下，会改动表内这一个选项对应的所有值UPDATE &#96;student&#96; SET &#96;name&#96;&#x3D;&#39;233&#39;--修改多个属性用逗号隔开UPDATE &#96;student2&#96; SET &#96;name&#96;&#x3D;&#39;任宜超&#39;,&#96;email&#96;&#x3D;&#39;727958639@qq.com&#39; WHERE id &#x3D;1;-- 语法；-- UPDATE 表名 set column_name &#x3D; value，column_name &#x3D; value，.... where 条件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>条件：where 子句 运算符 id 等于 某个值，大于某个值，在某个区间内修改</p><p>操作符返回布尔值</p><table><thead><tr><th>操作符</th><th>含义</th><th>范围</th><th>结果</th></tr></thead><tbody><tr><td>=</td><td>等于</td><td>5=6</td><td>false</td></tr><tr><td>!= 或者&lt;&gt;</td><td>不等于</td><td>5！=6</td><td>true</td></tr><tr><td>&gt;</td><td>大于</td><td></td><td></td></tr><tr><td>&lt;</td><td>小于</td><td></td><td></td></tr><tr><td>&gt;=</td><td>大于等于</td><td></td><td></td></tr><tr><td>&lt;=</td><td>小于等于</td><td></td><td></td></tr><tr><td>between … and …</td><td>在某个范围内，闭合区间</td><td></td><td></td></tr><tr><td>and</td><td>&amp;&amp;</td><td>5&gt;1and1&gt;2</td><td>false</td></tr><tr><td>or</td><td>||</td><td>5&gt;1or1&gt;2</td><td>true</td></tr></tbody></table><p>语法：<code>UPDATE 表名 set column_name = value，column_name = value，.... where 条件</code></p><p>注意：</p><ul><li><p>column_name 是数据库的列，带上``</p></li><li><p>条件，是筛选的条件，如果没有指定，则会修改所有的列</p></li><li><p>value 是一个具体的值，也可以是一个变量</p></li><li><p>多个设置的属性之间，使用英文逗号隔开</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">UPDATE &#96;student&#96; SET &#96;birthday&#96;&#x3D;CURRENT_TIME where &#96;name&#96;&#x3D;&#39;李四&#39; AND SEX &#x3D; &#39;男&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="3-5-删除"><a href="#3-5-删除" class="headerlink" title="3.5 删除"></a>3.5 删除</h3><blockquote><p>delete 命令</p></blockquote><p>语法 <code>delete from 表名 [where 条件]</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 删除数据 (避免这样写,会全部删除)DELETE FROM &#96;student&#96; -- 删除指定数据DELETE FROM &#96;student&#96; where id&#x3D; 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>TRUNCATE 命令</p></blockquote><p>作用：完全清空一个数据库，表的结构和索引不会变</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">--清空 student 表truncate &#96;student&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>delete 和 TRUNCATE 区别</p></blockquote><ul><li>相同点： 都能删除数据，都不会删除表结构</li><li>不同：<ul><li>TRUNCATE 重新设置自增列 计数器会归零</li><li>TRUNCATE 不会影响事务</li></ul></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 测试delete 和 truncate 区别CREATE TABLE &#96;test&#96;(&#96;id&#96; INT(4) NOT NULL AUTO_INCREMENT,&#96;coll&#96; VARCHAR(20) NOT NULL,PRIMARY KEY (&#96;id&#96;))ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8INSERT INTO &#96;test&#96;(&#96;coll&#96;) VALUES(&#39;1&#39;),(&#39;2&#39;),(&#39;3&#39;)DELETE FROM &#96;test&#96; -- 不会影响自增,自增会从原来基础上继续自增TRUNCATE TABLE &#96;test&#96; -- 自增会归零<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>了解即可：<code>delete删除的问题</code> 重启数据库，现象</p><ul><li>innoDB 自增列会从1开始（存在内存当中，断电即失）</li><li>MyISAM 继续从上一个自增量开始（存在文件中，不会丢失）</li></ul><h1 id="4、DQL查询数据（最重点）"><a href="#4、DQL查询数据（最重点）" class="headerlink" title="4、DQL查询数据（最重点）"></a>4、DQL查询数据（最重点）</h1><h3 id="4-1DQL"><a href="#4-1DQL" class="headerlink" title="4.1DQL"></a>4.1DQL</h3><p>(Data Query Language) :数据查询语言</p><ul><li>所有的查询操作都用它 Select</li><li>简单的查询，复杂的查询它都能做</li><li><strong>数据库中最核心的语言</strong></li><li>使用频率最高的语言</li></ul><h3 id="4-2指定查询字段"><a href="#4-2指定查询字段" class="headerlink" title="4.2指定查询字段"></a>4.2指定查询字段</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 查询  SELECT 字段 FROM 表--查询  student表  中的所有信息SELECT * FROM student-- 查询指定字段  such asSELECT &#96;StudentNo&#96;,&#96;StudentName&#96; FROM student-- 别名，给结果起一个名字 AS语句   可以给字段起别名 也可以给表起别名SELECT &#96;StudentNo&#96; AS 学号,&#96;StudentName&#96;AS 学生姓名 FROM student AS S-- 函数 Concat(a,b)SELECT CONCAT(&#39;姓名：&#39;,StudentName) AS 新名字 FROM student<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/mysql/1625463786635.png"></p><p>语法： <code>SELECT 字段 ... FROM 表</code></p><blockquote><p>有时候，列名字不是那么见名知意。我们起别名 AS 字段名 AS 别名 表名 AS 别名</p></blockquote><blockquote><p>去重 distinct</p></blockquote><p>作用：去除select语句查询出来的结果中重复的语句，重复的语句只显示一条</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 查询一下有哪些同学参加了考试，成绩SELECT * FROM result -- 查询全部的考试成绩-- 查询有哪些同学参加了考试SELECT &#96;studentNo&#96; FROM result -- 发现重复数据，去重SELECT DISTINCT &#96;studentNo&#96; FROM result <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>数据库的列（表达式）</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SELECT VERSION()  --查询系统版本（函数）SELECT 100*3-1 AS 计算结果 -- 用来计算（表达式）SELECT @@auto_increment_increment --查询自增的步长（变量）-- 学员考试成绩+1 分 查看SELECT &#96;StudentNo&#96;,&#96;StudentResult&#96;+1 AS &#39;提分后&#39; FROM result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据库中的表达式： 文本值，列，Null , 函数，计算表达式，系统变量…</p><p>select <code>表达式</code> from 表</p><h3 id="4-3where-条件子句"><a href="#4-3where-条件子句" class="headerlink" title="4.3where 条件子句"></a>4.3where 条件子句</h3><p>作用：检索数据中符合条件的值</p><blockquote><p>逻辑运算符</p></blockquote><table><thead><tr><th>运算符</th><th>语法</th><th>结果</th></tr></thead><tbody><tr><td>and &amp;&amp;</td><td>a and b             a&amp;&amp;b</td><td>逻辑与</td></tr><tr><td>or ||</td><td>a or b                  a||b</td><td>逻辑或</td></tr><tr><td>Not !=</td><td>not a                      !a</td><td>逻辑非</td></tr></tbody></table><p><strong>尽量使用英文</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 查询考试成绩在95分到100分之间SELECT &#96;StudentNo&#96;,&#96;StudentResult&#96; FROM resultWHERE StudentResult &gt;&#x3D;95 AND StudentResult&lt;&#x3D;100-- 模糊查询（区间）SELECT &#96;StduentNo&#96;,&#96;StudentResult&#96; FROM resultWHERE StudentResult BETWEEN 95 AND 100-- 除了1000号学生之外的同学成绩SELECT &#96;StduentNo&#96;,&#96;StudentResult&#96; FROM resultWHERE NOT StudentNo &#x3D; 1000SELECT &#96;StduentNo&#96;,&#96;StudentResult&#96; FROM resultWHERE StudentNo ！&#x3D; 1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>模糊查询：比较运算符</p></blockquote><table><thead><tr><th>运算符</th><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>IS NULL</td><td>a is null</td><td>如果操作符为null 结果为真</td></tr><tr><td>IS NOT NULL</td><td>a is not null</td><td>如果操作符为not null 结果为真</td></tr><tr><td>BETWEEN</td><td>a between b and c</td><td>若a在b 和c之间则为真</td></tr><tr><td><strong>LIKE</strong></td><td>a like b</td><td>SQL匹配，如果a 匹配到b 则为真</td></tr><tr><td><strong>IN</strong></td><td>a in (a1,a2,a3…)</td><td>假设a 在 a1,a2,a3其中的某一个中，为真</td></tr></tbody></table><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">--  查询姓刘的同学-- like结合 %（代表0到任意字符）  _(一个字符)--查询姓刘的同学SELECT &#96;StudentNo&#96;,&#96;StudentName&#96; FROM &#96;student&#96;WHERE StudentName LIKE &#39;刘%&#39;;-- 查询姓刘的同学，名字后只有一个字SELECT &#96;StudentNo&#96;,&#96;StudentName&#96; FROM &#96;student&#96;WHERE StudentName LIKE &#39;刘_&#39;;-- 查询姓刘的同学，名字后只有两个字SELECT &#96;StudentNo&#96;,&#96;StudentName&#96; FROM &#96;student&#96;WHERE StudentName LIKE &#39;刘__&#39;;-- 查询名字中间有嘉字的同学 %嘉%SELECT &#96;StudentNo&#96;,&#96;StudentName&#96; FROM &#96;student&#96;WHERE StudentName LIKE &#39;%嘉%&#39;;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;IN(具体的一个或者多个值)&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;-- 查询1001 1002 1003 学员信息SELECT &#96;StudentNo&#96;,&#96;StudentName&#96; FROM &#96;student&#96;WHERE StudentNo &#x3D; 1001SELECT &#96;StudentNo&#96;,&#96;StudentName&#96; FROM &#96;student&#96;WHERE StudentNo &#x3D; 1002SELECT &#96;StudentNo&#96;,&#96;StudentName&#96; FROM &#96;student&#96;WHERE StudentNo &#x3D; 1003SELECT &#96;StudentNo&#96;,&#96;StudentName&#96; FROM &#96;student&#96;WHERE StudentNo IN (1001,1002,1003);-- 查询在北京的学生SELECT &#96;StudentNo&#96;,&#96;StudentName&#96; FROM &#96;student&#96;WHERE &#96;Address&#96; IN(&#39;安徽&#39;,&#39;河南洛阳&#39;);&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;NULL NOT NULL&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;-- 查询地址为空的学生 null &#39;&#39;SELECT &#96;StudentNo&#96;,&#96;StudentName&#96; FROM &#96;student&#96;WHERE address&#x3D;&#39;&#39;OR address IS NULL-- 查询有出生日期的同学  不为空SELECT &#96;StudentNo&#96;,&#96;StudentName&#96; FROM &#96;student&#96;WHERE &#96;BornDate&#96; IS NOT NULL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-联表查询"><a href="#4-4-联表查询" class="headerlink" title="4.4 联表查询"></a>4.4 联表查询</h3><blockquote><p>JOIN 对比</p></blockquote><p><img src="/2021/07/07/mysql/1625463648631.png"></p><p><img src="/2021/07/07/mysql/1625463664779.png"></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;联表查询 join &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;-- 查询参加考试的同学 （学号，姓名，考试编号，分数）SELECT * FROM student SELECT * FROM result&#x2F;*1. 分析需求，分析查询的字段来自哪些表2.确定使用哪种连接查询？7种确定交叉点（这两个表中哪个数据是相同的）判断的条件： 学生表中 studentNo &#x3D; 成绩表中 studentNo *&#x2F;-- JION（表） ON （判断的条件）连接查询-- where 等值查询SELECT studentNo,studentName,SubjectNo,StudentResultFROM student AS sINNER JOIN result AS rWHERE s.studentNo&#x3D;r.studentNo--Right JoinSELECT s.studentNo,studentName,SubjectNo,StudentResultFROM student AS sRIGHT JOIN result AS rON s.studentNo &#x3D; r.studentNo--LEFT JoinSELECT s.studentNo,studentName,SubjectNo,StudentResultFROM student AS sLEFT JOIN result AS rON s.studentNo &#x3D; r.studentNo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>操作</th><th>描述</th></tr></thead><tbody><tr><td>Inner join</td><td>如果表中至少有一个匹配，就返回行</td></tr><tr><td>left join</td><td>即使左表中没有匹配，也会从左表中返回所有的值</td></tr><tr><td>right jion</td><td>即使右表中没有匹配，也会从右表中返回所有的值</td></tr></tbody></table><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 查询缺考的同学SELECT s.studentNo,studentName,SubjectNo,StudentResultFROM student AS sLEFT JOIN result AS rON s.studentNo &#x3D; r.studentNoWHERE StudentResult IS NULL-- 查询了参加考试同学的信息：学号：学生姓名：科目名：分数（AS也可以省略）SELECT s.&#96;studentNo&#96;,&#96;studentName&#96;,&#96;SubjectName&#96;,&#96;studentResult&#96;FROM student sRIGHT JOIN result rON r.studentNo&#x3D;s.studentNoINNER JOIN &#96;subject&#96; subON r.SubjectNo&#x3D;sub.SubjectNo-- 我要查询哪些数据 SELECT ....-- 从哪几个表中查 FROM 表 xxx JOIN 连接的表 ON 交叉条件-- 假设存在一中多张表查询，先查询两章表，然后再慢慢增加--FROM a LEFT JOIN b   左为准--FROM a RIGHT JOIN b右为准<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>自连接</p></blockquote><p>自己的表跟自己的表连接，核心：<strong>一张表拆为两张一样的表</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">--创建数据库CREATE TABLE &#96;school&#96;.&#96;category&#96;( &#96;categoryid&#96; INT(3) NOT NULL COMMENT &#39;id&#39;, &#96;pid&#96; INT(3) NOT NULL COMMENT &#39;父id 没有父则为1&#39;, &#96;categoryname&#96; VARCHAR(10) NOT NULL COMMENT &#39;种类名字&#39;, PRIMARY KEY (&#96;categoryid&#96;) ) ENGINE&#x3D;INNODB CHARSET&#x3D;utf8 COLLATE&#x3D;utf8_general_ci; INSERT INTO &#96;school&#96;.&#96;category&#96; (&#96;categoryid&#96;, &#96;pid&#96;, &#96;categoryname&#96;) VALUES (&#39;2&#39;, &#39;1&#39;, &#39;信息技术&#39;);INSERT INTO &#96;school&#96;.&#96;CATEGOrY&#96; (&#96;categoryid&#96;, &#96;pid&#96;, &#96;categoryname&#96;) VALUES (&#39;3&#39;, &#39;1&#39;, &#39;软件开发&#39;);INSERT INTO &#96;school&#96;.&#96;category&#96; (&#96;categoryid&#96;, &#96;PId&#96;, &#96;categoryname&#96;) VALUES (&#39;5&#39;, &#39;1&#39;, &#39;美术设计&#39;);INSERT INTO &#96;School&#96;.&#96;category&#96; (&#96;categoryid&#96;, &#96;pid&#96;, &#96;categorynamE&#96;) VALUES (&#39;4&#39;, &#39;3&#39;, &#39;数据库&#39;); INSERT INTO &#96;school&#96;.&#96;category&#96; (&#96;CATEgoryid&#96;, &#96;pid&#96;, &#96;categoryname&#96;) VALUES (&#39;8&#39;, &#39;2&#39;, &#39;办公信息&#39;);INSERT INTO &#96;school&#96;.&#96;category&#96; (&#96;categoryid&#96;, &#96;pid&#96;, &#96;CAtegoryname&#96;) VALUES (&#39;6&#39;, &#39;3&#39;, &#39;web开发&#39;); INSERT INTO &#96;SCHool&#96;.&#96;category&#96; (&#96;categoryid&#96;, &#96;pid&#96;, &#96;categoryname&#96;) VALUES (&#39;7&#39;, &#39;5&#39;, &#39;ps技术&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>父类</p><table><thead><tr><th>categoryid</th><th>categoryName</th></tr></thead><tbody><tr><td>2</td><td>信息技术</td></tr><tr><td>3</td><td>软件开发</td></tr><tr><td>5</td><td>美术设计</td></tr><tr><td></td><td></td></tr></tbody></table><p>子类</p><table><thead><tr><th>pid</th><th>categoryid</th><th>categoryName</th></tr></thead><tbody><tr><td>3</td><td>4</td><td>数据库</td></tr><tr><td>2</td><td>8</td><td>办公信息</td></tr><tr><td>3</td><td>6</td><td>web开发</td></tr><tr><td>5</td><td>7</td><td>ps技术</td></tr></tbody></table><p>操作：查询父类对应子类关系</p><table><thead><tr><th>父类</th><th>子类</th></tr></thead><tbody><tr><td>信息技术</td><td>办公信息</td></tr><tr><td>软件开发</td><td>数据库</td></tr><tr><td>软件开发</td><td>web开发</td></tr><tr><td>美术设计</td><td>ps技术</td></tr></tbody></table><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 查询父子信息SELECT a.&#96;categoryName&#96; AS &#96;父栏目&#96;,b.&#96;categoryName&#96; AS &#96;子栏目&#96;FROM &#96;category&#96; AS a,&#96;category&#96; AS bWHERE a.&#96;categoryid&#96;&#x3D;b.&#96;pid&#96;-- 查询学员所属的年级（学号，学生的姓名，年级）SELECT studentNo,studentName,gradeNameFROM student sINNER JOIN &#96;grade&#96; gON s.&#96;GradeId&#96;&#x3D;g.&#96;GradeId&#96;-- 查询科目所属年级SELECT &#96;subjectname&#96;,&#96;gradename&#96;FROM &#96;subject&#96; sINNER JOIN &#96;grade&#96; g ON  s.&#96;gradeid&#96; &#x3D; g.&#96;gradeid&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5分页和排序"><a href="#4-5分页和排序" class="headerlink" title="4.5分页和排序"></a>4.5分页和排序</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;分页 limit 和排序order by&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;-- 排序：  升序ASC  降序  DESC--ORDER BY 通过哪个字段排序  排序方式SELECT  xxFROM xxJOIN xxWHERE  xxORDER BY  xxASC   ||  DESC<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>分页</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 为什么要分页-- 缓解数据库压力，给人的体验更好-- 分页，每页显示五条数据-- 语法： limit 当前页，页面的大小-- limit 0,5 1-5-- limit 1,5 1-5-- limit 6,5SELECT s.&#96;StudentNo&#96;,&#96;StudentName&#96;,&#96;SubjectName&#96;,&#96;StudentResult&#96;  --查询表FROM student sINNER JOIN &#96;result&#96; r          --连接表ON s.&#96;StudentNo&#96;&#x3D;r.&#96;StudentNo&#96;INNER JOIN &#96;subject&#96; subON r.&#96;subjectNo&#96;&#x3D;sub.&#96;subjectNo&#96;WHERE subjectName&#x3D;&#39;数据结构-1&#39;ORDER BY StudentResult ASCLIMIT 0,5-- 第一页 limit 0,5-- 第二页 limit 5,5-- 第三页 limit 10,5-- 第N页 limit 5*（n-1）,5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>语法 <code>limit(查询起始下标，pagesize)</code></p><blockquote><p>select 完整语法</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SELECT    [ALL | DISTINCT | DISTINCTROW ]    FROM table_references     --从哪个表里查询    [left|right|inner join table_name]  --联合查询    [WHERE where_definition]    --指定结果满足的条件    [GROUP BY &#123;col_name | expr | position&#125;   --指定结果按照那几个字段分组    [HAVING where_definition]    --过滤分组的记录必须满足的次要条件    [ORDER BY &#123;col_name | expr | position&#125;   --指定查询记录按一个或者多个条件排序      [ASC | DESC] , ...]    [LIMIT &#123;[offset,] row_count | row_count OFFSET offset&#125;]  --指定查询记录从哪条至哪条     --例子--查询 Java第一学年 课程成绩排名前十的学生，并且分数大于80的学生的信息（学号，姓名，课程成绩，分数）     SELECT s.&#96;studentNo&#96;,&#96;studentName&#96;,&#96;SubjectName&#96;,&#96;studentResult&#96;FROM student sINNER JOIN result rON r.studentNo&#x3D;s.studentNoINNER JOIN &#96;subject&#96; subON r.SubjectNo&#x3D;sub.SubjectNoWHERE SubjectName &#x3D; &#39;JAVA第一学年&#39; AND &#96;studentresult&#96;&gt;&#x3D;80ORDER BY &#96;studentresult&#96; DESCLIMIT 0,10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-子查询"><a href="#4-6-子查询" class="headerlink" title="4.6 子查询"></a>4.6 子查询</h3><p>where (这个值是计算出来的)</p><p>本质：<code>在where语句中嵌套一个子查询语句</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;where&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;-- 1.查询 数据库结构-1的所有考试结构（学号，科目编号，成绩） 降序-- 方式一： 连接查询SELECT &#96;StudentNo&#96;,r.&#96;SubjectName&#96;,&#96;StudentResult&#96;FROM &#96;result&#96; rINNER JOIN &#96;subject&#96; subON r.SubjectNo &#x3D; sun.SubjectNoWHERE subjectName &#x3D; &#39;数据库结构-1&#39;ORDER BY StudentResult DESC-- 方式二：使用子查询(由里及外)SELECT &#96;StudentNo&#96;,r.&#96;SubjectName&#96;,&#96;StudentResult&#96;FROM &#96;result&#96;WHERE StudentNo&#x3D;(SELECT SubjectNo FROM  &#96;subject&#96;     WHERE SubjectName &#x3D; &#39;数据库结构-1&#39;)ORDER BY StudentResult DESC-- 分数不少于80分的学生的学号和姓名SELECT DISTINCT s.&#96;StudentNo&#96;,&#96;StudentName&#96;FROM student sINNER JOIN result rON r.StudentNo &#x3D; s.StudentNoWHERE StudentResult&gt;&#x3D;80-- 在这个基础上 增加一个科目 ，高等数学-2SELECT DISTINCT s.&#96;StudentNo&#96;,&#96;StudentName&#96;FROM student sINNER JOIN result rON r.StudentNo &#x3D; s.StudentNoWHERE StudentResult&gt;&#x3D;80 AND &#96;SubjectNo&#96;&#x3D;(    SELECT Subject FROM &#96;subject&#96;    WHERE SubjectName&#x3D;&#39;高等数学-2&#39;)-- 查询课程为 高等数学-2 且分数不小于80分的同学的学号和姓名SELECT s.&#96;StudentNo&#96;,&#96;StudentName&#96;FROM student sINNER JOIN result rON s.StudentNo &#x3D; r.StudentNoINNER JOIN &#96;subject&#96; subON r.&#96;SubjectName&#96;&#x3D;&#39;高等数学-2&#39;WHERE &#96;SubjectaName&#96;&#x3D;&#39;高等数学-2&#39; AND StudentResult &gt;&#x3D;80-- 再改造 (由里即外)SELECT &#96;StudentNo&#96;,&#96;StudentName&#96; FROM studentWHERE StudentNo IN(SELECT StudentNo result WHERE StudentResult &gt;80 AND SubjectNo &#x3D;(SELECT SubjectNo FROM &#96;subject&#96; WHERE &#96;SubjectaName&#96;&#x3D;&#39;高等数学-2&#39;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-7-分组"><a href="#4-7-分组" class="headerlink" title="4.7 分组"></a>4.7 分组</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 查询不同课程的平均分，最高分，最低分，平均分大于80-- 核心：（根据不同的课程分组）SELECT &#96;SubjectName&#96;,AVG(StudentResult),MAX(StudentResult)FROM result rINNER JOIN &#96;Subject&#96; subON r.SubjectNo&#x3D;sub.SubjectNoGROUP BY r.SubjectNo -- 通过什么字段来分组HAVING AVG(StudentResult)&gt;80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="5、MySQL函数"><a href="#5、MySQL函数" class="headerlink" title="5、MySQL函数"></a>5、MySQL函数</h1><h3 id="5-1-常用函数"><a href="#5-1-常用函数" class="headerlink" title="5.1 常用函数"></a>5.1 常用函数</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 数学运算SELECT ABS(-8) -- 绝对值SELECT CEILING(9.4) -- 向上取整SELECT FLOOR(9.4)  -- 向下取整SELECT RAND() -- 返回0-1随机数SELECT SIGN(-10) -- 判断一个数的符号 0-0 负数返回-1 正数返回1-- 字符串函数SELECT CHAR_LENGTH(&#39;2323232&#39;) -- 返回字符串长度SELECT CONCAT(&#39;我&#39;,&#39;233&#39;) -- 拼接字符串SELECT INSERT(&#39;java&#39;,1,2,&#39;cccc&#39;) -- 从某个位置开始替换某个长度SELECT UPPER(&#39;abc&#39;)           --小写转大写SELECT LOWER(&#39;ABC&#39;)            --大写转小写SELECT INSTR(&#39;renyichaoniuubi&#39;,&#39;r&#39;)  --返回字符串第一次出现的索引SELECT REPLACE(&#39;坚持就能成功&#39;,&#39;坚持&#39;,&#39;努力&#39;)  --替换指定的字符串SELECT SUBSTR(&#39;坚持就能成功&#39;,4,2)  --从指定位置截取指定长度SELECT REVERSE (&#39;坚持就能成功&#39;)  --反转字符串-- 查询姓 周 的同学 ，改成邹SELECT REPLACE(studentname,&#39;周&#39;,&#39;邹&#39;) FROM studentWHERE studentname LIKE &#39;周%&#39;-- 时间跟日期函数（记住）SELECT CURRENT_DATE() -- 获取当前日期SELECT CURDATE() -- 获取当前日期SELECT NOW() -- 获取当前日期SELECT LOCATIME()  -- 本地时间SELECT SYSDATE()  -- 系统时间SELECT YEAR(NOW())SELECT MONTH(NOW())SELECT DAY(NOW())SELECT HOUR(NOW())SELECT MINUTE(NOW())SELECT SECOND(NOW())-- 系统SELECT SYSTEM_USER()SELECT USER()SELECT VERSION()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-聚合函数（常用）"><a href="#5-2-聚合函数（常用）" class="headerlink" title="5.2 聚合函数（常用）"></a>5.2 聚合函数（常用）</h3><table><thead><tr><th>函数名称</th><th>描述</th></tr></thead><tbody><tr><td><strong>COUNT()</strong></td><td>计数</td></tr><tr><td>SUM()</td><td>求和</td></tr><tr><td>AVG()</td><td>平均值</td></tr><tr><td>MAX()</td><td>最大值</td></tr><tr><td>MIN()</td><td>最小值</td></tr><tr><td>…</td><td></td></tr></tbody></table><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">SELECT COUNT(studentname) FROM student  --查询有多少人(h) 会忽略所有的nul值SELECT COUNT(*) FROM student            --不会忽略null ，本质是计算行数SELECT COUNT(1) FROM student            --不会忽略null ，本质是计算行数SELECT SUM(&#96;studentresult&#96;) AS 总和 FROM &#96;result&#96;   --求总分SELECT AVG(&#96;studentresult&#96;) AS 平均分 FROM &#96;result&#96;  --求平均分SELECT MAX(&#96;studentresult&#96;) AS 总和 FROM &#96;result&#96;   --最高分SELECT MIN(&#96;studentresult&#96;) AS 平均分 FROM &#96;result&#96;  --最低分<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-数据库级别MD5加密（拓展）"><a href="#5-3-数据库级别MD5加密（拓展）" class="headerlink" title="5.3 数据库级别MD5加密（拓展）"></a>5.3 数据库级别MD5加密（拓展）</h3><p>什么是MD5</p><p>主要增强算法复杂度不可逆性。</p><p>MD5不可逆，具体的MD5是一样的</p><p>MD5破解原理，背后有一个字典，MD5加密后的值，加密前的值</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE TABLE &#96;testmd5&#96;(&#96;id&#96; INT(4) NOT NULL,&#96;name&#96; VARCHAR(20) NOT NULL,&#96;pwd&#96; VARCHAR(50) NOT NULL,PRIMARY KEY (&#96;id&#96;))ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;UTF8-- 明文密码INSERT INTO testmd5 VALUES(1,&#39;张三&#39;,&#39;123456&#39;),(2,&#39;李四&#39;,&#39;123456&#39;),(3,&#39;王五&#39;,&#39;123456&#39;)-- 加密UPDATE testmd5 SET pwd&#x3D;MD5(pwd) WHERE id &#x3D;1UPDATE testmd5 SET pwd&#x3D;MD5(pwd) WHERE id !&#x3D;1  -- 加密全部-- 插入时加密INSERT INTO testmd5 VALUES(4,&#39;小明&#39;,MD5(&#39;123456&#39;))INSERT INTO testmd5 VALUES(5,&#39;红&#39;,MD5(&#39;123456&#39;))-- 如何校验，将用户传递过来的密码，进行MD5加密，然后对比加密后的值SELECT * FROM testmd5 WHERE &#96;name&#96;&#x3D;&#39;红&#39; AND pwd&#x3D;MD5(&#39;123456&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="6、事务"><a href="#6、事务" class="headerlink" title="6、事务"></a>6、事务</h1><h3 id="6-1-什么是事务"><a href="#6-1-什么是事务" class="headerlink" title="6.1 什么是事务"></a>6.1 什么是事务</h3><p><strong>要么都成功，要么都失败</strong></p><hr><ol><li>SQL执行， A给B转账 A 1000–&gt; 200 B200</li><li>SQL 执行， B收到A的钱 A800 — B400</li></ol><hr><p>将一组SQL放在一个批次中执行</p><blockquote><p>事务原则 ： ACID原则 原子性，一致性，隔离性，持久性 （脏读，幻读…）</p></blockquote><p><strong>原子性</strong>（Atomicity）</p><p>要么都成功，要么都失败</p><p><strong>一致性（Consistency）</strong></p><p>事务前后的数据完整性要保持一致</p><p><strong>持久性（Durability）</strong>–事务提交</p><p>事务一旦提交就不可逆转，被持久化到数据库中</p><p><strong>隔离性</strong></p><p>事务产生多并发时，互不干扰</p><blockquote><p>隔离产生的问题</p></blockquote><h3 id="脏读："><a href="#脏读：" class="headerlink" title="脏读："></a>脏读：</h3><p>指一个事务读取了另外一个事务未提交的数据。</p><h3 id="不可重复读："><a href="#不可重复读：" class="headerlink" title="不可重复读："></a>不可重复读：</h3><p>在一个事务内读取表中的某一行数据，多次读取结果不同。（这个不一定是错误，只是某些场合不对）</p><h3 id="虚读-幻读"><a href="#虚读-幻读" class="headerlink" title="虚读(幻读)"></a>虚读(幻读)</h3><p>是指在一个事务内读取到了别的事务插入的数据，导致前后读取不一致。<br>（一般是行影响，多了一行）</p><blockquote><p>执行事务</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- mysql 自动开启事务提交SET autocommit&#x3D;0 -- 关闭SET autocommit&#x3D;1 -- 开启（默认的）-- 手动处理事务SET autocommit &#x3D;0 -- 关闭自动提交-- 事务开启START TRANSACTION -- 标记一个事务的开始，从这个之后的SQP都在同一个事务内INSERT XXINSERT XX-- 提交 ： 持久化(成功)COMMIT -- 回滚：  回到原来的样子（失败）ROLLBACK-- 事务结束SET autocommit &#x3D; 1 -- 开启自动提交-- 了解SAVEPOINT 保存点名称 -- 设置一个事务的保存点ROLLBACK TO SAVEPOINT 保存点名 -- 回滚到保存点RELEASE SAVEPOINT 保存点 -- 删除保存点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>模拟场景</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE DATABASE shop CHARACTER SET utf8 COLLATE utf8_general_ciUSE shopCREATE TABLE &#96;account&#96;(&#96;id&#96; INT(3) NOT NULL AUTO_INCREMENT,&#96;name&#96; VARCHAR(30) NOT NULL,&#96;money&#96; DECIMAL(9,2) NOT NULL,PRIMARY KEY (&#96;id&#96;))ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8INSERT INTO account(&#96;name&#96;,&#96;money&#96;)VALUES(&#39;A&#39;,2000),(&#39;B&#39;,10000)-- 模拟转账：事务SET autocommit &#x3D; 0; -- 关闭自动提交START TRANSACTION -- 开启事务（一组事务）UPDATE account SET money &#x3D; money-500 WHERE &#96;name&#96; &#x3D; &#39;A&#39; -- A 转账给BUPDATE account SET money &#x3D; money+500 WHERE &#96;name&#96; &#x3D; &#39;B&#39; -- B 收到钱COMMIT ; -- 提交事务ROLLBACK ; -- 回滚SET autocommit&#x3D;1 -- 恢复默认值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis</title>
      <link href="/2021/07/07/mybatis/"/>
      <url>/2021/07/07/mybatis/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h2 id="1、Mybatis简介（2020-10-21）"><a href="#1、Mybatis简介（2020-10-21）" class="headerlink" title="1、Mybatis简介（2020-10-21）"></a>1、Mybatis简介（2020-10-21）</h2><h3 id="1-1-什么是Mybatis"><a href="#1-1-什么是Mybatis" class="headerlink" title="1.1 什么是Mybatis"></a>1.1 什么是Mybatis</h3><p>如何获得Mybatis</p><ul><li>maven仓库：</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>中文文档：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></li><li>Github:<a href="https://github.com/mybatis/mybatis-3">https://github.com/mybatis/mybatis-3</a></li></ul><h3 id="1-2-持久化"><a href="#1-2-持久化" class="headerlink" title="1.2 持久化"></a>1.2 持久化</h3><p>数据持久化</p><ul><li>持久化就是将程序的数据在持久状态和瞬时状态转化的过程</li><li>内存：<strong>断电即失</strong></li><li>数据库（Jdbc），io文件持久化</li><li>生活方面例子：冷藏，罐头。</li></ul><p><strong>为什么需要持久化？</strong></p><ul><li>不想丢掉一些对象</li><li>内存太贵</li></ul><h3 id="1-3-持久层"><a href="#1-3-持久层" class="headerlink" title="1.3 持久层"></a>1.3 持久层</h3><p>Dao层，Service层，Controller层…</p><ul><li>完成持久化工作的代码块</li><li>层界限十分明显</li></ul><h3 id="1-4-为什么需要Mybatis？"><a href="#1-4-为什么需要Mybatis？" class="headerlink" title="1.4 为什么需要Mybatis？"></a>1.4 为什么需要Mybatis？</h3><ul><li>帮助程序猿将数据存入到数据库中</li><li>方便</li><li>传统的JDBC代码太复杂，简化–&gt;框架–&gt;自动化</li><li>优点：</li></ul><p><strong>最重要的一点：使用的人多！</strong><br>Spring-SpringMVC-SpringBoot</p><h2 id="2、第一个Mybatis程序"><a href="#2、第一个Mybatis程序" class="headerlink" title="2、第一个Mybatis程序"></a>2、第一个Mybatis程序</h2><p>思路：搭建环境–&gt;导入Mybatis–&gt;编写代码–&gt;测试</p><h3 id="2-1-搭建环境"><a href="#2-1-搭建环境" class="headerlink" title="2.1 搭建环境"></a>2.1 搭建环境</h3><p>搭建数据库<br>新建项目</p><ul><li>新建一个普通maven项目</li><li>删除src目录</li><li>导入maven依赖</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--import dependencies--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--mysql driver--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--mybatis--></span>        <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--junit--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自己在此用了mybatis3.5.2版本在之后导包会失败，所以换成3.5.6版本。</p><h3 id="2-2-创建一个模块"><a href="#2-2-创建一个模块" class="headerlink" title="2.2 创建一个模块"></a>2.2 创建一个模块</h3><ul><li>编写mybatis的核心配置文件</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--configuration core file--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatis?useSSL=false<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useUnicode=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--a Mapper.xml need regist in Mybatis core configuration file--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com/kuang/dao/UserMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此处设useSSL=false。</p><ul><li>编写mybatis工具类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;SqlSessionFactory --&gt;SqlSessionpublic class MybatisUtils &#123;    private static SqlSessionFactory sqlSessionFactory;    static &#123;        try &#123;            &#x2F;&#x2F;使用Mybaties第一步：获取sqlSessionFactory对象            String resource &#x3D; &quot;mybatis-config.xml&quot;;            InputStream inputStream &#x3D; Resources.getResourceAsStream(resource);            sqlSessionFactory &#x3D; new SqlSessionFactoryBuilder().build(inputStream);        &#125; catch (Exception e) &#123;            e.printStackTrace();        &#125;    &#125;    &#x2F;&#x2F;既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。    &#x2F;&#x2F; SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。你可以通过 SqlSession 实例来直接执行已映射的 SQL 语句。    public static SqlSession getSqlSession()&#123;&#x2F;&#x2F;        SqlSession sqlSession &#x3D;  sqlSessionFactory.openSession();&#x2F;&#x2F;        return sqlSession;        return sqlSessionFactory.openSession();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-编写代码"><a href="#2-3-编写代码" class="headerlink" title="2.3 编写代码"></a>2.3 编写代码</h3><ul><li>实体类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;实体类public class User &#123;    private int id;    private String name;    private String pwd;    public User() &#123;    &#125;    public User(int id, String name, String pwd) &#123;        this.id &#x3D; id;        this.name &#x3D; name;        this.pwd &#x3D; pwd;    &#125;    public int getId() &#123;        return id;    &#125;    public void setId(int id) &#123;        this.id &#x3D; id;    &#125;    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name &#x3D; name;    &#125;    public String getPwd() &#123;        return pwd;    &#125;    public void setPwd(String pwd) &#123;        this.pwd &#x3D; pwd;    &#125;    @Override    public String toString() &#123;        return &quot;User&#123;&quot; +                &quot;id&#x3D;&quot; + id +                &quot;, name&#x3D;&#39;&quot; + name + &#39;\&#39;&#39; +                &quot;, pwd&#x3D;&#39;&quot; + pwd + &#39;\&#39;&#39; +                &#39;&#125;&#39;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Dao接口</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface UserDao &#123;    List&lt;User&gt; getUserList();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>接口实现类由原来的UserDaoImpl转变成一个Mapper配置文件。</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.dao.UserDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--sql--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from mybatis.user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-测试"><a href="#2-4-测试" class="headerlink" title="2.4 测试"></a>2.4 测试</h3><p>注意点：</p><ul><li>org.apache.ibatis.binding.BindingException: Type interface com.kuang.dao.UserDao is not known to the MapperRegistry.</li></ul><p><strong>MapperRegistry是什么？</strong></p><p>核心配置文件中注册mappers</p><ul><li>junit测试</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Test    public void test()&#123;        &#x2F;&#x2F;第一步：获得SqlSession对象        SqlSession sqlSession &#x3D; MybatisUtils.getSqlSession();        &#x2F;&#x2F;方式一：getMapper        UserDao userDao &#x3D; sqlSession.getMapper(UserDao.class);        List&lt;User&gt; userList &#x3D; userDao.getUserList();        for (User user : userList) &#123;            System.out.println(user);        &#125;        &#x2F;&#x2F;关闭SqlSession        sqlSession.close();            &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可能遇到的问题：</p><ol><li>配置文件没有注册；</li><li>绑定接口错误；</li><li>方法名不对；</li><li>返回类型不对；</li><li>Maven导出资源问题。</li></ol><h2 id="3、CRUD（2020-10-22）"><a href="#3、CRUD（2020-10-22）" class="headerlink" title="3、CRUD（2020-10-22）"></a>3、CRUD（2020-10-22）</h2><h3 id="3-1-namespace"><a href="#3-1-namespace" class="headerlink" title="3.1 namespace"></a>3.1 namespace</h3><p>namespace中的包名要和Dao/Mapper接口的包名一致！</p><h3 id="3-2-select"><a href="#3-2-select" class="headerlink" title="3.2 select"></a>3.2 select</h3><p>选择，查询语句；</p><ul><li>id:就是对应的namespace中的方法名；</li><li>resultType:Sql语句执行的返回值！</li><li>parameterType:参数类型！</li></ul><p>1.编写接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;根据id查询用户    User getUserById(int id);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.编写对应的mapper中的sql语句</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       select * from mybatis.user where id = #&#123;id&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Test    public void getUserById()&#123;        SqlSession sqlSession &#x3D; MybatisUtils.getSqlSession();        UserMapper mapper &#x3D; sqlSession.getMapper(UserMapper.class);        User user &#x3D; mapper.getUserById(1);        System.out.println(user);        &#x2F;&#x2F;关闭SqlSession        sqlSession.close();    &#125;1234567891011<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-Insert"><a href="#3-3-Insert" class="headerlink" title="3.3 Insert"></a>3.3 Insert</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       insert into mybatis.user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-4-Update"><a href="#3-4-Update" class="headerlink" title="3.4 Update"></a>3.4 Update</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       update mybatis.user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125; where id = #&#123;id&#125;   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-5-Delete"><a href="#3-5-Delete" class="headerlink" title="3.5 Delete"></a>3.5 Delete</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       delete from mybatis.user where id = #&#123;id&#125;   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意点：</p><ul><li>增删改需要提交事务！</li></ul><h3 id="3-6-分析错误"><a href="#3-6-分析错误" class="headerlink" title="3.6 分析错误"></a>3.6 分析错误</h3><ol><li>xml文件中注释不能出现中文报错，查看自己的是UTF-8还是GBK编码，改成为相应的就行。</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token prolog">&lt;?xml version="1.0" encoding="GBK" ?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>即可成功测试。</p><ol><li>标签不要匹配错！</li><li>resource绑定mapper，需要使用路径！</li><li>程序配置文件必须符合规范！</li><li>NullPointerException，没有注册到资源！</li><li>maven资源没有导出问题！</li></ol><h3 id="3-7-万能Map"><a href="#3-7-万能Map" class="headerlink" title="3.7 万能Map"></a>3.7 万能Map</h3><p>假设，我们的实体类，或者数据库中的表，字段或者参数过多，我们应当考虑使用Map！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;万能的Map    int addUser2(Map&lt;String,Object&gt; map);12&lt;!--对象中的属性，可以直接取出来  传递map的key--&gt;    &lt;insert id&#x3D;&quot;addUser2&quot; parameterType&#x3D;&quot;map&quot;&gt;        insert into mybatis.user (id,pwd) values (#&#123;userid&#125;,#&#123;password&#125;)    &lt;&#x2F;insert&gt;@Test     public void addUser2()&#123;         SqlSession sqlSession &#x3D; MybatisUtils.getSqlSession();         UserMapper mapper &#x3D; sqlSession.getMapper(UserMapper.class);         Map&lt;String,Object&gt; map &#x3D; new HashMap&lt;String, Object&gt;();         map.put(&quot;userid&quot;,4);         map.put(&quot;password&quot;,&quot;123321&quot;);         mapper.addUser2(map);         sqlSession.commit();         sqlSession.close();     &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Map传递参数，直接在sql中取出key即可！【parameterType=“map”】<br>对象传递参数，直接在sql中取对象的属性即可！【parameterType=“Object”】<br>只有一个基本类型参数的情况下，可以直接在sql中取到！<br>多个参数用Map，<strong>或者注解！</strong></p><h3 id="3-8-思考题"><a href="#3-8-思考题" class="headerlink" title="3.8 思考题"></a>3.8 思考题</h3><p>模糊查询怎么写？</p><ol><li>java代码执行的时候，传递通配符% %</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">List&lt;User&gt; userList &#x3D; mapper.getUserLike(&quot;%李%&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>在sql拼接中使用通配符！</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">select * from mybatis.user where name like "%"#&#123;value&#125;"%"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4、配置解析（2020-10-23）"><a href="#4、配置解析（2020-10-23）" class="headerlink" title="4、配置解析（2020-10-23）"></a>4、配置解析（2020-10-23）</h2><h3 id="4-1-核心配置文件"><a href="#4-1-核心配置文件" class="headerlink" title="4.1 核心配置文件"></a>4.1 核心配置文件</h3><ul><li>mybatis-config.xml</li><li>MyBatis的配置文件包含了会深深影响MyBatis行为的设置和属性信息。</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">configuration（配置）properties（属性）settings（设置）typeAliases（类型别名）typeHandlers（类型处理器）objectFactory（对象工厂）plugins（插件）environments（环境配置）environment（环境变量）transactionManager（事务管理器）dataSource（数据源）databaseIdProvider（数据库厂商标识）mappers（映射器）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-环境配置（environments）"><a href="#4-2-环境配置（environments）" class="headerlink" title="4.2 环境配置（environments）"></a>4.2 环境配置（environments）</h3><p>Mybatis可以配置成适应多种环境<br><strong>不过要记住：尽管可以配置多个环境，但每个SqlSessionFactory实例只能选择一种环境。</strong><br>学会使用配置多套运行环境！<br>Mybatis默认的事务管理器就是JDBC,连接池：POOLED</p><h3 id="4-3-属性（properties）"><a href="#4-3-属性（properties）" class="headerlink" title="4.3 属性（properties）"></a>4.3 属性（properties）</h3><p>我们可以通过properties属性来实现引用配置文件<br>这些属性都是可外部配置且可动态替换的，既可以在典型的Java属性文件中配置，亦可通过properties元素的子元素来传递。【db.properties】<br>编写一个配置文件<br>db.properties</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">driver&#x3D;com.mysql.jdbc.Driverurl&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?useSSL&#x3D;false&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;UTF-8username&#x3D;rootpassword&#x3D;123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在核心配置文件中映入</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--引入外部配置文件--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123123<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以直接引入外部文件</li><li>可以在其中增加一些属性配置</li><li>如果两个文件有同一个字段，优先使用外部配置文件的！</li></ul><h3 id="4-4-类型别名（typeAliases）"><a href="#4-4-类型别名（typeAliases）" class="headerlink" title="4.4 类型别名（typeAliases）"></a>4.4 类型别名（typeAliases）</h3><ul><li>类型别名是为Java类型设置一个短的名字。</li><li>存在的意义仅在于用来减少类完全限定名的冗余。</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--可以给实体类起别名--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以指定一个包名，MyBatis会在包名下面搜索需要的JavaBean，比如：<br>扫描实体类的包，它的默认别名就为这个类的类名，首字母小写！</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--可以给实体类起别名--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在实体类比较少的时候，使用第一种方式。<br>如果实体类十分多，建议使用第二种。<br>第一种可以DIY别名，第二种则不行，如果非要改，需要在实体上增加注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Alias(&quot;user&quot;)&#x2F;&#x2F;实体类public class User &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-设置"><a href="#4-5-设置" class="headerlink" title="4.5 设置"></a>4.5 设置</h3><p>这是MyBatis中极为重要的调整设置，它们会改变MyBatis的运行时行为。<br><img src="/2021/07/07/mybatis/20201023095101296.png" alt="在这里插入图片描述"><br><img src="/2021/07/07/mybatis/20201023095121579.png"></p><h3 id="4-6-其他配置"><a href="#4-6-其他配置" class="headerlink" title="4.6 其他配置"></a>4.6 其他配置</h3><ul><li>typeHandlers（类型处理器）</li><li>objectFactory（对象工厂）</li><li>plugins（插件）<ol><li>mybatis-generator-core</li><li>mybatis-plus</li><li>通用mapper</li></ol></li></ul><h3 id="4-7-映射器（mappers）"><a href="#4-7-映射器（mappers）" class="headerlink" title="4.7 映射器（mappers）"></a>4.7 映射器（mappers）</h3><p>MapperRegistry：注册绑定我们的Mapper文件；<br>方式一：【推荐使用】</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--每一个Mapper.xml都需要在Mybatis核心配置文件中注册！--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com/kuang/dao/UserMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方式二：使用class文件绑定注册</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--每一个Mapper.xml都需要在Mybatis核心配置文件中注册！--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.dao.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意点：</p><ul><li>接口和它的Mapper配置文件必须同名！</li><li>接口和它的Mapper配置文件必须在同一个包下!</li></ul><p>方式三：使用扫描包进行注入绑定</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--每一个Mapper.xml都需要在Mybatis核心配置文件中注册！--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意点：</p><ul><li>接口和它的Mapper配置文件必须同名！</li><li>接口和它的Mapper配置文件必须在同一个包下!</li></ul><p>练习：</p><ul><li>将数据库配置文件外部引入</li><li>实体类别名</li><li>保证UserMapper接口和UserMapper.xml改为一致！并且放在同一个包下！</li></ul><h3 id="4-8-生命周期和作用域"><a href="#4-8-生命周期和作用域" class="headerlink" title="4.8 生命周期和作用域"></a>4.8 生命周期和作用域</h3><p><img src="/2021/07/07/mybatis/20201023104621506.png"><br>生命周期和作用域是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong>。</p><p><strong>SqlSessionFactoryBuilder：</strong></p><ul><li>一旦创建了 SqlSessionFactory，就不再需要它了。</li><li>局部变量</li></ul><p><strong>SqlSessionFactory：</strong></p><ul><li>说白就是可以想象为：数据库连接池。</li><li>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，<strong>没有任何理由丢弃它或重新创建另一个实例</strong>。</li><li>SqlSessionFactory 的最佳作用域是应用作用域。</li><li>最简单的就是使用<strong>单例模式</strong>或者静态单例模式。</li></ul><p><strong>SqlSession：</strong></p><ul><li>连接到连接池的一个请求！</li><li>SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。</li><li>用完后需要赶紧关闭，否则资源被占用！<br><img src="/2021/07/07/mybatis/20201023104427946.png"><br>这里的每一个Mapper，就代表一个具体的业务！</li></ul><h2 id="5、解决属性名和字段名不一致的问题"><a href="#5、解决属性名和字段名不一致的问题" class="headerlink" title="5、解决属性名和字段名不一致的问题"></a>5、解决属性名和字段名不一致的问题</h2><h3 id="5-1-问题"><a href="#5-1-问题" class="headerlink" title="5.1 问题"></a>5.1 问题</h3><p>数据库中的字段<br><img src="/2021/07/07/mybatis/20201023111734299.png"><br>新建一个项目，拷贝之前的，测试实体类字段不一致的情况</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class User &#123;    private int id;    private String name;    private String password;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试出现问题<br><img src="/2021/07/07/mybatis/2020102311202794.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;    select * from mybatis.user where id &#x3D; #&#123;id&#125;&#x2F;&#x2F; 类型处理器&#x2F;&#x2F;    select id,name,pwd from mybatis.user where id &#x3D; #&#123;id&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>解决方法：</p><ul><li><p>起别名</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select id,name,pwd as password from mybatis.user where id = #&#123;id&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>resultMap解决</p></li></ul><h3 id="5-2-resultMap"><a href="#5-2-resultMap" class="headerlink" title="5.2 resultMap"></a>5.2 resultMap</h3><p>结果集映射</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">id name pwdid name password12    &lt;!--  结果集映射  --&gt;    &lt;resultMap id&#x3D;&quot;UserMap&quot; type&#x3D;&quot;User&quot;&gt;        &lt;!--column数据库中的字段，property实体类中的属性--&gt;        &lt;result column&#x3D;&quot;id&quot; property&#x3D;&quot;id&quot; &#x2F;&gt;        &lt;result column&#x3D;&quot;name&quot; property&#x3D;&quot;name&quot; &#x2F;&gt;        &lt;result column&#x3D;&quot;pwd&quot; property&#x3D;&quot;password&quot; &#x2F;&gt;    &lt;&#x2F;resultMap&gt;    &lt;select id&#x3D;&quot;getUserById&quot; parameterType&#x3D;&quot;int&quot; resultMap&#x3D;&quot;UserMap&quot;&gt;        select * from mybatis.user where id &#x3D; #&#123;id&#125;    &lt;&#x2F;select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>resultMap 元素是 MyBatis 中最重要最强大的元素。</li><li>ResultMap 的设计思想是，对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系就行了。</li><li>ResultMap 的优秀之处——你完全可以不用显式地配置它们。</li><li>如果这个世界总是这么简单就好了。</li></ul><h2 id="6、日志（2020-10-24）"><a href="#6、日志（2020-10-24）" class="headerlink" title="6、日志（2020-10-24）"></a>6、日志（2020-10-24）</h2><h3 id="6-1-日志工厂"><a href="#6-1-日志工厂" class="headerlink" title="6.1 日志工厂"></a>6.1 日志工厂</h3><p>如果一个数据库操作出现了异常，我们需要排错。日志就是最好的助手！<br>曾经：sout、debug<br>现在：日志工厂！<br><img src="/2021/07/07/mybatis/20201024092353850.png"></p><ul><li>SLF4J</li><li>LOG4J 【掌握】</li><li>LOG4J2</li><li>JDK_LOGGING</li><li>COMMONS_LOGGING</li><li>STDOUT_LOGGING【掌握】</li><li>NO_LOGGING</li></ul><p>在Mybatis中具体使用哪一个日志实现，在设置中设定！</p><p><strong>STDOUT_LOGGING</strong>标准日志输出<br>在mybatis-config.xml核心配置文件中，配置我们的日志！</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/mybatis/20201024094029735.png"></p><h3 id="6-2-Log4j"><a href="#6-2-Log4j" class="headerlink" title="6.2 Log4j"></a>6.2 Log4j</h3><p>什么是Log4j？</p><ul><li>Log4j是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件</li><li>我们也可以控制每一条日志的输出格式；</li><li>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。</li><li>可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。</li></ul><p>1.先在pom.xml文件中导入log4j的依赖包</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.在resources文件夹下建立log4j.properties文件进行配置</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码log4j.rootLogger &#x3D; DEBUG,console ,file#控制台输出的相关设置log4j.appender.console &#x3D; org.apache.log4j.ConsoleAppenderlog4j.appender.console.Target &#x3D; System.outlog4j.appender.console.Threshold &#x3D; DEBUGlog4j.appender.console.layout &#x3D; org.apache.log4j.PatternLayoutlog4j.appender.console.layout.ConversionPattern &#x3D;  [%c]-%m%n#文件输出的相关设置log4j.appender.file &#x3D; org.apache.log4j.RollingFileAppenderlog4j.appender.file.File &#x3D; .&#x2F;log&#x2F;kuang.loglog4j.appender.file.MaxFileSize &#x3D; 10mblog4j.appender.file.Threshold &#x3D; DEBUGlog4j.appender.file.layout &#x3D; org.apache.log4j.PatternLayoutlog4j.appender.file.layout.ConversionPattern &#x3D; [%p][%d&#123;yy-MM-dd&#125;][%c]%m%n#日志输出级别log4j.logger.org.mybatis&#x3D;DEBUGlog4j.logger.java.sql&#x3D;DEBUGlog4j.logger.java.sql.Statement&#x3D;DEBUGlog4j.logger.java.sql.ResultSet&#x3D;DEBUGlog4j.logger.java.sql.PreparedStatement&#x3D;DEBUG<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.在mybatis-config.xml核心配置文件中，配置log4j为日志的实现！</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LOG4J<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4.Log4j的使用，直接测试运行<br><img src="/2021/07/07/mybatis/20201024101856564.png"><br><strong>简单使用</strong></p><ol><li>在要使用Log4j的测试类中，导入包import org.apache.log4j.Logger;</li><li>日志对象，参数为当前类的class</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">static Logger logger &#x3D; Logger.getLogger(UserDaoTest.class);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>日志级别</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">logger.info(&quot;info:进入了testLog4j&quot;);logger.debug(&quot;DEBUG:进入了testLog4j&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>之后可在log文件夹中查看日志文件信息</li></ol><h2 id="7、分页"><a href="#7、分页" class="headerlink" title="7、分页"></a>7、分页</h2><p><strong>思考：为什么要分页！</strong></p><ul><li>减少数据的处理量</li></ul><h3 id="7-1-使用Limit分页"><a href="#7-1-使用Limit分页" class="headerlink" title="7.1 使用Limit分页"></a>7.1 使用Limit分页</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">语法：SELECT * from user limit startIndex,pageSizeSELECT  * from user limit 3 #[0,n]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>使用Mybatis实现分页，核心SQL</strong></p><ol><li>接口</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;分页List&lt;User&gt; getUserByLimit(Map&lt;String,Integer&gt; map);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>Mapper.xml</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--    分页--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserByLimit<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from mybatis.user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>测试</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Testpublic void getUserByLimit()&#123;    SqlSession sqlSession &#x3D; MybatisUtils.getSqlSession();    UserMapper mapper &#x3D; sqlSession.getMapper(UserMapper.class);    HashMap&lt;String, Integer&gt; map &#x3D; new HashMap&lt;String, Integer&gt;();    map.put(&quot;startIndex&quot;,0);    map.put(&quot;pageSize&quot;,2);    List&lt;User&gt; userList &#x3D; mapper.getUserByLimit(map);    for (User user : userList) &#123;        System.out.println(user);    &#125;        sqlSession.close();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-2-RowBounds分页"><a href="#7-2-RowBounds分页" class="headerlink" title="7.2 RowBounds分页"></a>7.2 RowBounds分页</h3><p>不再使用SQL实现分页</p><ol><li>接口</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;分页2List&lt;User&gt; getUserByRowBounds();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>Mapper.xml</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--    分页2--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getUserByRowBounds<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UserMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from mybatis.user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>测试</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Testpublic void getUserByRowBounds()&#123;    SqlSession sqlSession &#x3D; MybatisUtils.getSqlSession();    &#x2F;&#x2F;RowBounds实现    RowBounds rowBounds &#x3D; new RowBounds(0, 2);    &#x2F;&#x2F;通过java代码层面实现分页    List&lt;User&gt; userList &#x3D; sqlSession.selectList(&quot;com.kuang.dao.UserMapper.getUserByRowBounds&quot;,null,rowBounds);    for (User user : userList) &#123;        System.out.println(user);    &#125;        sqlSession.close();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-3-分页插件"><a href="#7-3-分页插件" class="headerlink" title="7.3 分页插件"></a>7.3 分页插件</h3><p><img src="/2021/07/07/mybatis/20201024131905259.png"><br>了解即可，使用时，需要知道是什么东西！</p><h2 id="8、使用注解开发（2020-10-25）"><a href="#8、使用注解开发（2020-10-25）" class="headerlink" title="8、使用注解开发（2020-10-25）"></a>8、使用注解开发（2020-10-25）</h2><h3 id="8-1-面向接口编程"><a href="#8-1-面向接口编程" class="headerlink" title="8.1 面向接口编程"></a>8.1 面向接口编程</h3><ul><li>之前学过面向对象编程，也学习过接口，但在真正的开发中，很多时候会选择面向接口编程。</li><li><strong>根本原因：解耦，可拓展，提高复用，分层开发中，上层不用管具体的实现，大家都遵守共同的标准，使得开发变得容易，规范性更好</strong></li><li>在一个面向对象的系统中，系统的各种功能是由许许多多的不同对象协作完成的。在这种情况下，各个对象内部是如何实现自己的，对系统设计人员来讲就不那么重要了；</li><li>而各个对象之间的协作关系则成为系统设计的关键。小到不同类之间的通信，大到各模块之间的交互，在系统设计之初都是要着重考虑的，这也是系统设计的主要工作内容。面向接口编程就是指按照这种思想来编程。</li></ul><h3 id="8-2-使用注解开发"><a href="#8-2-使用注解开发" class="headerlink" title="8.2 使用注解开发"></a>8.2 使用注解开发</h3><ol><li>注解在UserMapper接口上实现，并删除UserMapper.xml文件</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Select(&quot;select * from user&quot;)List&lt;User&gt; getUsers();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>需要在mybatis-config.xml核心配置文件中绑定接口</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--绑定接口！--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.kuang.dao.UserMapper<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>测试</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Testpublic void getUsers()&#123;    SqlSession sqlSession &#x3D; MybatisUtils.getSqlSession();    UserMapper mapper &#x3D; sqlSession.getMapper(UserMapper.class);    List&lt;User&gt; users &#x3D; mapper.getUsers();    for (User user : users) &#123;        System.out.println(user);    &#125;    sqlSession.close();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本质：反射机制实现<br>底层：动态代理！</p><p><strong>Mybatis详细的执行流程！（之后应用的多了详细再走一遍）</strong></p><h3 id="8-3-CRUD"><a href="#8-3-CRUD" class="headerlink" title="8.3 CRUD"></a>8.3 CRUD</h3><ol><li>在MybatisUtils工具类创建的时候实现自动提交事务！</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">public static SqlSession getSqlSession()&#123;    return sqlSessionFactory.openSession(true);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>编写接口，增加注解</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface UserMapper &#123;    @Select(&quot;select * from user&quot;)    List&lt;User&gt; getUsers();    &#x2F;&#x2F;方法存在多个参数，所有参数前面必须加上@Param(&quot;id&quot;)注解    @Select(&quot;select * from user where id&#x3D;#&#123;id&#125;&quot;)    User getUserById(@Param(&quot;id&quot;) int id);    @Insert(&quot;insert into user (id,name,pwd) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)&quot;)    int addUser(User user);    @Update(&quot;update user set name&#x3D;#&#123;name&#125;,pwd&#x3D;#&#123;password&#125; where id&#x3D;#&#123;id&#125;&quot;)    int updateUser(User user);    @Delete(&quot;delete from user where id &#x3D; #&#123;uid&#125;&quot;)    int deleteUser(@Param(&quot;uid&quot;) int id);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>测试类</li></ol><p>【注意：我们必须要将接口注册绑定到我们的核心配置文件中！】</p><p><strong>关于@Param()注解</strong></p><ul><li>基本类型的参数或者String类型，需要加上</li><li>引用类型不需要加</li><li>如果只有一个基本类型的话，可以忽略，但是建议都加上！</li><li>我们在SQL中引用的就是我们这里的@Param(“”)中设定的属性名！<br><strong>#{}和${}区别</strong></li></ul><h2 id="9、Lombok（偷懒的话可以使用）"><a href="#9、Lombok（偷懒的话可以使用）" class="headerlink" title="9、Lombok（偷懒的话可以使用）"></a>9、Lombok（偷懒的话可以使用）</h2><p>使用步骤：</p><ol><li>在IDEA中安装Lombok插件！</li><li>在项目pom.xml文件中导入Lombok的jar包</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>在实体类上加注解即可！</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Data@AllArgsConstructor@NoArgsConstructor123@Getter and @Setter@FieldNameConstants@ToString@EqualsAndHashCode@AllArgsConstructor, @RequiredArgsConstructor and @NoArgsConstructor@Log, @Log4j, @Log4j2, @Slf4j, @XSlf4j, @CommonsLog, @JBossLog, @Flogger, @CustomLog@Data@Builder@SuperBuilder@Singular@Delegate@Value@Accessors@Wither@With@SneakyThrows<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Data:无参构造、get、set、toString、hashCode、equals@AllArgsConstructor@NoArgsConstructor@EqualsAndHashCode@ToString@Getter and @Setter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10、多对一处理"><a href="#10、多对一处理" class="headerlink" title="10、多对一处理"></a>10、多对一处理</h2><p>多对一：</p><ul><li>多个学生，对应一个老师</li><li>对于学生而言，<strong>关联</strong>–多个学生，关联一个老师【多对一】</li><li>对于老师而言，<strong>集合</strong>–一个老师，有很多个学生【一对多】</li></ul><p>SQL语句：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE TABLE &#96;teacher&#96; (&#96;id&#96; INT(10) NOT NULL,&#96;name&#96; VARCHAR(30) DEFAULT NULL,PRIMARY KEY (&#96;id&#96;))ENGINE &#x3D; INNODB DEFAULT CHARSET&#x3D;utf8INSERT INTO teacher(&#96;id&#96;,&#96;name&#96;) VALUES (1,&#39;秦老师&#39;);CREATE TABLE &#96;student&#96; (&#96;id&#96; INT(10) NOT NULL,&#96;name&#96; VARCHAR(30) DEFAULT NULL,&#96;tid&#96; INT(10) DEFAULT NULL,PRIMARY KEY (&#96;id&#96;),KEY &#96;fktid&#96;(&#96;tid&#96;),CONSTRAINT &#96;fktid&#96; FOREIGN KEY (&#96;tid&#96;) REFERENCES &#96;teacher&#96; (&#96;id&#96;))ENGINE &#x3D; INNODB DEFAULT CHARSET&#x3D;utf8INSERT INTO &#96;student&#96;(&#96;id&#96;,&#96;name&#96;,&#96;tid&#96;) VALUES (&#39;1&#39;,&#39;小明&#39;,&#39;1&#39;);INSERT INTO &#96;student&#96;(&#96;id&#96;,&#96;name&#96;,&#96;tid&#96;) VALUES (&#39;2&#39;,&#39;小红&#39;,&#39;1&#39;);INSERT INTO &#96;student&#96;(&#96;id&#96;,&#96;name&#96;,&#96;tid&#96;) VALUES (&#39;3&#39;,&#39;小张&#39;,&#39;1&#39;);INSERT INTO &#96;student&#96;(&#96;id&#96;,&#96;name&#96;,&#96;tid&#96;) VALUES (&#39;4&#39;,&#39;小李&#39;,&#39;1&#39;);INSERT INTO &#96;student&#96;(&#96;id&#96;,&#96;name&#96;,&#96;tid&#96;) VALUES (&#39;5&#39;,&#39;小王&#39;,&#39;1&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试环境搭建"><a href="#测试环境搭建" class="headerlink" title="测试环境搭建"></a>测试环境搭建</h3><ol><li>导入Lombok</li><li>新建实体类Teacher，Student</li><li>建立Mapper接口</li><li>建立Mapper.XML文件</li><li>在核心配置文件中绑定注册我们的Mapper接口或者文件！【方式很多,随心选】</li><li>测试查询是否能够成功！</li></ol><h3 id="按照结果嵌套处理"><a href="#按照结果嵌套处理" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--按照结果嵌套处理    --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getStudent2<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>StudentTeacher2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select s.id sid,s.name sname,t.name tname    from mybatis.student s,mybatis.teacher t    where s.tid = t.id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>StudentTeacher2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="按照查询嵌套处理"><a href="#按照查询嵌套处理" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--  思路：      1.查询所有的学生信息      2.根据查询出来的学生的tid，寻找对应的老师！ 子查询--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getStudent<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>StudentTeacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.student<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>StudentTeacher<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--  复杂的属性，我们需要单独处理 对象：association 集合：collection      --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getTeacher<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getTeacher<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.teacher where id = #&#123;id&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回顾Mysql多对一查询方式：</p><ul><li>子查询</li><li>联表查询</li></ul><h2 id="11-、一对多处理（2020-10-26）"><a href="#11-、一对多处理（2020-10-26）" class="headerlink" title="11 、一对多处理（2020-10-26）"></a>11 、一对多处理（2020-10-26）</h2><p>比如：一个老师拥有多个学生！<br>对于老师而言，就是一对多的关系！</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ol><li>环境搭建，和刚才一样<br><strong>实体类：</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Datapublic class Student &#123;    private int id;    private String name;    private int tid;&#125;1234567@Datapublic class Teacher &#123;    private int id;    private String name;    &#x2F;&#x2F;一个老师拥有多个学生    private List&lt;Student&gt; students;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="按照结果嵌套处理-1"><a href="#按照结果嵌套处理-1" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--    按结果嵌套查询--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getTeacher<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TeacherStudent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        SELECT  s.id sid,s.name sname,t.name tname,t.id,tid        from student s,teacher t        where s.tid = t.id and t.id = #&#123;tid&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TeacherStudent<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!--  复杂的属性，我们需要单独处理 对象：association 集合：collection         javaType="" 指定属性的类型！         集合中的泛型信息，我们使用ofType获取         --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>students<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>collection</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="按照查询嵌套处理-1"><a href="#按照查询嵌套处理-1" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getTeacher2<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TeacherStudent2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.teacher where id = #&#123;tid&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TeacherStudent2<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>students<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ArrayList<span class="token punctuation">"</span></span> <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getStudentByTeacherId<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getStudentByTeacherId<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from  mybatis.student where tid = #&#123;tid&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li>关联-association【多对一】</li><li>集合-collection【一对多】</li><li>javaType &amp; ofType<ol><li>javaType 用来指定实体类中属性的类型</li><li>ofType 用来指定映射到List或者集合中的pojo类型，泛型中的约束类型！</li></ol></li></ol><p>注意点：</p><ul><li>保证SQL的可读性，尽量保证通俗易懂</li><li>注意一对多和多对一中，属性名和字段的问题！</li><li>如果问题不好排查错误，可以使用日志，建议使用Log4j</li></ul><p><strong>面试高频</strong></p><ul><li>Mysql引擎</li><li>InnoDB底层原理</li><li>索引</li><li>索引优化</li></ul><h2 id="12、动态SQL（2020-10-27）"><a href="#12、动态SQL（2020-10-27）" class="headerlink" title="12、动态SQL（2020-10-27）"></a>12、动态SQL（2020-10-27）</h2><p><strong>什么是动态SQL：动态SQL就是 指根据不同的条件生成不同的SQL语句</strong></p><p>利用动态SQL这一特性可以彻底摆脱这种痛苦。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">在 MyBatis 之前的版本中，需要花时间了解大量的元素。借助功能强大的基于 OGNL 的表达式，MyBatis 3 替换了之前的大部分元素，大大精简了元素种类，现在要学习的元素种类比原来的一半还要少。ifchoose (when, otherwise)trim (where, set)foreach<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE TABLE &#96;blog&#96;(&#96;id&#96; VARCHAR(50) NOT NULL COMMENT &#39;博客id&#39;,&#96;title&#96; VARCHAR(100) NOT NULL COMMENT &#39;博客标题&#39;,&#96;author&#96; VARCHAR(30) NOT NULL COMMENT &#39;博客作者&#39;,&#96;create_time&#96; DATETIME NOT NULL COMMENT &#39;创建时间&#39;,&#96;views&#96; INT(30) NOT NULL COMMENT &#39;浏览量&#39;)ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个基础工程</p><ol><li>导包</li><li>编写配置文件</li><li>编写实体类</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Datapublic class Blog &#123;    private String id;    private String title;    private String author;    private Date createTime; &#x2F;&#x2F;属性名和字段名不一致    private int views;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>编写实体类对应Mapper接口和Mapper.XML文件</li></ol><h3 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryBlogIF<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.blog where 1=1    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        and title = #&#123;title&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        and author = #&#123;author&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose (when, otherwise)"></a>choose (when, otherwise)</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryBlogChoose<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.blog    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                title = #&#123;title&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and author = #&#123;author&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>                and views = #&#123;views&#125;            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="trim-where-set"><a href="#trim-where-set" class="headerlink" title="trim (where, set)"></a>trim (where, set)</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryBlogIF<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.blog    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and title = #&#123;title&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and author = #&#123;author&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateBlog<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    update mybatis.blog    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            title = #&#123;title&#125;,        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            author = #&#123;author&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    where id = #&#123;id&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>所谓的动态SQL，本质还是SQL语句，只是我们可以在SQL层面，去执行一个逻辑代码</strong></p><h3 id="Foreach"><a href="#Foreach" class="headerlink" title="Foreach"></a>Foreach</h3><ul><li>动态 SQL 的另一个常见使用场景是对集合进行遍历（尤其是在构建 IN 条件语句的时候）。</li><li>foreach 元素的功能非常强大，它允许你指定一个集合，声明可以在元素体内使用的集合项（item）和索引（index）变量。它也允许你指定开头与结尾的字符串以及集合项迭代之间的分隔符。这个元素也不会错误地添加多余的分隔符，看它多智能！</li><li>提示你可以将任何可迭代对象（如 List、Set 等）、Map 对象或者数组对象作为集合参数传递给 foreach。当使用可迭代对象或者数组时，index 是当前迭代的序号，item 的值是本次迭代获取到的元素。当使用 Map 对象（或者 Map.Entry 对象的集合）时，index 是键，item 是值。</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--select * from blog where 1=1 and (id=1 or id=2 or id=3)    我们现在传递一个万能的map，这map中可以存在一个集合！    --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryBlogForeach<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.blog    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ids<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>and (<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>or<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            id = #&#123;id&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>动态SQL就是在拼接SQL语句，我们只要保证SQL的正确性，按照SQL的格式，去排列组合就可以了。<br>建议：</p><ul><li>先在Mysql中写出完整的SQL，再对应的去修改成我们的动态SQL实现通用即可！</li></ul><h3 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h3><p>有的时候，我们可以能会将一些功能的部分抽取出来，方便复用！</p><ol><li>使用SQL标签抽取公共的部分</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>if-title-author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        title = #&#123;title&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>author != null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        and author = #&#123;author&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>在需要使用的地方使用Include标签引用即可</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryBlogIF<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.blog    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>if-title-author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意事项：</p><ul><li>最好基于单表来定义SQL片段！</li><li>不要存在where标签</li></ul><p>10月28和29日因为身体不舒服耽搁了两天</p><h2 id="13、缓存（了解即可）（2020-10-30）"><a href="#13、缓存（了解即可）（2020-10-30）" class="headerlink" title="13、缓存（了解即可）（2020-10-30）"></a>13、缓存（了解即可）（2020-10-30）</h2><h3 id="13-1-简介"><a href="#13-1-简介" class="headerlink" title="13.1 简介"></a>13.1 简介</h3><h4 id="1-什么是缓存-Cache-？"><a href="#1-什么是缓存-Cache-？" class="headerlink" title="1. 什么是缓存[Cache]？"></a>1. 什么是缓存[Cache]？</h4><ul><li>存在内存中的临时数据。</li><li>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上（关系型数据库查询文件）查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。</li></ul><h4 id="2-为什么使用缓存？"><a href="#2-为什么使用缓存？" class="headerlink" title="2. 为什么使用缓存？"></a>2. 为什么使用缓存？</h4><ul><li>减少和数据库的交互次数，减少系统开销，提高系统效率。</li></ul><h4 id="3-什么样的数据能使用缓存？"><a href="#3-什么样的数据能使用缓存？" class="headerlink" title="3. 什么样的数据能使用缓存？"></a>3. 什么样的数据能使用缓存？</h4><ul><li>经常查询并且不经常改变的数据。【可以使用缓存】</li></ul><h3 id="13-2-Mybatis缓存"><a href="#13-2-Mybatis缓存" class="headerlink" title="13.2 Mybatis缓存"></a>13.2 Mybatis缓存</h3><ul><li><p>Mybatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率。</p></li><li><p>Mybatis系统中默认定义了两级缓存：</p><p>一级缓存</p><p>和</p><p>二级缓存</p><ul><li>默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存）</li><li>二级缓存需要手动开启和配置，它是基于namespace级别的缓存。</li><li>为了提高扩展性，Mybatis定义了缓存接口Cache，我们可以通过实现Cache接口来自定义二级缓存。</li></ul></li></ul><h3 id="13-3-一级缓存"><a href="#13-3-一级缓存" class="headerlink" title="13.3 一级缓存"></a>13.3 一级缓存</h3><ul><li>一级缓存也叫本地缓存：<ul><li>与数据库同一次会话期间查询到的数据会放在本地缓存中。</li><li>以后如果需要获取相同的数据，直接从缓存中拿，没必要再去查询数据库</li></ul></li></ul><p>测试步骤：</p><ol><li>开启日志！</li><li>测试在一个Session中查询两次相同记录</li><li>查看日志输出<br><img src="/2021/07/07/mybatis/20201030104307657.png"></li></ol><p>缓存失效的情况：</p><ol><li>查询不同的东西；</li><li>增删改操作，可能会改变原来的数据，所以必定会刷新缓存！<br><img src="/2021/07/07/mybatis/20201030105031892.png"></li><li>查询不同的Mapper.xml</li><li>手动清理缓存！<br><img src="/2021/07/07/mybatis/20201030105220680.png"></li></ol><p>小结：一级缓存默认是开启的，只在一次SqlSession中有效，也就是拿到连接到关闭连接这个区间段！<br>一级缓存相当于一个Map。</p><h3 id="13-4-二级缓存"><a href="#13-4-二级缓存" class="headerlink" title="13.4 二级缓存"></a>13.4 二级缓存</h3><ul><li>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存；</li><li>基于namespace级别的缓存，一个名称空间，对应一个二级缓存；</li><li>工作机制<ul><li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中；</li><li>如果当前会话关闭了，这个会话对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中；</li><li>新的会话查询信息，就可以从二级缓存中获取内容；</li><li>不同的mapper查出的数据就会放在自己对应的缓存（map）中；</li></ul></li></ul><p>步骤：</p><ol><li>在mybatis-config.xml开启全局缓存</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--显示的开启全局缓存--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>在要使用二级缓存的Mapper中开启</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--在当前Mapper.xml中使用二级缓存--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以自定义参数</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--在当前Mapper.xml中使用二级缓存--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span>        <span class="token attr-name">eviction</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FIFO<span class="token punctuation">"</span></span>        <span class="token attr-name">flushInterval</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>60000<span class="token punctuation">"</span></span>        <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>512<span class="token punctuation">"</span></span>        <span class="token attr-name">readOnly</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>测试</p><ol><li>问题：如果没有自定义参数，则会报错，我们需要将实体类序列化！</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">Cause: java.io.NotSerializableException: com.kuang.pojo.User<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>小结：</p><ul><li>只要开启了二级缓存，在同一个Mapper下就有效；</li><li>所有的数据都会先放在一级缓存中；</li><li>只有当会话提交或者关闭的时候，才会提交到二级缓存中！</li></ul><h3 id="13-5-缓存原理"><a href="#13-5-缓存原理" class="headerlink" title="13.5 缓存原理"></a>13.5 缓存原理</h3><p><img src="/2021/07/07/mybatis/20201030140755274.png"></p><h3 id="13-6-自定义缓存-ehcache（可以了解）"><a href="#13-6-自定义缓存-ehcache（可以了解）" class="headerlink" title="13.6 自定义缓存-ehcache（可以了解）"></a>13.6 自定义缓存-ehcache（可以了解）</h3><p>Ehcache是一种广泛使用的开源Java分布式缓存，主要面向通用缓存。</p><p>要在程序中使用ehcache，先要导包！</p><p>在mapper中指定使用我们的ehcache缓存实现！</p><p><strong>目前：Redis数据库来做缓存！K-V</strong></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Web</title>
      <link href="/2021/07/07/java-web/"/>
      <url>/2021/07/07/java-web/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h1><h2 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h2><h3 id="1-1、前言"><a href="#1-1、前言" class="headerlink" title="1.1、前言"></a>1.1、前言</h3><p>web开发：</p><ul><li>web，网页的意思 ， <a href="http://www.baidu.com/">www.baidu.com</a></li><li>静态web<ul><li>html，css</li><li>提供给所有人看的数据始终不会发生变化！</li></ul></li><li>动态web<ul><li>淘宝，几乎是所有的网站；</li><li>提供给所有人看的数据始终会发生变化，每个人在不同的时间，不同的地点看到的信息各不相同！</li><li>技术栈：Servlet/JSP，ASP，PHP</li></ul></li></ul><p>在Java中，动态web资源开发的技术统称为JavaWeb；</p><h3 id="1-2、web应用程序"><a href="#1-2、web应用程序" class="headerlink" title="1.2、web应用程序"></a>1.2、web应用程序</h3><p>web应用程序：可以提供浏览器访问的程序；</p><ul><li>a.html、b.html…多个web资源，这些web资源可以被外界访问，对外界提供服务；</li><li>你们能访问到的任何一个页面或者资源，都存在于这个世界的某一个角落的计算机上。</li><li>URL</li><li>这个统一的web资源会被放在同一个文件夹下，web应用程序–&gt;Tomcat：服务器</li><li>一个web应用由多部分组成 （静态web，动态web）<ul><li>html，css，js</li><li>jsp，servlet</li><li>Java程序</li><li>jar包</li><li>配置文件 （Properties）</li></ul></li></ul><p>web应用程序编写完毕后，若想提供给外界访问：需要一个服务器来统一管理；</p><h3 id="1-3、静态web"><a href="#1-3、静态web" class="headerlink" title="1.3、静态web"></a>1.3、静态web</h3><ul><li>*.htm, *.html,这些都是网页的后缀，如果服务器上一直存在这些东西，我们就可以直接进行读取。通络；</li></ul><p><img src="/2021/07/07/java-web/20200515105012978.png"></p><ul><li>静态web存在的缺点<ul><li>Web页面无法动态更新，所有用户看到都是同一个页面<ul><li>轮播图，点击特效：伪动态</li><li>JavaScript [实际开发中，它用的最多]</li><li>VBScript</li></ul></li><li>它无法和数据库交互（数据无法持久化，用户无法交互）</li></ul></li></ul><h3 id="1-4、动态web"><a href="#1-4、动态web" class="headerlink" title="1.4、动态web"></a>1.4、动态web</h3><p>页面会动态展示： “Web的页面展示的效果因人而异”；</p><p><img src="/2021/07/07/java-web/20200515105039352.png"></p><p>缺点：</p><ul><li><p>加入服务器的动态web资源出现了错误，我们需要重新编写我们的<strong>后台程序</strong>,重新发布；</p><ul><li>停机维护</li></ul></li></ul><p>优点：</p><ul><li>Web页面可以动态更新，所有用户看到都不是同一个页面</li><li>它可以与数据库交互 （数据持久化：注册，商品信息，用户信息…）</li></ul><p><img src="/2021/07/07/java-web/2020051510510714.png"></p><p>新手村：–魔鬼训练（分析原理，看源码）–&gt; PK场</p><h2 id="2、web服务器"><a href="#2、web服务器" class="headerlink" title="2、web服务器"></a>2、web服务器</h2><h3 id="2-1、技术讲解"><a href="#2-1、技术讲解" class="headerlink" title="2.1、技术讲解"></a>2.1、技术讲解</h3><p><strong>ASP:</strong></p><ul><li><p>微软：国内最早流行的就是ASP；</p></li><li><p>在HTML中嵌入了VB的脚本， ASP + COM；</p></li><li><p>在ASP开发中，基本一个页面都有几千行的业务代码，页面极其换乱</p></li><li><p>维护成本高！</p></li><li><p>C#</p></li><li><p>IIS</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>            &lt;%            System.out.println("hello")            %>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>php：</strong></p><ul><li>PHP开发速度很快，功能很强大，跨平台，代码很简单 （70% , WP）</li><li>无法承载大访问量的情况（局限性）</li></ul><p>**JSP/Servlet : **</p><p>B/S：浏览和服务器</p><p>C/S: 客户端和服务器</p><ul><li>sun公司主推的B/S架构</li><li>基于Java语言的 (所有的大公司，或者一些开源的组件，都是用Java写的)</li><li>可以承载三高问题带来的影响；</li><li>语法像ASP ， ASP–&gt;JSP , 加强市场强度；</li></ul><p>…</p><h3 id="2-2、web服务器"><a href="#2-2、web服务器" class="headerlink" title="2.2、web服务器"></a>2.2、web服务器</h3><p>服务器是一种被动的操作，用来处理用户的一些请求和给用户一些响应信息；</p><p><strong>IIS</strong></p><p>微软的； ASP…,Windows中自带的</p><p><strong>Tomcat</strong></p><p><img src="/2021/07/07/java-web/20200515105139959.png"></p><p>面向百度编程；</p><p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，因为Tomcat 技术先进、性能稳定，而且<strong>免费</strong>，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。</p><p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8">服务器</a>，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个Java初学web的人来说，它是最佳的选择</p><p>Tomcat 实际上运行JSP 页面和Servlet。Tomcat最新版本为<strong>9.0。</strong></p><p>…</p><p><strong>工作3-5年之后，可以尝试手写Tomcat服务器；</strong></p><p>下载tomcat：</p><ol><li>安装 or 解压</li><li>了解配置文件及目录结构</li><li>这个东西的作用</li></ol><h2 id="3、Tomcat"><a href="#3、Tomcat" class="headerlink" title="3、Tomcat"></a>3、Tomcat</h2><h3 id="3-1、-安装tomcat"><a href="#3-1、-安装tomcat" class="headerlink" title="3.1、 安装tomcat"></a>3.1、 安装tomcat</h3><p>tomcat官网：<a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a></p><p><img src="/2021/07/07/java-web/20200515105207372.png"></p><p><img src="/2021/07/07/java-web/20200515105227518.png"></p><h3 id="3-2、Tomcat启动和配置"><a href="#3-2、Tomcat启动和配置" class="headerlink" title="3.2、Tomcat启动和配置"></a>3.2、Tomcat启动和配置</h3><p>文件夹作用：</p><p><img src="/2021/07/07/java-web/20200517104550409.png"></p><p><strong>启动。关闭Tomcat</strong></p><p><img src="/2021/07/07/java-web/20200517104603814.png"></p><p>访问测试：<a href="http://localhost:8080/">http://localhost:8080/</a></p><p>可能遇到的问题：</p><ol><li>Java环境变量没有配置</li><li>闪退问题：需要配置兼容性</li><li>乱码问题：配置文件中设置</li></ol><h3 id="3-3、配置"><a href="#3-3、配置" class="headerlink" title="3.3、配置"></a>3.3、配置</h3><p><img src="/2021/07/07/java-web/20200517104617888.png"></p><p>可以配置启动的端口号</p><ul><li>tomcat的默认端口号为：8080</li><li>mysql：3306</li><li>http：80</li><li>https：443</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8081<span class="token punctuation">"</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HTTP/1.1<span class="token punctuation">"</span></span>           <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20000<span class="token punctuation">"</span></span>           <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8443<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以配置主机的名称</p><ul><li>默认的主机名为：localhost-&gt;127.0.0.1</li><li>默认网站应用存放的位置为：webapps</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Host</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>www.qinjiang.com<span class="token punctuation">"</span></span>  <span class="token attr-name">appBase</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>webapps<span class="token punctuation">"</span></span>        <span class="token attr-name">unpackWARs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">autoDeploy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="高难度面试题："><a href="#高难度面试题：" class="headerlink" title="高难度面试题："></a>高难度面试题：</h4><p>请你谈谈网站是如何进行访问的！</p><ol><li><p>输入一个域名；回车</p></li><li><p>检查本机的 C:\Windows\System32\drivers\etc\hosts配置文件下有没有这个域名映射；</p><ol><li><p>有：直接返回对应的ip地址，这个地址中，有我们需要访问的web程序，可以直接访问</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">127.0.0.1       www.qinjiang.com1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>没有：去DNS服务器找，找到的话就返回，找不到就返回找不到；</p></li></ol></li></ol><p><img src="/2021/07/07/java-web/20200517104654983.png"></p><ol><li>可以配置一下环境变量（可选性）</li></ol><h3 id="3-4、发布一个web网站"><a href="#3-4、发布一个web网站" class="headerlink" title="3.4、发布一个web网站"></a>3.4、发布一个web网站</h3><p>不会就先模仿</p><ul><li>将自己写的网站，放到服务器(Tomcat)中指定的web应用的文件夹（webapps）下，就可以访问了</li></ul><p>网站应该有的结构</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">--webapps ：Tomcat服务器的web目录-ROOT-kuangstudy ：网站的目录名- WEB-INF-classes : java程序-lib：web应用所依赖的jar包-web.xml ：网站配置文件- index.html 默认的首页- static             -css            -style.css            -js            -img         -.....<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HTTP协议 ： 面试</p><p>Maven：构建工具</p><ul><li>Maven安装包</li></ul><p>Servlet 入门</p><ul><li>HelloWorld！</li><li>Servlet配置</li><li>原理</li></ul><h2 id="4、Http"><a href="#4、Http" class="headerlink" title="4、Http"></a>4、Http</h2><h3 id="4-1、什么是HTTP"><a href="#4-1、什么是HTTP" class="headerlink" title="4.1、什么是HTTP"></a>4.1、什么是HTTP</h3><p>HTTP（超文本传输协议）是一个简单的请求-响应协议，它通常运行在TCP之上。</p><ul><li>文本：html，字符串，~ ….</li><li>超文本：图片，音乐，视频，定位，地图…….</li><li>80（默认端口号）</li></ul><p>Https：安全的</p><ul><li>443（默认端口号）</li></ul><h3 id="4-2、两个时代"><a href="#4-2、两个时代" class="headerlink" title="4.2、两个时代"></a>4.2、两个时代</h3><ul><li>http1.0<ul><li>HTTP/1.0：客户端可以与web服务器连接后，只能获得一个web资源，断开连接</li></ul></li><li>http2.0<ul><li>HTTP/1.1：客户端可以与web服务器连接后，可以获得多个web资源。‘</li></ul></li></ul><h3 id="4-3、Http请求"><a href="#4-3、Http请求" class="headerlink" title="4.3、Http请求"></a>4.3、Http请求</h3><ul><li>客户端—发请求（Request）—服务器</li></ul><p>百度：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">Request URL:https:&#x2F;&#x2F;www.baidu.com&#x2F;   请求地址Request Method:GET    get方法&#x2F;post方法Status Code:200 OK    状态码：200Remote（远程） Address:14.215.177.39:443<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">Accept:text&#x2F;html  Accept-Encoding:gzip, deflate, brAccept-Language:zh-CN,zh;q&#x3D;0.9    语言Cache-Control:max-age&#x3D;0Connection:keep-alive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1、请求行"><a href="#1、请求行" class="headerlink" title="1、请求行"></a>1、请求行</h4><ul><li><p>请求行中的请求方式：GET</p></li><li><p>请求方式：<strong>Get，Post</strong>，HEAD,DELETE,PUT,TRACT…</p><ul><li><p>get：请求能够携带的参数比较少，大小有限制，会在浏览器的URL地址栏显示数据内容，不安全，但高效</p></li><li><p>post：请求能够携带的参数没有限制，大小没有限制，不会在浏览器的URL地址栏显示数据内容，安全，但不高效。</p></li></ul></li></ul><h4 id="2、消息头"><a href="#2、消息头" class="headerlink" title="2、消息头"></a>2、消息头</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">Accept：告诉浏览器，它所支持的数据类型Accept-Encoding：支持哪种编码格式  GBK   UTF-8   GB2312  ISO8859-1Accept-Language：告诉浏览器，它的语言环境Cache-Control：缓存控制Connection：告诉浏览器，请求完成是断开还是保持连接HOST：主机....&#x2F;.123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4、Http响应"><a href="#4-4、Http响应" class="headerlink" title="4.4、Http响应"></a>4.4、Http响应</h3><ul><li>服务器—响应—–客户端</li></ul><p>百度：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">Cache-Control:private    缓存控制Connection:Keep-Alive    连接Content-Encoding:gzip    编码Content-Type:text&#x2F;html   类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-响应体"><a href="#1-响应体" class="headerlink" title="1.响应体"></a>1.响应体</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">Accept：告诉浏览器，它所支持的数据类型Accept-Encoding：支持哪种编码格式  GBK   UTF-8   GB2312  ISO8859-1Accept-Language：告诉浏览器，它的语言环境Cache-Control：缓存控制Connection：告诉浏览器，请求完成是断开还是保持连接HOST：主机....&#x2F;.Refresh：告诉客户端，多久刷新一次；Location：让网页重新定位；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、响应状态码"><a href="#2、响应状态码" class="headerlink" title="2、响应状态码"></a>2、响应状态码</h4><p>200：请求响应成功 200</p><p>3xx：请求重定向</p><ul><li>重定向：你重新到我给你新位置去；</li></ul><p>4xx：找不到资源 404</p><ul><li>资源不存在；</li></ul><p>5xx：服务器代码错误 500 502:网关错误</p><p><strong>常见面试题：</strong></p><p>当你的浏览器中地址栏输入地址并回车的一瞬间到页面能够展示回来，经历了什么？</p><h2 id="5、Maven"><a href="#5、Maven" class="headerlink" title="5、Maven"></a>5、Maven</h2><p><strong>我为什么要学习这个技术？</strong></p><ol><li>在Javaweb开发中，需要使用大量的jar包，我们手动去导入；</li><li>如何能够让一个东西自动帮我导入和配置这个jar包。</li></ol><p>由此，Maven诞生了！</p><h3 id="5-1-Maven项目架构管理工具"><a href="#5-1-Maven项目架构管理工具" class="headerlink" title="5.1 Maven项目架构管理工具"></a>5.1 Maven项目架构管理工具</h3><p>我们目前用来就是方便导入jar包的！<br>Maven的核心思想：<strong>约定大于配置</strong></p><ul><li>有约束，不要去违反。</li></ul><p>Maven会规定好你该如何去编写我们Java代码，必须要按照这个规范来；</p><h3 id="5-2下载安装Maven"><a href="#5-2下载安装Maven" class="headerlink" title="5.2下载安装Maven"></a>5.2下载安装Maven</h3><p>官网：<a href="https://maven.apache.org/">https://maven.apache.org/</a><br><img src="/2021/07/07/java-web/20200506180036622.png"></p><p>下载完成后，解压即可；<br>小狂神友情建议：电脑上的所有环境都放在一个文件夹下，方便管理；</p><h3 id="5-3配置环境变量"><a href="#5-3配置环境变量" class="headerlink" title="5.3配置环境变量"></a>5.3配置环境变量</h3><p>在我们的系统环境变量中配置如下配置：</p><ul><li>M2_HOME maven目录下的bin目录</li><li>MAVEN_HOME maven的目录</li><li>在系统的path中配置%MAVEN_HOME%\bin<br><img src="/2021/07/07/java-web/20200423213124579.png"><br>测试Maven是否安装成功，保证必须配置完毕！</li></ul><h3 id="5-4阿里云镜像"><a href="#5-4阿里云镜像" class="headerlink" title="5.4阿里云镜像"></a>5.4阿里云镜像</h3><ul><li>镜像：mirrors</li><li>作用：加速我们的下载</li><li>国内建议使用阿里云的镜像</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>nexus-aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>*,!jeecg,!jeecg-snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Nexus aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>D:Enmvironment\apache-maven-3.6.2conf\ettings.xml</strong><br>（狂神老师配置源和仓库的文件位置）</p><h3 id="5-5本地仓库"><a href="#5-5本地仓库" class="headerlink" title="5.5本地仓库"></a>5.5本地仓库</h3><p>在本地的仓库，远程仓库； 建立一个本地仓库：localRepository</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;localRepository&gt;D:\Environment\apache-maven-3.6.2\maven-repo&lt;&#x2F;localRepository&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-6、在IDEA中使用Maven"><a href="#5-6、在IDEA中使用Maven" class="headerlink" title="5.6、在IDEA中使用Maven"></a>5.6、在IDEA中使用Maven</h3><ol><li><p>启动IDEA</p></li><li><p>创建一个MavenWeb项目</p><p><img src="/2021/07/07/java-web/2020051715092913.png"></p><p><img src="/2021/07/07/java-web/20200517151018731.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/20200517151042646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjM5MDQzMw==,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20200517151106318.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(Java-Web/20200517151106318.png)(JavaWeb.assets/1567844956177.png)]"></p><p><img src="https://img-blog.csdnimg.cn/20200517151139194.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjM5MDQzMw==,size_16,color_FFFFFF,t_70"></p></li><li><p>等待项目初始化完毕</p><p><img src="https://img-blog.csdnimg.cn/20200517151202868.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjM5MDQzMw==,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20200517151219667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjM5MDQzMw==,size_16,color_FFFFFF,t_70"></p></li><li><p>观察maven仓库中多了什么东西？</p></li><li><p>IDEA中的Maven设置</p><p>注意：IDEA项目创建成功后，看一眼Maven的配置</p><p><img src="https://img-blog.csdnimg.cn/20200517151244408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjM5MDQzMw==,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20200517151259570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjM5MDQzMw==,size_16,color_FFFFFF,t_70"></p></li><li><p>到这里，Maven在IDEA中的配置和使用就OK了!</p></li></ol><h3 id="5-7、创建一个普通的Maven项目"><a href="#5-7、创建一个普通的Maven项目" class="headerlink" title="5.7、创建一个普通的Maven项目"></a>5.7、创建一个普通的Maven项目</h3><p><img src="https://img-blog.csdnimg.cn/20200517151320910.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjM5MDQzMw==,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20200517151347191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjM5MDQzMw==,size_16,color_FFFFFF,t_70"></p><p>这个只有在Web应用下才会有！</p><p><img src="https://img-blog.csdnimg.cn/20200517151404360.png"></p><h3 id="5-8-标记文件夹功能"><a href="#5-8-标记文件夹功能" class="headerlink" title="5.8 标记文件夹功能"></a>5.8 标记文件夹功能</h3><p><img src="https://img-blog.csdnimg.cn/20200517151420677.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjM5MDQzMw==,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20200517151438765.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjM5MDQzMw==,size_16,color_FFFFFF,t_70"></p><p><img src="/2021/07/07/java-web/20200517151450119.png"></p><p><img src="/2021/07/07/java-web/20200517151515673.png"></p><h3 id="5-9-在-IDEA中配置Tomcat"><a href="#5-9-在-IDEA中配置Tomcat" class="headerlink" title="5.9 在 IDEA中配置Tomcat"></a>5.9 在 IDEA中配置Tomcat</h3><p><img src="https://img-blog.csdnimg.cn/2020051715155548.png"></p><p><img src="https://img-blog.csdnimg.cn/20200517151611112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjM5MDQzMw==,size_16,color_FFFFFF,t_70" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(Java-Web/20200517151611112.png)(JavaWeb.assets/1567846179573.png)]"></p><p><img src="https://img-blog.csdnimg.cn/20200517151623509.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjM5MDQzMw==,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20200517151636624.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjM5MDQzMw==,size_16,color_FFFFFF,t_70"></p><p>解决警告问题</p><p>必须要的配置：<strong>为什么会有这个问题：我们访问一个网站，需要指定一个文件夹名字；</strong></p><p><img src="https://img-blog.csdnimg.cn/20200517151657895.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjM5MDQzMw==,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/2020051715171370.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjM5MDQzMw==,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20200517151732961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjM5MDQzMw==,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20200517151754696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjM5MDQzMw==,size_16,color_FFFFFF,t_70"></p><h3 id="5-10-pom文件"><a href="#5-10-pom文件" class="headerlink" title="5.10 pom文件"></a>5.10 pom文件</h3><p>pom.xml 是Maven的核心配置文件</p><p><img src="https://img-blog.csdnimg.cn/20200517151820925.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjM5MDQzMw==,size_16,color_FFFFFF,t_70"></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token comment">&lt;!--Maven版本和头文件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--这里就是我们刚才配置的GAV--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.kuang<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javaweb-01-maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--Package：项目的打包方式  jar：java应用  war：JavaWeb应用  --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--配置--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--项目的默认构建编码--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--编码版本--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--项目依赖--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--具体依赖的jar包配置文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--项目构建用的东西--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>javaweb-01-maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginManagement</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-clean-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-resources-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-surefire-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.22.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-war-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-install-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-deploy-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.8.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginManagement</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200517151841797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjM5MDQzMw==,size_16,color_FFFFFF,t_70"></p><p>maven由于他的约定大于配置，我们之后可以能遇到我们写的配置文件，无法被导出或者生效的问题，解决方案：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--在build中配置resources，来防止我们资源导出失败的问题--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-12-IDEA操作"><a href="#5-12-IDEA操作" class="headerlink" title="5.12 IDEA操作"></a>5.12 IDEA操作</h3><p><img src="https://img-blog.csdnimg.cn/20200517151952315.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjM5MDQzMw==,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20200517152031212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjM5MDQzMw==,size_16,color_FFFFFF,t_70"></p><h3 id="5-13-解决遇到的问题"><a href="#5-13-解决遇到的问题" class="headerlink" title="5.13 解决遇到的问题"></a>5.13 解决遇到的问题</h3><ol><li><p>Maven 3.6.2</p><p>解决方法：降级为3.6.1</p><p><img src="https://img-blog.csdnimg.cn/20200517152055888.png" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(Java-Web/20200517152055888.png)(JavaWeb.assets/1567904721301.png)]"></p></li><li><p>Tomcat闪退</p></li><li><p>IDEA中每次都要重复配置Maven<br>在IDEA中的全局默认配置中去配置</p><p><img src="https://img-blog.csdnimg.cn/20200517152117920.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjM5MDQzMw==,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20200517152140353.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjM5MDQzMw==,size_16,color_FFFFFF,t_70"></p></li><li><p>Maven项目中Tomcat无法配置</p></li><li><p>maven默认web项目中的web.xml版本问题</p><p><img src="https://img-blog.csdnimg.cn/20200517152201837.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjM5MDQzMw==,size_16,color_FFFFFF,t_70"></p></li><li><p>替换为webapp4.0版本和tomcat一致</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span>         <span class="token attr-name">metadata-complete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Maven仓库的使用</p><p>地址：<a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p><p><img src="https://img-blog.csdnimg.cn/20200517152227350.png"></p><p><img src="https://img-blog.csdnimg.cn/20200517152245364.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjM5MDQzMw==,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20200517152310219.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjM5MDQzMw==,size_16,color_FFFFFF,t_70"></p><p><img src="https://img-blog.csdnimg.cn/20200517152329226.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjM5MDQzMw==,size_16,color_FFFFFF,t_70"></p></li></ol><h2 id="6-Servlet"><a href="#6-Servlet" class="headerlink" title="6 Servlet"></a>6 Servlet</h2><h3 id="6-1-Servlet简介"><a href="#6-1-Servlet简介" class="headerlink" title="6.1 Servlet简介"></a>6.1 Servlet简介</h3><ul><li><p>Servlet是sun公司开发的动态web的一项技术</p></li><li><p>Sun在API中提供一个接口叫做：Servlet，开发一个Servlet程序需要完成两个小步骤：</p><ol><li>编写一个类，实现servlet接口；</li><li>把开发好的Java类部署到web服务器上。</li></ol><p><strong>把实现了Servlet接口的Java程序叫做，Servlet</strong></p></li></ul><h3 id="6-2-编写HelloServlet程序"><a href="#6-2-编写HelloServlet程序" class="headerlink" title="6.2 编写HelloServlet程序"></a>6.2 编写HelloServlet程序</h3><p>Serlvet接口Sun公司有两个默认的实现类：HttpServlet，GenericServlet</p><ol><li>构建一个普通的Maven项目，删掉里面的src目录,在这个项目里面建立Moudel(模块)，这个空的工程就是Maven主工程；</li><li>在Maven父子工程中</li></ol><ul><li>父项目的pom.xml中自动生成</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>servlet-01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>servlet-02<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span>//告诉编译器，在读取主pom时，去找两个子pom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>子项目（测试中没有自动生成）</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javaweb-02servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.zafu<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    //使子项目继承父项目的设置，避免重复导入依赖父项目中的java,子项目可以直接使用son extends father<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>Maven环境优化<br>1.修改web.xml为最新（去tomca文件夹下的webapps下去取）；<br>2.将maven结构搭建完整，，main下建java文件夹，resources文件夹<br><img src="/2021/07/07/java-web/20200429120520900.png"></li><li>编写一个Servlet程序<br><img src="/2021/07/07/java-web/20200429121134795.png"><br>1.编写一个普通类<br>2.实现Servlet接口，这里我们直接继承HttpServlet（<code>HttpServlet实现了Servlet接口</code>）</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class HelloServlet extends HttpServlet &#123;    &#x2F;&#x2F;get post只是请求实现的不同方式，所有这里两个丰富可以相互调用，业务逻辑是相同的    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        System.out.println(&quot;doget&quot;);        PrintWriter writer &#x3D; resp.getWriter();&#x2F;&#x2F;响应流        writer.print(&quot;hello,servlet&quot;);    &#125;    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        super.doPost(req, resp);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>编写Servlet的映射<br>为什么需要映射？<br>我们写的是Java程序，但是需要通过浏览器访问，而浏览器需要连接web服务器，所以我们需要在web服务中注册我们写的Servlet，还需要给它一个浏览器能够访问的路径；</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--注册Servlet--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>cn.zafu.servlet.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--Servlet的请求路径--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>配置Tomca<br>注意配置项目发布路径即可。</li><li>启动项目<br>启动后通过请求路径访问程序。<br>— 域名/发布路径/请求路径</li></ol><h3 id="6-3-Servlet原理"><a href="#6-3-Servlet原理" class="headerlink" title="6.3 Servlet原理"></a>6.3 Servlet原理</h3><p>Servlet是由Web服务器调用的，web服务器收到浏览器请求后：<br><img src="/2021/07/07/java-web/2020042916125134.png"></p><h3 id="6-4-Mapping问题"><a href="#6-4-Mapping问题" class="headerlink" title="6.4 Mapping问题"></a>6.4 Mapping问题</h3><ol><li><p>一个Servlet可以指定一个映射路径</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>一个Servlet可以指定多个映射路径</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>一个Servlet可以指定通用映射路径</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/hello/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>默认请求路径</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--默认请求路径--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>指定一些后缀或者前缀等等….</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--可以自定义后缀实现请求映射    注意点，*前面不能加项目映射的路径    hello/sajdlkajda.qinjiang    --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>*.cxd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>优先级问题<br>指定了固有的映射路径优先级最高，如果找不到就会走默认的处理请求；</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--404--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>error<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>cn.zafu.servlet.ErrorServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>error<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="6-5-ServletContext"><a href="#6-5-ServletContext" class="headerlink" title="6.5 ServletContext"></a>6.5 ServletContext</h3><p>一个web容器启动时，会为创建一个对应的ServletContext对象，它代表了当前web应用；</p><h4 id="1、共享数据"><a href="#1、共享数据" class="headerlink" title="1、共享数据"></a>1、共享数据</h4><p>我们在一个Servlet中通过servlerContext对象保存（set）的数据，可以在另一个servlet通过servlerContext对象get到</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class HelloServlet extends HttpServlet &#123;    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        &#x2F;&#x2F;this.getInitParameter();获取初始化参数        &#x2F;&#x2F;this.getServletConfig();获取Servlet配置        &#x2F;&#x2F;this.getServletContext();获取Servlet上下文        ServletContext servletContext &#x3D; this.getServletContext();        String username &#x3D; &quot;旭&quot;;        servletContext.setAttribute(&quot;username&quot;,username);&#x2F;&#x2F;将一个数据保存到了ServletContext中         &#x2F;&#x2F;void setAttribute(String var1, Object var2);    &#125;    &#125;public class GetServlet extends HttpServlet &#123;    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        ServletContext context &#x3D; this.getServletContext();        String username &#x3D; (String)context.getAttribute(&quot;username&quot;);&#x2F;&#x2F;设置响应格式，否则中文默认GBK格式在浏览器上显示会乱码        resp.setContentType(&quot;text&#x2F;html&quot;);        resp.setCharacterEncoding(&quot;utf-8&quot;);                resp.getWriter().print(&quot;名字&quot;+username);    &#125;        @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        doGet(req, resp);    &#125;&#125;&lt;servlet&gt;        &lt;servlet-name&gt;hello&lt;&#x2F;servlet-name&gt;        &lt;servlet-class&gt;cn.zafu.servlet.HelloServlet&lt;&#x2F;servlet-class&gt;    &lt;&#x2F;servlet&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;hello&lt;&#x2F;servlet-name&gt;        &lt;url-pattern&gt;&#x2F;hello&lt;&#x2F;url-pattern&gt;    &lt;&#x2F;servlet-mapping&gt;    &lt;servlet&gt;        &lt;servlet-name&gt;getc&lt;&#x2F;servlet-name&gt;        &lt;servlet-class&gt;cn.zafu.servlet.GetServlet&lt;&#x2F;servlet-class&gt;    &lt;&#x2F;servlet&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;getc&lt;&#x2F;servlet-name&gt;        &lt;url-pattern&gt;&#x2F;getc&lt;&#x2F;url-pattern&gt;    &lt;&#x2F;servlet-mapping&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>*直接请求/getc是拿不到“username”的值的（null），需要先请求一下/hello</p><h4 id="2、获取初始化参数"><a href="#2、获取初始化参数" class="headerlink" title="2、获取初始化参数"></a>2、获取初始化参数</h4><p>web.xml中</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--配置一些web应用初始化参数--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>url<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>jdbc:mysql://localhost:3306/mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;   ServletContext context &#x3D; this.getServletContext();   String url &#x3D; context.getInitParameter(&quot;url&quot;);   resp.getWriter().print(url);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、请求转发"><a href="#3、请求转发" class="headerlink" title="3、请求转发"></a>3、请求转发</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        ServletContext context &#x3D; this.getServletContext();        System.out.println(&quot;进入了sd4&quot;);        RequestDispatcher requestDispatcher &#x3D; context.getRequestDispatcher(&quot;&#x2F;gp&quot;);&#x2F;&#x2F;转发的请求路径        requestDispatcher.forward(req,resp);&#x2F;&#x2F;调用forward实现请求转发        &#x2F;&#x2F;合并写  context.getRequestDispatcher(&quot;&#x2F;gp&quot;).forward(req,resp);    &#125;打开sd4页面，出来的是gp的页面，即转发了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/java-web/20200517144308725.png"></p><h4 id="4、读取资源文件"><a href="#4、读取资源文件" class="headerlink" title="4、读取资源文件"></a>4、读取资源文件</h4><p>Properties</p><ul><li>在java目录下新建properties</li><li>在resources目录下新建properties</li></ul><p>发现：都被打包到了同一个路径下：classes，我们俗称这个路径为classpath:<br><img src="/2021/07/07/java-web/20200517144950788.png"><br>思路：需要一个文件流；</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">username&#x3D;root12312password&#x3D;zxczxczxc12public class ServletDemo05 extends HttpServlet &#123;    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        InputStream is &#x3D; this.getServletContext().getResourceAsStream(&quot;&#x2F;WEB-INF&#x2F;classes&#x2F;com&#x2F;kuang&#x2F;servlet&#x2F;aa.properties&quot;);        Properties prop &#x3D; new Properties();        prop.load(is);        String user &#x3D; prop.getProperty(&quot;username&quot;);        String pwd &#x3D; prop.getProperty(&quot;password&quot;);        resp.getWriter().print(user+&quot;:&quot;+pwd);    &#125;    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        doGet(req, resp);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问测试即可ok；</p><h3 id="6-6、HttpServletResponse"><a href="#6-6、HttpServletResponse" class="headerlink" title="6.6、HttpServletResponse"></a>6.6、HttpServletResponse</h3><p>web服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse；</p><ul><li>如果要获取客户端请求过来的参数：找HttpServletRequest</li><li>如果要给客户端响应一些信息：找HttpServletResponse</li></ul><h4 id="1、简单分类"><a href="#1、简单分类" class="headerlink" title="1、简单分类"></a>1、简单分类</h4><p>负责向浏览器发送数据的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">ServletOutputStream getOutputStream() throws IOException;PrintWriter getWriter() throws IOException;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>负责向浏览器发送响应头的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">void setCharacterEncoding(String var1);void setContentLength(int var1);void setContentLengthLong(long var1);void setContentType(String var1);void setDateHeader(String var1, long var2);void addDateHeader(String var1, long var2);void setHeader(String var1, String var2);void addHeader(String var1, String var2);void setIntHeader(String var1, int var2);void addIntHeader(String var1, int var2);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>响应的状态码常量</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">int SC_CONTINUE &#x3D; 100;int SC_SWITCHING_PROTOCOLS &#x3D; 101;int SC_OK &#x3D; 200;int SC_CREATED &#x3D; 201;int SC_ACCEPTED &#x3D; 202;int SC_NON_AUTHORITATIVE_INFORMATION &#x3D; 203;int SC_NO_CONTENT &#x3D; 204;int SC_RESET_CONTENT &#x3D; 205;int SC_PARTIAL_CONTENT &#x3D; 206;int SC_MULTIPLE_CHOICES &#x3D; 300;int SC_MOVED_PERMANENTLY &#x3D; 301;int SC_MOVED_TEMPORARILY &#x3D; 302;int SC_FOUND &#x3D; 302;int SC_SEE_OTHER &#x3D; 303;int SC_NOT_MODIFIED &#x3D; 304;int SC_USE_PROXY &#x3D; 305;int SC_TEMPORARY_REDIRECT &#x3D; 307;int SC_BAD_REQUEST &#x3D; 400;int SC_UNAUTHORIZED &#x3D; 401;int SC_PAYMENT_REQUIRED &#x3D; 402;int SC_FORBIDDEN &#x3D; 403;int SC_NOT_FOUND &#x3D; 404;int SC_METHOD_NOT_ALLOWED &#x3D; 405;int SC_NOT_ACCEPTABLE &#x3D; 406;int SC_PROXY_AUTHENTICATION_REQUIRED &#x3D; 407;int SC_REQUEST_TIMEOUT &#x3D; 408;int SC_CONFLICT &#x3D; 409;int SC_GONE &#x3D; 410;int SC_LENGTH_REQUIRED &#x3D; 411;int SC_PRECONDITION_FAILED &#x3D; 412;int SC_REQUEST_ENTITY_TOO_LARGE &#x3D; 413;int SC_REQUEST_URI_TOO_LONG &#x3D; 414;int SC_UNSUPPORTED_MEDIA_TYPE &#x3D; 415;int SC_REQUESTED_RANGE_NOT_SATISFIABLE &#x3D; 416;int SC_EXPECTATION_FAILED &#x3D; 417;int SC_INTERNAL_SERVER_ERROR &#x3D; 500;int SC_NOT_IMPLEMENTED &#x3D; 501;int SC_BAD_GATEWAY &#x3D; 502;int SC_SERVICE_UNAVAILABLE &#x3D; 503;int SC_GATEWAY_TIMEOUT &#x3D; 504;int SC_HTTP_VERSION_NOT_SUPPORTED &#x3D; 505;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、下载文件"><a href="#2、下载文件" class="headerlink" title="2、下载文件"></a>2、下载文件</h4><ol><li>向浏览器输出消息 （一直在讲，就不说了）</li><li>下载文件<ol><li>要获取下载文件的路径</li><li>下载的文件名是啥？</li><li>设置想办法让浏览器能够支持下载我们需要的东西</li><li>获取下载文件的输入流</li><li>创建缓冲区</li><li>获取OutputStream对象</li><li>将FileOutputStream流写入到buffer缓冲区</li><li>使用OutputStream将缓冲区中的数据输出到客户端！</li></ol></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Overrideprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;    &#x2F;&#x2F; 1. 要获取下载文件的路径    String realPath &#x3D; &quot;F:\\班级管理\\西开【19525】\\2、代码\\JavaWeb\\javaweb-02-servlet\\response\\target\\classes\\秦疆.png&quot;;    System.out.println(&quot;下载文件的路径：&quot;+realPath);    &#x2F;&#x2F; 2. 下载的文件名是啥？    String fileName &#x3D; realPath.substring(realPath.lastIndexOf(&quot;\\&quot;) + 1);    &#x2F;&#x2F; 3. 设置想办法让浏览器能够支持(Content-Disposition)下载我们需要的东西,中文文件名URLEncoder.encode编码，否则有可能乱码    resp.setHeader(&quot;Content-Disposition&quot;,&quot;attachment;filename&#x3D;&quot;+URLEncoder.encode(fileName,&quot;UTF-8&quot;));    &#x2F;&#x2F; 4. 获取下载文件的输入流    FileInputStream in &#x3D; new FileInputStream(realPath);    &#x2F;&#x2F; 5. 创建缓冲区    int len &#x3D; 0;    byte[] buffer &#x3D; new byte[1024];    &#x2F;&#x2F; 6. 获取OutputStream对象    ServletOutputStream out &#x3D; resp.getOutputStream();    &#x2F;&#x2F; 7. 将FileOutputStream流写入到buffer缓冲区,使用OutputStream将缓冲区中的数据输出到客户端！    while ((len&#x3D;in.read(buffer))&gt;0)&#123;        out.write(buffer,0,len);    &#125;    in.close();    out.close();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/java-web/1606823809856.png"></p><h4 id="3、验证码功能"><a href="#3、验证码功能" class="headerlink" title="3、验证码功能"></a>3、验证码功能</h4><p>验证怎么来的？</p><ul><li>前端实现</li><li>后端实现，需要用到 Java 的图片类，生产一个图片</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.kuang.servlet;import javax.imageio.ImageIO;import javax.servlet.ServletException;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.awt.*;import java.awt.image.BufferedImage;import java.io.IOException;import java.util.Random;public class ImageServlet extends HttpServlet &#123;    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        &#x2F;&#x2F;如何让浏览器3秒自动刷新一次;        resp.setHeader(&quot;refresh&quot;,&quot;3&quot;);                &#x2F;&#x2F;在内存中创建一个图片        BufferedImage image &#x3D; new BufferedImage(80,20,BufferedImage.TYPE_INT_RGB);        &#x2F;&#x2F;得到图片        Graphics2D g &#x3D; (Graphics2D) image.getGraphics(); &#x2F;&#x2F;笔        &#x2F;&#x2F;设置图片的背景颜色        g.setColor(Color.white);        g.fillRect(0,0,80,20);        &#x2F;&#x2F;给图片写数据        g.setColor(Color.BLUE);        g.setFont(new Font(null,Font.BOLD,20));        g.drawString(makeNum(),0,20);        &#x2F;&#x2F;告诉浏览器，这个请求用图片的方式打开        resp.setContentType(&quot;image&#x2F;jpeg&quot;);        &#x2F;&#x2F;网站存在缓存，不让浏览器缓存        resp.setDateHeader(&quot;expires&quot;,-1);        resp.setHeader(&quot;Cache-Control&quot;,&quot;no-cache&quot;);        resp.setHeader(&quot;Pragma&quot;,&quot;no-cache&quot;);        &#x2F;&#x2F;把图片写给浏览器        ImageIO.write(image,&quot;jpg&quot;, resp.getOutputStream());    &#125;    &#x2F;&#x2F;生成随机数    private String makeNum()&#123;        Random random &#x3D; new Random();        String num &#x3D; random.nextInt(9999999) + &quot;&quot;;        StringBuffer sb &#x3D; new StringBuffer();        for (int i &#x3D; 0; i &lt; 7-num.length() ; i++) &#123;            sb.append(&quot;0&quot;);        &#125;        num &#x3D; sb.toString() + num;        return num;    &#125;    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        doGet(req, resp);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、实现重定向"><a href="#4、实现重定向" class="headerlink" title="4、实现重定向"></a>4、实现重定向</h4><p><img src="https://img-blog.csdnimg.cn/20200517173048836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjM5MDQzMw==,size_16,color_FFFFFF,t_70"></p><p>B一个web资源收到客户端A请求后，B他会通知A客户端去访问另外一个web资源C，这个过程叫重定向</p><p>常见场景：</p><ul><li>用户登录</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">void sendRedirect(String var1) throws IOException;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Overrideprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;    &#x2F;*        resp.setHeader(&quot;Location&quot;,&quot;&#x2F;r&#x2F;img&quot;);        resp.setStatus(302);         *&#x2F;    resp.sendRedirect(&quot;&#x2F;r&#x2F;img&quot;);&#x2F;&#x2F;重定向&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>面试题：请你聊聊重定向和转发的区别？</p><p>相同点</p><ul><li>页面都会实现跳转</li></ul><p>不同点</p><ul><li>请求转发的时候，url不会产生变化</li><li>重定向时候，url地址栏会发生变化；</li></ul><p><img src="https://img-blog.csdnimg.cn/20200517173027847.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjM5MDQzMw==,size_16,color_FFFFFF,t_70"></p><h4 id="5、简单实现登录重定向"><a href="#5、简单实现登录重定向" class="headerlink" title="5、简单实现登录重定向"></a>5、简单实现登录重定向</h4><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%--这里提交的路径，需要寻找到项目的路径--%&gt;&lt;%--$&#123;pageContext.request.contextPath&#125;代表当前的项目--%&gt;&lt;form action&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;login&quot; method&#x3D;&quot;get&quot;&gt;    用户名：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot;&gt; &lt;br&gt;    密码：&lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot;&gt; &lt;br&gt;    &lt;input type&#x3D;&quot;submit&quot;&gt;&lt;&#x2F;form&gt;    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        &#x2F;&#x2F;处理请求        String username &#x3D; req.getParameter(&quot;username&quot;);        String password &#x3D; req.getParameter(&quot;password&quot;);        System.out.println(username+&quot;:&quot;+password);        &#x2F;&#x2F;重定向时候一定要注意，路径问题，否则404；        resp.sendRedirect(&quot;&#x2F;r&#x2F;success.jsp&quot;);    &#125;  &lt;servlet&gt;    &lt;servlet-name&gt;requset&lt;&#x2F;servlet-name&gt;    &lt;servlet-class&gt;com.kuang.servlet.RequestTest&lt;&#x2F;servlet-class&gt;  &lt;&#x2F;servlet&gt;  &lt;servlet-mapping&gt;    &lt;servlet-name&gt;requset&lt;&#x2F;servlet-name&gt;    &lt;url-pattern&gt;&#x2F;login&lt;&#x2F;url-pattern&gt;  &lt;&#x2F;servlet-mapping&gt;&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;h1&gt;Success&lt;&#x2F;h1&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-7、HttpServletRequest"><a href="#6-7、HttpServletRequest" class="headerlink" title="6.7、HttpServletRequest"></a>6.7、HttpServletRequest</h3><p>HttpServletRequest代表客户端的请求，用户通过Http协议访问服务器，HTTP请求中的所有信息会被封装到HttpServletRequest，通过这个HttpServletRequest的方法，获得客户端的所有信息；</p><p><img src="https://img-blog.csdnimg.cn/20200517173128566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjM5MDQzMw==,size_16,color_FFFFFF,t_70"></p><p><img src="/2021/07/07/java-web/20200517173143988.png"></p><h4 id="获取参数，请求转发"><a href="#获取参数，请求转发" class="headerlink" title="获取参数，请求转发"></a>获取参数，请求转发</h4><p><img src="https://img-blog.csdnimg.cn/20200517173205122.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Overrideprotected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;    req.setCharacterEncoding(&quot;utf-8&quot;);    resp.setCharacterEncoding(&quot;utf-8&quot;);    String username &#x3D; req.getParameter(&quot;username&quot;);    String password &#x3D; req.getParameter(&quot;password&quot;);    String[] hobbys &#x3D; req.getParameterValues(&quot;hobbys&quot;);    System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);    &#x2F;&#x2F;后台接收中文乱码问题    System.out.println(username);    System.out.println(password);    System.out.println(Arrays.toString(hobbys));    System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);    System.out.println(req.getContextPath());    &#x2F;&#x2F;通过请求转发    &#x2F;&#x2F;这里的 &#x2F; 代表当前的web应用    req.getRequestDispatcher(&quot;&#x2F;success.jsp&quot;).forward(req,resp);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>面试题：请你聊聊重定向和转发的区别？</strong></p><p>相同点</p><ul><li>页面都会实现跳转</li></ul><p>不同点</p><ul><li>请求转发的时候，url不会产生变化 307</li><li>重定向时候，url地址栏会发生变化； 302</li></ul><h2 id="7、Cookie、Session"><a href="#7、Cookie、Session" class="headerlink" title="7、Cookie、Session"></a>7、Cookie、Session</h2><h3 id="7-1、会话"><a href="#7-1、会话" class="headerlink" title="7.1、会话"></a>7.1、会话</h3><p><strong>会话</strong>：用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程可以称之为会话；</p><p><strong>有状态会话</strong>：一个同学来过教室，下次再来教室，我们会知道这个同学，曾经来过，称之为有状态会话；</p><p><strong>你能怎么证明你是西开的学生？</strong></p><p>你 西开</p><ol><li>发票 西开给你发票</li><li>学校登记 西开标记你来过了</li></ol><p><strong>一个网站，怎么证明你来过？</strong></p><p>客户端 服务端</p><ol><li>服务端给客户端一个 信件，客户端下次访问服务端带上信件就可以了； cookie</li><li>服务器登记你来过了，下次你来的时候我来匹配你； seesion</li></ol><h3 id="7-2、保存会话的两种技术"><a href="#7-2、保存会话的两种技术" class="headerlink" title="7.2、保存会话的两种技术"></a>7.2、保存会话的两种技术</h3><p><strong>cookie</strong></p><ul><li>客户端技术 （响应，请求）</li></ul><p><strong>session</strong></p><ul><li>服务器技术，利用这个技术，可以保存用户的会话信息？ 我们可以把信息或者数据放在Session中！</li></ul><p>常见常见：网站登录之后，你下次不用再登录了，第二次访问直接就上去了！</p><h3 id="7-3、Cookie"><a href="#7-3、Cookie" class="headerlink" title="7.3、Cookie"></a>7.3、Cookie</h3><p><img src="/2021/07/07/java-web/20200506182559338.png"></p><ol><li>从请求中拿到cookie信息</li><li>服务器响应给客户端cookie</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">Cookie[] cookies &#x3D; req.getCookies(); &#x2F;&#x2F;获得Cookiecookie.getName(); &#x2F;&#x2F;获得cookie中的keycookie.getValue(); &#x2F;&#x2F;获得cookie中的vlauenew Cookie(&quot;lastLoginTime&quot;, System.currentTimeMillis()+&quot;&quot;); &#x2F;&#x2F;新建一个cookiecookie.setMaxAge(24*60*60); &#x2F;&#x2F;设置cookie的有效期resp.addCookie(cookie); &#x2F;&#x2F;响应给客户端一个cookie<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>cookie：一般会保存在本地的 用户目录下 appdata；</strong></p><p>一个网站cookie是否存在上限！<strong>聊聊细节问题</strong></p><ul><li>一个Cookie只能保存一个信息；</li><li>一个web站点可以给浏览器发送多个cookie，最多存放20个cookie；</li><li>Cookie大小有限制4kb；</li><li>300个cookie浏览器上限</li></ul><p><strong>删除Cookie；</strong></p><ul><li>不设置有效期，关闭浏览器，自动失效；</li><li>设置有效期时间为 0 ；</li></ul><p><strong>编码解码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">URLEncoder.encode(&quot;秦疆&quot;,&quot;utf-8&quot;)URLDecoder.decode(cookie.getValue(),&quot;UTF-8&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-4、Session（重点）"><a href="#7-4、Session（重点）" class="headerlink" title="7.4、Session（重点）"></a>7.4、Session（重点）</h3><p><img src="/2021/07/07/java-web/2020050618262991.png"><br>什么是Session：</p><ul><li>服务器会给每一个用户（浏览器）创建一个Seesion对象；</li><li>一个Seesion独占一个浏览器，只要浏览器没有关闭，这个Session就存在；</li><li>用户登录之后，整个网站它都可以访问！–&gt; 保存用户的信息；保存购物车的信息……</li></ul><p>…<br>…<br>…</p><p>Session和cookie的区别：</p><ul><li>Cookie是把用户的数据写给用户的浏览器，浏览器保存 （可以保存多个）</li><li>Session把用户的数据写到用户独占Session中，服务器端保存 （保存重要的信息，减少服务器资源的浪费）</li><li>Session对象由服务创建；</li></ul><p>使用场景：</p><ul><li>保存一个登录用户的信息；</li><li>购物车信息；</li><li>在整个网站中经常会使用的数据，我们将它保存在Session中；</li></ul><p>使用Session：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.kuang.servlet;import com.kuang.pojo.Person;import javax.servlet.ServletException;import javax.servlet.http.*;import java.io.IOException;public class SessionDemo01 extends HttpServlet &#123;    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;                &#x2F;&#x2F;解决乱码问题        req.setCharacterEncoding(&quot;UTF-8&quot;);        resp.setCharacterEncoding(&quot;UTF-8&quot;);        resp.setContentType(&quot;text&#x2F;html;charset&#x3D;utf-8&quot;);                &#x2F;&#x2F;得到Session        HttpSession session &#x3D; req.getSession();        &#x2F;&#x2F;给Session中存东西        session.setAttribute(&quot;name&quot;,new Person(&quot;秦疆&quot;,1));        &#x2F;&#x2F;获取Session的ID        String sessionId &#x3D; session.getId();        &#x2F;&#x2F;判断Session是不是新创建        if (session.isNew())&#123;            resp.getWriter().write(&quot;session创建成功,ID:&quot;+sessionId);        &#125;else &#123;            resp.getWriter().write(&quot;session以及在服务器中存在了,ID:&quot;+sessionId);        &#125;        &#x2F;&#x2F;Session创建的时候做了什么事情；&#x2F;&#x2F;        Cookie cookie &#x3D; new Cookie(&quot;JSESSIONID&quot;,sessionId);&#x2F;&#x2F;        resp.addCookie(cookie);    &#125;    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        doGet(req, resp);    &#125;&#125;&#x2F;&#x2F;得到SessionHttpSession session &#x3D; req.getSession();Person person &#x3D; (Person) session.getAttribute(&quot;name&quot;);System.out.println(person.toString());HttpSession session &#x3D; req.getSession();session.removeAttribute(&quot;name&quot;);&#x2F;&#x2F;手动注销Sessionsession.invalidate();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>会话自动过期：web.xml配置</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--设置Session默认的失效时间--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-config</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--15分钟后Session自动失效，以分钟为单位--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-timeout</span><span class="token punctuation">></span></span>15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-timeout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/java-web/2020050618301064.png"></p><h2 id="8、JSP"><a href="#8、JSP" class="headerlink" title="8、JSP"></a>8、JSP</h2><h3 id="8-1、什么是JSP"><a href="#8-1、什么是JSP" class="headerlink" title="8.1、什么是JSP"></a>8.1、什么是JSP</h3><p>Java Server Pages ： Java服务器端页面，也和Servlet一样，用于动态Web技术！</p><p>最大的特点：</p><ul><li>写JSP就像在写HTML</li><li>区别：<ul><li>HTML只给用户提供静态的数据</li><li>JSP页面中可以嵌入JAVA代码，为用户提供动态数据；</li></ul></li></ul><h3 id="8-2、JSP原理"><a href="#8-2、JSP原理" class="headerlink" title="8.2、JSP原理"></a>8.2、JSP原理</h3><p>思路：JSP到底怎么执行的！</p><ul><li><p>代码层面没有任何问题</p></li><li><p>服务器内部工作</p><p>tomcat中有一个work目录；</p><p>IDEA中使用Tomcat的会在IDEA的tomcat中生产一个work目录</p><p><img src="/2021/07/07/java-web/20200506184154282.png"></p><p>我电脑的地址：</p><p><strong>C:\Users\Administrator.IntelliJIdea2018.1\system\tomcat\Unnamed_javaweb-session-cookie\work\Catalina\localhost\ROOT\org\apache\jsp</strong></p><p>发现页面转变成了Java程序！<br><img src="/2021/07/07/java-web/20200506184204931.png" alt="在这里插入图片描述"></p></li></ul><p><strong>浏览器向服务器发送请求，不管访问什么资源，其实都是在访问Servlet！</strong></p><p>JSP最终也会被转换成为一个Java类！</p><p><strong>JSP 本质上就是一个Servlet</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;初始化  public void _jspInit() &#123;        &#125;&#x2F;&#x2F;销毁  public void _jspDestroy() &#123;  &#125;&#x2F;&#x2F;JSPService  public void _jspService(.HttpServletRequest request,HttpServletResponse response)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>判断请求</p></li><li><p>内置一些对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">final javax.servlet.jsp.PageContext pageContext;  &#x2F;&#x2F;页面上下文javax.servlet.http.HttpSession session &#x3D; null;    &#x2F;&#x2F;sessionfinal javax.servlet.ServletContext application;   &#x2F;&#x2F;applicationContextfinal javax.servlet.ServletConfig config;         &#x2F;&#x2F;configjavax.servlet.jsp.JspWriter out &#x3D; null;           &#x2F;&#x2F;outfinal java.lang.Object page &#x3D; this;               &#x2F;&#x2F;page：当前HttpServletRequest request                        &#x2F;&#x2F;请求HttpServletResponse response                      &#x2F;&#x2F;响应<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>输出页面前增加的代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">response.setContentType(&quot;text&#x2F;html&quot;);       &#x2F;&#x2F;设置响应的页面类型pageContext &#x3D; _jspxFactory.getPageContext(this, request, response,       null, true, 8192, true);_jspx_page_context &#x3D; pageContext;application &#x3D; pageContext.getServletContext();config &#x3D; pageContext.getServletConfig();session &#x3D; pageContext.getSession();out &#x3D; pageContext.getOut();_jspx_out &#x3D; out;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以上的这些个对象我们可以在JSP页面中直接使用！</p></li></ol><p><img src="/2021/07/07/java-web/20200506183804973.png"></p><p>在JSP页面中；</p><p>只要是 JAVA代码就会原封不动的输出；</p><p>如果是HTML代码，就会被转换为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">out.write(&quot;&lt;html&gt;\r\n&quot;);1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样的格式，输出到前端！</p><h3 id="8-3、JSP基础语法"><a href="#8-3、JSP基础语法" class="headerlink" title="8.3、JSP基础语法"></a>8.3、JSP基础语法</h3><p>任何语言都有自己的语法，JAVA中有,。 JSP 作为java技术的一种应用，它拥有一些自己扩充的语法（了解，知道即可！），Java所有语法都支持！</p><h4 id="JSP表达式"><a href="#JSP表达式" class="headerlink" title="JSP表达式"></a>JSP表达式</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;%--JSP表达式作用：用来将程序的输出，输出到客户端&lt;%&#x3D; 变量或者表达式%&gt;--%&gt;&lt;%&#x3D; new java.util.Date()%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="jsp脚本片段"><a href="#jsp脚本片段" class="headerlink" title="jsp脚本片段"></a>jsp脚本片段</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;%--jsp脚本片段--%&gt;&lt;%  int sum &#x3D; 0;  for (int i &#x3D; 1; i &lt;&#x3D;100 ; i++) &#123;    sum+&#x3D;i;  &#125;  out.println(&quot;&lt;h1&gt;Sum&#x3D;&quot;+sum+&quot;&lt;&#x2F;h1&gt;&quot;);%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>脚本片段的再实现</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;%  int x &#x3D; 10;  out.println(x);%&gt;&lt;p&gt;这是一个JSP文档&lt;&#x2F;p&gt;&lt;%  int y &#x3D; 2;  out.println(y);%&gt;&lt;hr&gt;&lt;%--在代码嵌入HTML元素--%&gt;&lt;%  for (int i &#x3D; 0; i &lt; 5; i++) &#123;%&gt;  &lt;h1&gt;Hello,World  &lt;%&#x3D;i%&gt; &lt;&#x2F;h1&gt;&lt;%  &#125;%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JSP声明"><a href="#JSP声明" class="headerlink" title="JSP声明"></a>JSP声明</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;%!  static &#123;    System.out.println(&quot;Loading Servlet!&quot;);  &#125;  private int globalVar &#x3D; 0;  public void kuang()&#123;    System.out.println(&quot;进入了方法Kuang！&quot;);  &#125;%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JSP声明：会被编译到JSP生成Java的类中！其他的，就会被生成到_jspService方法中！</p><p>在JSP，嵌入Java代码即可！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;% %&gt;  片段&lt;%&#x3D;%&gt;  表达式输出一个值&lt;%!%&gt;  全局方法&lt;%--注释--%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JSP的注释，不会在客户端显示，HTML就会！</p><h3 id="8-4、JSP指令"><a href="#8-4、JSP指令" class="headerlink" title="8.4、JSP指令"></a>8.4、JSP指令</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;%@page args.... %&gt;&lt;%@include file&#x3D;&quot;&quot;%&gt;&lt;%--@include会将两个页面合二为一--%&gt;&lt;%@include file&#x3D;&quot;common&#x2F;header.jsp&quot;%&gt;&lt;h1&gt;网页主体&lt;&#x2F;h1&gt;&lt;%@include file&#x3D;&quot;common&#x2F;footer.jsp&quot;%&gt;&lt;hr&gt;&lt;%--jSP标签    jsp:include：拼接页面，本质还是三个    --%&gt;&lt;jsp:include page&#x3D;&quot;&#x2F;common&#x2F;header.jsp&quot;&#x2F;&gt;&lt;h1&gt;网页主体&lt;&#x2F;h1&gt;&lt;jsp:include page&#x3D;&quot;&#x2F;common&#x2F;footer.jsp&quot;&#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-5、9大内置对象"><a href="#8-5、9大内置对象" class="headerlink" title="8.5、9大内置对象"></a>8.5、9大内置对象</h3><ul><li>PageContext 存东西</li><li>Request 存东西</li><li>Response</li><li>Session 存东西</li><li>Application 【SerlvetContext】 存东西</li><li>config 【SerlvetConfig】</li><li>out</li><li>page ，不用了解</li><li>exception</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">pageContext.setAttribute(&quot;name1&quot;,&quot;秦疆1号&quot;); &#x2F;&#x2F;保存的数据只在一个页面中有效request.setAttribute(&quot;name2&quot;,&quot;秦疆2号&quot;); &#x2F;&#x2F;保存的数据只在一次请求中有效，请求转发会携带这个数据session.setAttribute(&quot;name3&quot;,&quot;秦疆3号&quot;); &#x2F;&#x2F;保存的数据只在一次会话中有效，从打开浏览器到关闭浏览器application.setAttribute(&quot;name4&quot;,&quot;秦疆4号&quot;);  &#x2F;&#x2F;保存的数据只在服务器中有效，从打开服务器到关闭服务器1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/java-web/20200507213158259.png" alt="在这里插入图片描述"></p><p>request：客户端向服务器发送请求，产生的数据，用户看完就没用了，比如：新闻，用户看完没用的！</p><p>session：客户端向服务器发送请求，产生的数据，用户用完一会还有用，比如：购物车；</p><p>application：客户端向服务器发送请求，产生的数据，一个用户用完了，其他用户还可能使用，比如：聊天数据；</p><h3 id="8-6、JSP标签、JSTL标签、EL表达式"><a href="#8-6、JSP标签、JSTL标签、EL表达式" class="headerlink" title="8.6、JSP标签、JSTL标签、EL表达式"></a>8.6、JSP标签、JSTL标签、EL表达式</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- JSTL表达式的依赖 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp.jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- standard标签库 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>taglibs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>standard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>EL表达式： ${ }</p><ul><li><strong>获取数据</strong></li><li><strong>执行运算</strong></li><li><strong>获取web开发的常用对象</strong></li></ul><p><strong>JSP标签</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;%--jsp:include--%&gt;&lt;%--http:&#x2F;&#x2F;localhost:8080&#x2F;jsptag.jsp?name&#x3D;kuangshen&amp;age&#x3D;12--%&gt;&lt;jsp:forward page&#x3D;&quot;&#x2F;jsptag2.jsp&quot;&gt;    &lt;jsp:param name&#x3D;&quot;name&quot; value&#x3D;&quot;kuangshen&quot;&gt;&lt;&#x2F;jsp:param&gt;    &lt;jsp:param name&#x3D;&quot;age&quot; value&#x3D;&quot;12&quot;&gt;&lt;&#x2F;jsp:param&gt;&lt;&#x2F;jsp:forward&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>JSTL表达式</strong></p><p>JSTL标签库的使用就是为了弥补HTML标签的不足；它自定义许多标签，可以供我们使用，标签的功能和Java代码一样！</p><p><strong>格式化标签</strong></p><p><strong>SQL标签</strong></p><p><strong>XML 标签</strong></p><p><strong>核心标签</strong> （掌握部分）</p><p><img src="/2021/07/07/java-web/20200508152235704.png"></p><p><strong>JSTL标签库使用步骤</strong></p><ul><li>引入对应的 taglib</li><li>使用其中的方法</li><li><strong>在Tomcat 也需要引入 jstl的包，否则会报错：JSTL解析错误</strong></li></ul><p><strong>c：if</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;head&gt;    &lt;title&gt;Title&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;h4&gt;if测试&lt;&#x2F;h4&gt;&lt;hr&gt;&lt;form action&#x3D;&quot;coreif.jsp&quot; method&#x3D;&quot;get&quot;&gt;    &lt;%--    EL表达式获取表单中的数据    $&#123;param.参数名&#125;    --%&gt;    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;param.username&#125;&quot;&gt;    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;登录&quot;&gt;&lt;&#x2F;form&gt;&lt;%--判断如果提交的用户名是管理员，则登录成功--%&gt;&lt;c:if test&#x3D;&quot;$&#123;param.username&#x3D;&#x3D;&#39;admin&#39;&#125;&quot; var&#x3D;&quot;isAdmin&quot;&gt;    &lt;c:out value&#x3D;&quot;管理员欢迎您！&quot;&#x2F;&gt;&lt;&#x2F;c:if&gt;&lt;%--自闭合标签--%&gt;&lt;c:out value&#x3D;&quot;$&#123;isAdmin&#125;&quot;&#x2F;&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>c:choose c:when</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;body&gt;&lt;%--定义一个变量score，值为85--%&gt;&lt;c:set var&#x3D;&quot;score&quot; value&#x3D;&quot;55&quot;&#x2F;&gt;&lt;c:choose&gt;    &lt;c:when test&#x3D;&quot;$&#123;score&gt;&#x3D;90&#125;&quot;&gt;        你的成绩为优秀    &lt;&#x2F;c:when&gt;    &lt;c:when test&#x3D;&quot;$&#123;score&gt;&#x3D;80&#125;&quot;&gt;        你的成绩为一般    &lt;&#x2F;c:when&gt;    &lt;c:when test&#x3D;&quot;$&#123;score&gt;&#x3D;70&#125;&quot;&gt;        你的成绩为良好    &lt;&#x2F;c:when&gt;    &lt;c:when test&#x3D;&quot;$&#123;score&lt;&#x3D;60&#125;&quot;&gt;        你的成绩为不及格    &lt;&#x2F;c:when&gt;&lt;&#x2F;c:choose&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>c:forEach</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;%    ArrayList&lt;String&gt; people &#x3D; new ArrayList&lt;&gt;();    people.add(0,&quot;张三&quot;);    people.add(1,&quot;李四&quot;);    people.add(2,&quot;王五&quot;);    people.add(3,&quot;赵六&quot;);    people.add(4,&quot;田六&quot;);    request.setAttribute(&quot;list&quot;,people);%&gt;&lt;%--var , 每一次遍历出来的变量items, 要遍历的对象begin,   哪里开始end,     到哪里step,   步长--%&gt;&lt;c:forEach var&#x3D;&quot;people&quot; items&#x3D;&quot;$&#123;list&#125;&quot;&gt;    &lt;c:out value&#x3D;&quot;$&#123;people&#125;&quot;&#x2F;&gt; &lt;br&gt;&lt;&#x2F;c:forEach&gt;&lt;hr&gt;&lt;c:forEach var&#x3D;&quot;people&quot; items&#x3D;&quot;$&#123;list&#125;&quot; begin&#x3D;&quot;1&quot; end&#x3D;&quot;3&quot; step&#x3D;&quot;1&quot; &gt;    &lt;c:out value&#x3D;&quot;$&#123;people&#125;&quot;&#x2F;&gt; &lt;br&gt;&lt;&#x2F;c:forEach&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9、JavaBean"><a href="#9、JavaBean" class="headerlink" title="9、JavaBean"></a>9、JavaBean</h2><p>实体类</p><p>JavaBean有特定的写法：</p><ul><li>必须要有一个无参构造</li><li>属性必须私有化</li><li>必须有对应的get/set方法；</li></ul><p>一般用来和数据库的字段做映射 ORM；</p><p>ORM ：对象关系映射</p><ul><li>表—&gt;类</li><li>字段–&gt;属性</li><li>行记录—-&gt;对象</li></ul><p><strong>people表</strong></p><table><thead><tr><th>id</th><th>name</th><th>age</th><th>address</th></tr></thead><tbody><tr><td>1</td><td>秦疆1号</td><td>3</td><td>西安</td></tr><tr><td>2</td><td>秦疆2号</td><td>18</td><td>西安</td></tr><tr><td>3</td><td>秦疆3号</td><td>100</td><td>西安</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java">class People&#123;    private int id;    private String name;    private int id;    private String address;&#125;class A&#123;    new People(1,&quot;秦疆1号&quot;,3，&quot;西安&quot;);    new People(2,&quot;秦疆2号&quot;,3，&quot;西安&quot;);    new People(3,&quot;秦疆3号&quot;,3，&quot;西安&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>过滤器</li><li>文件上传</li><li>邮件发送</li><li>JDBC 复习 ： 如何使用JDBC , JDBC crud， jdbc 事务</li></ul><h2 id="10、MVC三层架构"><a href="#10、MVC三层架构" class="headerlink" title="10、MVC三层架构"></a>10、MVC三层架构</h2><ul><li>什么是MVC： Model view Controller 模型、视图、控制器</li></ul><h3 id="10-1、以前的架构"><a href="#10-1、以前的架构" class="headerlink" title="10.1、以前的架构"></a>10.1、以前的架构</h3><p><img src="https://img-blog.csdnimg.cn/20200508154442187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlbGxfbG92ZQ==,size_16,color_FFFFFF,t_70"></p><p>用户直接访问控制层，控制层就可以直接操作数据库；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">servlet--CRUD--&gt;数据库弊端：程序十分臃肿，不利于维护  servlet的代码中：处理请求、响应、视图跳转、处理JDBC、处理业务代码、处理逻辑代码架构：没有什么是加一层解决不了的！程序猿调用↑JDBC （实现该接口）↑Mysql Oracle SqlServer ....（不同厂商）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-2、MVC三层架构"><a href="#10-2、MVC三层架构" class="headerlink" title="10.2、MVC三层架构"></a>10.2、MVC三层架构</h3><p><img src="https://img-blog.csdnimg.cn/20200508154512751.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlbGxfbG92ZQ==,size_16,color_FFFFFF,t_70"></p><p>Model</p><ul><li>业务处理 ：业务逻辑（Service）</li><li>数据持久层：CRUD （Dao - 数据持久化对象）</li></ul><p>View</p><ul><li>展示数据</li><li>提供链接发起Servlet请求 （a，form，img…）</li></ul><p>Controller （Servlet）</p><ul><li><p>接收用户的请求 ：（req：请求参数、Session信息….）</p></li><li><p>交给业务层处理对应的代码</p></li><li><p>控制视图的跳转</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">登录---&gt;接收用户的登录请求---&gt;处理用户的请求（获取用户登录的参数，username，password）----&gt;交给业务层处理登录业务（判断用户名密码是否正确：事务）---&gt;Dao层查询用户名和密码是否正确--&gt;数据库1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="11、Filter-（重点）"><a href="#11、Filter-（重点）" class="headerlink" title="11、Filter （重点）"></a>11、Filter （重点）</h2><p>比如 Shiro安全框架技术就是用Filter来实现的</p><p>Filter：过滤器 ，用来过滤网站的数据；</p><ul><li>处理中文乱码</li><li>登录验证….</li></ul><p>（比如用来过滤网上骂人的话，我***我自己 0-0）</p><p><img src="https://img-blog.csdnimg.cn/20200508154536177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlbGxfbG92ZQ==,size_16,color_FFFFFF,t_70"><br>Filter开发步骤：</p><ol><li>导包</li><li>编写过滤器<ol><li>导包不要错 <strong>（注意）</strong></li></ol></li></ol><p><img src="https://img-blog.csdnimg.cn/20200508154555952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlbGxfbG92ZQ==,size_16,color_FFFFFF,t_70"></p><p>实现Filter接口，重写对应的方法即可</p><pre class="line-numbers language-none"><code class="language-none">&#96;&#96;&#96;javapublic class CharacterEncodingFilter implements Filter &#123;    &#x2F;&#x2F;初始化：web服务器启动，就以及初始化了，随时等待过滤对象出现！    public void init(FilterConfig filterConfig) throws ServletException &#123;        System.out.println(&quot;CharacterEncodingFilter初始化&quot;);    &#125;    &#x2F;&#x2F;Chain : 链    &#x2F;*    1. 过滤中的所有代码，在过滤特定请求的时候都会执行    2. 必须要让过滤器继续同行        chain.doFilter(request,response);     *&#x2F;    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;        request.setCharacterEncoding(&quot;utf-8&quot;);        response.setCharacterEncoding(&quot;utf-8&quot;);        response.setContentType(&quot;text&#x2F;html;charset&#x3D;UTF-8&quot;);        System.out.println(&quot;CharacterEncodingFilter执行前....&quot;);        chain.doFilter(request,response); &#x2F;&#x2F;让我们的请求继续走，如果不写，程序到这里就被拦截停止！        System.out.println(&quot;CharacterEncodingFilter执行后....&quot;);    &#125;    &#x2F;&#x2F;销毁：web服务器关闭的时候，过滤器会销毁    public void destroy() &#123;        System.out.println(&quot;CharacterEncodingFilter销毁&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">1. 在web.xml中配置 Filter   &#96;&#96;&#96;xml   &lt;filter&gt;       &lt;filter-name&gt;CharacterEncodingFilter&lt;&#x2F;filter-name&gt;       &lt;filter-class&gt;com.kuang.filter.CharacterEncodingFilter&lt;&#x2F;filter-class&gt;   &lt;&#x2F;filter&gt;   &lt;filter-mapping&gt;       &lt;filter-name&gt;CharacterEncodingFilter&lt;&#x2F;filter-name&gt;       &lt;!--只要是 &#x2F;servlet的任何请求，会经过这个过滤器--&gt;       &lt;url-pattern&gt;&#x2F;servlet&#x2F;*&lt;&#x2F;url-pattern&gt;       &lt;!--&lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;--&gt;       &lt;!-- 别偷懒写个 &#x2F;* --&gt;   &lt;&#x2F;filter-mapping&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12、监听器"><a href="#12、监听器" class="headerlink" title="12、监听器"></a>12、监听器</h2><p>实现一个监听器的接口；（有n种监听器）</p><ol><li><p>编写一个监听器</p><p>实现监听器的接口…</p><p>依赖的jar包<img src="/2021/07/07/java-web/2020050820562995.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;统计网站在线人数 ： 统计sessionpublic class OnlineCountListener implements HttpSessionListener &#123;    &#x2F;&#x2F;创建session监听： 看你的一举一动    &#x2F;&#x2F;一旦创建Session就会触发一次这个事件！    public void sessionCreated(HttpSessionEvent se) &#123;        ServletContext ctx &#x3D; se.getSession().getServletContext();        System.out.println(se.getSession().getId());        Integer onlineCount &#x3D; (Integer) ctx.getAttribute(&quot;OnlineCount&quot;);        if (onlineCount&#x3D;&#x3D;null)&#123;            onlineCount &#x3D; new Integer(1);        &#125;else &#123;            int count &#x3D; onlineCount.intValue();            onlineCount &#x3D; new Integer(count+1);        &#125;        ctx.setAttribute(&quot;OnlineCount&quot;,onlineCount);    &#125;    &#x2F;&#x2F;销毁session监听    &#x2F;&#x2F;一旦销毁Session就会触发一次这个事件！    public void sessionDestroyed(HttpSessionEvent se) &#123;        ServletContext ctx &#x3D; se.getSession().getServletContext();        Integer onlineCount &#x3D; (Integer) ctx.getAttribute(&quot;OnlineCount&quot;);        if (onlineCount&#x3D;&#x3D;null)&#123;            onlineCount &#x3D; new Integer(0);        &#125;else &#123;            int count &#x3D; onlineCount.intValue();            onlineCount &#x3D; new Integer(count-1);        &#125;        ctx.setAttribute(&quot;OnlineCount&quot;,onlineCount);    &#125;    &#x2F;*    Session销毁：    1. 手动销毁  getSession().invalidate();    2. 自动销毁     *&#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>web.xml中注册监听器</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--注册监听器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>com.kuang.listener.OnlineCountListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>看情况是否使用！</p></li></ol><h2 id="13、过滤器、监听器常见应用"><a href="#13、过滤器、监听器常见应用" class="headerlink" title="13、过滤器、监听器常见应用"></a>13、过滤器、监听器常见应用</h2><p><strong>监听器：GUI编程中经常使用；</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class TestPanel &#123;    public static void main(String[] args) &#123;        Frame frame &#x3D; new Frame(&quot;中秋节快乐&quot;);  &#x2F;&#x2F;新建一个窗体        Panel panel &#x3D; new Panel(null); &#x2F;&#x2F;面板        frame.setLayout(null); &#x2F;&#x2F;设置窗体的布局        frame.setBounds(300,300,500,500);        frame.setBackground(new Color(0,0,255)); &#x2F;&#x2F;设置背景颜色        panel.setBounds(50,50,300,300);        panel.setBackground(new Color(0,255,0)); &#x2F;&#x2F;设置背景颜色        frame.add(panel);        frame.setVisible(true);        &#x2F;&#x2F;监听事件，监听关闭事件        frame.addWindowListener(new WindowAdapter() &#123;            @Override            public void windowClosing(WindowEvent e) &#123;                super.windowClosing(e);            &#125;        &#125;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用户登录之后才能进入主页！用户注销后就不能进入主页了！</p><ol><li><p>用户登录之后，向Sesison中放入用户的数据</p></li><li><p>进入主页的时候要判断用户是否已经登录；要求：在过滤器中实现！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">HttpServletRequest request &#x3D; (HttpServletRequest) req;HttpServletResponse response &#x3D; (HttpServletResponse) resp;if (request.getSession().getAttribute(Constant.USER_SESSION)&#x3D;&#x3D;null)&#123;    response.sendRedirect(&quot;&#x2F;error.jsp&quot;);&#125;chain.doFilter(request,response);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="14、JDBC"><a href="#14、JDBC" class="headerlink" title="14、JDBC"></a>14、JDBC</h2><p>什么是JDBC ： Java连接数据库！</p><p><img src="https://img-blog.csdnimg.cn/20200508154620734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlbGxfbG92ZQ==,size_16,color_FFFFFF,t_70"></p><p>需要jar包的支持：</p><ul><li>java.sql</li><li>javax.sql</li><li>mysql-conneter-java… 连接驱动（必须要导入）</li></ul><p><strong>实验环境搭建</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE TABLE users(    id INT PRIMARY KEY,    &#96;name&#96; VARCHAR(40),    &#96;password&#96; VARCHAR(40),    email VARCHAR(60),    birthday DATE);INSERT INTO users(id,&#96;name&#96;,&#96;password&#96;,email,birthday)VALUES(1,&#39;张三&#39;,&#39;123456&#39;,&#39;zs@qq.com&#39;,&#39;2000-01-01&#39;);INSERT INTO users(id,&#96;name&#96;,&#96;password&#96;,email,birthday)VALUES(2,&#39;李四&#39;,&#39;123456&#39;,&#39;ls@qq.com&#39;,&#39;2000-01-01&#39;);INSERT INTO users(id,&#96;name&#96;,&#96;password&#96;,email,birthday)VALUES(3,&#39;王五&#39;,&#39;123456&#39;,&#39;ww@qq.com&#39;,&#39;2000-01-01&#39;);SELECT* FROM users;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>导入数据库依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--mysql的驱动--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>IDEA中连接数据库：</p><p><img src="https://img-blog.csdnimg.cn/20200508154638633.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlbGxfbG92ZQ==,size_16,color_FFFFFF,t_70"></p><p><strong>JDBC 固定步骤：</strong></p><ol><li>加载驱动</li><li>连接数据库,代表数据库</li><li>向数据库发送SQL的对象Statement : CRUD</li><li>编写SQL （根据业务，不同的SQL）</li><li>执行SQL</li><li>关闭连接（先开的后关）</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class TestJdbc &#123;    public static void main(String[] args) throws ClassNotFoundException, SQLException &#123;        &#x2F;&#x2F;配置信息        &#x2F;&#x2F;useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8 解决中文乱码        String url&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;jdbc?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8&quot;;        String username &#x3D; &quot;root&quot;;        String password &#x3D; &quot;123456&quot;;        &#x2F;&#x2F;1.加载驱动        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);        &#x2F;&#x2F;2.连接数据库,代表数据库        Connection connection &#x3D; DriverManager.getConnection(url, username, password);        &#x2F;&#x2F;3.向数据库发送SQL的对象Statement,PreparedStatement : CRUD        Statement statement &#x3D; connection.createStatement();        &#x2F;&#x2F;4.编写SQL        String sql &#x3D; &quot;select * from users&quot;;&#x2F;&#x2F;增删改查        &#x2F;&#x2F;5.执行查询SQL，返回一个 ResultSet  ： 结果集        ResultSet rs &#x3D; statement.executeQuery(sql);        while (rs.next())&#123;            System.out.println(&quot;id&#x3D;&quot;+rs.getObject(&quot;id&quot;));            System.out.println(&quot;name&#x3D;&quot;+rs.getObject(&quot;name&quot;));            System.out.println(&quot;password&#x3D;&quot;+rs.getObject(&quot;password&quot;));            System.out.println(&quot;email&#x3D;&quot;+rs.getObject(&quot;email&quot;));            System.out.println(&quot;birthday&#x3D;&quot;+rs.getObject(&quot;birthday&quot;));        &#125;        &#x2F;&#x2F;6.关闭连接，释放资源（一定要做） 先开后关        rs.close();        statement.close();        connection.close();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>预编译SQL</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class TestJDBC2 &#123;    public static void main(String[] args) throws Exception &#123;        &#x2F;&#x2F;配置信息        &#x2F;&#x2F;useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8 解决中文乱码        String url&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;jdbc?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8&quot;;        String username &#x3D; &quot;root&quot;;        String password &#x3D; &quot;123456&quot;;        &#x2F;&#x2F;1.加载驱动        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);        &#x2F;&#x2F;2.连接数据库,代表数据库        Connection connection &#x3D; DriverManager.getConnection(url, username, password);        &#x2F;&#x2F;3.编写SQL        String sql &#x3D; &quot;insert into  users(id, name, password, email, birthday) values (?,?,?,?,?);&quot;;        &#x2F;&#x2F;4.预编译        PreparedStatement preparedStatement &#x3D; connection.prepareStatement(sql);        preparedStatement.setInt(1,2);&#x2F;&#x2F;给第一个占位符？ 的值赋值为1；        preparedStatement.setString(2,&quot;狂神说Java&quot;);&#x2F;&#x2F;给第二个占位符？ 的值赋值为狂神说Java；        preparedStatement.setString(3,&quot;123456&quot;);&#x2F;&#x2F;给第三个占位符？ 的值赋值为123456；        preparedStatement.setString(4,&quot;24736743@qq.com&quot;);&#x2F;&#x2F;给第四个占位符？ 的值赋值为1；        preparedStatement.setDate(5,new Date(new java.util.Date().getTime()));&#x2F;&#x2F;给第五个占位符？ 的值赋值为new Date(new java.util.Date().getTime())；        &#x2F;&#x2F;5.执行SQL        int i &#x3D; preparedStatement.executeUpdate();        if (i&gt;0)&#123;            System.out.println(&quot;插入成功@&quot;);        &#125;        &#x2F;&#x2F;6.关闭连接，释放资源（一定要做） 先开后关        preparedStatement.close();        connection.close();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>事务</strong></p><p>要么都成功，要么都失败！</p><p>ACID原则：保证数据的安全。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">开启事务事务提交  commit()事务回滚  rollback()关闭事务转账：A:1000B:1000    A(900)   --100--&gt;   B(1100) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Junit单元测试</strong></p><p>依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--单元测试--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单使用</p><p>@Test注解只有在方法上有效，只要加了这个注解的方法，就可以直接运行！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Testpublic void test()&#123;    System.out.println(&quot;Hello&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200508154657792.png"></p><p>失败的时候是红色：</p><p><img src="https://img-blog.csdnimg.cn/20200508154708211.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlbGxfbG92ZQ==,size_16,color_FFFFFF,t_70"></p><p><strong>搭建一个环境</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE TABLE account(   id INT PRIMARY KEY AUTO_INCREMENT,   &#96;name&#96; VARCHAR(40),   money FLOAT);INSERT INTO account(&#96;name&#96;,money) VALUES(&#39;A&#39;,1000);INSERT INTO account(&#96;name&#96;,money) VALUES(&#39;B&#39;,1000);INSERT INTO account(&#96;name&#96;,money) VALUES(&#39;C&#39;,1000);123456789    @Test    public void test() &#123;        &#x2F;&#x2F;配置信息        &#x2F;&#x2F;useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8 解决中文乱码        String url&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;jdbc?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8&quot;;        String username &#x3D; &quot;root&quot;;        String password &#x3D; &quot;123456&quot;;        Connection connection &#x3D; null;        &#x2F;&#x2F;1.加载驱动        try &#123;            Class.forName(&quot;com.mysql.jdbc.Driver&quot;);            &#x2F;&#x2F;2.连接数据库,代表数据库             connection &#x3D; DriverManager.getConnection(url, username, password);            &#x2F;&#x2F;3.通知数据库开启事务,false 开启            connection.setAutoCommit(false);            String sql &#x3D; &quot;update account set money &#x3D; money-100 where name &#x3D; &#39;A&#39;&quot;;            connection.prepareStatement(sql).executeUpdate();            &#x2F;&#x2F;制造错误            &#x2F;&#x2F;int i &#x3D; 1&#x2F;0;            String sql2 &#x3D; &quot;update account set money &#x3D; money+100 where name &#x3D; &#39;B&#39;&quot;;            connection.prepareStatement(sql2).executeUpdate();            connection.commit();&#x2F;&#x2F;以上两条SQL都执行成功了，就提交事务！            System.out.println(&quot;success&quot;);        &#125; catch (Exception e) &#123;            try &#123;                &#x2F;&#x2F;如果出现异常，就通知数据库回滚事务                connection.rollback();            &#125; catch (SQLException e1) &#123;                e1.printStackTrace();            &#125;            e.printStackTrace();        &#125;finally &#123;            try &#123;                connection.close();            &#125; catch (SQLException e) &#123;                e.printStackTrace();            &#125;        &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java Web笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot</title>
      <link href="/2021/07/07/spring-boot/"/>
      <url>/2021/07/07/spring-boot/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="1、SpringBoot"><a href="#1、SpringBoot" class="headerlink" title="1、SpringBoot"></a>1、SpringBoot</h1><pre class="line-numbers language-none"><code class="language-none">@Component     放在对象的类上面 @Autowired    可以不用new一个对象    private Person person;@Value(&quot;旺财&quot;)  赋值    private String name;&#96;@Configuration&#96;   放在配置类上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="回顾什么是Spring"><a href="#回顾什么是Spring" class="headerlink" title="回顾什么是Spring"></a>回顾什么是Spring</h2><p>Spring是一个开源框架，2003 年兴起的一个轻量级的Java 开发框架，作者：Rod Johnson 。</p><p><strong>Spring是为了解决企业级应用开发的复杂性而创建的，简化开发。</strong></p><h2 id="Spring是如何简化Java开发的"><a href="#Spring是如何简化Java开发的" class="headerlink" title="Spring是如何简化Java开发的"></a>Spring是如何简化Java开发的</h2><p>为了降低Java开发的复杂性，Spring采用了以下4种关键策略：</p><p>1、基于POJO的轻量级和最小侵入性编程，所有东西都是bean；</p><p>2、通过IOC，依赖注入（DI）和面向接口实现松耦合；</p><p>3、基于切面（AOP）和惯例进行声明式编程；</p><p>4、通过切面和模版减少样式代码，RedisTemplate，xxxTemplate；</p><h2 id="什么是SpringBoot"><a href="#什么是SpringBoot" class="headerlink" title="什么是SpringBoot"></a>什么是SpringBoot</h2><p>学过javaweb的同学就知道，开发一个web应用，从最初开始接触Servlet结合Tomcat, 跑出一个Hello Wolrld程序，是要经历特别多的步骤；后来就用了框架Struts，再后来是SpringMVC，到了现在的SpringBoot，过一两年又会有其他web框架出现；你们有经历过框架不断的演进，然后自己开发项目所有的技术也在不断的变化、改造吗？建议都可以去经历一遍；</p><p>言归正传，什么是SpringBoot呢，就是一个javaweb的开发框架，和SpringMVC类似，对比其他javaweb框架的好处，官方说是简化开发，约定大于配置， you can “just run”，能迅速的开发web应用，几行代码开发一个http接口。</p><p>所有的技术框架的发展似乎都遵循了一条主线规律：从一个复杂应用场景 衍生 一种规范框架，人们只需要进行各种配置而不需要自己去实现它，这时候强大的配置功能成了优点；发展到一定程度之后，人们根据实际生产应用情况，选取其中实用功能和设计精华，重构出一些轻量级的框架；之后为了提高开发效率，嫌弃原先的各类配置过于麻烦，于是开始提倡“约定大于配置”，进而衍生出一些一站式的解决方案。</p><p>是的这就是Java企业级应用-&gt;J2EE-&gt;spring-&gt;springboot的过程。</p><p>随着 Spring 不断的发展，涉及的领域越来越多，项目整合开发需要配合各种各样的文件，慢慢变得不那么易用简单，违背了最初的理念，甚至人称配置地狱。Spring Boot 正是在这样的一个背景下被抽象出来的开发框架，目的为了让大家更容易的使用 Spring 、更容易的集成各种常用的中间件、开源软件；</p><p>Spring Boot 基于 Spring 开发，Spirng Boot 本身并不提供 Spring 框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于 Spring 框架的应用程序。也就是说，它并不是用来替代 Spring 的解决方案，而是和 Spring 框架紧密结合用于提升 Spring 开发者体验的工具。Spring Boot 以<strong>约定大于配置的核心思想</strong>，默认帮我们进行了很多设置，多数 Spring Boot 应用只需要很少的 Spring 配置。同时它集成了大量常用的第三方库配置（例如 Redis、MongoDB、Jpa、RabbitMQ、Quartz 等等），Spring Boot 应用中这些第三方库几乎可以零配置的开箱即用。</p><p>简单来说就是SpringBoot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了所有的jar包，spring boot整合了所有的框架 。</p><p>Spring Boot 出生名门，从一开始就站在一个比较高的起点，又经过这几年的发展，生态足够完善，Spring Boot 已经当之无愧成为 Java 领域最热门的技术。</p><p><strong>Spring Boot的主要优点：</strong></p><ul><li>为所有Spring开发者更快的入门</li><li><strong>开箱即用</strong>，提供各种默认配置来简化项目配置</li><li>内嵌式容器简化Web项目</li><li>没有冗余代码生成和XML配置的要求</li></ul><p>真的很爽，我们快速去体验开发个接口的感觉吧！</p><h1 id="2、第一个SpringBoot程序"><a href="#2、第一个SpringBoot程序" class="headerlink" title="2、第一个SpringBoot程序"></a>2、第一个SpringBoot程序</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a><em>环境准备</em></h2><ul><li>jdk1.8</li><li>Maven 3.6.3</li><li>Springboot:最新版</li><li>IDEA</li></ul><p>官方提供了一个快速生成的网站，IDEA集成了这个网站</p><h2 id="项目创建方式一"><a href="#项目创建方式一" class="headerlink" title="项目创建方式一"></a><em>项目创建方式一</em></h2><p>使用Spring Initializr 的 Web页面创建项目</p><p>1、打开 <a href="https://start.spring.io/">https://start.spring.io/</a></p><p>2、填写项目信息</p><p>3、点击”Generate Project“按钮生成项目；下载此项目</p><p>4、解压项目包，并用IDEA以Maven项目导入，一路下一步即可，直到项目导入完毕。</p><p>5、如果是第一次使用，可能速度会比较慢，包比较多、需要耐心等待一切就绪。</p><h2 id="项目创建方式二"><a href="#项目创建方式二" class="headerlink" title="项目创建方式二"></a><em>项目创建方式二</em></h2><p>使用 IDEA 直接创建项目</p><p>1、创建一个新项目</p><p>2、选择spring initalizr ， 可以看到默认就是去官网的快速构建工具那里实现</p><p>3、填写项目信息</p><p>4、选择初始化的组件（初学勾选 Web 即可）</p><p>5、填写项目路径</p><p>6、等待项目构建成功</p><h2 id="项目结构分析"><a href="#项目结构分析" class="headerlink" title="项目结构分析"></a><em>项目结构分析</em></h2><p>通过上面步骤完成了基础项目的创建。就会自动生成以下文件。</p><p>1、程序的主启动类</p><p>2、一个 application.properties 配置文件</p><p>3、一个 测试类</p><p>4、一个 pom.xml</p><h2 id="pom-xml-分析"><a href="#pom-xml-分析" class="headerlink" title="pom.xml 分析"></a><em>pom.xml 分析</em></h2><p>打开pom.xml，看看Spring Boot项目的依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment">&lt;!-- lookup parent from repository --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.codekitty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springboot-study<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>springboot-study<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>study project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 启动器--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- web场景启动器 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- springboot单元测试 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 剔除依赖 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 打包插件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="启动Banner修改"><a href="#启动Banner修改" class="headerlink" title="启动Banner修改"></a>启动Banner修改</h2><p>在resource下建立banner.txt,放入想要的Banner图即可，Banner可以直接百度搜索springboot banner</p><h1 id="3、原理初探"><a href="#3、原理初探" class="headerlink" title="3、原理初探"></a>3、原理初探</h1><p><strong>自动配置：</strong></p><p><strong>pom.xml</strong></p><ul><li>Spring-boot-dependencies:核心依赖在父工程中</li><li>我们在写或者引入springboot依赖的时候，不需要指定版本，因为有这些版本仓库</li></ul><p><strong>启动器</strong></p><ul><li>```xml<!--启动器--><dependency>  <groupId>org.springframework.boot</groupId>  <artifactId>spring-boot-starter</artifactId></dependency><pre class="line-numbers language-none"><code class="language-none">- 启动器：说白了就是Springboot的启动场景- 比如spring-boot-starter-web，他就会帮我们自动导入web环境所有的依赖- springboot会将所有的功能场景，都变成一个个的启动器- 我们要使用什么功能，就值需要找到对应的启动器&#96;starter&#96;**主程序**&#96;&#96;&#96;java&#x2F;&#x2F;标注这个类是一个springboot的应用@SpringBootApplicationpublic class SpringbootStudyApplication &#123;    public static void main(String[] args) &#123;        SpringApplication.run(SpringbootStudyApplication.class, args);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>注解</strong></p><ul><li><p>```java<br>//springboot的配置<br>@SpringBootConfiguration</p><pre><code>//spring配置类</code></pre><p>  @Configuration </p><pre><code>//说明这也是一个spring的组件</code></pre><p>  @Component    </p><p>//自动配置<br>@EnableAutoConfiguration</p><pre><code>//自动配置包@AutoConfigurationPackage //自动配置        @Import(AutoConfigurationPackages.Registrar.class)//自动配置导入选择@Import(AutoConfigurationImportSelector.class)</code></pre><p>//获取所有的配置<br>List<String> configurations = getCandidateConfigurations(annotationMetadata, attributes);<br>1234567891011121314151617181920212223</String></p><pre class="line-numbers language-none"><code class="language-none">获取候选的配置&#96;&#96;&#96;javaprotected List&lt;String&gt; getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) &#123;  List&lt;String&gt; configurations &#x3D; SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),                                                                       getBeanClassLoader());  Assert.notEmpty(configurations, &quot;No auto configuration classes found in META-INF&#x2F;spring.factories. If you &quot;                  + &quot;are using a custom packaging, make sure that file is correct.&quot;);  return configurations;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>META-INF/spring.factories.</p></li></ul><p>Springboot所有自动配置都是在启动的时候扫描并加载：<code>spring.factories</code>所有的自动配置类都在这里面，但是不一定生效，要判断条件是否成立，只要导入了对应的strater，就有了对应的启动器，有了启动器，我们自动装配就会生效，然后配置成功</p><ol><li>springboot在启动的时候，从类路径下 /META-INF/spring.factories.获取指定的值；</li></ol><p><img src="/2021/07/07/spring-boot/202010130811539.png"></p><ol><li>将这些自动配置的类导入容器，自动配置就会生效，帮我们进行自动配置</li><li>以前我们需要手动配置的东西，现在Springboot帮我们做了</li><li>整合javaEE，解决方案和自动配置的东西都在spring-boot-autoconfigure包下</li><li>它会把所有需要导入的组件，以类名的方式返回，这些组件就会添加到容器</li><li>容器中也会存在XXXXautoConfiguration的文件(@Bean)，就是这些类给容器中导入了这个场景所需要的所有组件,并自动配置，@Configuration,JavaConfig</li><li>有了自动配置类，免去了我们自己编写配置文件的步骤</li></ol><p><strong>启动原理：</strong></p><p> 最初以为就是运行了一个main方法，没想到却开启了一个服务；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplicationpublic class SpringbootApplication &#123;    public static void main(String[] args) &#123;        SpringApplication.run(SpringbootApplication.class, args);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>这个类主要做了以下四件事情：</strong></p><p>1、推断应用的类型是普通的项目还是Web项目</p><p>2、查找并加载所有可用初始化器 ， 设置到initializers属性中</p><p>3、找出所有的应用程序监听器，设置到listeners属性中</p><p>4、推断并设置main方法的定义类，找到运行的主类</p><p><strong>run方法流程分析</strong></p><p><img src="/2021/07/07/spring-boot/82b94b960a5c946bad5512f51d95262b.png"></p><h1 id="4、Springboot配置文件"><a href="#4、Springboot配置文件" class="headerlink" title="4、Springboot配置文件"></a>4、Springboot配置文件</h1><p>SpringBoot使用一个全局的配置文件 ， 配置文件名称是固定的</p><ul><li><p>application.properties</p></li><li><ul><li><p>语法结构 ：key=value</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">server.port=80811<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>application.yml</p></li><li><ul><li><p>语法结构 ：key：空格 value</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">server:  port: 808112<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>application.yml</p><ul><li><p>语法结构 ：key：空格 value</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 8081# 普通的key-valuename: 李明#对象student:  name: jj  age: 3#行内写法student1: &#123;name: jj,age: 3&#125;#数组pets:  - cat  - dog  - pigpets1: [cat,dog,pig]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p><strong>yaml可以直接给实体类赋值</strong></p><p>在yaml写好配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">person:  name: 小红  age: 3  happy: true  birth: 2020&#x2F;7&#x2F;27  maps: &#123;k1: v1,k2: v2&#125;  lists:    - code    - music  dog:    name: 旺旺    age: 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在实体类上加上注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@ConfigurationProperties(prefix &#x3D; &quot;person&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在Springboot提供的单元测试类中测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Autowiredprivate Person person;@Testvoid contextLoads() &#123;  System.out.println(person);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：注解的prefix值要和配置文件中的属性名相同</p><p><strong>yaml的松散绑定</strong></p><p> 比如我的yaml中写的last-name，这个和lastName是一样的， - 后面跟着的字母默认是大写的。这就是松散绑定。</p><p><strong>结论：</strong></p><ul><li>配置yml和配置properties都可以获取到值 ， 强烈推荐 yml；</li><li>如果我们在某个业务中，只需要获取配置文件中的某个值，可以使用一下 @value；</li><li>如果说，我们专门编写了一个JavaBean来和配置文件进行一一映射，就直接@configurationProperties，不要犹豫！</li></ul><p><strong>JSR303数据校验</strong></p><p> 这个就是我们可以在字段是增加一层过滤器验证 ， 可以保证数据的合法性</p><p><em><strong>使用</strong></em></p><ol><li><p>在实体类上增加<code>@Validated</code>注解</p></li><li><p>在实体属性上增加以下注解即可实现相应的校验,在注解内加入<code>message</code>属性可以指定校验未通过时的提示信息</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">空检查 @Null 验证对象是否为null @NotNull 验证对象是否不为null, 无法查检长度为0的字符串 @NotBlank 检查约束字符串是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空格. @NotEmpty 检查约束元素是否为NULL或者是EMPTY.Booelan检查 @AssertTrue 验证 Boolean 对象是否为 true @AssertFalse 验证 Boolean 对象是否为 false长度检查 @Size(min&#x3D;, max&#x3D;) 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内 @Length(min&#x3D;, max&#x3D;) Validates that the annotated string is between min and max included.日期检查 @Past 验证 Date 和 Calendar 对象是否在当前时间之前，验证成立的话被注释的元素一定是一个过去的日期 @Future 验证 Date 和 Calendar 对象是否在当前时间之后 ，验证成立的话被注释的元素一定是一个将来的日期 @Pattern 验证 String 对象是否符合正则表达式的规则，被注释的元素符合制定的正则表达式，regexp:正则表达式 flags: 指定 Pattern.Flag 的数组，表示正则表达式的相关选项。数值检查 建议使用在Stirng,Integer类型，不建议使用在int类型上，因为表单值为“”时无法转换为int，但可以转换为Stirng为”“,Integer为null @Min 验证 Number 和 String 对象是否大等于指定的值 @Max 验证 Number 和 String 对象是否小等于指定的值 @DecimalMax 被标注的值必须不大于约束中指定的最大值. 这个约束的参数是一个通过BigDecimal定义的最大值的字符串表示.小数存在精度 @DecimalMin 被标注的值必须不小于约束中指定的最小值. 这个约束的参数是一个通过BigDecimal定义的最小值的字符串表示.小数存在精度 @Digits 验证 Number 和 String 的构成是否合法 @Digits(integer&#x3D;,fraction&#x3D;) 验证字符串是否是符合指定格式的数字，interger指定整数精度，fraction指定小数精度。 @Range(min&#x3D;, max&#x3D;) 被指定的元素必须在合适的范围内 @Range(min&#x3D;10000,max&#x3D;50000,message&#x3D;”range.bean.wage”) @Valid 递归的对关联对象进行校验, 如果关联对象是个集合或者数组,那么对其中的元素进行递归校验,如果是一个map,则对其中的值部分进行校验.(是否进行递归验证) @CreditCardNumber信用卡验证 @Email 验证是否是邮件地址，如果为null,不进行验证，算通过验证。 @ScriptAssert(lang&#x3D; ,script&#x3D;, alias&#x3D;) @URL(protocol&#x3D;,host&#x3D;, port&#x3D;,regexp&#x3D;, flags&#x3D;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p><strong>可以在多个位置使用配置文件</strong></p><p>配置文件的优先级由高到低分别为项目路径下的config/application.yaml&gt;application.yaml&gt;resources/config/application.yaml&gt;resources/application.yaml</p><p>默认创建的是优先级最低的resources/application.yaml</p><p><strong>多环境切换</strong></p><p>用properties文件的时候，需要写多个不同的文件，主文件选择需要哪一个环境</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;主文件名字：application.propertiesspring.profiles.active &#x3D; test &#x2F;&#x2F;选择激活哪一个环境<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;其余文件名字application-test.propertiesserver.port &#x3D; 8081&#x2F;&#x2F;配置端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>yaml多环境切换</p><p>用<code>---</code>来分隔多个文件，使用profiles的active来选择调用哪个环境</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 8081                         &#x2F;&#x2F;默认端口spring:                profiles:    active: dev                       &#x2F;&#x2F;active来选择调用哪个环境 ---server:  port: 8082spring:                              &#x2F;&#x2F;起名字叫dev  profiles: dev---server:  port: 8083spring:                              &#x2F;&#x2F;起名字叫test  profiles: test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>自动配置的原理！</strong></p><p>1、SpringBoot启动会加载大量的自动配置类</p><p>2、我们看我们需要的功能有没有在SpringBoot默认写好的自动配置类当中；</p><p>3、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件存在在其中，我们就不需要再手动配置了）</p><p>4、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们只需要在配置文件中指定这些属性的值即可；</p><p><strong>xxxxAutoConfigurartion：自动配置类；</strong>给容器中添加组件</p><p><strong>xxxxProperties:封装配置文件中相关属性；</strong></p><p>开启debug可以在启动的时候在控制台输出配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">debug: true      &#x2F;&#x2F;可以弄出日志来看哪些配置生效，哪些没有<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="5、SpringBoot-Web开发"><a href="#5、SpringBoot-Web开发" class="headerlink" title="5、SpringBoot Web开发"></a>5、SpringBoot Web开发</h1><p>Jar: webapp</p><p>自动装配</p><p>springboot到底帮我们配置了什么？能不能修改，能修改哪些东西？能不能拓展</p><ul><li>xxxxAutoConfigurartion…向容器中自动配置组件</li><li>xxxxProperties:自动配置类，装配配置文件中自定义的一些内容</li></ul><p>要解决的问题:</p><ul><li>导入静态资源…</li><li>首页</li><li>jsp,模版引擎Thymeleaf</li><li>装配扩展SpringMVC</li><li>增删改查</li><li>拦截器</li><li>国际化</li></ul><p><strong>静态资源总结：</strong></p><ol><li><p>在springboot，我们 可以使用以下方式处理静态资源</p><p>在网页输入<code>localhost:8080/1.js</code>则网页会在resources文件夹下的resources&gt;static&gt;(默认)&gt;public的中找</p><ul><li>webjars<code>localhost:8080/wbjars/</code></li><li>Public, static,/**,resources, <code>localhost:8080</code></li></ul></li><li><p>优先级：resources&gt;static&gt;(默认)&gt;public</p></li></ol><h1 id="6、Thymeleaf模版引擎"><a href="#6、Thymeleaf模版引擎" class="headerlink" title="6、Thymeleaf模版引擎"></a>6、Thymeleaf模版引擎</h1><p>结论：只要导入对应的maven依赖即可使用</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--thymeleaf--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、我们要使用thymeleaf，需要在html文件中导入命名空间的约束，方便提示,我们可以去官方文档。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">xmlns:th="http://www.thymeleaf.org"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、在controller设置接收请求</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@GetMapping(&quot;&#x2F;test&quot;)public String test(Model model)&#123;  model.addAttribute(&quot;msg&quot;,&quot;helloSpringboot&quot;);  return &quot;test&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、在主入口启动，访问<code>localhost:8080/test</code>即可</p><p><strong>注意：在项目新建module是无法访问到，最终找到原因是创建module时没有导入thymeleaf</strong></p><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><p>用th:each遍历，有两种取值方法</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user:$&#123;users&#125;<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;user&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user:$&#123;users&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>[[$&#123;user&#125;&#125;]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Thymeleaf语法"><a href="#Thymeleaf语法" class="headerlink" title="Thymeleaf语法"></a><strong>Thymeleaf语法</strong></h3><p><img src="/2021/07/07/spring-boot/53638563617df1b7c04514563cf1bed2.png"></p><h3 id="Thymeleaf表达式"><a href="#Thymeleaf表达式" class="headerlink" title="Thymeleaf表达式"></a>Thymeleaf表达式</h3><pre class="line-numbers language-none"><code class="language-none">Simple expressions:（表达式语法）Variable Expressions: $&#123;...&#125;：获取变量值；OGNL；    1）、获取对象的属性、调用方法    2）、使用内置的基本对象：#18         #ctx : the context object.         #vars: the context variables.         #locale : the context locale.         #request : (only in Web Contexts) the HttpServletRequest object.         #response : (only in Web Contexts) the HttpServletResponse object.         #session : (only in Web Contexts) the HttpSession object.         #servletContext : (only in Web Contexts) the ServletContext object.    3）、内置的一些工具对象：　　　　　　#execInfo : information about the template being processed.　　　　　　#uris : methods for escaping parts of URLs&#x2F;URIs　　　　　　#conversions : methods for executing the configured conversion service (if any).　　　　　　#dates : methods for java.util.Date objects: formatting, component extraction, etc.　　　　　　#calendars : analogous to #dates , but for java.util.Calendar objects.　　　　　　#numbers : methods for formatting numeric objects.　　　　　　#strings : methods for String objects: contains, startsWith, prepending&#x2F;appending, etc.　　　　　　#objects : methods for objects in general.　　　　　　#bools : methods for boolean evaluation.　　　　　　#arrays : methods for arrays.　　　　　　#lists : methods for lists.　　　　　　#sets : methods for sets.　　　　　　#maps : methods for maps.　　　　　　#aggregates : methods for creating aggregates on arrays or collections.&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Selection Variable Expressions: *&#123;...&#125;：选择表达式：和$&#123;&#125;在功能上是一样；Message Expressions: #&#123;...&#125;：获取国际化内容Link URL Expressions: @&#123;...&#125;：定义URL；Fragment Expressions: ~&#123;...&#125;：片段引用表达式Literals（字面量）Text literals: &#39;one text&#39; , &#39;Another one!&#39; ,…Number literals: 0 , 34 , 3.0 , 12.3 ,…Boolean literals: true , falseNull literal: nullLiteral tokens: one , sometext , main ,…Text operations:（文本操作）String concatenation: +Literal substitutions: |The name is $&#123;name&#125;|Arithmetic operations:（数学运算）Binary operators: + , - , * , &#x2F; , %Minus sign (unary operator): -Boolean operations:（布尔运算）Binary operators: and , orBoolean negation (unary operator): ! , notComparisons and equality:（比较运算）Comparators: &gt; , &lt; , &gt;&#x3D; , &lt;&#x3D; ( gt , lt , ge , le )Equality operators: &#x3D;&#x3D; , !&#x3D; ( eq , ne )Conditional operators:条件运算（三元运算符）If-then: (if) ? (then)If-then-else: (if) ? (then) : (else)Default: (value) ?: (defaultvalue)Special tokens:No-Operation: _<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7、装配MVC"><a href="#7、装配MVC" class="headerlink" title="7、装配MVC"></a>7、装配MVC</h1><p>官方建议：直接创建一个MVCconfig类，在类上加上<code>@Configuration</code>注解，并且实现<code>WebMvcConfigurer</code>接口，并且不能使用<code>@EnableWebMvc</code>注解</p><p><strong>为什么不能使用<code>@EnableWebMvc</code>注解</strong></p><ul><li><p>这个注解导入了一个类：DelegatingWebMvcConfiguration,这个类从容器中获取所有的webmvcconfig</p></li><li><p>并且在WebMvcAutoConfiguration类中有这样一个注解：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>这个注解的意思就是：容器中没有这个组件的时候，这个自动配置类才生效</p></li><li><p>如果加了<code>@EnableWebMVC</code>容器中就有了组件，这个配置就不生效了</p></li></ul><p><strong>如果需要全面接管SpringMVC可以使用该注解，当然在开发中，不推荐使用全面接管SpringMVC</strong></p><h1 id="8、进行项目前的准备"><a href="#8、进行项目前的准备" class="headerlink" title="8、进行项目前的准备"></a>8、进行项目前的准备</h1><ol><li><p>准备好数据，在这里用Map模拟数据库中的数据，后期再进行数据库整合</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Repositorypublic class DeptDao &#123;  private static Map&lt;Integer, Dept&gt; depts &#x3D; null;  static&#123;    &#x2F;&#x2F;模拟数据库中的数据    depts &#x3D; new HashMap&lt;Integer,Dept&gt;();&#x2F;&#x2F;创建一个部门表    depts.put(101,new Dept(101,&quot;教学部&quot;));    depts.put(102,new Dept(102,&quot;市场部&quot;));    depts.put(103,new Dept(103,&quot;后勤部&quot;));    depts.put(104,new Dept(104,&quot;教研部&quot;));  &#125;  &#x2F;&#x2F;获得所有部门信息  public Collection&lt;Dept&gt; getDept()&#123;    return depts.values();  &#125;  public Dept getDept(Integer id)&#123;    return depts.get(id);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>准备好模版（在网上找bootstrap或其他的模版，或者自己写）</p></li><li><p>页面直接放在templates下，css、img、js等放在static下</p></li><li><p>修改html页面，使其符合Thymeleaf模版规范</p><ul><li>在url路径属性前增加<code>th:</code>并修改url路径为<code>@&#123;&#125;</code>格式（js、css、img等）</li></ul></li></ol><h1 id="9、项目：国际化"><a href="#9、项目：国际化" class="headerlink" title="9、项目：国际化*"></a>9、项目：国际化*</h1><ol><li><p>在resources下创建<code>i18n</code>文件夹，并创建<code>login.proterties</code>文件<code>login_zh_CN.proterties</code>文件<code>login_en_US.proterties</code>文件</p></li><li><p>在内部写入配置</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">login.password&#x3D;passwordlogin.tip&#x3D;Please sign inlogin.username&#x3D;username#------------------------login.password&#x3D;密码login.tip&#x3D;请登录login.username&#x3D;用户名#------------------------login.password&#x3D;passwordlogin.tip&#x3D;Please sign inlogin.username&#x3D;username#------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在核心配置文件中配置一下属性</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">spring.messages.basename&#x3D;i18n.login<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在config包内创建类，实现<code>localereslover</code>接口,重写方法,解析请求</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;解析请求   @Override   public Locale resolveLocale(HttpServletRequest request) &#123;       String language &#x3D; request.getParameter(&quot;l&quot;);       Locale locale &#x3D; Locale.getDefault();&#x2F;&#x2F;得到一个默认的，如果没有传入的就使用默认的       System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&quot; + language);       if(!StringUtils.isEmpty(language))&#123;           String[] s &#x3D; language.split(&quot;_&quot;);           System.out.println(&quot;----------------&quot;);           locale &#x3D; new Locale(s[0], s[1]);       &#125;       return locale;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在mvcconfig配置Bean</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Bean    public LocaleResolver localeResolver()&#123;        return new MyLocaleResolver();    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在页面设置按钮发送请求，并修改页面文字元素为<code>thymeleaf</code>格式</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-sm<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/index.html(l='zh_CN')&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>|<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-sm<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/index.html(l='en_US')&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>English<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>测试运行</p></li></ol><h1 id="10、项目：登陆-拦截器"><a href="#10、项目：登陆-拦截器" class="headerlink" title="10、项目：登陆 + 拦截器"></a>10、项目：登陆 + 拦截器</h1><ol><li><p>修改页面form的action请求action为<code>th:action</code></p></li><li><p>新建controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controllerpublic class LoginController &#123;  @RequestMapping(&quot;&#x2F;login&quot;)  public String Login(@RequestParam(&quot;userName&quot;) String userName,                      @RequestParam(&quot;passWord&quot;) String passWord,                      Model model, HttpSession session)&#123;    if(!StringUtils.isEmpty(userName) &amp;&amp; &quot;12345&quot;.equals(passWord))&#123;      session.setAttribute(&quot;loginUser&quot;,userName); System.out.println(session.getAttribute(&quot;loginUser&quot;));      return &quot;redirect:&#x2F;main.html&quot;;    &#125;else&#123;      model.addAttribute(&quot;msg&quot;,&quot;用户名或密码错误&quot;);      System.out.println(&quot;444&quot;);      return &quot;login&quot;;    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：在这里将userName存入了session中，取的时候需要通过session.userName来取</strong></p></li></ol><h1 id="11、展示员工页面"><a href="#11、展示员工页面" class="headerlink" title="11、展示员工页面"></a>11、展示员工页面</h1><ol><li><p>首先做页面代码复用工作，取页面公共组件放在一个页面中，每个组件设置一个<code>th:fragment=&quot;&quot;</code>属性，在需要用的页面使用<code>th:insert</code>或者<code>th:replace</code>属性进行复用</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>replace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>~&#123;empl/list::top&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>定义一个controller类来实现处理请求数据的功能</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Controllerpublic class EmployeeController &#123;  @Autowired  EmplDao empl;  @RequestMapping(&quot;&#x2F;empl&quot;)  public String list(Model model)&#123;    Collection&lt;Empl&gt; all &#x3D; empl.getAll();    model.addAttribute(&quot;emplList&quot;,all);    for (Empl empl : all) &#123;      System.out.println(empl.toString());    &#125;    return &quot;empl&#x2F;list&quot;;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在页面中定义表格，将获取到的数据通过thymeleaf显示出来</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>table table-bordered<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>lastName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>email<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>gender<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>deptName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>birth<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>操作<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp:$&#123;emplList&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;emp.getId()&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;emp.getLastName()&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;emp.getEmail()&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;emp.getGender()==0?'女':'男'&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;emp.getDeptName().getDeptName()&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;#dates.format(emp.getBirth())&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-sm btn-primary<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>编辑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-sm btn-danger<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>本节遇到的问题<ul><li>点击请求数据时出现500错误，原因是controller没有加<code>@Autowired</code>注解</li><li>数据显示时只显示一行，并且是最后一条数据，开始以为是显示的原因，后来向上查找原因发现是使用Map代替数据库时，map的键重复，导致map的put时后面会覆盖前面定义好的，最终只剩一条最后插入的数据（我贼智障）</li></ul></li></ul><h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><ul><li>SpringBoot是什么</li><li>微服务</li><li>HelloWorld</li><li>探究源码～自动装配原理</li><li>配置yaml</li><li>多文档环境切换</li><li>静态资源映射</li><li>Thymeleaf th:xxx</li><li>SpringBoot 如何扩展MVC javaConfig～</li><li>如何修改SpringBoot的默认配置</li><li>CRUD</li><li>国际化</li><li>拦截器</li><li>定制首页，错误页</li></ul><h1 id="接下来"><a href="#接下来" class="headerlink" title="接下来"></a>接下来</h1><ul><li>JDBC</li><li><strong>Mybatis</strong></li><li><strong>Druid</strong></li><li><strong>Shiro:安全</strong></li><li><strong>Spring Security:安全</strong></li><li>异步任务～，邮件发送，定时任务</li><li>Swagger</li><li><strong>Dubbo + Zookeeper</strong></li></ul><h1 id="12、整合JDBC"><a href="#12、整合JDBC" class="headerlink" title="12、整合JDBC"></a>12、整合JDBC</h1><ol><li>新建项目，引入<code>JDBC API</code>、<code>mysql Driver</code>和<code>Spring Web</code></li></ol><p>Springboot会自动帮我们导入以下启动器</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>编写yaml配置文件</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">spring:  datasource:    username: codekitty    password: lihaiyang    url: jdbc:mysql:&#x2F;&#x2F;codekitty.cn:3306&#x2F;study?serverTimezone&#x3D;UTC&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8    driver-class-name: com.mysql.cj.jdbc.Driver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>可以使用了，进行测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;DI注入数据源@AutowiredDataSource dataSource;@Testvoid contextLoads() throws SQLException &#123;  &#x2F;&#x2F;查看一下数据源  System.out.println(dataSource.getClass());  &#x2F;&#x2F;获得数据库连接  Connection connection &#x3D; dataSource.getConnection();  System.out.println(connection);&#x2F;&#x2F;关闭连接  connection.close();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>结果：我们可以看到他默认给我们配置的数据源为 : class com.zaxxer.hikari.HikariDataSource ， 我们并没有手动配置</p><p>我们来全局搜索一下，找到数据源的所有自动配置都在 ：DataSourceAutoConfiguration文件：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Import(    &#123;Hikari.class, Tomcat.class, Dbcp2.class, Generic.class, DataSourceJmxConfiguration.class&#125;)protected static class PooledDataSourceConfiguration &#123;    protected PooledDataSourceConfiguration() &#123;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里导入的类都在 DataSourceConfiguration 配置类下，可以看出 Spring Boot 2.2.5 默认使用HikariDataSource 数据源，而以前版本，如 Spring Boot 1.5 默认使用 org.apache.tomcat.jdbc.pool.DataSource 作为数据源；</p><p><strong>HikariDataSource 号称 Java WEB 当前速度最快的数据源，相比于传统的 C3P0 、DBCP、Tomcat jdbc 等连接池更加优秀；</strong></p><p><strong>可以使用 spring.datasource.type 指定自定义的数据源类型，值为 要使用的连接池实现的完全限定名。</strong></p><p>关于数据源我们并不做介绍，有了数据库连接，显然就可以 CRUD 操作数据库了。但是我们需要先了解一个对象 JdbcTemplate</p><h2 id="JDBCTemplate"><a href="#JDBCTemplate" class="headerlink" title="JDBCTemplate"></a>JDBCTemplate</h2><p>1、有了数据源(com.zaxxer.hikari.HikariDataSource)，然后可以拿到数据库连接(java.sql.Connection)，有了连接，就可以使用原生的 JDBC 语句来操作数据库；</p><p>2、即使不使用第三方第数据库操作框架，如 MyBatis等，Spring 本身也对原生的JDBC 做了轻量级的封装，即JdbcTemplate。</p><p>3、数据库操作的所有 CRUD 方法都在 JdbcTemplate 中。</p><p>4、Spring Boot 不仅提供了默认的数据源，同时默认已经配置好了 JdbcTemplate 放在了容器中，程序员只需自己注入即可使用</p><p>5、JdbcTemplate 的自动配置是依赖 org.springframework.boot.autoconfigure.jdbc 包下的 JdbcTemplateConfiguration 类</p><p><strong>JdbcTemplate主要提供以下几类方法：</strong></p><ul><li>execute方法：可以用于执行任何SQL语句，一般用于执行DDL语句；</li><li>update方法及batchUpdate方法：update方法用于执行新增、修改、删除等语句；batchUpdate方法用于执行批处理相关语句；</li><li>query方法及queryForXXX方法：用于执行查询相关语句；</li><li>call方法：用于执行存储过程、函数相关语句。</li></ul><p><strong>测试</strong></p><p>编写一个controller，注入jdbcTemplate，编写测试方法进行访问测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestControllerpublic class JDBCcontroller &#123;  @Autowired  JdbcTemplate jdbcTemplate;  &#x2F;&#x2F;查询数据库的所有信息  &#x2F;&#x2F;List中的1个Map对应数据库中的一行数据  &#x2F;&#x2F;Map中的key对应数据库中的字段名，value对应数据库的字段值  @GetMapping(&quot;&#x2F;userList&quot;)  public List&lt;Map&lt;String,Object&gt;&gt; userList()&#123;    String sql &#x3D; &quot;select * from User&quot;;    List&lt;Map&lt;String, Object&gt;&gt; maps &#x3D; jdbcTemplate.queryForList(sql);    return maps;  &#125;  &#x2F;&#x2F;新增一个用户  @GetMapping(&quot;&#x2F;addUser&quot;)  public String addUser()&#123;    String sql &#x3D; &quot;insert into study.User(id,username,userPassword) values(10,&#39;李华&#39;,&#39;09876543456&#39;)&quot;;    jdbcTemplate.update(sql);    return &quot;update-ok&quot;;  &#125;  &#x2F;&#x2F;修改一个用户  @GetMapping(&quot;&#x2F;updateUser&#x2F;&#123;id&#125;&quot;)  public String updateUser(@PathVariable(&quot;id&quot;) int id)&#123;    &#x2F;&#x2F;插入语句    String sql &#x3D; &quot;update study.User set username&#x3D;?,userPassword&#x3D;? where id&#x3D;&quot; + id;&#x2F;&#x2F;数据    Object[] objects &#x3D; new Object[2];    objects[0] &#x3D; &quot;李华2&quot;;    objects[1] &#x3D; &quot;3333333&quot;;    jdbcTemplate.update(sql,objects);    return &quot;update-ok&quot;;  &#125;  &#x2F;&#x2F;删除用户  @GetMapping(&quot;&#x2F;deleteUser&#x2F;&#123;id&#125;&quot;)  public String deleteUser(@PathVariable(&quot;id&quot;) int id)&#123;    String sql &#x3D; &quot;delete from study.User where id&#x3D;&quot; + id;    jdbcTemplate.update(sql);    return &quot;update-ok&quot;;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="13、整合Druid"><a href="#13、整合Druid" class="headerlink" title="13、整合Druid"></a>13、整合Druid</h1><h2 id="Druid简介"><a href="#Druid简介" class="headerlink" title="Druid简介"></a>Druid简介</h2><p>Java程序很大一部分要操作数据库，为了提高性能操作数据库的时候，又不得不使用数据库连接池。</p><p>Druid 是阿里巴巴开源平台上一个数据库连接池实现，结合了 C3P0、DBCP 等 DB 池的优点，同时加入了日志监控。</p><p>Druid 可以很好的监控 DB 池连接和 SQL 的执行情况，天生就是针对监控而生的 DB 连接池。</p><p>Druid已经在阿里巴巴部署了超过600个应用，经过一年多生产环境大规模部署的严苛考验。</p><p>Spring Boot 2.0 以上默认使用 Hikari 数据源，可以说 Hikari 与 Driud 都是当前 Java Web 上最优秀的数据源，我们来重点介绍 Spring Boot 如何集成 Druid 数据源，如何实现数据库监控。</p><p>Github地址：<a href="https://github.com/alibaba/druid/">https://github.com/alibaba/druid/</a></p><p><strong>基本配置</strong></p><table><thead><tr><th>配置</th><th>缺省值</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td></td><td>配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。 如果没有配置，将会生成一个名字，格式是：“DataSource-” + System.identityHashCode(this)</td></tr><tr><td>jdbcUrl</td><td></td><td>连接数据库的url，不同数据库不一样。例如： mysql : jdbc:mysql://10.20.153.104:3306/druid2 oracle : jdbc:oracle:thin:@10.20.149.85:1521:ocnauto</td></tr><tr><td>username</td><td></td><td>连接数据库的用户名</td></tr><tr><td>password</td><td></td><td>连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里：<a href="https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter">https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter</a></td></tr><tr><td>driverClassName</td><td>根据url自动识别</td><td>这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)</td></tr><tr><td>initialSize</td><td>0</td><td>初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</td></tr><tr><td>maxActive</td><td>8</td><td>最大连接池数量</td></tr><tr><td>maxIdle</td><td>8</td><td>已经不再使用，配置了也没效果</td></tr><tr><td>minIdle</td><td></td><td>最小连接池数量</td></tr><tr><td>maxWait</td><td></td><td>获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td></tr><tr><td>maxOpenPreparedStatements</td><td>-1</td><td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td></tr><tr><td>validationQuery</td><td></td><td>用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。</td></tr><tr><td>testOnBorrow</td><td>true</td><td>申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</td></tr><tr><td>testOnReturn</td><td>false</td><td>归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</td></tr><tr><td>testWhileIdle</td><td>false</td><td>建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</td></tr><tr><td>timeBetweenEvictionRunsMillis</td><td></td><td>有两个含义： 1) Destroy线程会检测连接的间隔时间2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明</td></tr><tr><td>numTestsPerEvictionRun</td><td></td><td>不再使用，一个DruidDataSource只支持一个EvictionRun</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td></td></tr><tr><td>connectionInitSqls</td><td></td><td>物理连接初始化的时候执行的sql</td></tr><tr><td>exceptionSorter</td><td>根据dbType自动识别</td><td>当数据库抛出一些不可恢复的异常时，抛弃连接</td></tr><tr><td>filters</td><td></td><td>属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall</td></tr><tr><td>proxyFilters</td><td></td><td>类型是List&lt;com.alibaba.druid.filter.Filter&gt;，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系</td></tr></tbody></table><table><thead><tr><th>配置</th><th>缺省值</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td></td><td>配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。 如果没有配置，将会生成一个名字，格式是：“DataSource-” + System.identityHashCode(this)</td></tr><tr><td>jdbcUrl</td><td></td><td>连接数据库的url，不同数据库不一样。例如： mysql : jdbc:mysql://10.20.153.104:3306/druid2 oracle : jdbc:oracle:thin:@10.20.149.85:1521:ocnauto</td></tr><tr><td>username</td><td></td><td>连接数据库的用户名</td></tr><tr><td>password</td><td></td><td>连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里：<a href="https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter">https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter</a></td></tr><tr><td>driverClassName</td><td>根据url自动识别</td><td>这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)</td></tr><tr><td>initialSize</td><td>0</td><td>初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</td></tr><tr><td>maxActive</td><td>8</td><td>最大连接池数量</td></tr><tr><td>maxIdle</td><td>8</td><td>已经不再使用，配置了也没效果</td></tr><tr><td>minIdle</td><td></td><td>最小连接池数量</td></tr><tr><td>maxWait</td><td></td><td>获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td></tr><tr><td>maxOpenPreparedStatements</td><td>-1</td><td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td></tr><tr><td>validationQuery</td><td></td><td>用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。</td></tr><tr><td>testOnBorrow</td><td>true</td><td>申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</td></tr><tr><td>testOnReturn</td><td>false</td><td>归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</td></tr><tr><td>testWhileIdle</td><td>false</td><td>建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</td></tr><tr><td>timeBetweenEvictionRunsMillis</td><td></td><td>有两个含义： 1) Destroy线程会检测连接的间隔时间2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明</td></tr><tr><td>numTestsPerEvictionRun</td><td></td><td>不再使用，一个DruidDataSource只支持一个EvictionRun</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td></td></tr><tr><td>connectionInitSqls</td><td></td><td>物理连接初始化的时候执行的sql</td></tr><tr><td>exceptionSorter</td><td>根据dbType自动识别</td><td>当数据库抛出一些不可恢复的异常时，抛弃连接</td></tr><tr><td>filters</td><td></td><td>属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall</td></tr><tr><td>proxyFilters</td><td></td><td>类型是List&lt;com.alibaba.druid.filter.Filter&gt;，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系</td></tr></tbody></table><table><thead><tr><th>配置</th><th>缺省值</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td></td><td>配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。 如果没有配置，将会生成一个名字，格式是：“DataSource-” + System.identityHashCode(this)</td></tr><tr><td>jdbcUrl</td><td></td><td>连接数据库的url，不同数据库不一样。例如： mysql : jdbc:mysql://10.20.153.104:3306/druid2 oracle : jdbc:oracle:thin:@10.20.149.85:1521:ocnauto</td></tr><tr><td>username</td><td></td><td>连接数据库的用户名</td></tr><tr><td>password</td><td></td><td>连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里：<a href="https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter">https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter</a></td></tr><tr><td>driverClassName</td><td>根据url自动识别</td><td>这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)</td></tr><tr><td>initialSize</td><td>0</td><td>初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</td></tr><tr><td>maxActive</td><td>8</td><td>最大连接池数量</td></tr><tr><td>maxIdle</td><td>8</td><td>已经不再使用，配置了也没效果</td></tr><tr><td>minIdle</td><td></td><td>最小连接池数量</td></tr><tr><td>maxWait</td><td></td><td>获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td></tr><tr><td>maxOpenPreparedStatements</td><td>-1</td><td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td></tr><tr><td>validationQuery</td><td></td><td>用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。</td></tr><tr><td>testOnBorrow</td><td>true</td><td>申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</td></tr><tr><td>testOnReturn</td><td>false</td><td>归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</td></tr><tr><td>testWhileIdle</td><td>false</td><td>建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</td></tr><tr><td>timeBetweenEvictionRunsMillis</td><td></td><td>有两个含义： 1) Destroy线程会检测连接的间隔时间2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明</td></tr><tr><td>numTestsPerEvictionRun</td><td></td><td>不再使用，一个DruidDataSource只支持一个EvictionRun</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td></td></tr><tr><td>connectionInitSqls</td><td></td><td>物理连接初始化的时候执行的sql</td></tr><tr><td>exceptionSorter</td><td>根据dbType自动识别</td><td>当数据库抛出一些不可恢复的异常时，抛弃连接</td></tr><tr><td>filters</td><td></td><td>属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall</td></tr><tr><td>proxyFilters</td><td></td><td>类型是List&lt;com.alibaba.druid.filter.Filter&gt;，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系</td></tr></tbody></table><p>1、添加上 Druid 数据源依赖。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、切换数据源；springBoot2.0以上默认使用，但可以通过spring.datasource.type指定数据源</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">spring:  datasource:    username: codekitty    password: lihaiyang    url: jdbc:mysql:&#x2F;&#x2F;codekitty.cn:3306&#x2F;study?serverTimezone&#x3D;UTC&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8    driver-class-name: com.mysql.cj.jdbc.Driver    type: com.alibaba.druid.pool.DruidDataSource # 自定义数据源    #Spring Boot 默认是不注入这些属性值的，需要自己绑定    #druid 数据源专有配置    initialSize: 5    minIdle: 5    maxActive: 20    maxWait: 60000    timeBetweenEvictionRunsMillis: 60000    minEvictableIdleTimeMillis: 300000    validationQuery: SELECT 1 FROM DUAL    testWhileIdle: true    testOnBorrow: false    testOnReturn: false    poolPreparedStatements: true    #配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入    #如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority    #则导入 log4j 依赖即可，Maven 地址：https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;log4j&#x2F;log4j    filters: stat,wall,log4j    maxPoolPreparedStatementPerConnectionSize: 20    useGlobalDataSourceStat: true    connectionProperties: druid.stat.mergeSql&#x3D;true;druid.stat.slowSqlMillis&#x3D;500<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="进行测试"><a href="#进行测试" class="headerlink" title="进行测试"></a>进行测试</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class DruidConfig &#123;  @Bean  @ConfigurationProperties(prefix &#x3D; &quot;spring.datasource&quot;)  public DataSource druidDataSource()&#123;    return new DruidDataSource();  &#125;  @Bean  &#x2F;&#x2F;后台监控功能  &#x2F;&#x2F;因为SpringBoot内置了Servlet容器，所以没有Web.xml，替代方法：ServletRegistrationBean  public ServletRegistrationBean statViewServlet()&#123;    ServletRegistrationBean bean &#x3D; new ServletRegistrationBean&lt;&gt;(new StatViewServlet(),&quot;&#x2F;druid&#x2F;*&quot;);    &#x2F;&#x2F;后台需要有人登陆，账号密码配置    HashMap&lt;String,String&gt; map &#x3D; new HashMap&lt;&gt;();    &#x2F;&#x2F;增加配置    map.put(&quot;loginUsername&quot;,&quot;admin&quot;);&#x2F;&#x2F;登陆的key，是固定的，不能自己定义成其他的    map.put(&quot;loginPassword&quot;,&quot;123456&quot;);    &#x2F;&#x2F;允许谁可以访问    map.put(&quot;allow&quot;,&quot;localhost&quot;);    bean.setInitParameters(map);&#x2F;&#x2F;初始化参数    return bean;  &#125;  @Bean  &#x2F;&#x2F;filter  public FilterRegistrationBean WebStartFilter()&#123;    FilterRegistrationBean bean &#x3D; new FilterRegistrationBean&lt;&gt;();    &#x2F;&#x2F;设置过滤器    bean.setFilter(new WebStatFilter());    &#x2F;&#x2F;可以过滤哪些请求    Map&lt;String,String&gt; filters &#x3D; new HashMap&lt;&gt;();    &#x2F;&#x2F;这些东西不进行统计    filters.put(&quot;exclusions&quot;,&quot;*.js,*.css,&#x2F;druid&#x2F;*&quot;);    bean.setInitParameters(filters);    return bean;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="14、整合Mybatis"><a href="#14、整合Mybatis" class="headerlink" title="14、整合Mybatis"></a>14、整合Mybatis</h1><p>整合包</p><p>mybatis-spring-boot-starter</p><ol><li><p>导入包</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">#整合mybatismybatis:  type-aliases-package: com.springbootdatamybatis.pojo  mapper-locations: classpath:mybatis&#x2F;mapper&#x2F;*.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>mybatis配置</p></li><li><p>```xml</p><?xml version="1.0" encoding="UTF-8" ?><!DOCTYPE mapperPUBLIC "-//mybatis.org//DTD Mapper 3.0//EN""http://mybatis.org/dtd/mybatis-3-mapper.dtd"><mapper namespace="com.springbootdatamybatis.mapper.UserMapper"></mapper><pre class="line-numbers language-none"><code class="language-none">   5. 编写Sql   &#96;&#96;&#96;xml   &lt;select id&#x3D;&quot;queryUserList&quot; resultType&#x3D;&quot;User&quot;&gt;     select * from study.User;   &lt;&#x2F;select&gt;      &lt;select id&#x3D;&quot;queryUserById&quot; resultType&#x3D;&quot;User&quot;&gt;     select * from User where #&#123;id&#125;   &lt;&#x2F;select&gt;      &lt;insert id&#x3D;&quot;addUser&quot; parameterType&#x3D;&quot;User&quot;&gt;     insert into User(id,username,userPassword) values(#&#123;id&#125;,#&#123;username&#125;,#&#123;userPassword&#125;)   &lt;&#x2F;insert&gt;      &lt;update id&#x3D;&quot;updateUser&quot; parameterType&#x3D;&quot;User&quot;&gt;     update User set username&#x3D;#&#123;username&#125;,userPassword&#x3D;#&#123;userPassword&#125; where id&#x3D;#&#123;id&#125;   &lt;&#x2F;update&gt;      &lt;delete id&#x3D;&quot;deleteUser&quot; parameterType&#x3D;&quot;int&quot;&gt;     delete from User where id&#x3D;#&#123;id&#125;   &lt;&#x2F;delete&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>业务层调用dao层</p></li><li><p>controller调用service层(这里直接用controller调用的dao层)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestControllerpublic class UserController &#123;    @Autowired    private UserMapper userMapper;    @GetMapping(&quot;&#x2F;queryUserList&quot;)    public List&lt;User&gt; queryUserList()&#123;        List&lt;User&gt; userList &#x3D; userMapper.queryUserList();        for (User user : userList) &#123;            System.out.println(user);        &#125;        return userList;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="15、SpringSecurity（安全）"><a href="#15、SpringSecurity（安全）" class="headerlink" title="15、SpringSecurity（安全）"></a>15、SpringSecurity（安全）</h1><h2 id="安全简介"><a href="#安全简介" class="headerlink" title="安全简介"></a>安全简介</h2><p>在 Web 开发中，安全一直是非常重要的一个方面。安全虽然属于应用的非功能性需求，但是应该在应用开发的初期就考虑进来。如果在应用开发的后期才考虑安全的问题，就可能陷入一个两难的境地：一方面，应用存在严重的安全漏洞，无法满足用户的要求，并可能造成用户的隐私数据被攻击者窃取；另一方面，应用的基本架构已经确定，要修复安全漏洞，可能需要对系统的架构做出比较重大的调整，因而需要更多的开发时间，影响应用的发布进程。因此，从应用开发的第一天就应该把安全相关的因素考虑进来，并在整个应用的开发过程中。</p><p>市面上存在比较有名的：Shiro，Spring Security ！</p><p>认证，授权</p><h2 id="认识SpringSecurity"><a href="#认识SpringSecurity" class="headerlink" title="认识SpringSecurity"></a>认识SpringSecurity</h2><p>Spring Security 是针对Spring项目的安全框架，也是Spring Boot底层安全模块默认的技术选型，他可以实现强大的Web安全控制，对于安全控制，我们仅需要引入 spring-boot-starter-security 模块，进行少量的配置，即可实现强大的安全管理！</p><p>记住几个类：</p><ul><li>WebSecurityConfigurerAdapter：自定义Security策略</li><li>AuthenticationManagerBuilder：自定义认证策略</li><li>@EnableWebSecurity：开启WebSecurity模式</li></ul><ol><li>引入 Spring Security 模块</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>编写基础配置类</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.kuang.config;@EnableWebSecurity &#x2F;&#x2F; 开启WebSecurity模式public class SecurityConfig extends WebSecurityConfigurerAdapter &#123;  @Override  protected void configure(HttpSecurity http) throws Exception &#123;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>定制请求的授权规则</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Overrideprotected void configure(HttpSecurity http) throws Exception &#123;   &#x2F;&#x2F; 定制请求的授权规则   &#x2F;&#x2F; 首页所有人可以访问   http.authorizeRequests().antMatchers(&quot;&#x2F;&quot;).permitAll()  .antMatchers(&quot;&#x2F;level1&#x2F;**&quot;).hasRole(&quot;vip1&quot;)  .antMatchers(&quot;&#x2F;level2&#x2F;**&quot;).hasRole(&quot;vip2&quot;)  .antMatchers(&quot;&#x2F;level3&#x2F;**&quot;).hasRole(&quot;vip3&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>测试一下：发现除了首页都进不去了！因为我们目前没有登录的角色，因为请求需要登录的角色拥有对应的权限才可以！</li><li>在configure()方法中加入以下配置，开启自动配置的登录功能！</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 开启自动配置的登录功能&#x2F;&#x2F; &quot;&#x2F;login&quot; 请求来到登录页&#x2F;&#x2F; &#x2F;login?error 重定向到这里表示登录失败http.formLogin();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> 此时如果没有权限就会跳转至登陆页</p><ol><li>定义认定规则，重写configure(AuthenticationManagerBuilder auth)方法</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;认证@Overrideprotected void configure(AuthenticationManagerBuilder auth) throws Exception &#123;  &#x2F;&#x2F;数据正常应该从数据库中取，现在从内存中取  auth.inMemoryAuthentication().passwordEncoder(new BCryptPasswordEncoder())    .withUser(&quot;admin&quot;).password(new BCryptPasswordEncoder().encode(&quot;123&quot;)).roles(&quot;vip1&quot;,&quot;vip2&quot;)    .and()    .withUser(&quot;root&quot;).password(new BCryptPasswordEncoder().encode(&quot;123&quot;)).roles(&quot;vip1&quot;,&quot;vip2&quot;,&quot;vip3&quot;)    .and()    .withUser(&quot;guest&quot;).password(new BCryptPasswordEncoder().encode(&quot;123&quot;)).roles(&quot;vip1&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 这里设置密码加密<code>auth.inMemoryAuthentication().passwordEncoder(new BCryptPasswordEncoder())</code>否则会报<code>There is no PasswordEncoder mapped for the id &quot;null&quot;</code>错误,创建的每个用户也必须添加密码加密**<code>.password(new BCryptPasswordEncoder().encode(&quot;123&quot;))</code>**</p><ol><li>测试,发现，登录成功，并且每个角色只能访问自己认证下的规则！搞定</li></ol><h2 id="权限控制和注销"><a href="#权限控制和注销" class="headerlink" title="权限控制和注销"></a>权限控制和注销</h2><h3 id="注销"><a href="#注销" class="headerlink" title="注销"></a>注销</h3><ol><li><p>开启自动配置的注销的功能</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">//定制请求的授权规则@Overrideprotected void configure(HttpSecurity http) throws Exception &#123;   //....   //开启自动配置的注销的功能      // /logout 注销请求   http.logout();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>我们在前端，增加一个注销的按钮，index.html 导航栏中</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/logout&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注销<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>测试发现，点击注销按钮后会跳转到登陆页面，此时想要在注销成功后跳转到指定页面需要在请求后添加<code>.logoutSuccessUrl(&quot;/&quot;);</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; .logoutSuccessUrl(&quot;&#x2F;&quot;); 注销成功来到首页http.logout().logoutSuccessUrl(&quot;&#x2F;&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h3><p><strong>需求：</strong>用户没有登录的时候，导航栏上只显示登录按钮，用户登录之后，导航栏可以显示登录的用户信息及注销按钮！还有就是，比如admin这个用户，它只有 vip2，vip3功能，那么登录则只显示这两个功能，而vip1的功能菜单不显示！</p><ol><li><p>导入maven依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.thymeleaf.extras/thymeleaf-extras-springsecurity4 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.thymeleaf.extras<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf-extras-springsecurity5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>导入命名空间</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">xmlns:sec="http://www.thymeleaf.org/extras/spring-security"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改index页面,增加判断</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--如果未登录则显示以下内容--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">sec:</span>authorize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>!isAuthenticated()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/toLogin&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登陆<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--如果已登录则显示以下内容--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">sec:</span>authorize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isAuthenticated()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    用户名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">sec:</span>authentication</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    角色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">sec:</span>authentication</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>principal.authorities<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/logout&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注销<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--如果用户拥有这个角色，则显示该div内的内容，如果没有则不显示--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">sec:</span>authorize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hasRole('vip1')<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/level1/1&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>level1-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/level1/2&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>level1-2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">sec:</span>authorize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hasRole('vip2')<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/level2/1&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>level2-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/level2/2&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>level2-2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">sec:</span>authorize</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hasRole('vip3')<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/level3/1&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>level3-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/level3/2&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>level3-2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果注销404了，就是因为它默认防止csrf跨站请求伪造，因为会产生安全问题，我们可以将请求改为post表单提交，或者在spring security中关闭csrf功能；我们试试：在 配置中增加 <code>http.csrf().disable();</code></p></li></ol><h2 id="记住我"><a href="#记住我" class="headerlink" title="记住我"></a>记住我</h2><ol><li><p>开启记住我功能</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;定制请求的授权规则@Overrideprotected void configure(HttpSecurity http) throws Exception &#123;&#x2F;&#x2F;。。。。。。。。。。。   &#x2F;&#x2F;记住我,保存2周   http.rememberMe();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试，关闭浏览器再次打开用户依旧存在</p><p><strong>本质上是保存到cookie，通过浏览器审查元素的application中可以看到</strong></p></li><li><p>如果使用自己的页面中的按钮，可以给按钮设置name，再在配置后面加上如下方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">http.rememberMe().rememberMeParameter(&quot;remember&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="定制登录页"><a href="#定制登录页" class="headerlink" title="定制登录页"></a>定制登录页</h2><ol><li><p>在配置中设置，用<code>.loginProcessingUrl(&quot;/login&quot;)</code>并将前端<code>form</code>表单的<code>action</code>设置为括号内相同即可，但如果前端用户名和密码前后端不一样，则需要进行设置，括号内的属性为前端页面的<code>name</code>属性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">http.formLogin().loginPage(&quot;&#x2F;toLogin&quot;).usernameParameter(&quot;username&quot;).passwordParameter(&quot;password&quot;).loginProcessingUrl(&quot;&#x2F;login&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h1 id="16、Shiro"><a href="#16、Shiro" class="headerlink" title="16、Shiro"></a>16、Shiro</h1><h2 id="shiro简介"><a href="#shiro简介" class="headerlink" title="shiro简介"></a>shiro简介</h2><h3 id="基本功能点"><a href="#基本功能点" class="headerlink" title="基本功能点"></a>基本功能点</h3><p>Shiro 可以非常容易的开发出足够好的应用，其不仅可以用在 JavaSE 环境，也可以用在 JavaEE 环境。Shiro 可以帮助我们完成：认证、授权、加密、会话管理、与 Web 集成、缓存等。其基本功能点如下图所示：<br><img src="/2021/07/07/spring-boot/cf2e4300a30b411ae096034b119aaa66.png"></p><ul><li>Authentication：身份认证 / 登录，验证用户是不是拥有相应的身份；</li><li>Authorization：授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能做事情，常见的如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限；</li><li>Session Manager：会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通 JavaSE 环境的，也可以是如 Web 环境的；</li><li>Cryptography：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储；</li><li>Web Support：Web 支持，可以非常容易的集成到 Web 环境；</li><li>Caching：缓存，比如用户登录后，其用户信息、拥有的角色 / 权限不必每次去查，这样可以提高效率；</li><li>Concurrency：shiro 支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去；</li><li>Testing：提供测试支持；</li><li>Run As：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问；</li><li>Remember Me：记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了。</li></ul><p>记住一点，Shiro 不会去维护用户、维护权限；这些需要我们自己去设计 / 提供；然后通过相应的接口注入给 Shiro 即可。</p><h2 id="Shiro的架构"><a href="#Shiro的架构" class="headerlink" title="Shiro的架构"></a>Shiro的架构</h2><h3 id="外部"><a href="#外部" class="headerlink" title="外部"></a>外部</h3><p>我们从外部来看 Shiro ，即从应用程序角度的来观察如何使用 Shiro 完成工作。如下图：</p><p><img src="/2021/07/07/spring-boot/df98fd2989cc597496efc71670305a9c.png"></p><p>可以看到：应用代码直接交互的对象是 Subject，也就是说 Shiro 的对外 API 核心就是 Subject；其每个 API 的含义：</p><p><strong>Subject</strong>：主体，代表了当前 “用户”，这个用户不一定是一个具体的人，与当前应用交互的任何东西都Subject，如网络爬虫，机器人等；即一个抽象概念；所有 Subject 都绑定到 SecurityManager，与 Subject 的所有交互都会委托给 SecurityManager；可以把 Subject 认为是一个门面；SecurityManager 才是实际的执行者；</p><p><strong>SecurityManager</strong>：安全管理器；即所有与安全有关的操作都会与 SecurityManager 交互；且它管理着所有 Subject；可以看出它是 Shiro 的核心，它负责与后边介绍的其他组件进行交互，如果学习过 SpringMVC，你可以把它看成 DispatcherServlet 前端控制器；</p><p><strong>Realm</strong>：域，Shiro 从 Realm 获取安全数据（如用户、角色、权限），就是说 SecurityManager 要验证用户身份，那么它需要从 Realm 获取相应的用户进行比较以确定用户身份是否合法；也需要从 Realm 得到用户相应的角色 / 权限进行验证用户是否能进行操作；可以把 Realm 看成 DataSource，即安全数据源。</p><p>也就是说对于我们而言，最简单的一个 Shiro 应用：</p><ol><li>应用代码通过 Subject 来进行认证和授权，而 Subject 又委托给 SecurityManager；</li><li>我们需要给 Shiro 的 SecurityManager 注入 Realm，从而让 SecurityManager 能得到合法的用户及其权限进行判断。</li></ol><p><strong>从以上也可以看出，Shiro 不提供维护用户 / 权限，而是通过 Realm 让开发人员自己注入。</strong></p><h3 id="内部"><a href="#内部" class="headerlink" title="内部"></a>内部</h3><p>接下来我们来从 Shiro 内部来看下 Shiro 的架构，如下图所示：</p><p><img src="/2021/07/07/spring-boot/1387f91ea65f6d172393a8317ab5665d.png"></p><p><strong>Subject</strong>：主体，可以看到主体可以是任何可以与应用交互的 “用户”；</p><p><strong>SecurityManager</strong>：相当于 SpringMVC 中的 DispatcherServlet 或者 Struts2 中的 FilterDispatcher；是 Shiro 的心脏；所有具体的交互都通过 SecurityManager 进行控制；它管理着所有 Subject、且负责进行认证和授权、及会话、缓存的管理。</p><p><strong>Authenticator</strong>：认证器，负责主体认证的，这是一个扩展点，如果用户觉得 Shiro 默认的不好，可以自定义实现；其需要认证策略（Authentication Strategy），即什么情况下算用户认证通过了；</p><p><strong>Authrizer</strong>：授权器，或者访问控制器，用来决定主体是否有权限进行相应的操作；即控制着用户能访问应用中的哪些功能；</p><p><strong>Realm</strong>：可以有 1 个或多个 Realm，可以认为是安全实体数据源，即用于获取安全实体的；可以是 JDBC 实现，也可以是 LDAP 实现，或者内存实现等等；由用户提供；注意：Shiro 不知道你的用户 / 权限存储在哪及以何种格式存储；所以我们一般在应用中都需要实现自己的 Realm；</p><p><strong>SessionManager</strong>：如果写过 Servlet 就应该知道 Session 的概念，Session 呢需要有人去管理它的生命周期，这个组件就是 SessionManager；而 Shiro 并不仅仅可以用在 Web 环境，也可以用在如普通的 JavaSE 环境、EJB 等环境；所有呢，Shiro 就抽象了一个自己的 Session 来管理主体与应用之间交互的数据；这样的话，比如我们在 Web 环境用，刚开始是一台 Web 服务器；接着又上了台 EJB 服务器；这时想把两台服务器的会话数据放到一个地方，这个时候就可以实现自己的分布式会话（如把数据放到 Memcached 服务器）；</p><p><strong>SessionDAO</strong>：DAO 大家都用过，数据访问对象，用于会话的 CRUD，比如我们想把 Session 保存到数据库，那么可以实现自己的 SessionDAO，通过如 JDBC 写到数据库；比如想把 Session 放到 Memcached 中，可以实现自己的 Memcached SessionDAO；另外 SessionDAO 中可以使用 Cache 进行缓存，以提高性能；</p><p><strong>CacheManager</strong>：缓存控制器，来管理如用户、角色、权限等的缓存的；因为这些数据基本上很少去改变，放到缓存中后可以提高访问的性能</p><p><strong>Cryptography</strong>：密码模块，Shiro 提高了一些常见的加密组件用于如密码加密 / 解密的。</p><h2 id="shiro组件"><a href="#shiro组件" class="headerlink" title="shiro组件"></a>shiro组件</h2><h3 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h3><p><strong>身份验证</strong>，即在应用中谁能证明他就是他本人。一般提供如他们的身份 ID 一些标识信息来表明他就是他本人，如提供身份证，用户名 / 密码来证明。</p><p>在 shiro 中，用户需要提供 principals （身份）和 credentials（证明）给 shiro，从而应用能验证用户身份：</p><p><strong>principals</strong>：身份，即主体的标识属性，可以是任何东西，如用户名、邮箱等，唯一即可。一个主体可以有多个 principals，但只有一个 Primary principals，一般是用户名 / 密码 / 手机号。</p><p><strong>credentials</strong>：证明 / 凭证，即只有主体知道的安全值，如密码 / 数字证书等。</p><p>最常见的 principals 和 credentials 组合就是用户名 / 密码了。接下来先进行一个基本的身份认证。</p><p>另外两个相关的概念是之前提到的 <strong>Subject</strong> 及 <strong>Realm</strong>，分别是主体及验证主体的数据源。</p><h2 id="快速开始（helloworld）"><a href="#快速开始（helloworld）" class="headerlink" title="快速开始（helloworld）"></a>快速开始（helloworld）</h2><ol><li><p>导入依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jcl-over-slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置文件（shiro.ini）</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini">[users]# user &#39;root&#39; with password &#39;secret&#39; and the &#39;admin&#39; roleroot &#x3D; secret, admin# user &#39;guest&#39; with the password &#39;guest&#39; and the &#39;guest&#39; roleguest &#x3D; guest, guest# user &#39;presidentskroob&#39; with password &#39;12345&#39; (&quot;That&#39;s the same combination on# my luggage!!!&quot; ;)), and role &#39;president&#39;presidentskroob &#x3D; 12345, president# user &#39;darkhelmet&#39; with password &#39;ludicrousspeed&#39; and roles &#39;darklord&#39; and &#39;schwartz&#39;darkhelmet &#x3D; ludicrousspeed, darklord, schwartz# user &#39;lonestarr&#39; with password &#39;vespa&#39; and roles &#39;goodguy&#39; and &#39;schwartz&#39;lonestarr &#x3D; vespa, goodguy, schwartz[roles]# &#39;admin&#39; role has all permissions, indicated by the wildcard &#39;*&#39;admin &#x3D; *# The &#39;schwartz&#39; role can do anything (*) with any lightsaber:schwartz &#x3D; lightsaber:*# The &#39;goodguy&#39; role is allowed to &#39;drive&#39; (action) the winnebago (type) with# license plate &#39;eagle5&#39; (instance specific id)goodguy &#x3D; winnebago:drive:eagle5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>log4j</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">log4j.rootLogger&#x3D;INFO, stdoutlog4j.appender.stdout&#x3D;org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.layout&#x3D;org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern&#x3D;%d %p [%c] - %m %n# General Apache librarieslog4j.logger.org.apache&#x3D;WARN# Springlog4j.logger.org.springframework&#x3D;WARN# Default Shiro logginglog4j.logger.org.apache.shiro&#x3D;INFO# Disable verbose logginglog4j.logger.org.apache.shiro.util.ThreadContext&#x3D;WARNlog4j.logger.org.apache.shiro.cache.ehcache.EhCache&#x3D;WARN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Quickstart.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">import org.apache.shiro.SecurityUtils;import org.apache.shiro.authc.*;import org.apache.shiro.config.IniSecurityManagerFactory;import org.apache.shiro.mgt.SecurityManager;import org.apache.shiro.session.Session;import org.apache.shiro.subject.Subject;import org.apache.shiro.util.Factory;import org.slf4j.Logger;import org.slf4j.LoggerFactory;&#x2F;** * @author lee * @date 2020&#x2F;8&#x2F;11 - 6:24 下午 *&#x2F;public class Quickstart &#123;  private static final transient Logger log &#x3D; LoggerFactory.getLogger(Quickstart.class);  public static void main(String[] args) &#123;    Factory&lt;SecurityManager&gt; factory &#x3D; new IniSecurityManagerFactory(&quot;classpath:shiro.ini&quot;);    SecurityManager securityManager &#x3D; factory.getInstance();    SecurityUtils.setSecurityManager(securityManager);    &#x2F;&#x2F;获取当前的用户对象 Subject    Subject currentUser &#x3D; SecurityUtils.getSubject();    &#x2F;&#x2F; 通过当前用户拿到Session    Session session &#x3D; currentUser.getSession();    session.setAttribute(&quot;someKey&quot;, &quot;aValue&quot;);    String value &#x3D; (String) session.getAttribute(&quot;someKey&quot;);    if (value.equals(&quot;aValue&quot;)) &#123;      log.info(&quot;Subject&#x3D;&gt;session[&quot; + value + &quot;]&quot;);    &#125;    &#x2F;&#x2F;判断当前用户是否被认证    if (!currentUser.isAuthenticated()) &#123;      &#x2F;&#x2F;Token： 令牌      UsernamePasswordToken token &#x3D; new UsernamePasswordToken(&quot;lonestarr&quot;, &quot;vespa&quot;);      token.setRememberMe(true);&#x2F;&#x2F;设置记住我      try &#123;        currentUser.login(token);&#x2F;&#x2F;执行登陆操作      &#125; catch (UnknownAccountException uae) &#123;        log.info(&quot;There is no user with username of &quot; + token.getPrincipal());      &#125; catch (IncorrectCredentialsException ice) &#123;        log.info(&quot;Password for account &quot; + token.getPrincipal() + &quot; was incorrect!&quot;);      &#125; catch (LockedAccountException lae) &#123;        log.info(&quot;The account for username &quot; + token.getPrincipal() + &quot; is locked.  &quot; +                 &quot;Please contact your administrator to unlock it.&quot;);      &#125;      &#x2F;&#x2F; ... catch more exceptions here (maybe custom ones specific to your application?      catch (AuthenticationException ae) &#123;        &#x2F;&#x2F;unexpected condition?  error?      &#125;    &#125;    &#x2F;&#x2F;say who they are:    &#x2F;&#x2F;print their identifying principal (in this case, a username):    log.info(&quot;User [&quot; + currentUser.getPrincipal() + &quot;] logged in successfully.&quot;);    &#x2F;&#x2F;test a role:    if (currentUser.hasRole(&quot;schwartz&quot;)) &#123;      log.info(&quot;May the Schwartz be with you!&quot;);    &#125; else &#123;      log.info(&quot;Hello, mere mortal.&quot;);    &#125;    &#x2F;&#x2F;test a typed permission (not instance-level)    if (currentUser.isPermitted(&quot;lightsaber:wield&quot;)) &#123;      log.info(&quot;You may use a lightsaber ring.  Use it wisely.&quot;);    &#125; else &#123;      log.info(&quot;Sorry, lightsaber rings are for schwartz masters only.&quot;);    &#125;    &#x2F;&#x2F;a (very powerful) Instance Level permission:    if (currentUser.isPermitted(&quot;winnebago:drive:eagle5&quot;)) &#123;      log.info(&quot;You are permitted to &#39;drive&#39; the winnebago with license plate (id) &#39;eagle5&#39;.  &quot; +               &quot;Here are the keys - have fun!&quot;);    &#125; else &#123;      log.info(&quot;Sorry, you aren&#39;t allowed to drive the &#39;eagle5&#39; winnebago!&quot;);    &#125;    &#x2F;&#x2F;all done - log out!    currentUser.logout();    System.exit(0);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>以下方法Spring Security都有</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">Subject currentUser &#x3D; SecurityUtils.getSubject();Session session &#x3D; currentUser.getSession();currentUser.isAuthenticated()currentUser.getPrincipal()currentUser.hasRole(&quot;schwartz&quot;)currentUser.isPermitted(&quot;lightsaber:wield&quot;)currentUser.logout();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在SpringBoot中集成Shiro"><a href="#在SpringBoot中集成Shiro" class="headerlink" title="在SpringBoot中集成Shiro"></a>在SpringBoot中集成Shiro</h2><ol><li><p>创建springboot项目，创建时选择导入<code>springboot web</code>和<code>thmyeleaf</code></p></li><li><p>编写UserRealm类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;自定义的UserRealmpublic class UserRealm extends AuthorizingRealm &#123;  &#x2F;&#x2F;授权  @Override  protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123;    System.out.println(&quot;执行了&#x3D;》授权&quot;);    return null;  &#125;  &#x2F;&#x2F;认证  @Override  protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException &#123;    System.out.println(&quot;执行了&#x3D;》认证&quot;);    return null;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写Shiroconfig类(三个方法，从下往上写)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class ShiroConfig &#123;  &#x2F;&#x2F;shiroFilterFactoryBean：3  public ShiroFilterFactoryBean getShiroFilterFactoryBean(@Qualifier(&quot;securityManager&quot;) DefaultWebSecurityManager defaultWebSecurityManager)&#123;    ShiroFilterFactoryBean bean &#x3D; new ShiroFilterFactoryBean();    &#x2F;&#x2F;设置安全管理器    bean.setSecurityManager(defaultWebSecurityManager);    return bean;  &#125;  &#x2F;&#x2F;DefaultWebSecurityManager：2  @Bean(name&#x3D;&quot;securityManager&quot;)  public DefaultWebSecurityManager getdefaultWebSecurityManager(@Qualifier(&quot;userRealm&quot;) UserRealm userRealm)&#123;    DefaultWebSecurityManager securityManager &#x3D; new DefaultWebSecurityManager();    securityManager.setRealm(userRealm);    return securityManager;  &#125;  &#x2F;&#x2F;创建realm对象：1  @Bean  public UserRealm userRealm()&#123;    return new UserRealm();  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="实现登陆拦截"><a href="#实现登陆拦截" class="headerlink" title="实现登陆拦截"></a>实现登陆拦截</h2><ol><li><p>配置ShiroConfig配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;添加shiro的内置过滤器        &#x2F;*            anon:无需认证            authc:必须认证了才能访问            user:必须拥有记住我功能才能用            perms:拥有对某个资源的权限才能访问            role:拥有某个角色权限才能访问         *&#x2F;        Map&lt;String, String&gt; filterMap &#x3D; new LinkedHashMap&lt;&gt;();        filterMap.put(&quot;&#x2F;add&quot;,&quot;authc&quot;);        filterMap.put(&quot;&#x2F;update&quot;,&quot;authc&quot;);     bean.setFilterChainDefinitionMap(filterMap);        &#x2F;&#x2F;如果没有权限就调到登陆页面        bean.setLoginUrl(&quot;&#x2F;toLogin&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在controller类实现<code>/toLogin</code>请求</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(&quot;&#x2F;toLogin&quot;)public String toLogin()&#123;  return &quot;login&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="实现用户认证"><a href="#实现用户认证" class="headerlink" title="实现用户认证"></a>实现用户认证</h2><ol><li><p>在controller配置请求</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RequestMapping(&quot;&#x2F;login&quot;)public String login(String username ,String password,Model model)&#123;  &#x2F;&#x2F;获取当前的用户  Subject subject &#x3D; SecurityUtils.getSubject();  &#x2F;&#x2F;封装用户的登陆数据  UsernamePasswordToken token &#x3D; new UsernamePasswordToken(username,password);  try &#123;    subject.login(token);&#x2F;&#x2F;执行登陆方法，如果没有异常就说明登陆成功    return &quot;index&quot;;  &#125;catch (UnknownAccountException e)&#123;&#x2F;&#x2F;用户名不存在    model.addAttribute(&quot;msg&quot;,&quot;用户名不存在&quot;);    return &quot;login&quot;;  &#125;catch (IncorrectCredentialsException e)&#123;    model.addAttribute(&quot;msg&quot;,&quot;密码错误&quot;);    return &quot;login&quot;;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在UserRealm类中配置认证</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;认证@Overrideprotected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123;  System.out.println(&quot;执行了&#x3D;》认证&quot;);  &#x2F;&#x2F;用户名密码   数据库取  String name &#x3D; &quot;root&quot;;  String password &#x3D; &quot;123&quot;;  UsernamePasswordToken userToken &#x3D; (UsernamePasswordToken) token;  System.out.println(userToken.toString());  if(!userToken.getUsername().equals(name))&#123;    return null; &#x2F;&#x2F;抛出异常  UnknownAccountException  &#125;  return new SimpleAuthenticationInfo(&quot;&quot;,password,&quot;&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用户名验证自己来做，密码验证shiro来做</p></li></ol><h2 id="整合Mybatis"><a href="#整合Mybatis" class="headerlink" title="整合Mybatis"></a>整合Mybatis</h2><ol><li><p>配置properties(yaml),和日志配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">mybatis.type-aliases-package&#x3D;com.shirospringboot.pojomybatis.mapper-locations&#x3D;classpath:mapper&#x2F;*.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"> spring:datasource:     username: codekitty     password: lihaiyang     url: jdbc:mysql:&#x2F;&#x2F;codekitty.cn:3306&#x2F;study?serverTimezone&#x3D;UTC&amp;useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8     driver-class-name: com.mysql.cj.jdbc.Driver     type: com.alibaba.druid.pool.DruidDataSource # 自定义数据源      #Spring Boot 默认是不注入这些属性值的，需要自己绑定     #druid 数据源专有配置     initialSize: 5     minIdle: 5     maxActive: 20     maxWait: 60000     timeBetweenEvictionRunsMillis: 60000     minEvictableIdleTimeMillis: 300000     validationQuery: SELECT 1 FROM DUAL     testWhileIdle: true     testOnBorrow: false     testOnReturn: false     poolPreparedStatements: true      #配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入     #如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority     #则导入 log4j 依赖即可，Maven 地址：https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;log4j&#x2F;log4j     filters: stat,wall,log4j     maxPoolPreparedStatementPerConnectionSize: 20     useGlobalDataSourceStat: true     connectionProperties: druid.stat.mergeSql&#x3D;true;druid.stat.slowSqlMillis&#x3D;500<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写mapper接口和mapper.xml</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Repository@Mapperpublic interface UserMapper &#123;    public User queryUserByName(String name);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">   <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>           <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>           <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--namespace=绑定一个对应的Dao/Mapper接口--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.shirospringboot.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!--    查询语句 id相当与要重写的方法名--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryUserByName<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>String<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           select * from study.User where username = #&#123;username&#125;       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>写service层</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface UserService &#123;    public User queryUserByName(String name);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">   @Servicepublic class UserServiceImpl implements UserService &#123;     @Autowired     UserMapper userMapper;        @Override     public User queryUserByName(String username) &#123;          return userMapper.queryUserByName(username);     &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试项目可以直接调用dao，不写service层，但公司项目一般要求写service层</p></li></ol><h2 id="实现授权"><a href="#实现授权" class="headerlink" title="实现授权"></a>实现授权</h2><ol><li><p>对资源设置权限</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;拦截Map&lt;String, String&gt; filterMap &#x3D; new LinkedHashMap&lt;&gt;();filterMap.put(&quot;&#x2F;add&quot;,&quot;perms[user:add]&quot;);filterMap.put(&quot;&#x2F;update&quot;,&quot;perms[user:update]&quot;);bean.setFilterChainDefinitionMap(filterMap);&#x2F;&#x2F;未授权就跳转到此请求bean.setUnauthorizedUrl(&quot;&#x2F;noauth&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>对登陆用户进行授权,该用户拥有的权限从数据库取得</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;授权@Overrideprotected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123;  System.out.println(&quot;执行了&#x3D;》授权&quot;);  SimpleAuthorizationInfo info &#x3D; new SimpleAuthorizationInfo();  &#x2F;&#x2F;拿到当前登陆的对象  Subject subject &#x3D; SecurityUtils.getSubject();  User currentUser &#x3D; (User)subject.getPrincipal();&#x2F;&#x2F;拿到User  info.addStringPermission(currentUser.getPerms());&#x2F;&#x2F;授权  return info;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="整合thymeleaf"><a href="#整合thymeleaf" class="headerlink" title="整合thymeleaf"></a>整合thymeleaf</h2><ol><li><p>导入shiro整合thymeleaf的maven资源</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--        shiro-thymeleaf整合--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.theborakompanioni<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf-extras-shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>导入命名空间（不导没有提示，但不影响使用）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">xmlns:shiro="http://www.thymeleaf.org/thymeleaf-extras-shiro"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置bean</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Bean&#x2F;&#x2F;整合shiroDialect ：用来整合shiro和thymeleafpublic ShiroDialect getShiroDialect()&#123;  return new ShiroDialect();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实现登陆后只显示有用户权限的页面的链接</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">shiro:</span>hasPermission</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user:add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/add&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">shiro:</span>hasPermission</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user:update<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/update&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>update<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="17、Swagger"><a href="#17、Swagger" class="headerlink" title="17、Swagger"></a>17、Swagger</h1><p>接口文档对于前后端开发人员都十分重要。尤其近几年流行前后端分离后接口文档又变成重中之重。接口文档固然重要，但是由于项 目周期等原因后端人员经常出现无法及时更新，导致前端人员抱怨接 口文档和实际情况不一致。</p><p>很多人员会抱怨别人写的接口文档不规范，不及时更新。当时当 自己写的时候确实最烦去写接口文档。这种痛苦只有亲身经历才会牢 记于心。</p><p>如果接口文档可以实时动态生成就不会出现上面问题。</p><p><strong>Swagger</strong> 可以完美的解决上面的问题。</p><h2 id="Swagger-简介："><a href="#Swagger-简介：" class="headerlink" title="Swagger 简介："></a>Swagger 简介：</h2><p>Swagger 是一套围绕 Open API 规范构建的开源工具，可以帮助设 计，构建，记录和使用 REST API。</p><p>Swagger 工具包括的组件：</p><ul><li>Swagger Editor ：基于浏览器编辑器，可以在里面编写 Open API规范。类似 Markdown 具有实时预览描述文件的功能。</li><li>Swagger UI：将 Open API 规范呈现为交互式 API 文档。用可视化UI 展示描述文件。</li><li>Swagger Codegen：将 OpenAPI 规范生成为服务器存根和客户端 库。通过 Swagger Codegen 可以将描述文件生成 html 格式和 cwiki 形 式的接口文档，同时也可以生成多种言语的客户端和服务端代码。</li></ul><p>Swagger Inspector：和 Swagger UI 有点类似，但是可以返回更多 信息，也会保存请求的实际参数数据。</p><p>Swagger Hub：集成了上面所有项目的各个功能，你可以以项目 和版本为单位，将你的描述文件上传到 Swagger Hub 中。在 Swagger Hub 中可以完成上面项目的所有工作，需要注册账号，分免费版和收费版。</p><p>使用 Swagger，就是把相关的信息存储在它定义的描述文件里面（yml 或 json 格式），再通过维护这个描述文件可以去更新接口文档， 以及生成各端代码。</p><h2 id="Swagger集成"><a href="#Swagger集成" class="headerlink" title="Swagger集成"></a>Swagger集成</h2><ol><li><p>导入maven依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建SwaggerConfig.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configuration@EnableSwagger2   &#x2F;&#x2F;开启Swagger2public class SwaggerConfig&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>运行访问<code>http://localhost:8080/swagger-ui.html</code>进行测试</p></li></ol><h2 id="Swagger配置"><a href="#Swagger配置" class="headerlink" title="Swagger配置"></a>Swagger配置</h2><p>在SwaggerConfig进行如下配置即可自定义Swagger配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configuration@EnableSwagger2   &#x2F;&#x2F;开启Swagger2public class SwaggerConfig&#123;  @Bean  public Docket docket()&#123;    return new Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo());  &#125;  private ApiInfo apiInfo()&#123;    &#x2F;&#x2F;作者信息    Contact contact &#x3D; new Contact(&quot;李海洋&quot;, &quot;codekitty.cn:8000&quot;, &quot;L18249290950@126.com&quot;);    return new ApiInfo(&quot;codekitty&#39;s Swagger API Documentation&quot;, &quot;千里之行，始于足下&quot;, &quot;1.0&quot;, &quot;codekitty.cn:8000&quot;,contact , &quot;Apache 2.0&quot;, &quot;http:&#x2F;&#x2F;www.apache.org&#x2F;licenses&#x2F;LICENSE-2.0&quot;, new ArrayList());  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Swagger扫描接口"><a href="#Swagger扫描接口" class="headerlink" title="Swagger扫描接口"></a>Swagger扫描接口</h2><ol><li>Docket(DocumentationType.SWAGGER_2).select()</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">new Docket(DocumentationType.SWAGGER_2)  .apiInfo(apiInfo())  .enable(b)&#x2F;&#x2F;是否启用Swagger，false则不启用  .select()  &#x2F;&#x2F;RequestHandlerSelectors,配置要扫描接口的方式  &#x2F;&#x2F;basePackage，指定扫描包  &#x2F;&#x2F;                .apis(RequestHandlerSelectors.any()),扫描全部  &#x2F;&#x2F;                .apis(RequestHandlerSelectors.none()),不扫描  &#x2F;&#x2F;                withMethodAnnotation(GetMapping.class)) &#x2F;&#x2F;扫描类上的注解  &#x2F;&#x2F;                withClassAnnotation(GetMapping.class)) &#x2F;&#x2F;扫描方法上的注解  .apis(RequestHandlerSelectors.basePackage(&quot;com.controller&quot;))  &#x2F;&#x2F;Path过滤路径  &#x2F;&#x2F;                .paths(PathSelectors.ant(&quot;&#x2F;com&#x2F;**&quot;))  .build();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>实现开发环境中使用Swagger，运行上线环境中不使用Swagger</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">public Docket docket(Environment environment)&#123;&#x2F;&#x2F;设置要显示的Swagger环境Profiles profiles &#x3D; Profiles.of(&quot;dev&quot;,&quot;test&quot;);&#x2F;&#x2F;获取项目的环境：判断是否处在自己设定的环境中boolean flag &#x3D; environment.acceptsProfiles(profiles);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在properties中选择使用的环境,将flag传入<code>Enable()</code></p><ol><li>通过<code>groupName(&quot;&quot;)</code>配置多个Docket，(在多人开发中，每个开发者配置一个自己的Swagger，方便管理)</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Beanpublic Docket docket1()&#123;  return new Docket(DocumentationType.SWAGGER_2).groupName(&quot;A&quot;);&#125;@Beanpublic Docket docket2()&#123;  return new Docket(DocumentationType.SWAGGER_2).groupName(&quot;B&quot;);&#125;@Beanpublic Docket docket3()&#123;  return new Docket(DocumentationType.SWAGGER_2).groupName(&quot;C&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实体类配置"><a href="#实体类配置" class="headerlink" title="实体类配置"></a>实体类配置</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">@ApiModel(&quot;用户实体类&quot;)public class User &#123;    @ApiModelProperty(&quot;用户名&quot;)    private String username;    @ApiModelProperty(&quot;密码&quot;)    private String password;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Controller进行配置请求</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@ApiOperation(&quot;user请求&quot;)    &#x2F;&#x2F;只要接口中返回值存在实体类，它就会被扫描到Swagger中    @PostMapping(value &#x3D; &quot;&#x2F;user&quot;)    public String user(@ApiParam(&quot;用户名&quot;)String username)&#123;        return &quot;hello&quot; + username;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就可以在Swagger显示实体类的信息，如果属性是private需要加get,set方法</p><p><strong>总结：</strong></p><ol><li>我们可以通过Swagger给一些比较难理解的属性或接口增加注释信息</li><li>接口文档实时更新</li><li>可以在线测试</li></ol><p>【注意】在正式发布时要关闭Swagger！！！可以保证安全和避免浪费性能</p><h1 id="18、任务"><a href="#18、任务" class="headerlink" title="18、任务"></a>18、任务</h1><h2 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h2><p>定义一个Service</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Servicepublic class AsyncService &#123;    @Async    public void hello()&#123;        try &#123;            Thread.sleep(3000);        &#125; catch (InterruptedException e) &#123;            e.printStackTrace();        &#125;        System.out.println(&quot;数据正在处理&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义一个请求,在请求中调用service中的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@ResponseBody@RequestMapping(&quot;&#x2F;hello&quot;)public String hello()&#123;  asyncService.hello();  return &quot;OK&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Service的方法中使用<code>@Async</code>,并在主入口上使用<code>@EnableAsync</code>开启异步任务</p><h2 id="邮件发送"><a href="#邮件发送" class="headerlink" title="邮件发送"></a>邮件发送</h2><p>在properties中配置自己的邮件信息</p><pre class="line-numbers language-pro" data-language="pro"><code class="language-pro">spring.mail.username&#x3D;1012074120@qq.comspring.mail.password&#x3D;jtnhlvabxxqsbbgaspring.mail.host&#x3D;smtp.qq.com#开启加密验证(qq邮箱)spring.mail.properties.mail.smtp.ssl.enable&#x3D;true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>简单邮件发送</strong></p><p>直接调用SpringBoot的<code>JavaMailSenderImpl</code>类,使用<code>SimpleMailMessage</code>发送简单邮件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@AutowiredJavaMailSenderImpl mailSender;@Testvoid contextLoads() &#123;  SimpleMailMessage simpleMailMessage &#x3D; new SimpleMailMessage();  simpleMailMessage.setSubject(&quot;你好&quot;);  simpleMailMessage.setText(&quot;Hello world&quot;);  simpleMailMessage.setTo(&quot;L18249290950@126.com&quot;);  simpleMailMessage.setFrom(&quot;1012074120@qq.com&quot;);  mailSender.send(simpleMailMessage);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>复杂邮件发送</strong></p><p>调用<code>mailSender.createMimeMessage()</code>并使用<code>MimeMessageHelper</code>配置邮件内容，发送即可，邮件内容后设置为true可以解析html格式的内容</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void SendMail(Boolean html,String title, String text, File file, String sendTo, String sendFrom) throws MessagingException &#123;        &#x2F;&#x2F;复杂邮件        MimeMessage mimeMessage &#x3D; mailSender.createMimeMessage();        &#x2F;&#x2F;组装        MimeMessageHelper mimeMessageHelper &#x3D; new MimeMessageHelper(mimeMessage,true);        mimeMessageHelper.setSubject(title);        mimeMessageHelper.setText(text,true);&#x2F;&#x2F;true,开启html解析       mimeMessageHelper.addAttachment(&quot;1.jpg&quot;,file);        mimeMessageHelper.setTo(sendTo);        mimeMessageHelper.setFrom(sendFrom);        mailSender.send(mimeMessage);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">TaskScheduler &#x2F;&#x2F;任务调度程序TaskExecutor&#x2F;&#x2F;任务执行者@EnableScheduling &#x2F;&#x2F;开启定时功能的注解，放在主入口@Scheduled&#x2F;&#x2F;什么时候执行  cron表达式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在方法上面加上<code>@Scheduled(cron = &quot;0 43 14 * * ?&quot;)</code>并加上相应的表达式即可</p><p>常用表达式例子：</p><pre class="line-numbers language-none"><code class="language-none">（1）0 0 2 1 * ? *   表示在每月的1日的凌晨2点调整任务（2）0 15 10 ? * MON-FRI   表示周一到周五每天上午10:15执行作（3）0 15 10 ? 6L 2002-2006   表示2002-2006年的每个月的最后一个星期五上午10:15执行作（4）0 0 10,14,16 * * ?   每天上午10点，下午2点，4点（5）0 0&#x2F;30 9-17 * * ?   朝九晚五工作时间内每半小时（6）0 0 12 ? * WED    表示每个星期三中午12点（7）0 0 12 * * ?   每天中午12点触发（8）0 15 10 ? * *    每天上午10:15触发（9）0 15 10 * * ?     每天上午10:15触发（10）0 15 10 * * ? *    每天上午10:15触发（11）0 15 10 * * ? 2005    2005年的每天上午10:15触发（12）0 * 14 * * ?     在每天下午2点到下午2:59期间的每1分钟触发（13）0 0&#x2F;5 14 * * ?    在每天下午2点到下午2:55期间的每5分钟触发（14）0 0&#x2F;5 14,18 * * ?     在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发（15）0 0-5 14 * * ?    在每天下午2点到下午2:05期间的每1分钟触发（16）0 10,44 14 ? 3 WED    每年三月的星期三的下午2:10和2:44触发（17）0 15 10 ? * MON-FRI    周一至周五的上午10:15触发（18）0 15 10 15 * ?    每月15日上午10:15触发（19）0 15 10 L * ?    每月最后一日的上午10:15触发（20）0 15 10 ? * 6L    每月的最后一个星期五上午10:15触发（21）0 15 10 ? * 6L 2002-2005   2002年至2005年的每月的最后一个星期五上午10:15触发（22）0 15 10 ? * 6#3   每月的第三个星期五上午10:15触发<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="19、集成Redis"><a href="#19、集成Redis" class="headerlink" title="19、集成Redis"></a>19、集成Redis</h1><p>Springboot操作数据：spring-data jpa jdbc mongodb redis</p><p>SpringData 也是和SpringBoot齐名的项目</p><p>说明：在SpringBoot2.x之后，原来使用的jedis被替换为乐lettuce</p><p>jedis：底层采用直连，多线程操作不安全，如果想要避免不安全，使用jedis pool连接池 更像Bio模式</p><p>lettuce：底层采用netty，实例可以在多个线程中共享，不存在线程不安全的情况，可以减少线程数量，更像Nio模式</p><h2 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h2><p>源码分析</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Bean@ConditionalOnMissingBean(  name &#x3D; &#123;&quot;redisTemplate&quot;&#125;&#x2F;&#x2F;我们可以自己定义一个RedisTamplate来替换这个默认的)public RedisTemplate&lt;Object, Object&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory) throws UnknownHostException &#123;  &#x2F;&#x2F;默认的RedisTemplate没有过多的设置，redis对象都是需要序列化的！  &#x2F;&#x2F;两个泛型都是&lt;Object,Object&gt;的类型，我们使用需要强制转换成&lt;String,Object&gt;  RedisTemplate&lt;Object, Object&gt; template &#x3D; new RedisTemplate();  template.setConnectionFactory(redisConnectionFactory);  return template;&#125;@Bean@ConditionalOnMissingBean&#x2F;&#x2F;由于String类型时redis中最长使用的类型，所以单独提取出来一个beanpublic StringRedisTemplate stringRedisTemplate(RedisConnectionFactory redisConnectionFactory) throws UnknownHostException &#123;  StringRedisTemplate template &#x3D; new StringRedisTemplate();  template.setConnectionFactory(redisConnectionFactory);  return template;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>导入依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--        操作redis--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置连接</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">#配置redisspring.redis.host&#x3D;127.0.0.1spring.redis.port&#x3D;6379<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Autowiredprivate  RedisTemplate&lt;Object,  Object&gt;  redisTemplate;@Testvoid contextLoads() &#123;  &#x2F;&#x2F;opsForValue   操作字符串 类似String  &#x2F;&#x2F;opsForList    操作List 类似List  &#x2F;&#x2F;opsForSet     操作  &#x2F;&#x2F;opsForHash  &#x2F;&#x2F;opsForZSet  &#x2F;&#x2F;opsForGeo  &#x2F;&#x2F;opsForHyperLogLog  &#x2F;&#x2F;除了基本的操作，我们常用的方法都可以直接通过redisTemplate操作，比如事务和基本的CRUD  &#x2F;&#x2F;        RedisConnection connection &#x3D; redisTemplate.getConnectionFactory().getConnection();  &#x2F;&#x2F;        connection.flushDb();  &#x2F;&#x2F;        connection.flushAll();  redisTemplate.opsForValue().set(&quot;mykey&quot;,&quot;李明&quot;);  System.out.println((String)redisTemplate.opsForValue().get(&quot;mykey&quot;));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出“李明”既为测试成功</p></li></ol><p>后续等学过redis后再记</p><h1 id="分布式Dubbo-Zokeeper-SpringBoot"><a href="#分布式Dubbo-Zokeeper-SpringBoot" class="headerlink" title="分布式Dubbo+Zokeeper+SpringBoot"></a>分布式Dubbo+Zokeeper+SpringBoot</h1><h2 id="什么是分布式系统？"><a href="#什么是分布式系统？" class="headerlink" title="什么是分布式系统？"></a><strong>什么是分布式系统？</strong></h2><p>在《分布式系统原理与范型》一书中有如下定义：“分布式系统是若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统”；</p><p>分布式系统是由一组通过网络进行通信、为了完成共同的任务而协调工作的计算机节点组成的系统。分布式系统的出现是为了用廉价的、普通的机器完成单个计算机无法完成的计算、存储任务。其目的是<strong>利用更多的机器，处理更多的数据</strong>。</p><p>分布式系统（distributed system）是建立在网络之上的软件系统。</p><p>首先需要明确的是，只有当单个节点的处理能力无法满足日益增长的计算、存储任务的时候，且硬件的提升（加内存、加磁盘、使用更好的CPU）高昂到得不偿失的时候，应用程序也不能进一步优化的时候，我们才需要考虑分布式系统。因为，分布式系统要解决的问题本身就是和单机系统一样的，而由于分布式系统多节点、通过网络通信的拓扑结构，会引入很多单机系统没有的问题，为了解决这些问题又会引入更多的机制、协议，带来更多的问题。。。</p><h2 id="什么是RPC"><a href="#什么是RPC" class="headerlink" title="什么是RPC"></a>什么是RPC</h2><p>RPC【Remote Procedure Call】是指远程过程调用，是一种进程间通信方式，他是一种技术的思想，而不是规范。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即程序员无论是调用本地的还是远程的函数，本质上编写的调用代码基本相同。</p><p>也就是说两台服务器A，B，一个应用部署在A服务器上，想要调用B服务器上应用提供的函数/方法，由于不在一个内存空间，不能直接调用，需要通过网络来表达调用的语义和传达调用的数据。为什么要用RPC呢？就是无法在一个进程内，甚至一个计算机内通过本地调用的方式完成的需求，比如不同的系统间的通讯，甚至不同的组织间的通讯，由于计算能力需要横向扩展，需要在多台机器组成的集群上部署应用。RPC就是要像调用本地的函数一样去调远程函数；</p><p>Dubbo基本概念</p><p><img src="/2021/07/07/spring-boot/c666643ffa85deae03453e4b05f0dfce.png"></p><p><strong>服务提供者</strong>（Provider）：暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。</p><p><strong>服务消费者</strong>（Consumer）：调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p><p><strong>注册中心</strong>（Registry）：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者</p><p><strong>监控中心</strong>（Monitor）：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心</p><p><strong>调用关系说明</strong></p><p>l 服务容器负责启动，加载，运行服务提供者。</p><p>l 服务提供者在启动时，向注册中心注册自己提供的服务。</p><p>l 服务消费者在启动时，向注册中心订阅自己所需的服务。</p><p>l 注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</p><p>l 服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</p><p>l 服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</p><p>安装Dubbo-admin</p><ol><li>下载dubbo-admin</li></ol><p>地址 ：<a href="https://github.com/apache/dubbo-admin/tree/master">https://github.com/apache/dubbo-admin/tree/master</a></p><ol><li><p>进行打包（可以是Idea打包，也可以是命令行打包）</p></li><li><p>使用命令<code>java -jar dubbo-admin-0.0.1-SNAPSHOT.jar</code></p><p>【注意：zookeeper的服务一定要打开！】</p></li><li><p>访问localhost:7001即可访问Dubbo-admin页面</p><p><img src="/2021/07/07/spring-boot/fe8eaf5354b68eee2a6485f8aebe65c1.png"></p></li></ol><h3 id="实现跨项目访问类"><a href="#实现跨项目访问类" class="headerlink" title="实现跨项目访问类"></a>实现跨项目访问类</h3><ol><li><p>提供者配置文件</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">#服务应用名字dubbo.application.name&#x3D;provider-server#注册中心地址dubbo.registry.address&#x3D;zookeeper:&#x2F;&#x2F;127.0.0.1:2181#哪些服务要被注册(扫描包)dubbo.scan.base-packages&#x3D;com.servic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写提供者的接口和实现类</p></li><li><p>消费者配置文件</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">#消费者去哪里拿服务需要暴露自己的名字dubbo.application.name&#x3D;customer-server#注册中心的地址dubbo.registry.address&#x3D;zookeeper:&#x2F;&#x2F;127.0.0.1:2181<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在消费者和提供者相同的包下建立提供者的接口</p></li><li><p>消费者服务类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Service &#x2F;&#x2F;注入到容器中public class UserService &#123;   @Reference &#x2F;&#x2F;远程引用指定的服务，他会按照全类名进行匹配，看谁给注册中心注册了这个全类名   TicketService ticketService;   public void bugTicket()&#123;       String ticket &#x3D; ticketService.getTicket();       System.out.println(&quot;在注册中心买到&quot;+ticket);  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编写测试类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@AutowiredUserService userService;@Testpublic void contextLoads() &#123;  userService.bugTicket();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a><strong>启动测试</strong></h2><p><strong>1. 开启zookeeper</strong></p><p><strong>2. 打开dubbo-admin实现监控【可以不用做】</strong></p><p><strong>3. 开启服务者</strong></p><p><strong>4. 消费者消费测试</strong></p><h1 id="回顾-架构"><a href="#回顾-架构" class="headerlink" title="回顾,架构!"></a>回顾,架构!</h1><h2 id="层架构-MVC"><a href="#层架构-MVC" class="headerlink" title="层架构+MVC"></a>层架构+MVC</h2><p>架构 –&gt;解耦</p><p>开发框架</p><p> Spring</p><p> IOC AOP</p><p> <strong>IOC : 控制反转</strong></p><p> 泡温泉,泡茶泡友</p><p> 附近的人,打招呼。加微信,聊天,天天聊&gt;约泡</p><p> 浴场(容器):温泉,茶庄泡友</p><p> 直接进温泉,就有人和你一起了!</p><p> 原来我们都是自己一步步操作,现在交给容器了!我们需要什么就去拿就可以了<br>​ <strong>AOP:切面(本质,动态代理）</strong><br>​ 为了解什么?不影响业本来的情况下,实现动态增加功能,大量应用在日志,事务等等</p><p> Spring是一个轻量级的Java开源框架，容器</p><p> 目的：解决企业开发的复杂性问题</p><p> Spring是春天，但配置文件繁琐</p><h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><p><strong>SpringBoot</strong> ,新代javaEE的开发标准,开箱即用!&gt;拿过来就可以用,它自</p><p>动帮我们配置了非常多的东西,我们拿来即用,特性:约定大于配置!</p><p>随着公司体系越来越大,用户越来越多</p><p>微服务架构—&gt;新架构</p><p> 模块化,功能化!</p><p> 用户,支付,签到,娱乐…;</p><p> 人多余多一台服务器解决不了就再增加一台服务器! –横向扩展</p><p> 假设A服务器占用98%资源B服务器只占用了10%.–<strong>负载均衡</strong>;</p><p> 将原来的整体项,分成模块化,用户就是一个单独的项目,签到也是一个单独的项目,项目和项目之前需要通信,如何通信</p><p> 用户非常多而到十分少给用户多一点服务器,给签到少一点服务器<br>微服务架构问题?<br><strong>分布式架构会遇到的四个核心题?</strong></p><ol><li>这么多服务,客户端该如何去访?</li><li>这么多服务,服务之间如何进行通信?</li><li>这么多服务,如何治理呢?</li></ol><h2 id="解决方案-SpringCloud"><a href="#解决方案-SpringCloud" class="headerlink" title="解决方案:SpringCloud"></a><strong>解决方案:SpringCloud</strong></h2><p>Springcloud是一套生态，就是来解决以上分布式架构的4个问题</p><p>想使用Spring Clould ,必须要掌握 springBoot , 因为Springcloud是基于springBoot ;</p><ol><li><p>spring Cloud NetFlix</p><p>,出来了一套解决方案！一站式解决方案。可以直接使用</p><ul><li>Api网关 , zuul组件</li><li>Feign –&gt; Httpclient —&gt; http通信方式,同步并阻塞</li><li>服务注册与发现 , Eureka</li><li>熔断机制 , Hystrix</li></ul></li></ol><p>2018年年底,NetFlix 宣布无限期停止维护。生态不再维护,就会脱节。</p><ol><li><p><strong>Apache Dubbo zookeeper ,</strong></p><ul><li>API:没有!要么找第三方组件,要么自己实现</li><li>Dubbo 是一个高性能的基于ava实现的RPC通信框架!2.6.x</li><li>服务注册与发现 , zookeeper :动物管理者 ( Hadoop , Hive )</li><li>没有:借助了Hystrix</li></ul><p>不完善，Dubbo</p></li><li><p><strong>SpringCloud Alibaba</strong> 一站式解决方案</p></li></ol><p>目前又提出了新的思路</p><ul><li>服务网格：也许是下一代维服务标准，Service mesh</li><li>代表解决方案：istio（未来可能需要掌握）</li></ul><p>总而言之，要解决的问题就是4个</p><ol><li>API网关 ， 服务路由</li><li>HTTP，RPC框架，异步调用</li><li>服务注册与发现，高可用</li><li>熔断机制，服务降级</li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud</title>
      <link href="/2021/07/07/spring-cloud/"/>
      <url>/2021/07/07/spring-cloud/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringCloud学习笔记"><a href="#SpringCloud学习笔记" class="headerlink" title="SpringCloud学习笔记"></a>SpringCloud学习笔记</h1><h2 id="学习前言"><a href="#学习前言" class="headerlink" title="学习前言"></a>学习前言</h2><h4 id="1-1-学习前提"><a href="#1-1-学习前提" class="headerlink" title="1.1 学习前提"></a>1.1 学习前提</h4><ul><li><p>熟练使用SpringBoot 微服务快速开发框架</p></li><li><p>了解过Dubbo + Zookeeper 分布式基础</p></li><li><p>电脑配置内存不低于8G(我自己的是16G)</p><ul><li><p>给大家看下多个服务跑起来后的内存开销图：</p><p><img src="/2021/07/07/spring-cloud/20201121130238879.png"></p><p><img src="/2021/07/07/spring-cloud/20201121130250629.png" alt="在这里插入图片描述"></p></li></ul></li></ul><h4 id="1-2-文章大纲"><a href="#1-2-文章大纲" class="headerlink" title="1.2 文章大纲"></a>1.2 文章大纲</h4><blockquote><p>Spring Cloud 五大组件</p></blockquote><ul><li>服务注册与发现——<strong>Netflix Eureka</strong></li><li>负载均衡：<ul><li>客户端负载均衡——<strong>Netflix Ribbon</strong></li><li>服务端负载均衡：——<strong>Feign</strong>(其也是依赖于Ribbon，只是将调用方式RestTemplete 更改成Service 接口)</li></ul></li><li>断路器——<strong>Netflix Hystrix</strong></li><li>服务网关——<strong>Netflix Zuul</strong></li><li>分布式配置——<strong>Spring Cloud Config</strong></li></ul><h4 id="1-3-常见面试题"><a href="#1-3-常见面试题" class="headerlink" title="1.3 常见面试题"></a>1.3 常见面试题</h4><p>1.1 什么是微服务？</p><p>1.2 微服务之间是如何独立通讯的？</p><p>1.3 SpringCloud 和 Dubbo有那些区别？</p><p>1.4 SpringBoot 和 SpringCloud，请谈谈你对他们的理解</p><p>1.5 什么是服务熔断？什么是服务降级？</p><p>1.6 微服务的优缺点分别是什么？说下你在项目开发中遇到的坑</p><p>1.7 你所知道的微服务技术栈有哪些？列举一二</p><p>1.8 Eureka和Zookeeper都可以提供服务注册与发现的功能，请说说两者的区别</p><p>…</p><h2 id="2-微服务概述"><a href="#2-微服务概述" class="headerlink" title="2. 微服务概述"></a>2. 微服务概述</h2><h4 id="2-1-什么是微服务？"><a href="#2-1-什么是微服务？" class="headerlink" title="2.1 什么是微服务？"></a>2.1 什么是微服务？</h4><blockquote><p>什么是微服务？</p></blockquote><p>微服务(Microservice Architecture) 是近几年流行的一种架构思想，关于它的概念很难一言以蔽之。</p><p>究竟什么是微服务呢？我们在此引用ThoughtWorks 公司的首席科学家 Martin Fowler 于2014年提出的一段话：</p><p>原文：<a href="https://martinfowler.com/articles/microservices.html">https://martinfowler.com/articles/microservices.html</a></p><p>汉化：<a href="https://www.cnblogs.com/liuning8023/p/4493156.html">https://www.cnblogs.com/liuning8023/p/4493156.html</a></p><ul><li>就目前而言，对于微服务，业界并没有一个统一的，标准的定义。</li><li>但通常而言，微服务架构是一种架构模式，或者说是一种架构风格，<strong>它体长将单一的应用程序划分成一组小的服务</strong>，每个服务运行在其独立的自己的进程内，服务之间互相协调，互相配置，为用户提供最终价值，服务之间采用轻量级的通信机制(<strong>HTTP</strong>)互相沟通，每个服务都围绕着具体的业务进行构建，并且能狗被独立的部署到生产环境中，另外，应尽量避免统一的，集中式的服务管理机制，对具体的一个服务而言，应该根据业务上下文，选择合适的语言，工具(<strong>Maven</strong>)对其进行构建，可以有一个非常轻量级的集中式管理来协调这些服务，可以使用不同的语言来编写服务，也可以使用不同的数据存储。</li></ul><blockquote><p>再来从技术维度角度理解下：</p></blockquote><ul><li>微服务化的核心就是将传统的一站式应用，根据业务拆分成一个一个的服务，彻底地去耦合，每一个微服务提供单个业务功能的服务，一个服务做一件事情，从技术角度看就是一种小而独立的处理过程，类似进程的概念，能够自行单独启动或销毁，拥有自己独立的数据库。</li></ul><h4 id="2-2-微服务与微服务架构"><a href="#2-2-微服务与微服务架构" class="headerlink" title="2.2 微服务与微服务架构"></a>2.2 微服务与微服务架构</h4><blockquote><p>微服务</p></blockquote><p>强调的是服务的大小，它关注的是某一个点，是具体解决某一个问题/提供落地对应服务的一个服务应用，狭义的看，可以看作是IDEA中的一个个微服务工程，或者Moudel。IDEA 工具里面使用Maven开发的一个个独立的小Moudel，它具体是使用SpringBoot开发的一个小模块，专业的事情交给专业的模块来做，一个模块就做着一件事情。强调的是一个个的个体，每个个体完成一个具体的任务或者功能。</p><blockquote><p>微服务架构</p></blockquote><p>一种新的架构形式，Martin Fowler 于2014年提出。</p><p>微服务架构是一种架构模式，它体长将单一应用程序划分成一组小的服务，服务之间相互协调，互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务与服务之间采用轻量级的通信机制**(如HTTP)<strong>互相协作，每个服务都围绕着具体的业务进行构建，并且能够被独立的部署到生产环境中，另外，应尽量避免统一的，集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具</strong>(如Maven)**对其进行构建。</p><h4 id="2-3-微服务优缺点"><a href="#2-3-微服务优缺点" class="headerlink" title="2.3 微服务优缺点"></a>2.3 微服务优缺点</h4><blockquote><p>优点</p></blockquote><ul><li>单一职责原则；</li><li>每个服务足够内聚，足够小，代码容易理解，这样能聚焦一个指定的业务功能或业务需求；</li><li>开发简单，开发效率高，一个服务可能就是专一的只干一件事；</li><li>微服务能够被小团队单独开发，这个团队只需2-5个开发人员组成；</li><li>微服务是松耦合的，是有功能意义的服务，无论是在开发阶段或部署阶段都是独立的；</li><li>微服务能使用不同的语言开发；</li><li>易于和第三方集成，微服务允许容易且灵活的方式集成自动部署，通过持续集成工具，如jenkins，Hudson，bamboo；</li><li>微服务易于被一个开发人员理解，修改和维护，这样小团队能够更关注自己的工作成果，无需通过合作才能体现价值；</li><li>微服务允许利用和融合最新技术；</li><li><strong>微服务只是业务逻辑的代码，不会和HTML，CSS，或其他的界面混合;</strong></li><li><strong>每个微服务都有自己的存储能力，可以有自己的数据库，也可以有统一的数据库；</strong></li></ul><blockquote><p>缺点</p></blockquote><ul><li>开发人员要处理分布式系统的复杂性；</li><li>多服务运维难度，随着服务的增加，运维的压力也在增大；</li><li>系统部署依赖问题；</li><li>服务间通信成本问题；</li><li>数据一致性问题；</li><li>系统集成测试问题；</li><li>性能和监控问题；</li></ul><h4 id="2-4-微服务技术栈有那些？"><a href="#2-4-微服务技术栈有那些？" class="headerlink" title="2.4 微服务技术栈有那些？"></a>2.4 微服务技术栈有那些？</h4><table><thead><tr><th><strong>微服务技术条目</strong></th><th>落地技术</th></tr></thead><tbody><tr><td>服务开发</td><td>SpringBoot、Spring、SpringMVC等</td></tr><tr><td>服务配置与管理</td><td>Netfix公司的Archaius、阿里的Diamond等</td></tr><tr><td>服务注册与发现</td><td>Eureka、Consul、Zookeeper等</td></tr><tr><td>服务调用</td><td>Rest、PRC、gRPC</td></tr><tr><td>服务熔断器</td><td>Hystrix、Envoy等</td></tr><tr><td>负载均衡</td><td>Ribbon、Nginx等</td></tr><tr><td>服务接口调用(客户端调用服务的简化工具)</td><td>Fegin等</td></tr><tr><td>消息队列</td><td>Kafka、RabbitMQ、ActiveMQ等</td></tr><tr><td>服务配置中心管理</td><td>SpringCloudConfig、Chef等</td></tr><tr><td>服务路由(API网关)</td><td>Zuul等</td></tr><tr><td>服务监控</td><td>Zabbix、Nagios、Metrics、Specatator等</td></tr><tr><td>全链路追踪</td><td>Zipkin、Brave、Dapper等</td></tr><tr><td>数据流操作开发包</td><td>SpringCloud Stream(封装与Redis，Rabbit，Kafka等发送接收消息)</td></tr><tr><td>时间消息总栈</td><td>SpringCloud Bus</td></tr><tr><td>服务部署</td><td>Docker、OpenStack、Kubernetes等</td></tr></tbody></table><h4 id="2-5-为什么选择SpringCloud作为微服务架构"><a href="#2-5-为什么选择SpringCloud作为微服务架构" class="headerlink" title="2.5 为什么选择SpringCloud作为微服务架构"></a>2.5 为什么选择SpringCloud作为微服务架构</h4><ol><li><p>选型依据</p><ul><li>整体解决方案和框架成熟度</li><li>社区热度</li><li>可维护性</li><li>学习曲线</li></ul></li><li><p>当前各大IT公司用的微服务架构有那些？</p><ul><li><p>阿里：dubbo+HFS</p></li><li><p>京东：JFS</p></li><li><p>新浪：Motan</p></li><li><p>当当网：DubboX</p><p>…</p></li></ul></li><li><p>各微服务框架对比</p></li></ol><table><thead><tr><th><strong>功能点/服务框架</strong></th><th>Netflix/SpringCloud</th><th>Motan</th><th>gRPC</th><th>Thri t</th><th>Dubbo/DubboX</th></tr></thead><tbody><tr><td>功能定位</td><td>完整的微服务框架</td><td>RPC框架，但整合了ZK或Consul，实现集群环境的基本服务注册发现</td><td>RPC框架</td><td>RPC框架</td><td>服务框架</td></tr><tr><td>支持Rest</td><td>是，Ribbon支持多种可拔插的序列号选择</td><td>否</td><td>否</td><td>否</td><td>否</td></tr><tr><td>支持RPC</td><td>否</td><td>是(Hession2)</td><td>是</td><td>是</td><td>是</td></tr><tr><td>支持多语言</td><td>是(Rest形式)</td><td>否</td><td>是</td><td>是</td><td>否</td></tr><tr><td>负载均衡</td><td>是(服务端zuul+客户端Ribbon)，zuul-服务，动态路由，云端负载均衡Eureka（针对中间层服务器）</td><td>是(客户端)</td><td>否</td><td>否</td><td>是(客户端)</td></tr><tr><td>配置服务</td><td>Netfix Archaius，Spring Cloud Config Server 集中配置</td><td>是(Zookeeper提供)</td><td>否</td><td>否</td><td>否</td></tr><tr><td>服务调用链监控</td><td>是(zuul)，zuul提供边缘服务，API网关</td><td>否</td><td>否</td><td>否</td><td>否</td></tr><tr><td>高可用/容错</td><td>是(服务端Hystrix+客户端Ribbon)</td><td>是(客户端)</td><td>否</td><td>否</td><td>是(客户端)</td></tr><tr><td>典型应用案例</td><td>Netflix</td><td>Sina</td><td>Google</td><td>Facebook</td><td></td></tr><tr><td>社区活跃程度</td><td>高</td><td>一般</td><td>高</td><td>一般</td><td>2017年后重新开始维护，之前中断了5年</td></tr><tr><td>学习难度</td><td>中等</td><td>低</td><td>高</td><td>高</td><td>低</td></tr><tr><td>文档丰富程度</td><td>高</td><td>一般</td><td>一般</td><td>一般</td><td>高</td></tr><tr><td>其他</td><td>Spring Cloud Bus为我们的应用程序带来了更多管理端点</td><td>支持降级</td><td>Netflix内部在开发集成gRPC</td><td>IDL定义</td><td>实践的公司比较多</td></tr></tbody></table><h2 id="3-SpringCloud入门概述"><a href="#3-SpringCloud入门概述" class="headerlink" title="3. SpringCloud入门概述"></a>3. SpringCloud入门概述</h2><h4 id="3-1-SpringCloud是什么？"><a href="#3-1-SpringCloud是什么？" class="headerlink" title="3.1 SpringCloud是什么？"></a>3.1 SpringCloud是什么？</h4><p>Spring官网：<a href="https://spring.io/">https://spring.io/</a></p><p><img src="/2021/07/07/spring-cloud/aHR0cHM6Ly9zczEuYmRzdGF0aWMuY29tLzcwY0Z1WFNoX1ExWW54R2twb1dLMUhGNmhoeS9pdC91PTM1NzgwMTc3ODAsMTIxODQyMDAyOSZmbT0yNiZncD0wLmpwZw.png"></p><p><img src="/2021/07/07/spring-cloud/aHR0cHM6Ly9zczIuYmRzdGF0aWMuY29tLzcwY0Z2blNoX1ExWW54R2twb1dLMUhGNmhoeS9pdC91PTE2Mzc3ODY4OTcsNzQ1MTM1MjUxJmZtPTI2JmdwPTAuanBn.png"></p><h4 id="3-2-SpringCloud和SpringBoot的关系"><a href="#3-2-SpringCloud和SpringBoot的关系" class="headerlink" title="3.2 SpringCloud和SpringBoot的关系"></a>3.2 SpringCloud和SpringBoot的关系</h4><ul><li>SpringBoot专注于开苏方便的开发单个个体微服务；</li><li>SpringCloud是关注全局的微服务协调整理治理框架，它将SpringBoot开发的一个个单体微服务，整合并管理起来，为各个微服务之间提供：配置管理、服务发现、断路器、路由、为代理、事件总栈、全局锁、决策竞选、分布式会话等等集成服务；</li><li>SpringBoot可以离开SpringCloud独立使用，开发项目，但SpringCloud离不开SpringBoot，属于依赖关系；</li><li>SpringBoot专注于快速、方便的开发单个个体微服务，SpringCloud关注全局的服务治理框架；</li></ul><h4 id="3-3-Dubbo-和-SpringCloud技术选型"><a href="#3-3-Dubbo-和-SpringCloud技术选型" class="headerlink" title="3.3 Dubbo 和 SpringCloud技术选型"></a>3.3 Dubbo 和 SpringCloud技术选型</h4><h5 id="1-分布式-服务治理Dubbo"><a href="#1-分布式-服务治理Dubbo" class="headerlink" title="1. 分布式+服务治理Dubbo"></a>1. 分布式+服务治理Dubbo</h5><p>目前成熟的互联网架构，应用服务化拆分 + 消息中间件</p><h5 id="2-Dubbo-和-SpringCloud对比"><a href="#2-Dubbo-和-SpringCloud对比" class="headerlink" title="2. Dubbo 和 SpringCloud对比"></a>2. Dubbo 和 SpringCloud对比</h5><p>可以看一下社区活跃度：</p><p><a href="https://github.com/dubbo">https://github.com/dubbo</a></p><p><a href="https://github.com/spring-cloud">https://github.com/spring-cloud</a></p><p><strong>对比结果：</strong></p><table><thead><tr><th></th><th>Dubbo</th><th>SpringCloud</th></tr></thead><tbody><tr><td>服务注册中心</td><td>Zookeeper</td><td>Spring Cloud Netfilx Eureka</td></tr><tr><td>服务调用方式</td><td>RPC</td><td>REST API</td></tr><tr><td>服务监控</td><td>Dubbo-monitor</td><td>Spring Boot Admin</td></tr><tr><td>断路器</td><td>不完善</td><td>Spring Cloud Netfilx Hystrix</td></tr><tr><td>服务网关</td><td>无</td><td>Spring Cloud Netfilx Zuul</td></tr><tr><td>分布式配置</td><td>无</td><td>Spring Cloud Config</td></tr><tr><td>服务跟踪</td><td>无</td><td>Spring Cloud Sleuth</td></tr><tr><td>消息总栈</td><td>无</td><td>Spring Cloud Bus</td></tr><tr><td>数据流</td><td>无</td><td>Spring Cloud Stream</td></tr><tr><td>批量任务</td><td>无</td><td>Spring Cloud Task</td></tr></tbody></table><p><strong>最大区别：Spring Cloud 抛弃了Dubbo的RPC通信，采用的是基于HTTP的REST方式</strong></p><p>严格来说，这两种方式各有优劣。虽然从一定程度上来说，后者牺牲了服务调用的性能，但也避免了上面提到的原生RPC带来的问题。而且REST相比RPC更为灵活，服务提供方和调用方的依赖只依靠一纸契约，不存在代码级别的强依赖，这个优点在当下强调快速演化的微服务环境下，显得更加合适。</p><p><strong>品牌机和组装机的区别</strong></p><p><strong>社区支持与更新力度的区别</strong></p><p><strong>总结：</strong>二者解决的问题域不一样：Dubbo的定位是一款RPC框架，而SpringCloud的目标是微服务架构下的一站式解决方案。</p><h4 id="3-4-SpringCloud能干嘛？"><a href="#3-4-SpringCloud能干嘛？" class="headerlink" title="3.4 SpringCloud能干嘛？"></a>3.4 SpringCloud能干嘛？</h4><ul><li>Distributed/versioned configuration 分布式/版本控制配置</li><li>Service registration and discovery 服务注册与发现</li><li>Routing 路由</li><li>Service-to-service calls 服务到服务的调用</li><li>Load balancing 负载均衡配置</li><li>Circuit Breakers 断路器</li><li>Distributed messaging 分布式消息管理</li><li>…</li></ul><h4 id="3-5-SpringCloud下载"><a href="#3-5-SpringCloud下载" class="headerlink" title="3.5 SpringCloud下载"></a>3.5 SpringCloud下载</h4><p>官网：<a href="http://projects.spring.io/spring-cloud/">http://projects.spring.io/spring-cloud/</a></p><p>版本号有点特别：</p><p><img src="/2021/07/07/spring-cloud/20200521130004420.png"></p><blockquote><p>SpringCloud没有采用数字编号的方式命名版本号，而是采用了伦敦地铁站的名称，<strong>同时根据字母表的顺序来对应版本时间顺序</strong>，比如最早的Realse版本：Angel，第二个Realse版本：Brixton，然后是Camden、Dalston、Edgware，目前最新的是Hoxton SR4 CURRENT GA通用稳定版。</p></blockquote><p><strong>自学参考书：</strong></p><ul><li>SpringCloud Netflix 中文文档：<a href="https://springcloud.cc/spring-cloud-netflix.html">https://springcloud.cc/spring-cloud-netflix.html</a></li><li>SpringCloud 中文API文档(官方文档翻译版)：<a href="https://springcloud.cc/spring-cloud-dalston.html">https://springcloud.cc/spring-cloud-dalston.html</a></li><li>SpringCloud中国社区：<a href="http://springcloud.cn/">http://springcloud.cn/</a></li><li>SpringCloud中文网：<a href="https://springcloud.cc/">https://springcloud.cc</a></li></ul><h2 id="4-SpringCloud-Rest学习环境搭建：服务提供者"><a href="#4-SpringCloud-Rest学习环境搭建：服务提供者" class="headerlink" title="4. SpringCloud Rest学习环境搭建：服务提供者"></a>4. SpringCloud Rest学习环境搭建：服务提供者</h2><h4 id="4-1-介绍"><a href="#4-1-介绍" class="headerlink" title="4.1 介绍"></a>4.1 介绍</h4><ul><li>我们会使用一个Dept部门模块做一个微服务通用案例<strong>Consumer</strong>消费者(<strong>Client</strong>)通过REST调用<strong>Provider</strong>提供者(<strong>Server</strong>)提供的服务。</li><li>回顾Spring，SpringMVC，Mybatis等以往学习的知识。</li><li>Maven的分包分模块架构复习。</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json">一个简单的Maven模块结构是这样的：-- app-parent: 一个父项目(app-parent)聚合了很多子项目(app-util\app-dao\app-web...)  |-- pom.xml  |  |-- app-core  ||---- pom.xml  |  |-- app-web  ||---- pom.xml  ......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个父工程带着多个Moudule子模块</p><p>MicroServiceCloud父工程(Project)下初次带着3个子模块(Module)</p><ul><li>microservicecloud-api 【封装的整体entity/接口/公共配置等】</li><li>microservicecloud-consumer-dept-80 【服务提供者】</li><li>microservicecloud-provider-dept-8001 【服务消费者】</li></ul><h4 id="4-2-SpringCloud版本选择"><a href="#4-2-SpringCloud版本选择" class="headerlink" title="4.2 SpringCloud版本选择"></a>4.2 SpringCloud版本选择</h4><p><strong>大版本说明</strong></p><table><thead><tr><th>SpringBoot</th><th>SpringCloud</th><th>关系</th></tr></thead><tbody><tr><td>1.2.x</td><td>Angel版本(天使)</td><td>兼容SpringBoot1.2x</td></tr><tr><td>1.3.x</td><td>Brixton版本(布里克斯顿)</td><td>兼容SpringBoot1.3x，也兼容SpringBoot1.4x</td></tr><tr><td>1.4.x</td><td>Camden版本(卡姆登)</td><td>兼容SpringBoot1.4x，也兼容SpringBoot1.5x</td></tr><tr><td>1.5.x</td><td>Dalston版本(多尔斯顿)</td><td>兼容SpringBoot1.5x，不兼容SpringBoot2.0x</td></tr><tr><td>1.5.x</td><td>Edgware版本(埃奇韦尔)</td><td>兼容SpringBoot1.5x，不兼容SpringBoot2.0x</td></tr><tr><td>2.0.x</td><td>Finchley版本(芬奇利)</td><td>兼容SpringBoot2.0x，不兼容SpringBoot1.5x</td></tr><tr><td>2.1.x</td><td>Greenwich版本(格林威治)</td><td></td></tr></tbody></table><p><strong>实际开发版本关系</strong></p><table><thead><tr><th>spring-boot-starter-parent</th><th></th><th>spring-cloud-dependencles</th><th></th></tr></thead><tbody><tr><td><strong>版本号</strong></td><td><strong>发布日期</strong></td><td><strong>版本号</strong></td><td><strong>发布日期</strong></td></tr><tr><td>1.5.2.RELEASE</td><td>2017-03</td><td>Dalston.RC1</td><td>2017-x</td></tr><tr><td>1.5.9.RELEASE</td><td>2017-11</td><td>Edgware.RELEASE</td><td>2017-11</td></tr><tr><td>1.5.16.RELEASE</td><td>2018-04</td><td>Edgware.SR5</td><td>2018-10</td></tr><tr><td>1.5.20.RELEASE</td><td>2018-09</td><td>Edgware.SR5</td><td>2018-10</td></tr><tr><td>2.0.2.RELEASE</td><td>2018-05</td><td>Fomchiey.BULD-SNAPSHOT</td><td>2018-x</td></tr><tr><td>2.0.6.RELEASE</td><td>2018-10</td><td>Fomchiey-SR2</td><td>2018-10</td></tr><tr><td>2.1.4.RELEASE</td><td>2019-04</td><td>Greenwich.SR1</td><td>2019-03</td></tr></tbody></table><p><strong>使用后两个</strong></p><h4 id="4-3-创建父工程"><a href="#4-3-创建父工程" class="headerlink" title="4.3 创建父工程"></a>4.3 创建父工程</h4><ul><li>新建父工程项目springcloud，切记<strong>Packageing是pom模式</strong></li><li>主要是定义POM文件，将后续各个子模块公用的jar包等统一提取出来，类似一个抽象父类，==删除src==<br><img src="/2021/07/07/spring-cloud/20200521130052880.png"></li></ul><p><strong>pom.xml</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.haust<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>springcloud-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>springcloud-provider-dept-8001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>springcloud-consumer-dept-80<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>springcloud-eureka-7001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>springcloud-eureka-7002<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>springcloud-eureka-7003<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>springcloud-provider-dept-8002<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>springcloud-provider-dept-8003<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>springcloud-consumer-dept-feign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>springcloud-provider-dept-hystrix-8001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>springcloud-consumer-hystrix-dashboard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>springcloud-zuul-9527<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>springcloud-config-server-3344<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>springcloud-config-client-3355<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>springcloud-config-eureka-7001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>springcloud-config-dept-8001<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--打包方式  pom  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--    定义版本号--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>junit.version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>junit.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4j.version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4j.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lombok.version</span><span class="token punctuation">></span></span>1.16.18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lombok.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--springCloud的依赖管理--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.2.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--springCloud的依赖--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>Greenwich.SR1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--SpringBoot--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--数据库--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--  数据源  德鲁伊--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--SpringBoot 启动器--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--日志测试~--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>logback-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;junit.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;log4j.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;lombok.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--    打包插件，如果有资源导不进去，配置build的resource--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>父工程为springcloud，其下有多个子module，详情参考完整代码了解</p><p><img src="/2021/07/07/spring-cloud/20200521130118985.png"></p><blockquote></blockquote><p>多一个子类，父类的pom文件就会多一个mudule</p><p><img src="/2021/07/07/spring-cloud/1621254151363.png"></p><p>springcloud-consumer-dept-80访问springcloud-provider-dept-8001下的controller使用REST方式</p><p>如<strong>DeptConsumerController.java</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;** * @Auther: csp1999 * @Date: 2020&#x2F;05&#x2F;17&#x2F;22:44 * @Description: *&#x2F;@RestControllerpublic class DeptConsumerController &#123;    &#x2F;**     * 理解：消费者，不应该有service层~     * RestTemplate .... 供我们直接调用就可以了！ 注册到Spring中     * (地址：url, 实体：Map ,Class&lt;T&gt; responseType)     * &lt;p&gt;     * 提供多种便捷访问远程http服务的方法，简单的Restful服务模板~     *&#x2F;    @Autowired    private RestTemplate restTemplate;    &#x2F;**     * 服务提供方地址前缀     * &lt;p&gt;     * Ribbon:我们这里的地址，应该是一个变量，通过服务名来访问     *&#x2F;    private static final String REST_URL_PREFIX &#x3D; &quot;http:&#x2F;&#x2F;localhost:8001&quot;;    &#x2F;&#x2F;private static final String REST_URL_PREFIX &#x3D; &quot;http:&#x2F;&#x2F;SPRINGCLOUD-PROVIDER-DEPT&quot;;    &#x2F;**     * 消费方添加部门信息     * @param dept     * @return     *&#x2F;    @RequestMapping(&quot;&#x2F;consumer&#x2F;dept&#x2F;add&quot;)    public boolean add(Dept dept) &#123;        &#x2F;&#x2F; postForObject(服务提供方地址(接口),参数实体,返回类型.class)        return restTemplate.postForObject(REST_URL_PREFIX + &quot;&#x2F;dept&#x2F;add&quot;, dept, Boolean.class);    &#125;    &#x2F;**     * 消费方根据id查询部门信息     * @param id     * @return     *&#x2F;    @RequestMapping(&quot;&#x2F;consumer&#x2F;dept&#x2F;get&#x2F;&#123;id&#125;&quot;)    public Dept get(@PathVariable(&quot;id&quot;) Long id) &#123;        &#x2F;&#x2F; getForObject(服务提供方地址(接口),返回类型.class)        return restTemplate.getForObject(REST_URL_PREFIX + &quot;&#x2F;dept&#x2F;get&#x2F;&quot; + id, Dept.class);    &#125;    &#x2F;**     * 消费方查询部门信息列表     * @return     *&#x2F;    @RequestMapping(&quot;&#x2F;consumer&#x2F;dept&#x2F;list&quot;)    public List&lt;Dept&gt; list() &#123;        return restTemplate.getForObject(REST_URL_PREFIX + &quot;&#x2F;dept&#x2F;list&quot;, List.class);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用RestTemplete先需要放入Spring容器中</p><p><strong>ConfigBean.java</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class ConfigBean &#123;&#x2F;&#x2F;@Configuration -- spring  applicationContext.xml    &#x2F;&#x2F;配置负载均衡实现RestTemplate    &#x2F;&#x2F; IRule    &#x2F;&#x2F; RoundRobinRule 轮询    &#x2F;&#x2F; RandomRule 随机    &#x2F;&#x2F; AvailabilityFilteringRule ： 会先过滤掉，跳闸，访问故障的服务~，对剩下的进行轮询~    &#x2F;&#x2F; RetryRule ： 会先按照轮询获取服务~，如果服务获取失败，则会在指定的时间内进行，重试    @Bean    public RestTemplate getRestTemplate()&#123;        return new RestTemplate();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>springcloud-provider-dept-8001的dao接口调用springcloud-api模块下的pojo，可使用在springcloud-provider-dept-8001的pom文件导入springcloud-api模块依赖的方式：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--我们需要拿到实体类，所以要配置api module--></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.haust<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springcloud-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>springcloud-consumer-dept-80和springcloud-provider-dept-8001的pom.xml和父工程下的依赖基本一样，直接看完整代码即可，不再添加重复笔记。</p><h3 id="4-4创建子工程"><a href="#4-4创建子工程" class="headerlink" title="==4.4创建子工程=="></a>==4.4创建子工程==</h3><p>删除src，在其中创建子module项目</p><blockquote><p>在自己的每个module中自己添加需要的依赖，如果父类已经配置了版本，子类就不用写了（我不写不能用）</p></blockquote><p><img src="/2021/07/07/spring-cloud/1621257790691.png"></p><h4 id="1-创建第一个子项目，只放pojo"><a href="#1-创建第一个子项目，只放pojo" class="headerlink" title="1.创建第一个子项目，只放pojo"></a>1.创建第一个子项目，只放pojo</h4><h5 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1.==创建数据库=="></a>1.==创建数据库==</h5><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">insert into dept (dname, db_source) VALUES (&#39;开发部&#39;,database());insert into dept (dname, db_source) VALUES (&#39;人事部&#39;,database());insert into dept (dname, db_source) VALUES (&#39;财务部&#39;,database());insert into dept (dname, db_source) VALUES (&#39;市场部&#39;,database());insert into dept (dname, db_source) VALUES (&#39;运维部&#39;,database());&#x2F;&#x2F;验证一下插进去了没select * from db01.dept<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/spring-cloud/1621256156299.png"></p><h5 id="2-创建实体类"><a href="#2-创建实体类" class="headerlink" title="2.==创建实体类=="></a>2.==创建实体类==</h5><blockquote><p>所有实体类必须实现序列化，实现接口Serializable</p></blockquote><p><img src="/2021/07/07/spring-cloud/1621259072812.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.chao.springcloud.pojo;import com.oracle.webservices.internal.api.databinding.DatabindingMode;import lombok.Data;import lombok.NoArgsConstructor;import lombok.experimental.Accessors;import java.io.Serializable;@Data@NoArgsConstructor@Accessors(chain &#x3D; true)&#x2F;&#x2F;链式写法 ，chain &#x3D; true来激活public class Dept implements Serializable &#123;&#x2F;&#x2F;Dept 实体类 orm 类表关系映射    private Long deptno; &#x2F;&#x2F;主键    private  String dname;    &#x2F;&#x2F;这个数据存在于哪个数据库字段~，一个服务对应一个数据库，同一个信息可能存在于不同的数据库    private String db_source;    public Dept(String dname) &#123;        this.dname &#x3D; dname;        &#x2F;*        * 链式写法：        * Dept dept &#x3D; new Dept();        *        * dept.setDeptNo(11).setDname(&#39;haha&#39;).setDb_source(&#39;001&#39;);        *         * *&#x2F;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-创建第二个子项目-服务者"><a href="#2-创建第二个子项目-服务者" class="headerlink" title="2.创建第二个子项目(服务者)"></a>2.创建第二个子项目(服务者)</h4><h5 id="1-配置application-yml"><a href="#1-配置application-yml" class="headerlink" title="1.配置application.yml"></a>1.配置application.yml</h5><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 8001# mybatis配置mybatis:  type-aliases-package: com.chao.springcloud.pojo  config-location: classpath:mybatis&#x2F;mybatis-config.xml  mapper-locations: classpath:mybatis&#x2F;mapper&#x2F;*.xml#  把驼峰命名改成键值映射#  configuration:  ##    map-underscore-to-camel-case:#spring配置spring:  application:    # 给项目起名字    name: springcloud-provider-dept  datasource:    #数据源    type: com.alibaba.druid.pool.DruidDataSource    driver-class-name: org.gjt.mm.mysql.Driver    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;db01?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8    data-username: root    data-password: 123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/spring-cloud/1621393063576.png"></p><h5 id="2-配置mybatis-config-xml-其实可以不要"><a href="#2-配置mybatis-config-xml-其实可以不要" class="headerlink" title="2.配置mybatis-config.xml( 其实可以不要)"></a>2.配置mybatis-config.xml( 其实可以不要)</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--开启二级缓存--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-写接口（mapper层）"><a href="#3-写接口（mapper层）" class="headerlink" title="3.写接口（mapper层）"></a>3.写接口（mapper层）</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">import com.chao.springcloud.pojo.Dept;import org.apache.ibatis.annotations.Mapper;import org.springframework.stereotype.Repository;import java.util.List;@Mapper@Repositorypublic interface DeptMapper &#123;    &#x2F;&#x2F;添加    public boolean addDept(Dept dept);    &#x2F;&#x2F;用id查找    public Dept queryDeptById (Long id);    &#x2F;&#x2F;查找所有    public List&lt;Dept&gt; queryAll ();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-mapper-xml"><a href="#4-mapper-xml" class="headerlink" title="4.mapper.xml"></a>4.mapper.xml</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.chao.springcloud.mapper.DeptMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addDept<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into db01.dept (dname, db_source) VALUES (#&#123;dname&#125;,DATABASE());    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryDeptById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Long<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from db01.dept where deptno = #&#123;deptno&#125; ;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Dept<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from db01.dept ;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-service层"><a href="#5-service层" class="headerlink" title="5.service层"></a>5.service层</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.chao.springcloud.service;import com.chao.springcloud.pojo.Dept;import org.springframework.stereotype.Service;import java.util.List;public interface DeptService &#123;    &#x2F;&#x2F;添加    public boolean addDept(Dept dept);    &#x2F;&#x2F;用id查找    public Dept queryDeptById (Long id);    &#x2F;&#x2F;查找所有    public List&lt;Dept&gt; queryAll ();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6-serviceImpl"><a href="#6-serviceImpl" class="headerlink" title="6.serviceImpl"></a>6.serviceImpl</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.chao.springcloud.service;import com.chao.springcloud.mapper.DeptMapper;import com.chao.springcloud.pojo.Dept;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.List;@Servicepublic class DeptServiceImpl implements DeptService &#123;    @Autowired    private DeptMapper deptMapper;    @Override    public boolean addDept(Dept dept) &#123;        return deptMapper.addDept(dept);    &#125;    @Override    public Dept queryDeptById(Long id) &#123;        return deptMapper.queryDeptById(id);    &#125;    @Override    public List&lt;Dept&gt; queryAll() &#123;        return deptMapper.queryAll();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7-controller层"><a href="#7-controller层" class="headerlink" title="7.controller层"></a>7.controller层</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.chao.springcloud.controller;import com.chao.springcloud.pojo.Dept;import com.chao.springcloud.service.DeptService;import com.fasterxml.jackson.annotation.JsonTypeInfo;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RestController;import java.util.List;&#x2F;&#x2F;提供restfu服务@RestControllerpublic class DeptController &#123;    @Autowired    private DeptService deptService;    @PostMapping(&quot;&#x2F;dept&#x2F;add&quot;)    public  boolean addDept(Dept dept)&#123;      return deptService.addDept(dept);    &#125;    @GetMapping(&quot;&#x2F;dept&#x2F;get&#x2F;&#123;id&#125;&quot;)    public  Dept getDept(@PathVariable(&quot;id&quot;) Long id)&#123;       return deptService.queryDeptById(id);    &#125;    @GetMapping(&quot;&#x2F;dept&#x2F;list&quot;)    public List&lt;Dept&gt; queryAll()&#123;        return deptService.queryAll();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="8-写主启动类"><a href="#8-写主启动类" class="headerlink" title="==8.写主启动类=="></a>==8.写主启动类==</h5><p><img src="/2021/07/07/spring-cloud/1621399624556.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.chao.springcloud;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;@SpringBootApplicationpublic class DeptProvider_8001 &#123;    public static void main(String[] args) &#123;        SpringApplication.run(DeptProvider_8001.class,args);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="9-注意问题"><a href="#9-注意问题" class="headerlink" title="9.注意问题"></a>9.注意问题</h5><blockquote><p>这里的add方法不可用，安全问题，他自动屏蔽了前端对数据的修改</p></blockquote><h4 id="3-创建第三个子项目（消费者）"><a href="#3-创建第三个子项目（消费者）" class="headerlink" title="3.创建第三个子项目（消费者）"></a>3.创建第三个子项目（消费者）</h4><blockquote><p>80端口，写请求的时候就不用写端口号（常识）</p></blockquote><p>==消费者不需要连接数据库，只需要实体类和web==</p><h5 id="1-配置application-yml-1"><a href="#1-配置application-yml-1" class="headerlink" title="1.配置application.yml"></a>1.配置application.yml</h5><p>这里只要配置端口号就行</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="2-controller层"><a href="#2-controller层" class="headerlink" title="2.controller层"></a>2.controller层</h5><blockquote><p>消费者不是从数据库直接拿数据，而是通过链接例如<a href="http://localhost:8001/dept/list%E6%8B%BF%E6%95%B0%E6%8D%AE">http://localhost:8001/dept/list拿数据</a></p><p>所以我们需要用到RestTemplate来拿数据</p></blockquote><p><img src="/2021/07/07/spring-cloud/1621403646093.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.chao.springcloud.config;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.web.client.RestTemplate;@Configurationpublic class ConfigBean &#123;&#x2F;&#x2F;相当于@Configuration --spring applicationContext.xml文件    @Bean    public RestTemplate getRestTemplate()&#123;        return new RestTemplate();    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==消费者的controller==</p><p><img src="/2021/07/07/spring-cloud/1621405253818.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.chao.springcloud.controller;import com.chao.springcloud.pojo.Dept;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.client.RestTemplate;import java.util.List;@Controllerpublic class DeptConsumerController &#123;    &#x2F;&#x2F;理解：消费者，不应该有service    &#x2F;&#x2F;RestTemplate.....供我们直接调用就可以了，注册到spring中    &#x2F;&#x2F;（url,Class&lt;T&gt; responseType）    @Autowired    private RestTemplate restTemplate;&#x2F;&#x2F;提供多种便携访问远程http服务的方法，简单的restful服务模板    &#x2F;&#x2F;请求的地址的开头是一样的，所以设置一个常量    private static  final String REST_URL_PREFIX &#x3D; &quot;http:&#x2F;&#x2F;localhost:8001&quot;;    &#x2F;&#x2F;使用方法RestTemplate就是去地址http:&#x2F;&#x2F;localhost:8001&#x2F;dept&#x2F;list上面拿数据而不是从数据库    @RequestMapping(&quot;&#x2F;consumer&#x2F;dept&#x2F;get&#x2F;&#123;id&#125;&quot;)    public Dept get(@PathVariable(&quot;id&quot;) Long id)&#123;        return restTemplate.getForObject(REST_URL_PREFIX+&quot;&#x2F;dept&#x2F;get&#x2F;&quot;+id,Dept.class);    &#125;    @RequestMapping(&quot;&#x2F;consumer&#x2F;dept&#x2F;add&quot;)    public boolean add(Dept dept)&#123;        return restTemplate.postForObject(REST_URL_PREFIX+&quot;&#x2F;dept&#x2F;add&quot;,dept,Boolean.class);    &#125;    @RequestMapping(&quot;&#x2F;consumer&#x2F;dept&#x2F;list&quot;)    public List&lt;Dept&gt; list(Dept dept)&#123;        return restTemplate.postForObject(REST_URL_PREFIX+&quot;&#x2F;dept&#x2F;list&quot;,dept,List.class);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-出现的错误（注意）"><a href="#3-出现的错误（注意）" class="headerlink" title="==3.出现的错误（注意）=="></a>==3.出现的错误（注意）==</h5><p><img src="/2021/07/07/spring-cloud/1621411778911.png"></p><h2 id="5-Eureka服务注册中心"><a href="#5-Eureka服务注册中心" class="headerlink" title="5. Eureka服务注册中心"></a>5. Eureka服务注册中心</h2><h4 id="5-1-什么是Eureka"><a href="#5-1-什么是Eureka" class="headerlink" title="5.1 什么是Eureka"></a>5.1 什么是Eureka</h4><ul><li>Netflix在涉及Eureka时，遵循的就是API原则.</li><li>Eureka是Netflix的有个子模块，也是核心模块之一。Eureka是基于REST的服务，用于定位服务，以实现云端中间件层服务发现和故障转移，服务注册与发现对于微服务来说是非常重要的，有了服务注册与发现，只需要使用服务的标识符，就可以访问到服务，而不需要修改服务调用的配置文件了，功能类似于Dubbo的注册中心，比如Zookeeper.</li></ul><h4 id="5-2-原理理解"><a href="#5-2-原理理解" class="headerlink" title="5.2 原理理解"></a>5.2 原理理解</h4><ul><li><strong>Eureka基本的架构</strong><ul><li>Springcloud 封装了Netflix公司开发的Eureka模块来实现服务注册与发现 (对比Zookeeper).</li><li>Eureka采用了C-S的架构设计，EurekaServer作为服务注册功能的服务器，他是服务注册中心.</li><li>而系统中的其他微服务，使用Eureka的客户端连接到EurekaServer并维持心跳连接。这样系统的维护人员就可以通过EurekaServer来监控系统中各个微服务是否正常运行，Springcloud 的一些其他模块 (比如Zuul) 就可以通过EurekaServer来发现系统中的其他微服务，并执行相关的逻辑.</li></ul></li></ul><p><img src="/2021/07/07/spring-cloud/20200521130157770.png"></p><ul><li><p>和Dubbo架构对比.</p><p><img src="/2021/07/07/spring-cloud/20201120091517323.png"></p></li><li><p>Eureka 包含两个组件：<strong>Eureka Server</strong> 和 <strong>Eureka Client</strong>.</p></li><li><p>Eureka Server 提供服务注册，各个节点启动后，回在EurekaServer中进行注册，这样Eureka Server中的服务注册表中将会储存所有课用服务节点的信息，服务节点的信息可以在界面中直观的看到.</p></li><li><p>Eureka Client 是一个Java客户端，用于简化EurekaServer的交互，客户端同时也具备一个内置的，使用轮询负载算法的负载均衡器。在应用启动后，将会向EurekaServer发送心跳 (默认周期为30秒) 。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，EurekaServer将会从服务注册表中把这个服务节点移除掉 (默认周期为90s).</p></li><li><p><strong>三大角色</strong></p><ul><li>Eureka Server：提供服务的注册与发现</li><li>Service Provider：服务生产方，将自身服务注册到Eureka中，从而使服务消费方能狗找到</li><li>Service Consumer：服务消费方，从Eureka中获取注册服务列表，从而找到消费服务</li></ul></li><li><p>目前工程状况</p></li></ul><p><img src="/2021/07/07/spring-cloud/20200521130244579.png" alt="在这里插入图片描述"></p><h4 id="5-3-构建步骤"><a href="#5-3-构建步骤" class="headerlink" title="5.3 构建步骤"></a>5.3 构建步骤</h4><h5 id="1-eureka-server"><a href="#1-eureka-server" class="headerlink" title="1. eureka-server"></a>1. eureka-server</h5><ol><li><p>springcloud-eureka-7001 模块建立</p></li><li><p>pom.xml 配置</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--导包~--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eureka-server --></span>    <span class="token comment">&lt;!--导入Eureka Server依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--热部署工具--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>application.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 7001# Eureka配置eureka:  instance:    # Eureka服务端的实例名字    hostname: 127.0.0.1   #本地就写localhost  client:    # 表示是否向 Eureka 注册中心注册自己(这个模块本身是服务器,所以不需要)    register-with-eureka: false    # fetch-registry如果为false,则表示自己为注册中心,客户端的化为 ture    fetch-registry: false    # Eureka监控页面~    service-url:      defaultZone: http:&#x2F;&#x2F;$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;&#x2F;eureka&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>==源码中Eureka的默认端口以及访问路径(因此在yml重新配置):==</p><p><img src="/2021/07/07/spring-cloud/20200521130439891.png" alt="在这里插入图片描述"></p><ol><li><p>主启动类</p><blockquote><p>主启动类，就只需要加一个注解@EnableEurekaServer，开启服务</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;** * @Auther: csp1999 * @Date: 2020&#x2F;05&#x2F;18&#x2F;10:26 * @Description: 启动之后，访问 http:&#x2F;&#x2F;127.0.0.1:7001&#x2F; * 如果在本机访问 http:&#x2F;&#x2F;localhost:7001&#x2F; *&#x2F;@SpringBootApplication&#x2F;&#x2F; @EnableEurekaServer 服务端的启动类，可以接受别人注册进来~@EnableEurekaServerpublic class EurekaServer_7001 &#123;    public static void main(String[] args) &#123;        SpringApplication.run(EurekaServer_7001.class,args);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动成功后访问 <a href="http://localhost:7001/">http://localhost:7001/</a> 得到以下页面</p></li></ol><p><img src="/2021/07/07/spring-cloud/1621414585883.png"></p><h5 id="2-eureka-client"><a href="#2-eureka-client" class="headerlink" title="2. eureka-client"></a>2. eureka-client</h5><p><strong>调整之前创建的springlouc-provider-dept-8001</strong></p><ol><li><p>导入Eureca依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--Eureka依赖--></span><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eureka --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-eureka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>application中新增Eureca配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"># Eureka配置：配置服务注册中心地址eureka:  client:    service-url:      defaultZone: http:&#x2F;&#x2F;localhost:7001&#x2F;eureka&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>为主启动类添加@EnableEurekaClient注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;** * @Auther: csp1999 * @Date: 2020&#x2F;05&#x2F;17&#x2F;22:09 * @Description: 启动类 *&#x2F;@SpringBootApplication&#x2F;&#x2F; @EnableEurekaClient 开启Eureka客户端注解，在服务启动后自动向注册中心注册服务@EnableEurekaClientpublic class DeptProvider_8001 &#123;    public static void main(String[] args) &#123;        SpringApplication.run(DeptProvider_8001.class,args);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>先启动7001服务端后启动8001客户端进行测试，然后访问监控页<a href="http://localhost:7001/">http://localhost:7001/</a> 产看结果如图，成功</p></li></ol><p><img src="/2021/07/07/spring-cloud/20200521130507106.png"></p><ol><li><p>修改Eureka上的默认描述信息</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"># Eureka配置：配置服务注册中心地址eureka:  client:    service-url:      defaultZone: http:&#x2F;&#x2F;localhost:7001&#x2F;eureka&#x2F;  instance:    instance-id: springcloud-provider-dept-8001 #修改Eureka上的默认描述信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>结果如图：<br>   <img src="/2021/07/07/spring-cloud/20200521130659314.png"></p><p>如果此时停掉springcloud-provider-dept-8001 等<strong>30s</strong>后 监控会开启保护机制：<br>   <img src="/2021/07/07/spring-cloud/20200521130557974.png"></p><ol start="2"><li>配置关于服务加载的监控信息</li></ol><p><img src="/2021/07/07/spring-cloud/20200521130718511.png"></p><p>pom.xml中添加依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--actuator完善监控信息--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>application.yml中添加配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"># info配置info:# 项目的名称app.name: haust-springcloud# 公司的名称company.name: 河南科技大学西苑校区软件学院 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时刷新监控页，点击进入<img src="/2021/07/07/spring-cloud/20200521130756988.png" alt="在这里插入图片描述">跳转新页面显示如下内容：</p><p><img src="/2021/07/07/spring-cloud/2020112009562752.png"></p><h5 id="3-EureKa自我保护机制：好死不如赖活着"><a href="#3-EureKa自我保护机制：好死不如赖活着" class="headerlink" title="3. EureKa自我保护机制：好死不如赖活着"></a>3. EureKa自我保护机制：好死不如赖活着</h5><p>一句话总结就是：<strong>某时刻某一个微服务不可用，eureka不会立即清理，依旧会对该微服务的信息进行保存！</strong></p><ul><li>默认情况下，当eureka server在一定时间内没有收到实例的心跳，便会把该实例从注册表中删除（<strong>默认是90秒</strong>），但是，如果短时间内丢失大量的实例心跳，便会触发eureka server的自我保护机制，比如在开发测试时，需要频繁地重启微服务实例，但是我们很少会把eureka server一起重启（因为在开发过程中不会修改eureka注册中心），<strong>当一分钟内收到的心跳数大量减少时，会触发该保护机制</strong>。可以在eureka管理界面看到Renews threshold和Renews(last min)，当后者（最后一分钟收到的心跳数）小于前者（心跳阈值）的时候，触发保护机制，会出现红色的警告：<code>EMERGENCY!EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY&#39;RE NOT.RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEGING EXPIRED JUST TO BE SAFE.</code>从警告中可以看到，eureka认为虽然收不到实例的心跳，但它认为实例还是健康的，eureka会保护这些实例，不会把它们从注册表中删掉。</li><li>该保护机制的目的是避免网络连接故障，在发生网络故障时，微服务和注册中心之间无法正常通信，但服务本身是健康的，不应该注销该服务，如果eureka因网络故障而把微服务误删了，那即使网络恢复了，该微服务也不会重新注册到eureka server了，因为只有在微服务启动的时候才会发起注册请求，后面只会发送心跳和服务列表请求，这样的话，该实例虽然是运行着，但永远不会被其它服务所感知。所以，eureka server在短时间内丢失过多的客户端心跳时，会进入自我保护模式，该模式下，eureka会保护注册表中的信息，不在注销任何微服务，当网络故障恢复后，eureka会自动退出保护模式。自我保护模式可以让集群更加健壮。</li><li>但是我们在开发测试阶段，需要频繁地重启发布，如果触发了保护机制，则旧的服务实例没有被删除，这时请求有可能跑到旧的实例中，而该实例已经关闭了，这就导致请求错误，影响开发测试。所以，在开发测试阶段，我们可以把自我保护模式关闭，只需在eureka server配置文件中加上如下配置即可：<code>eureka.server.enable-self-preservation=false</code>【不推荐关闭自我保护机制】</li></ul><p>详细内容可以参考下这篇博客内容：<a href="https://blog.csdn.net/wudiyong22/article/details/80827594">https://blog.csdn.net/wudiyong22/article/details/80827594</a></p><h5 id="4-注册进来的微服务，获取一些消息（团队开发会用到）"><a href="#4-注册进来的微服务，获取一些消息（团队开发会用到）" class="headerlink" title="4. 注册进来的微服务，获取一些消息（团队开发会用到）"></a>4. 注册进来的微服务，获取一些消息（团队开发会用到）</h5><p><strong>DeptController.java</strong>新增方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;** * DiscoveryClient 可以用来获取一些配置的信息，得到具体的微服务！ *&#x2F;import org.springframework.cloud.client.discovery.DiscoveryClient;@Autowiredprivate DiscoveryClient client;&#x2F;** * 获取一些注册进来的微服务的信息~， * * @return *&#x2F;@GetMapping(&quot;&#x2F;dept&#x2F;discovery&quot;)public Object discovery() &#123;    &#x2F;&#x2F; 获取微服务列表的清单    List&lt;String&gt; services &#x3D; client.getServices();    System.out.println(&quot;discovery&#x3D;&gt;services:&quot; + services);    &#x2F;&#x2F; 得到一个具体的微服务信息,通过具体的微服务id，applicaioinName；    List&lt;ServiceInstance&gt; instances &#x3D; client.getInstances(&quot;SPRINGCLOUD-PROVIDER-DEPT&quot;);    for (ServiceInstance instance : instances) &#123;        System.out.println(                instance.getHost() + &quot;\t&quot; + &#x2F;&#x2F; 主机名称                        instance.getPort() + &quot;\t&quot; + &#x2F;&#x2F; 端口号                        instance.getUri() + &quot;\t&quot; + &#x2F;&#x2F; uri                        instance.getServiceId() &#x2F;&#x2F; 服务id        );    &#125;    return this.client;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/spring-cloud/20200521130913485.png"></p><p>主启动类中加入@EnableDiscoveryClient 注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication&#x2F;&#x2F; @EnableEurekaClient 开启Eureka客户端注解，在服务启动后自动向注册中心注册服务@EnableEurekaClient&#x2F;&#x2F; @EnableEurekaClient 开启服务发现客户端的注解，可以用来获取一些配置的信息，得到具体的微服务@EnableDiscoveryClientpublic class DeptProvider_8001 &#123;    ...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如图：</p><p><img src="/2021/07/07/spring-cloud/20201120101109857.png"></p><p><img src="/2021/07/07/spring-cloud/1621483279341.png"></p><h4 id="5-4-Eureka：集群环境配置"><a href="#5-4-Eureka：集群环境配置" class="headerlink" title="5.4 Eureka：集群环境配置"></a>5.4 Eureka：集群环境配置</h4><p><img src="/2021/07/07/spring-cloud/20201120102037473.png"></p><h5 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1.初始化"></a>1.初始化</h5><p>新建springcloud-eureka-7002、springcloud-eureka-7003 模块</p><p>1.为pom.xml添加依赖 (与springcloud-eureka-7001相同)</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--导包~--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-eureka-server --></span>    <span class="token comment">&lt;!--导入Eureka Server依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--热部署工具--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.application.yml配置(与springcloud-eureka-7001相同)</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 7003# Eureka配置eureka:  instance:    hostname: localhost # Eureka服务端的实例名字  client:    register-with-eureka: false # 表示是否向 Eureka 注册中心注册自己(这个模块本身是服务器,所以不需要)    fetch-registry: false # fetch-registry如果为false,则表示自己为注册中心    service-url: # 监控页面~      # 重写Eureka的默认端口以及访问路径 ---&gt;http:&#x2F;&#x2F;localhost:7001&#x2F;eureka&#x2F;      defaultZone: http:&#x2F;&#x2F;$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;&#x2F;eureka&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.主启动类(与springcloud-eureka-7001相同)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;** * @Auther: csp1999 * @Date: 2020&#x2F;05&#x2F;18&#x2F;10:26 * @Description: 启动之后，访问 http:&#x2F;&#x2F;127.0.0.1:7003&#x2F; *&#x2F;@SpringBootApplication&#x2F;&#x2F; @EnableEurekaServer 服务端的启动类，可以接受别人注册进来~public class EurekaServer_7003 &#123;    public static void main(String[] args) &#123;        SpringApplication.run(EurekaServer_7003.class,args);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-集群成员相互关联（换本机的域名）"><a href="#2-集群成员相互关联（换本机的域名）" class="headerlink" title="==2.集群成员相互关联（换本机的域名）=="></a>==2.集群成员相互关联（换本机的域名）==</h5><p>配置一些自定义本机名字，找到本机hosts文件并打开</p><p><img src="/2021/07/07/spring-cloud/20200521131127278.png"></p><p>在hosts文件最后加上，要访问的本机名称，默认是localhost</p><p><img src="/2021/07/07/spring-cloud/20200521131141804.png"></p><p>修改application.yml的配置，如图为springcloud-eureka-7001配置，springcloud-eureka-7002/springcloud-eureka-7003同样分别修改为其对应的名称即可</p><p><img src="/2021/07/07/spring-cloud/202005211312020.png"></p><p>在集群中使springcloud-eureka-7001关联springcloud-eureka-7002、springcloud-eureka-7003</p><p>完整的springcloud-eureka-7001下的application.yml如下</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 7001#Eureka配置eureka:  instance:    hostname: eureka7001.com #Eureka服务端的实例名字  client:    register-with-eureka: false #表示是否向 Eureka 注册中心注册自己(这个模块本身是服务器,所以不需要)    fetch-registry: false #fetch-registry如果为false,则表示自己为注册中心    service-url: #监控页面~      #重写Eureka的默认端口以及访问路径 ---&gt;http:&#x2F;&#x2F;localhost:7001&#x2F;eureka&#x2F;      # 单机： defaultZone: http:&#x2F;&#x2F;$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;&#x2F;eureka&#x2F;      # 集群（关联）：7001关联7002、7003      defaultZone: http:&#x2F;&#x2F;eureka7002.com:7002&#x2F;eureka&#x2F;,http:&#x2F;&#x2F;eureka7003.com:7003&#x2F;eureka&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时在集群中使springcloud-eureka-7002关联springcloud-eureka-7001、springcloud-eureka-7003</p><p>完整的springcloud-eureka-7002下的application.yml如下</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 7002#Eureka配置eureka:  instance:    hostname: eureka7002.com #Eureka服务端的实例名字  client:    register-with-eureka: false #表示是否向 Eureka 注册中心注册自己(这个模块本身是服务器,所以不需要)    fetch-registry: false #fetch-registry如果为false,则表示自己为注册中心    service-url: #监控页面~      #重写Eureka的默认端口以及访问路径 ---&gt;http:&#x2F;&#x2F;localhost:7001&#x2F;eureka&#x2F;      # 单机： defaultZone: http:&#x2F;&#x2F;$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;&#x2F;eureka&#x2F;      # 集群（关联）：7002关联7001、7003      defaultZone: http:&#x2F;&#x2F;eureka7001.com:7001&#x2F;eureka&#x2F;,http:&#x2F;&#x2F;eureka7003.com:7003&#x2F;eureka&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>springcloud-eureka-7003配置方式同理可得.</p><p>通过springcloud-provider-dept-8001下的yml配置文件，修改<strong>Eureka配置：配置服务注册中心地址</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"># Eureka配置：配置服务注册中心地址eureka:  client:    service-url:      # 注册中心地址7001-7003      defaultZone: http:&#x2F;&#x2F;eureka7001.com:7001&#x2F;eureka&#x2F;,http:&#x2F;&#x2F;eureka7002.com:7002&#x2F;eureka&#x2F;,http:&#x2F;&#x2F;eureka7003.com:7003&#x2F;eureka&#x2F;  instance:    instance-id: springcloud-provider-dept-8001 #修改Eureka上的默认描述信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样模拟集群就搭建号了，就可以把一个项目挂载到三个服务器上了</p><p><img src="/2021/07/07/spring-cloud/20200521131237217.png"></p><h4 id="5-5-对比和Zookeeper区别"><a href="#5-5-对比和Zookeeper区别" class="headerlink" title="5.5 对比和Zookeeper区别"></a>5.5 对比和Zookeeper区别</h4><h6 id="1-回顾CAP原则"><a href="#1-回顾CAP原则" class="headerlink" title="1. 回顾CAP原则"></a><strong>1. 回顾CAP原则</strong></h6><p>RDBMS (MySQL\Oracle\sqlServer) ===&gt; ACID</p><p>NoSQL (Redis\MongoDB) ===&gt; CAP</p><h6 id="2-ACID是什么？"><a href="#2-ACID是什么？" class="headerlink" title="2. ACID是什么？"></a><strong>2. ACID是什么？</strong></h6><ul><li>A (Atomicity) 原子性</li><li>C (Consistency) 一致性</li><li>I (Isolation) 隔离性</li><li>D (Durability) 持久性</li></ul><h6 id="3-CAP是什么"><a href="#3-CAP是什么" class="headerlink" title="3. CAP是什么?"></a><strong>3. CAP是什么?</strong></h6><ul><li>C (Consistency) 强一致性</li><li>A (Availability) 可用性</li><li>P (Partition tolerance) 分区容错性</li></ul><p>CAP的三进二：CA、AP、CP</p><blockquote><p>不可能同时满足三个要求</p></blockquote><h6 id="4-CAP理论的核心"><a href="#4-CAP理论的核心" class="headerlink" title="4. CAP理论的核心"></a><strong>4. CAP理论的核心</strong></h6><ul><li>一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求</li><li>根据CAP原理，将NoSQL数据库分成了满足CA原则，满足CP原则和满足AP原则三大类<ul><li>CA：单点集群，满足一致性，可用性的系统，通常可扩展性较差</li><li>CP：满足一致性，分区容错的系统，通常性能不是特别高</li><li>AP：满足可用性，分区容错的系统，通常可能对一致性要求低一些</li></ul></li></ul><h6 id="5-作为分布式服务注册中心，Eureka比Zookeeper好在哪里？"><a href="#5-作为分布式服务注册中心，Eureka比Zookeeper好在哪里？" class="headerlink" title="5. 作为分布式服务注册中心，Eureka比Zookeeper好在哪里？"></a><strong>5. 作为分布式服务注册中心，Eureka比Zookeeper好在哪里？</strong></h6><p>著名的CAP理论指出，一个分布式系统不可能同时满足C (一致性) 、A (可用性) 、P (容错性)，由于分区容错性P再分布式系统中是必须要保证的，因此我们只能再A和C之间进行权衡。</p><ul><li>Zookeeper 保证的是 CP —&gt; 满足一致性，分区容错的系统，通常性能不是特别高</li><li>Eureka 保证的是 AP —&gt; 满足可用性，分区容错的系统，通常可能对一致性要求低一些</li></ul><p><strong>Zookeeper保证的是CP</strong></p><p> 当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的注册信息，但不能接收服务直接down掉不可用。也就是说，<strong>服务注册功能对可用性的要求要高于一致性</strong>。但zookeeper会出现这样一种情况，当master节点因为网络故障与其他节点失去联系时，剩余节点会重新进行leader选举。问题在于，选举leader的时间太长，30-120s，且选举期间整个zookeeper集群是不可用的，这就导致在选举期间注册服务瘫痪。在云部署的环境下，因为网络问题使得zookeeper集群失去master节点是较大概率发生的事件，虽然服务最终能够恢复，但是，漫长的选举时间导致注册长期不可用，是不可容忍的。</p><p><strong>Eureka保证的是AP</strong></p><p> Eureka看明白了这一点，因此在设计时就优先保证可用性。<strong>Eureka各个节点都是平等的</strong>，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务。而Eureka的客户端在向某个Eureka注册时，如果发现连接失败，则会自动切换至其他节点，只要有一台Eureka还在，就能保住注册服务的可用性，只不过查到的信息可能不是最新的，除此之外，Eureka还有之中自我保护机制，如果在15分钟内超过85%的节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，此时会出现以下几种情况：</p><ul><li>Eureka不在从注册列表中移除因为长时间没收到心跳而应该过期的服务</li><li>Eureka仍然能够接受新服务的注册和查询请求，但是不会被同步到其他节点上 (即保证当前节点依然可用)</li><li>当网络稳定时，当前实例新的注册信息会被同步到其他节点中</li></ul><p>因此，Eureka可以很好的应对因网络故障导致部分节点失去联系的情况，而不会像zookeeper那样使整个注册服务瘫痪</p><h2 id="6-Ribbon：负载均衡-基于客户端"><a href="#6-Ribbon：负载均衡-基于客户端" class="headerlink" title="6. Ribbon：负载均衡(基于客户端)"></a>6. Ribbon：负载均衡(基于客户端)</h2><h4 id="6-1-负载均衡以及Ribbon"><a href="#6-1-负载均衡以及Ribbon" class="headerlink" title="6.1 负载均衡以及Ribbon"></a>6.1 负载均衡以及Ribbon</h4><blockquote><p>Ribbon是什么？</p></blockquote><ul><li>Spring Cloud Ribbon 是基于Netflix Ribbon 实现的一套<strong>客户端负载均衡的工具</strong>。</li><li>简单的说，Ribbon 是 Netflix 发布的开源项目，主要功能是提供客户端的软件负载均衡算法，将 Netflix 的中间层服务连接在一起。Ribbon 的客户端组件提供一系列完整的配置项，如：连接超时、重试等。简单的说，就是在配置文件中列出 LoadBalancer (简称LB：负载均衡) 后面所有的及其，Ribbon 会自动的帮助你基于某种规则 (如简单轮询，随机连接等等) 去连接这些机器。我们也容易使用 Ribbon 实现自定义的负载均衡算法！</li></ul><blockquote><p>Ribbon能干嘛？</p></blockquote><p><img src="/2021/07/07/spring-cloud/20201121103107791.png"></p><ul><li>LB，即负载均衡 (LoadBalancer) ，在微服务或分布式集群中经常用的一种应用。</li><li>负载均衡简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的HA (高用)。</li><li>常见的负载均衡软件有 Nginx、Lvs 等等。</li><li>Dubbo、SpringCloud 中均给我们提供了负载均衡，<strong>SpringCloud 的负载均衡算法可以自定义</strong>。</li><li>负载均衡简单分类：<ul><li>集中式LB<ul><li>即在服务的提供方和消费方之间使用独立的LB设施，如**Nginx(反向代理服务器)**，由该设施负责把访问请求通过某种策略转发至服务的提供方！</li></ul></li><li>进程式 LB<ul><li>将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选出一个合适的服务器。</li><li><strong>Ribbon 就属于进程内LB</strong>，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址！</li></ul></li></ul></li></ul><h4 id="6-2-集成Ribbon"><a href="#6-2-集成Ribbon" class="headerlink" title="6.2 集成Ribbon"></a>6.2 集成Ribbon</h4><p><strong>springcloud-consumer-dept-80</strong>向pom.xml中添加Ribbon和Eureka依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--Ribbon--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-ribbon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--Eureka: Ribbon需要从Eureka服务中心获取要拿什么--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-eureka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在application.yml文件中配置Eureka</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"># Eureka配置eureka:  client:    register-with-eureka: false # 不向 Eureka注册自己    service-url: # 从三个注册中心中随机取一个去访问      defaultZone: http:&#x2F;&#x2F;eureka7001.com:7001&#x2F;eureka&#x2F;,http:&#x2F;&#x2F;eureka7002.com:7002&#x2F;eureka&#x2F;,http:&#x2F;&#x2F;eureka7003.com:7003&#x2F;eureka&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动类加上@EnableEurekaClient注解，开启Eureka</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;Ribbon 和 Eureka 整合以后，客户端可以直接调用，不用关心IP地址和端口号@SpringBootApplication@EnableEurekaClient &#x2F;&#x2F;开启Eureka 客户端public class DeptConsumer_80 &#123;    public static void main(String[] args) &#123;        SpringApplication.run(DeptConsumer_80.class, args);    &#125;&#125;12345678<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义Spring配置类：ConfigBean.java 配置负载均衡实现RestTemplate</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class ConfigBean &#123;&#x2F;&#x2F;@Configuration -- spring  applicationContext.xml    @LoadBalanced &#x2F;&#x2F;配置负载均衡实现RestTemplate    @Bean    public RestTemplate getRestTemplate() &#123;        return new RestTemplate();    &#125;&#125;123456789<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改conroller：DeptConsumerController.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;Ribbon:我们这里的地址，应该是一个变量，通过服务名来访问&#x2F;&#x2F;private static final String REST_URL_PREFIX &#x3D; &quot;http:&#x2F;&#x2F;localhost:8001&quot;;private static final String REST_URL_PREFIX &#x3D; &quot;http:&#x2F;&#x2F;SPRINGCLOUD-PROVIDER-DEPT&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-3-使用Ribbon实现负载均衡"><a href="#6-3-使用Ribbon实现负载均衡" class="headerlink" title="6.3 使用Ribbon实现负载均衡"></a>6.3 使用Ribbon实现负载均衡</h4><p>流程图：</p><p><img src="/2021/07/07/spring-cloud/20200521131315626.png"></p><p>1.新建两个服务提供者Moudle：springcloud-provider-dept-8003、springcloud-provider-dept-8002</p><p>2.参照springcloud-provider-dept-8001 依次为另外两个Moudle添加pom.xml依赖 、resourece下的mybatis和application.yml配置，Java代码</p><p>3.启动所有服务测试(根据自身电脑配置决定启动服务的个数)，访问<a href="http://eureka7001.com:7002/%E6%9F%A5%E7%9C%8B%E7%BB%93%E6%9E%9C">http://eureka7001.com:7002/查看结果</a></p><p><img src="/2021/07/07/spring-cloud/20200521131332466.png"></p><p>测试访问<a href="http://localhost/consumer/dept/list">http://localhost/consumer/dept/list</a> 这时候随机访问的是服务提供者8003</p><p><img src="/2021/07/07/spring-cloud/20201121115756709.png"></p><p>再次访问<a href="http://localhost/consumer/dept/list%E8%BF%99%E6%97%B6%E5%80%99%E9%9A%8F%E6%9C%BA%E7%9A%84%E6%98%AF%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%858001">http://localhost/consumer/dept/list这时候随机的是服务提供者8001</a></p><p><img src="/2021/07/07/spring-cloud/20201121115944955.png"></p><p>以上这种<strong>每次访问<a href="http://localhost/consumer/dept/list%E9%9A%8F%E6%9C%BA%E8%AE%BF%E9%97%AE%E9%9B%86%E7%BE%A4%E4%B8%AD%E6%9F%90%E4%B8%AA%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85%EF%BC%8C%E8%BF%99%E7%A7%8D%E6%83%85%E5%86%B5%E5%8F%AB%E5%81%9A%E8%BD%AE%E8%AF%A2">http://localhost/consumer/dept/list随机访问集群中某个服务提供者，这种情况叫做轮询</a></strong>，轮询算法在SpringCloud中可以自定义。</p><p><strong>如何切换或者自定义规则呢？</strong></p><p>在springcloud-provider-dept-80模块下的ConfigBean中进行配置，切换使用不同的规则</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class ConfigBean &#123;&#x2F;&#x2F;@Configuration -- spring  applicationContext.xml    &#x2F;**     * IRule:     * RoundRobinRule 轮询策略     * RandomRule 随机策略     * AvailabilityFilteringRule ： 会先过滤掉，跳闸，访问故障的服务~，对剩下的进行轮询~     * RetryRule ： 会先按照轮询获取服务~，如果服务获取失败，则会在指定的时间内进行，重试     *&#x2F;    @Bean    public IRule myRule() &#123;        return new RandomRule();&#x2F;&#x2F;使用随机策略        &#x2F;&#x2F;return new RoundRobinRule();&#x2F;&#x2F;使用轮询策略        &#x2F;&#x2F;return new AvailabilityFilteringRule();&#x2F;&#x2F;使用轮询策略        &#x2F;&#x2F;return new RetryRule();&#x2F;&#x2F;使用轮询策略    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以自定义规则，在myRule包下自定义一个配置类MyRule.java，注意：<strong>该包不要和主启动类同级，要跟启动类所在包同级</strong>：</p><p><img src="/2021/07/07/spring-cloud/20200521131456478.png"></p><p>MyRule.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;** * @Auther: csp1999 * @Date: 2020&#x2F;05&#x2F;19&#x2F;11:58 * @Description: 自定义规则 *&#x2F;@Configurationpublic class MyRule &#123;    @Bean    public IRule myRule()&#123;        return new MyRandomRule();&#x2F;&#x2F;默认是轮询RandomRule,现在自定义为自己的    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动类开启负载均衡并指定自定义的MyRule配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;Ribbon 和 Eureka 整合以后，客户端可以直接调用，不用关心IP地址和端口号@SpringBootApplication@EnableEurekaClient&#x2F;&#x2F;在微服务启动的时候就能加载自定义的Ribbon类(自定义的规则会覆盖原有默认的规则)@RibbonClient(name &#x3D; &quot;SPRINGCLOUD-PROVIDER-DEPT&quot;,configuration &#x3D; MyRule.class)&#x2F;&#x2F;开启负载均衡,并指定自定义的规则public class DeptConsumer_80 &#123;    public static void main(String[] args) &#123;        SpringApplication.run(DeptConsumer_80.class, args);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义的规则(这里我们参考Ribbon中默认的规则代码自己稍微改动)：MyRandomRule.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class MyRandomRule extends AbstractLoadBalancerRule &#123;    &#x2F;**     * 每个服务访问5次则换下一个服务(总共3个服务)     * &lt;p&gt;     * total&#x3D;0,默认&#x3D;0,如果&#x3D;5,指向下一个服务节点     * index&#x3D;0,默认&#x3D;0,如果total&#x3D;5,index+1     *&#x2F;    private int total &#x3D; 0;&#x2F;&#x2F;被调用的次数    private int currentIndex &#x3D; 0;&#x2F;&#x2F;当前是谁在提供服务    &#x2F;&#x2F;@edu.umd.cs.findbugs.annotations.SuppressWarnings(value &#x3D; &quot;RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE&quot;)    public Server choose(ILoadBalancer lb, Object key) &#123;        if (lb &#x3D;&#x3D; null) &#123;            return null;        &#125;        Server server &#x3D; null;        while (server &#x3D;&#x3D; null) &#123;            if (Thread.interrupted()) &#123;                return null;            &#125;            List&lt;Server&gt; upList &#x3D; lb.getReachableServers();&#x2F;&#x2F;获得当前活着的服务            List&lt;Server&gt; allList &#x3D; lb.getAllServers();&#x2F;&#x2F;获取所有的服务            int serverCount &#x3D; allList.size();            if (serverCount &#x3D;&#x3D; 0) &#123;                &#x2F;*                 * No servers. End regardless of pass, because subsequent passes                 * only get more restrictive.                 *&#x2F;                return null;            &#125;            &#x2F;&#x2F;int index &#x3D; chooseRandomInt(serverCount);&#x2F;&#x2F;生成区间随机数            &#x2F;&#x2F;server &#x3D; upList.get(index);&#x2F;&#x2F;从或活着的服务中,随机获取一个            &#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;自定义代码&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;            if (total &lt; 5) &#123;                server &#x3D; upList.get(currentIndex);                total++;            &#125; else &#123;                total &#x3D; 0;                currentIndex++;                if (currentIndex &gt; upList.size()) &#123;                    currentIndex &#x3D; 0;                &#125;                server &#x3D; upList.get(currentIndex);&#x2F;&#x2F;从活着的服务中,获取指定的服务来进行操作            &#125;                        &#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;                        if (server &#x3D;&#x3D; null) &#123;                &#x2F;*                 * The only time this should happen is if the server list were                 * somehow trimmed. This is a transient condition. Retry after                 * yielding.                 *&#x2F;                Thread.yield();                continue;            &#125;            if (server.isAlive()) &#123;                return (server);            &#125;            &#x2F;&#x2F; Shouldn&#39;t actually happen.. but must be transient or a bug.            server &#x3D; null;            Thread.yield();        &#125;        return server;    &#125;    protected int chooseRandomInt(int serverCount) &#123;        return ThreadLocalRandom.current().nextInt(serverCount);    &#125;    @Override    public Server choose(Object key) &#123;        return choose(getLoadBalancer(), key);    &#125;    @Override    public void initWithNiwsConfig(IClientConfig clientConfig) &#123;        &#x2F;&#x2F; TODO Auto-generated method stub    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用自己的代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.chao.myrule;import com.netflix.loadbalancer.IRule;import com.netflix.loadbalancer.RandomRule;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;@Configurationpublic class ChaoRule &#123;    @Bean    public IRule myRule() &#123;        &#x2F;&#x2F;调用自己的        return new ChaoRandomRule(); &#x2F;&#x2F;超过次数就没了，报错了        &#x2F;&#x2F;return new RandomRule();&#x2F;&#x2F;使用随机策略        &#x2F;&#x2F;return new RoundRobinRule();&#x2F;&#x2F;使用轮询策略        &#x2F;&#x2F;return new AvailabilityFilteringRule();&#x2F;&#x2F;使用轮询策略        &#x2F;&#x2F;return new RetryRule();&#x2F;&#x2F;使用轮询策略    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/spring-cloud/1621492322364.png"></p><h2 id="7-Feign：负载均衡-基于服务端"><a href="#7-Feign：负载均衡-基于服务端" class="headerlink" title="7.Feign：负载均衡(基于服务端)"></a>7.Feign：负载均衡(基于服务端)</h2><h4 id="7-1-Feign简介"><a href="#7-1-Feign简介" class="headerlink" title="7.1 Feign简介"></a>7.1 Feign简介</h4><p>Feign是声明式Web Service客户端，它让微服务之间的调用变得更简单，类似controller调用service。SpringCloud集成了Ribbon和Eureka，可以使用Feigin提供负载均衡的http客户端</p><p><strong>只需要创建一个接口，然后添加注解即可~</strong></p><p>Feign，主要是社区版，大家都习惯面向接口编程。这个是很多开发人员的规范。调用微服务访问两种方法</p><ol><li>微服务名字 【ribbon】</li><li>接口和注解 【feign】</li></ol><p><strong>Feign能干什么？</strong></p><ul><li>Feign旨在使编写Java Http客户端变得更容易</li><li>前面在使用<strong>Ribbon</strong> + <strong>RestTemplate</strong>时，利用<strong>RestTemplate</strong>对Http请求的封装处理，形成了一套模板化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一个客户端类来包装这些依赖服务的调用。所以，<strong>Feign</strong>在此基础上做了进一步的封装，由他来帮助我们定义和实现依赖服务接口的定义，在Feign的实现下，我们只需要创建一个接口并使用注解的方式来配置它 (类似以前Dao接口上标注Mapper注解，现在是一个微服务接口上面标注一个Feign注解)，即可完成对服务提供方的接口绑定，简化了使用Spring Cloud Ribbon 时，自动封装服务调用客户端的开发量。</li></ul><p><strong>Feign默认集成了Ribbon</strong></p><ul><li>利用<strong>Ribbon</strong>维护了MicroServiceCloud-Dept的服务列表信息，并且通过轮询实现了客户端的负载均衡，而与<strong>Ribbon</strong>不同的是，通过<strong>Feign</strong>只需要定义服务绑定接口且以声明式的方法，优雅而简单的实现了服务调用。</li></ul><h4 id="7-2-Feign的使用步骤"><a href="#7-2-Feign的使用步骤" class="headerlink" title="7.2 Feign的使用步骤"></a>7.2 Feign的使用步骤</h4><ol><li><p>创建springcloud-consumer-fdept-feign模块</p><p><img src="/2021/07/07/spring-cloud/20201121123410804.png"></p><p>拷贝springcloud-consumer-dept-80模块下的pom.xml，resource，以及java代码到springcloud-consumer-feign模块，并添加feign依赖。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--Feign的依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-feign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>通过<strong>Ribbon</strong>实现：—原来的controller：<strong>DeptConsumerController.java</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;** * @Auther: csp1999 * @Date: 2020&#x2F;05&#x2F;17&#x2F;22:44 * @Description: *&#x2F;@RestControllerpublic class DeptConsumerController &#123;    &#x2F;**     * 理解：消费者，不应该有service层~     * RestTemplate .... 供我们直接调用就可以了！ 注册到Spring中     * (地址：url, 实体：Map ,Class&lt;T&gt; responseType)     * &lt;p&gt;     * 提供多种便捷访问远程http服务的方法，简单的Restful服务模板~     *&#x2F;    @Autowired    private RestTemplate restTemplate;    &#x2F;**     * 服务提供方地址前缀     * &lt;p&gt;     * Ribbon:我们这里的地址，应该是一个变量，通过服务名来访问     *&#x2F;&#x2F;&#x2F;    private static final String REST_URL_PREFIX &#x3D; &quot;http:&#x2F;&#x2F;localhost:8001&quot;;    private static final String REST_URL_PREFIX &#x3D; &quot;http:&#x2F;&#x2F;SPRINGCLOUD-PROVIDER-DEPT&quot;;    &#x2F;**     * 消费方添加部门信息     * @param dept     * @return     *&#x2F;    @RequestMapping(&quot;&#x2F;consumer&#x2F;dept&#x2F;add&quot;)    public boolean add(Dept dept) &#123;        &#x2F;&#x2F; postForObject(服务提供方地址(接口),参数实体,返回类型.class)        return restTemplate.postForObject(REST_URL_PREFIX + &quot;&#x2F;dept&#x2F;add&quot;, dept, Boolean.class);    &#125;    &#x2F;**     * 消费方根据id查询部门信息     * @param id     * @return     *&#x2F;    @RequestMapping(&quot;&#x2F;consumer&#x2F;dept&#x2F;get&#x2F;&#123;id&#125;&quot;)    public Dept get(@PathVariable(&quot;id&quot;) Long id) &#123;        &#x2F;&#x2F; getForObject(服务提供方地址(接口),返回类型.class)        return restTemplate.getForObject(REST_URL_PREFIX + &quot;&#x2F;dept&#x2F;get&#x2F;&quot; + id, Dept.class);    &#125;    &#x2F;**     * 消费方查询部门信息列表     * @return     *&#x2F;    @RequestMapping(&quot;&#x2F;consumer&#x2F;dept&#x2F;list&quot;)    public List&lt;Dept&gt; list() &#123;        return restTemplate.getForObject(REST_URL_PREFIX + &quot;&#x2F;dept&#x2F;list&quot;, List.class);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   通过<strong>Feign</strong>实现：—改造后controller：<strong>DeptConsumerController.java</strong></p>   <pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;**    * @Auther: csp1999    * @Date: 2020&#x2F;05&#x2F;17&#x2F;22:44    * @Description:    *&#x2F;   @RestController   public class DeptConsumerController &#123;          @Autowired       private DeptClientService deptClientService;          &#x2F;**        * 消费方添加部门信息        * @param dept        * @return        *&#x2F;       @RequestMapping(&quot;&#x2F;consumer&#x2F;dept&#x2F;add&quot;)       public boolean add(Dept dept) &#123;           return deptClientService.addDept(dept);       &#125;          &#x2F;**        * 消费方根据id查询部门信息        * @param id        * @return        *&#x2F;       @RequestMapping(&quot;&#x2F;consumer&#x2F;dept&#x2F;get&#x2F;&#123;id&#125;&quot;)       public Dept get(@PathVariable(&quot;id&quot;) Long id) &#123;          return deptClientService.queryById(id);       &#125;          &#x2F;**        * 消费方查询部门信息列表        * @return        *&#x2F;       @RequestMapping(&quot;&#x2F;consumer&#x2F;dept&#x2F;list&quot;)       public List&lt;Dept&gt; list() &#123;           return deptClientService.queryAll();       &#125;   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   Feign和Ribbon二者对比，前者显现出面向接口编程特点，代码看起来更清爽，而且Feign调用方式更符合我们之前在做SSM或者SprngBoot项目时，Controller层调用Service层的编程习惯！</p><p><strong>主配置类</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">  &#x2F;*** @Auther: csp1999   * @Date: 2020&#x2F;05&#x2F;17&#x2F;22:47   * @Description:   *&#x2F;  @SpringBootApplication  @EnableEurekaClient  &#x2F;&#x2F; feign客户端注解,并指定要扫描的包以及配置接口DeptClientService  @EnableFeignClients(basePackages &#x3D; &#123;&quot;com.haust.springcloud&quot;&#125;)  &#x2F;&#x2F; 切记不要加这个注解，不然会出现404访问不到  &#x2F;&#x2F;@ComponentScan(&quot;com.haust.springcloud&quot;)  public class FeignDeptConsumer_80 &#123;      public static void main(String[] args) &#123;          SpringApplication.run(FeignDeptConsumer_80.class, args);      &#125;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>改造springcloud-api模块</p><p>pom.xml添加feign依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--Feign的依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-feign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>新建service包，并新建DeptClientService.java接口，</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; @FeignClient:微服务客户端注解,value:指定微服务的名字,这样就可以使Feign客户端直接找到对应的微服务@FeignClient(value &#x3D; &quot;SPRINGCLOUD-PROVIDER-DEPT&quot;)public interface DeptClientService &#123;    @GetMapping(&quot;&#x2F;dept&#x2F;get&#x2F;&#123;id&#125;&quot;)    public Dept queryById(@PathVariable(&quot;id&quot;) Long id);    @GetMapping(&quot;&#x2F;dept&#x2F;list&quot;)    public Dept queryAll();    @GetMapping(&quot;&#x2F;dept&#x2F;add&quot;)    public Dept addDept(Dept dept);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-3-Feign和Ribbon如何选择？"><a href="#7-3-Feign和Ribbon如何选择？" class="headerlink" title="7.3 Feign和Ribbon如何选择？"></a>7.3 Feign和Ribbon如何选择？</h4><p><strong>根据个人习惯而定，如果喜欢REST风格使用Ribbon；如果喜欢社区版的面向接口风格使用Feign.</strong></p><p>Feign 本质上也是实现了 Ribbon，只不过后者是在调用方式上，为了满足一些开发者习惯的接口调用习惯！</p><p>下面我们关闭springcloud-consumer-dept-80 这个服务消费方，换用springcloud-consumer-dept-feign(端口还是80) 来代替：(依然可以正常访问，就是调用方式相比于Ribbon变化了)</p><p><img src="/2021/07/07/spring-cloud/20201121141340243.png"></p><h2 id="8-Hystrix：服务熔断"><a href="#8-Hystrix：服务熔断" class="headerlink" title="8. Hystrix：服务熔断"></a>8. Hystrix：服务熔断</h2><blockquote><p>分布式系统面临的问题</p></blockquote><p>复杂分布式体系结构中的应用程序有数十个依赖关系，每个依赖关系在某些时候将不可避免失败！</p><h4 id="8-1-服务雪崩"><a href="#8-1-服务雪崩" class="headerlink" title="8.1 服务雪崩"></a>8.1 服务雪崩</h4><p> 多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其他的微服务，这就是所谓的“扇出”，如果扇出的链路上<strong>某个微服务的调用响应时间过长，或者不可用</strong>，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的“雪崩效应”。</p><p><img src="/2021/07/07/spring-cloud/20201121144830148.png"></p><p> 对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几十秒内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障，<strong>这些都表示需要对故障和延迟进行隔离和管理，以达到单个依赖关系的失败而不影响整个应用程序或系统运行</strong>。</p><p> 我们需要，<strong>弃车保帅</strong>！</p><h4 id="8-2-什么是Hystrix？"><a href="#8-2-什么是Hystrix？" class="headerlink" title="8.2 什么是Hystrix？"></a>8.2 什么是Hystrix？</h4><p> <strong>Hystrix</strong>是一个应用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时，异常等，<strong>Hystrix</strong> 能够保证在一个依赖出问题的情况下，不会导致整个体系服务失败，避免级联故障，以提高分布式系统的弹性。</p><p> “<strong>断路器</strong>”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控 (类似熔断保险丝) ，<strong>向调用方返回一个服务预期的，可处理的备选响应 (FallBack) ，而不是长时间的等待或者抛出调用方法无法处理的异常，这样就可以保证了服务调用方的线程不会被长时间，不必要的占用</strong>，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p><p><img src="/2021/07/07/spring-cloud/2020112114554744.png"></p><h4 id="8-3-Hystrix能干嘛？"><a href="#8-3-Hystrix能干嘛？" class="headerlink" title="8.3 Hystrix能干嘛？"></a>8.3 Hystrix能干嘛？</h4><ul><li>服务降级</li><li>服务熔断</li><li>服务限流</li><li>接近实时的监控</li><li>…</li></ul><p>当一切正常时，请求流可以如下所示：</p><p><img src="/2021/07/07/spring-cloud/aHR0cHM6Ly9naXRodWIuY29tL05ldGZsaXgvSHlzdHJpeC93aWtpL2ltYWdlcy9zb2EtMS02NDAucG5n.png"></p><p>当许多后端系统中有一个潜在阻塞服务时，它可以阻止整个用户请求：</p><p><img src="/2021/07/07/spring-cloud/aHR0cHM6Ly9naXRodWIuY29tL05ldGZsaXgvSHlzdHJpeC93aWtpL2ltYWdlcy9zb2EtMi02NDAucG5n.png"></p><p>随着大容量通信量的增加，单个后端依赖项的潜在性会导致所有服务器上的所有资源在几秒钟内饱和。</p><p>应用程序中通过网络或客户端库可能导致网络请求的每个点都是潜在故障的来源。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，从而备份队列、线程和其他系统资源，从而导致更多跨系统的级联故障。</p><p><img src="/2021/07/07/spring-cloud/aHR0cHM6Ly9naXRodWIuY29tL05ldGZsaXgvSHlzdHJpeC93aWtpL2ltYWdlcy9zb2EtMy02NDAucG5n.png"></p><p>当使用<strong>Hystrix</strong>包装每个基础依赖项时，上面的图表中所示的体系结构会发生类似于以下关系图的变化。<strong>每个依赖项是相互隔离的</strong>，限制在延迟发生时它可以填充的资源中，并包含在回退逻辑中，该逻辑决定在依赖项中发生任何类型的故障时要做出什么样的响应：</p><p><img src="/2021/07/07/spring-cloud/20200521131820586.png"></p><p><strong>官网资料</strong>：<a href="https://github.com/Netflix/Hystrix/wiki">https://github.com/Netflix/Hystrix/wiki</a></p><h4 id="8-4-服务熔断"><a href="#8-4-服务熔断" class="headerlink" title="8.4 服务熔断"></a>8.4 服务熔断</h4><h5 id="什么是服务熔断"><a href="#什么是服务熔断" class="headerlink" title="什么是服务熔断?"></a>什么是服务熔断?</h5><p> <strong>熔断机制是赌赢雪崩效应的一种微服务链路保护机制</strong>。</p><p> 当扇出链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，<strong>进而熔断该节点微服务的调用，快速返回错误的响应信息</strong>。检测到该节点微服务调用响应正常后恢复调用链路。在SpringCloud框架里熔断机制通过Hystrix实现。Hystrix会监控微服务间调用的状况，当失败的调用到一定阀值缺省是<strong>5秒内20次调用失败，就会启动熔断机制</strong>。熔断机制的注解是：<code>@HystrixCommand</code>。</p><p>服务熔断解决如下问题：</p><ul><li>当所依赖的对象不稳定时，能够起到快速失败的目的；</li><li>快速失败后，能够根据一定的算法动态试探所依赖对象是否恢复。</li></ul><h5 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h5><p>新建springcloud-provider-dept-hystrix-8001模块并拷贝springcloud-provider-dept–8001内的<strong>pom.xml、resource</strong>和Java代码进行初始化并调整。</p><p><strong>导入hystrix依赖</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--导入Hystrix依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>调整yml配置文件</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 8001# mybatis配置mybatis:  # springcloud-api 模块下的pojo包  type-aliases-package: com.haust.springcloud.pojo  # 本模块下的mybatis-config.xml核心配置文件类路径  config-location: classpath:mybatis&#x2F;mybatis-config.xml  # 本模块下的mapper配置文件类路径  mapper-locations: classpath:mybatis&#x2F;mapper&#x2F;*.xml# spring配置spring:  application:    #项目名    name: springcloud-provider-dept  datasource:    # 德鲁伊数据源    type: com.alibaba.druid.pool.DruidDataSource    driver-class-name: com.mysql.jdbc.Driver    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;db01?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf-8    username: root    password: root# Eureka配置：配置服务注册中心地址eureka:  client:    service-url:      # 注册中心地址7001-7003      defaultZone: http:&#x2F;&#x2F;eureka7001.com:7001&#x2F;eureka&#x2F;,http:&#x2F;&#x2F;eureka7002.com:7002&#x2F;eureka&#x2F;,http:&#x2F;&#x2F;eureka7003.com:7003&#x2F;eureka&#x2F;  instance:    instance-id: springcloud-provider-dept-hystrix-8001 #修改Eureka上的默认描述信息    prefer-ip-address: true #改为true后默认显示的是ip地址而不再是localhost#info配置info:  app.name: haust-springcloud #项目的名称  company.name: com.haust #公司的名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>prefer-ip-address: false</strong>:</p><p><img src="/2021/07/07/spring-cloud/20200521131940911.png"></p><p><strong>prefer-ip-address: true</strong>：</p><p><img src="/2021/07/07/spring-cloud/2020052113195798.png"></p><p><strong>修改controller</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;** * @Auther: csp1999 * @Date: 2020&#x2F;05&#x2F;17&#x2F;22:06 * @Description: 提供Restful服务 *&#x2F;@RestControllerpublic class DeptController &#123;    @Autowired    private DeptService deptService;    &#x2F;**     * 根据id查询部门信息     * 如果根据id查询出现异常,则走hystrixGet这段备选代码     * @param id     * @return     *&#x2F;    @HystrixCommand(fallbackMethod &#x3D; &quot;hystrixGet&quot;)&#x2F;&#x2F;这个方法访问失败就会调用hystrixGet    @RequestMapping(&quot;&#x2F;dept&#x2F;get&#x2F;&#123;id&#125;&quot;)&#x2F;&#x2F;根据id查询    public Dept get(@PathVariable(&quot;id&quot;) Long id)&#123;        Dept dept &#x3D; deptService.queryById(id);        if (dept&#x3D;&#x3D;null)&#123;            throw new RuntimeException(&quot;这个id&#x3D;&gt;&quot;+id+&quot;,不存在该用户，或信息无法找到~&quot;);        &#125;        return dept;    &#125;    &#x2F;**     * 根据id查询备选方案(熔断)     * @param id     * @return     *&#x2F;    public Dept hystrixGet(@PathVariable(&quot;id&quot;) Long id)&#123;        return new Dept().setDeptno(id)                .setDname(&quot;这个id&#x3D;&gt;&quot;+id+&quot;,没有对应的信息,null---@Hystrix~&quot;)                .setDb_source(&quot;在MySQL中没有这个数据库&quot;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>为主启动类添加对熔断的支持注解@EnableCircuitBreaker</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;** * @Auther: csp1999 * @Date: 2020&#x2F;05&#x2F;17&#x2F;22:09 * @Description: 启动类 *&#x2F;@SpringBootApplication@EnableEurekaClient &#x2F;&#x2F; EnableEurekaClient 客户端的启动类，在服务启动后自动向注册中心注册服务@EnableDiscoveryClient &#x2F;&#x2F; 服务发现~@EnableCircuitBreaker &#x2F;&#x2F; 添加对熔断的支持注解public class HystrixDeptProvider_8001 &#123;    public static void main(String[] args) &#123;        SpringApplication.run(HystrixDeptProvider_8001.class,args);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试</strong>：</p><p>使用熔断后，当访问一个不存在的id时，前台页展示数据如下:</p><p><img src="/2021/07/07/spring-cloud/202011211516091.png"></p><p>而不适用熔断的springcloud-provider-dept–8001模块访问相同地址会出现下面状况:</p><p><img src="/2021/07/07/spring-cloud/20200521132119757.png"></p><p>因此，<strong>为了避免因某个微服务后台出现异常或错误而导致整个应用或网页报错，使用熔断是必要的</strong></p><blockquote><p>去除提示信息</p></blockquote><p><img src="/2021/07/07/spring-cloud/1621569925672.png"></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"> instance:    instance-id: springcloud-provider-dept-8001    prefer-ip-address: true#    修改描述信息地址信息,为true显示的不是local而是ip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-5-服务降级"><a href="#8-5-服务降级" class="headerlink" title="8.5 服务降级"></a>8.5 服务降级</h4><h5 id="什么是服务降级"><a href="#什么是服务降级" class="headerlink" title="什么是服务降级?"></a>什么是服务降级?</h5><p> 服务降级是指 当服务器压力剧增的情况下，根据实际业务情况及流量，对一些服务和页面有策略的不处理，或换种简单的方式处理，从而释放服务器资源以保证核心业务正常运作或高效运作。说白了，<strong>就是尽可能的把系统资源让给优先级高的服务</strong>。</p><p>资源有限，而请求是无限的。如果在并发高峰期，不做服务降级处理，一方面肯定会影响整体服务的性能，严重的话可能会导致宕机某些重要的服务不可用。所以，一般在高峰期，为了保证核心功能服务的可用性，都要对某些服务降级处理。比如当双11活动时，把交易无关的服务统统降级，如查看蚂蚁深林，查看历史订单等等。</p><p>服务降级主要用于什么场景呢？当整个微服务架构整体的负载超出了预设的上限阈值或即将到来的流量预计将会超过预设的阈值时，为了保证重要或基本的服务能正常运行，可以将一些 不重要 或 不紧急 的服务或任务进行服务的 延迟使用 或 暂停使用。</p><p>降级的方式可以根据业务来，可以延迟服务，比如延迟给用户增加积分，只是放到一个缓存中，等服务平稳之后再执行 ；或者在粒度范围内关闭服务，比如关闭相关文章的推荐。</p><p><img src="/2021/07/07/spring-cloud/20200521132141732.png"></p><p>由上图可得，<strong>当某一时间内服务A的访问量暴增，而B和C的访问量较少，为了缓解A服务的压力，这时候需要B和C暂时关闭一些服务功能，去承担A的部分服务，从而为A分担压力，叫做服务降级</strong>。</p><h5 id="服务降级需要考虑的问题"><a href="#服务降级需要考虑的问题" class="headerlink" title="服务降级需要考虑的问题"></a>服务降级需要考虑的问题</h5><ul><li>1）那些服务是核心服务，哪些服务是非核心服务</li><li>2）那些服务可以支持降级，那些服务不能支持降级，降级策略是什么</li><li>3）除服务降级之外是否存在更复杂的业务放通场景，策略是什么？</li></ul><h5 id="自动降级分类"><a href="#自动降级分类" class="headerlink" title="自动降级分类"></a>自动降级分类</h5><p>1）超时降级：主要配置好超时时间和超时重试次数和机制，并使用异步机制探测回复情况</p><p>2）失败次数降级：主要是一些不稳定的api，当失败调用次数达到一定阀值自动降级，同样要使用异步机制探测回复情况</p><p>3）故障降级：比如要调用的远程服务挂掉了（网络故障、DNS故障、http服务返回错误的状态码、rpc服务抛出异常），则可以直接降级。降级后的处理方案有：默认值（比如库存服务挂了，返回默认现货）、兜底数据（比如广告挂了，返回提前准备好的一些静态页面）、缓存（之前暂存的一些缓存数据）</p><p>4）限流降级：秒杀或者抢购一些限购商品时，此时可能会因为访问量太大而导致系统崩溃，此时会使用限流来进行限制访问量，当达到限流阀值，后续请求会被降级；降级后的处理方案可以是：排队页面（将用户导流到排队页面等一会重试）、无货（直接告知用户没货了）、错误页（如活动太火爆了，稍后重试）。</p><h5 id="入门案例-1"><a href="#入门案例-1" class="headerlink" title="入门案例"></a>入门案例</h5><p>在springcloud-api模块下的service包中新建降级配置类DeptClientServiceFallBackFactory.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;** * @Auther: csp1999 * @Date: 2020&#x2F;05&#x2F;20&#x2F;9:18 * @Description: Hystrix服务降级 ~ *&#x2F;@Componentpublic class DeptClientServiceFallBackFactory implements FallbackFactory &#123;    @Override    public DeptClientService create(Throwable cause) &#123;        return new DeptClientService() &#123;            @Override            public Dept queryById(Long id) &#123;                return new Dept()                        .setDeptno(id)                        .setDname(&quot;id&#x3D;&gt;&quot; + id + &quot;没有对应的信息，客户端提供了降级的信息，这个服务现在已经被关闭&quot;)                        .setDb_source(&quot;没有数据~&quot;);            &#125;            @Override            public List&lt;Dept&gt; queryAll() &#123;                return null;            &#125;            @Override            public Boolean addDept(Dept dept) &#123;                return false;            &#125;        &#125;;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在DeptClientService中指定降级配置类DeptClientServiceFallBackFactory</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Component &#x2F;&#x2F;注册到spring容器中&#x2F;&#x2F;@FeignClient:微服务客户端注解,value:指定微服务的名字,这样就可以使Feign客户端直接找到对应的微服务@FeignClient(value &#x3D; &quot;SPRINGCLOUD-PROVIDER-DEPT&quot;,fallbackFactory &#x3D; DeptClientServiceFallBackFactory.class)&#x2F;&#x2F;fallbackFactory指定降级配置类public interface DeptClientService &#123;    @GetMapping(&quot;&#x2F;dept&#x2F;get&#x2F;&#123;id&#125;&quot;)    public Dept queryById(@PathVariable(&quot;id&quot;) Long id);    @GetMapping(&quot;&#x2F;dept&#x2F;list&quot;)    public List&lt;Dept&gt; queryAll();    @GetMapping(&quot;&#x2F;dept&#x2F;add&quot;)    public Boolean addDept(Dept dept);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<strong>springcloud-consumer-dept-feign</strong>模块中开启降级：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 80# Eureka配置eureka:  client:    register-with-eureka: false # 不向 Eureka注册自己    service-url: # 从三个注册中心中随机取一个去访问      defaultZone: http:&#x2F;&#x2F;eureka7001.com:7001&#x2F;eureka&#x2F;,http:&#x2F;&#x2F;eureka7002.com:7002&#x2F;eureka&#x2F;,http:&#x2F;&#x2F;eureka7003.com:7003&#x2F;eureka&#x2F;# 开启降级feign.hystrixfeign:  hystrix:    enabled: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-6-服务熔断和降级的区别"><a href="#8-6-服务熔断和降级的区别" class="headerlink" title="8.6 服务熔断和降级的区别"></a>8.6 服务熔断和降级的区别</h4><ul><li><strong>服务熔断—&gt;服务端</strong>：某个服务超时或异常，引起熔断~，类似于保险丝(自我熔断)</li><li><strong>服务降级—&gt;客户端</strong>：从整体网站请求负载考虑，当某个服务熔断或者关闭之后，服务将不再被调用，此时在客户端，我们可以准备一个 FallBackFactory ，返回一个默认的值(缺省值)。会导致整体的服务下降，但是好歹能用，比直接挂掉强。</li><li>触发原因不太一样，服务熔断一般是某个服务（下游服务）故障引起，而服务降级一般是从整体负荷考虑；管理目标的层次不太一样，熔断其实是一个框架级的处理，每个微服务都需要（无层级之分），而降级一般需要对业务有层级之分（比如降级一般是从最外围服务开始）</li><li>实现方式不太一样，服务降级具有代码侵入性(由控制器完成/或自动降级)，熔断一般称为<strong>自我熔断</strong>。</li></ul><p><strong>熔断，降级，限流</strong>：</p><p>限流：限制并发的请求访问量，超过阈值则拒绝；</p><p>降级：服务分优先级，牺牲非核心服务（不可用），保证核心服务稳定；从整体负荷考虑；</p><p>熔断：依赖的下游服务故障触发熔断，避免引发本系统崩溃；系统自动执行和恢复</p><h4 id="8-7-Dashboard-流监控"><a href="#8-7-Dashboard-流监控" class="headerlink" title="8.7 Dashboard 流监控"></a>8.7 Dashboard 流监控</h4><p>新建springcloud-consumer-hystrix-dashboard模块</p><p><strong>添加依赖</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--Hystrix依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--dashboard依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-hystrix-dashboard<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--Ribbon--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-ribbon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--Eureka--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-eureka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--实体类+web--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.haust<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springcloud-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--热部署--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>主启动类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication&#x2F;&#x2F; 开启Dashboard@EnableHystrixDashboardpublic class DeptConsumerDashboard_9001 &#123;    public static void main(String[] args) &#123;        SpringApplication.run(DeptConsumerDashboard_9001.class,args);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给springcloud-provider-dept-hystrix-8001模块下的主启动类添加如下代码,添加监控</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication@EnableEurekaClient &#x2F;&#x2F;EnableEurekaClient 客户端的启动类，在服务启动后自动向注册中心注册服务public class DeptProvider_8001 &#123;    public static void main(String[] args) &#123;        SpringApplication.run(DeptProvider_8001.class,args);    &#125;    &#x2F;&#x2F;增加一个 Servlet    @Bean    public ServletRegistrationBean hystrixMetricsStreamServlet()&#123;        ServletRegistrationBean registrationBean &#x3D; new ServletRegistrationBean(new HystrixMetricsStreamServlet());        &#x2F;&#x2F;访问该页面就是监控页面        registrationBean.addUrlMappings(&quot;&#x2F;actuator&#x2F;hystrix.stream&quot;);               return registrationBean;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问：<a href="http://localhost:9001/hystrix">http://localhost:9001/hystrix</a></p><p><img src="/2021/07/07/spring-cloud/20201121161121357.png"></p><p>进入监控页面：</p><p><img src="/2021/07/07/spring-cloud/20201121162143650.png"></p><p>效果如下图：</p><p><img src="/2021/07/07/spring-cloud/20201121162412970.png"></p><p><img src="/2021/07/07/spring-cloud/20201121162612484.png"></p><h2 id="9-Zull路由网关"><a href="#9-Zull路由网关" class="headerlink" title="9. Zull路由网关"></a>9. Zull路由网关</h2><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><blockquote><p>什么是zuul?</p></blockquote><p> Zull包含了对请求的<strong>路由</strong>(用来跳转的)和<strong>过滤</strong>两个最主要功能：</p><p> 其中<strong>路由功能负责将外部请求转发到具体的微服务实例上，是实现外部访问统一入口的基础</strong>，而过<strong>滤器功能则负责对请求的处理过程进行干预，是实现请求校验，服务聚合等功能的基础</strong>。Zuul和Eureka进行整合，将Zuul自身注册为Eureka服务治理下的应用，同时从Eureka中获得其他服务的消息，也即以后的访问微服务都是通过Zuul跳转后获得。</p><p><img src="/2021/07/07/spring-cloud/20201122103018821.png"></p><p><strong>注意</strong>：Zuul 服务最终还是会注册进 Eureka</p><p><strong>提供</strong>：代理 + 路由 + 过滤 三大功能！</p><blockquote><p>Zuul 能干嘛？</p></blockquote><ul><li>路由</li><li>过滤</li></ul><p>官方文档：<a href="https://github.com/Netflix/zuul/">https://github.com/Netflix/zuul/</a></p><h4 id="入门案例-2"><a href="#入门案例-2" class="headerlink" title="入门案例"></a>入门案例</h4><p><strong>新建springcloud-zuul模块，并导入依赖</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--导入zuul依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-zuul<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--Hystrix依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--dashboard依赖--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-hystrix-dashboar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--Ribbon--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-ribbon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--Eureka--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-eureka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--实体类+web--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.haust<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springcloud-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--热部署--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>application.yml</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 9527spring:  application:    name: springcloud-zuul #微服务名称# eureka 注册中心配置eureka:  client:    service-url:      defaultZone: http:&#x2F;&#x2F;eureka7001.com:7001&#x2F;eureka&#x2F;,http:&#x2F;&#x2F;eureka7002.com:7002&#x2F;eureka&#x2F;,http:&#x2F;&#x2F;eureka7003.com:7003&#x2F;eureka&#x2F;  instance: #实例的id    instance-id: zuul9527.com    prefer-ip-address: true # 显示ipinfo:  app.name: haust.springcloud # 项目名称  company.name: 河南科技大学西苑校区 # 公司名称# zull 路由网关配置zuul:  # 路由相关配置  # 原来访问路由 eg:http:&#x2F;&#x2F;www.cspStudy.com:9527&#x2F;springcloud-provider-dept&#x2F;dept&#x2F;get&#x2F;1  # zull路由配置后访问路由 eg:http:&#x2F;&#x2F;www.cspstudy.com:9527&#x2F;haust&#x2F;mydept&#x2F;dept&#x2F;get&#x2F;1  routes:    mydept.serviceId: springcloud-provider-dept # eureka注册中心的服务提供方路由名称    mydept.path: &#x2F;mydept&#x2F;** # 将eureka注册中心的服务提供方路由名称 改为自定义路由名称  # 不能再使用这个路径访问了，*： 忽略,隐藏全部的服务名称~  ignored-services: &quot;*&quot;  # 设置公共的前缀  prefix: &#x2F;haust<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>主启动类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;** * @Auther: csp1999 * @Date: 2020&#x2F;05&#x2F;20&#x2F;20:53 * @Description: Zull路由网关主启动类 *&#x2F;@SpringBootApplication@EnableZuulProxy &#x2F;&#x2F; 开启Zuulpublic class ZuulApplication_9527 &#123;    public static void main(String[] args) &#123;        SpringApplication.run(ZuulApplication_9527.class,args);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><p><img src="/2021/07/07/spring-cloud/20201122104605641.png"></p><p>可以看出Zull路由网关被注册到Eureka注册中心中了！</p><p><img src="/2021/07/07/spring-cloud/1621595354072.png"></p><blockquote><p>不是很安全，暴露了访问服务的名字</p><p>把微服务的名字springcloud-provider-dept用/mydept代替</p></blockquote><p>加入注解</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">zuul:  # 路由相关配置  # 原来访问路由 eg:http:&#x2F;&#x2F;www.cspStudy.com:9527&#x2F;springcloud-provider-dept&#x2F;dept&#x2F;get&#x2F;1  # zull路由配置后访问路由 eg:http:&#x2F;&#x2F;www.cspstudy.com:9527&#x2F;haust&#x2F;mydept&#x2F;dept&#x2F;get&#x2F;1  routes:  #自己定义的键值对    mydept.serviceId: springcloud-provider-dept # eureka注册中心的服务提供方路由名称    mydept.path: &#x2F;mydept&#x2F;** # 将eureka注册中心的服务提供方路由名称 改为自定义路由名称     #  把微服务的名字springcloud-provider-dept用&#x2F;mydept代替<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这样原名称还是可以访问到，因此关闭原名称的访问权</p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">zuul:  # 路由相关配置  # 原来访问路由 eg:http:&#x2F;&#x2F;www.cspStudy.com:9527&#x2F;springcloud-provider-dept&#x2F;dept&#x2F;get&#x2F;1  # zull路由配置后访问路由 eg:http:&#x2F;&#x2F;www.cspstudy.com:9527&#x2F;haust&#x2F;mydept&#x2F;dept&#x2F;get&#x2F;1  routes:    mydept.serviceId: springcloud-provider-dept # eureka注册中心的服务提供方路由名称    mydept.path: &#x2F;mydept&#x2F;** # 将eureka注册中心的服务提供方路由名称 改为自定义路由名称  # ignored-services:springcloud-provider-dept不能再使用这个路径访问了，  #  *： 忽略,隐藏全部的服务名称~  ignored-services: &quot;*&quot;  # 设置公共的前缀(必须要加的前缀)  prefix: &#x2F;chao<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/spring-cloud/20201122104936500.png"></p><p>上图是没有经过Zull路由网关配置时，服务接口访问的路由，可以看出直接用微服务(服务提供方)名称去访问，这样不安全，不能将微服务名称暴露！</p><p>所以经过Zull路由网关配置后，访问的路由为：</p><p><img src="/2021/07/07/spring-cloud/20201122111703260.png"></p><p>我们看到，微服务名称被替换并隐藏，换成了我们自定义的微服务名称mydept，同时加上了前缀haust，这样就做到了对路由fan访问的加密处理！</p><p>详情参考springcloud中文社区zuul组件 :<a href="https://www.springcloud.cc/spring-cloud-greenwich.html#_router_and_filter_zuul">https://www.springcloud.cc/spring-cloud-greenwich.html#_router_and_filter_zuul</a></p><h2 id="10-Spring-Cloud-Config-分布式配置"><a href="#10-Spring-Cloud-Config-分布式配置" class="headerlink" title="10. Spring Cloud Config 分布式配置"></a>10. Spring Cloud Config 分布式配置</h2><p><strong>Dalston.RELEASE</strong></p><p><strong>Spring Cloud Config为分布式系统中的外部配置提供服务器和客户端支持</strong>。使用Config Server，您可以在所有环境中管理应用程序的外部属性。客户端和服务器上的概念映射与Spring <code>Environment</code>和<code>PropertySource</code>抽象相同，因此它们与Spring应用程序非常契合，但可以与任何以任何语言运行的应用程序一起使用。随着应用程序通过从开发人员到测试和生产的部署流程，您可以管理这些环境之间的配置，并确定应用程序具有迁移时需要运行的一切。服务器存储后端的默认实现使用git，因此它轻松支持标签版本的配置环境，以及可以访问用于管理内容的各种工具。很容易添加替代实现，并使用Spring配置将其插入。</p><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p><strong>分布式系统面临的–配置文件问题</strong></p><p>微服务意味着要将单体应用中的业务拆分成一个个子服务，每个服务的粒度相对较小，因此系统中会出现大量的服务，由于每个服务都需要必要的配置信息才能运行，所以一套集中式的，动态的配置管理设施是必不可少的。spring cloud提供了configServer来解决这个问题，我们每一个微服务自己带着一个application.yml，那上百个的配置文件修改起来，令人头疼！</p><p><strong>什么是SpringCloud config分布式配置中心？</strong></p><p><img src="/2021/07/07/spring-cloud/202005211322530.png"></p><p> spring cloud config 为微服务架构中的微服务提供集中化的外部支持，配置服务器为各个不同微服务应用的所有环节提供了一个<strong>中心化的外部配置</strong>。</p><p> spring cloud config 分为<strong>服务端</strong>和<strong>客户端</strong>两部分。</p><p> 服务端也称为 <strong>分布式配置中心</strong>，它是一个独立的微服务应用，用来连接配置服务器并为客户端提供获取配置信息，加密，解密信息等访问接口。</p><p> 客户端则是<strong>通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息</strong>。配置服务器默认采用git来存储配置信息，这样就有助于对环境配置进行版本管理。并且可用通过git客户端工具来方便的管理和访问配置内容。</p><p><strong>spring cloud config 分布式配置中心能干嘛？</strong></p><ul><li>集中式管理配置文件</li><li>不同环境，不同配置，动态化的配置更新，分环境部署，比如 /dev /test /prod /beta /release</li><li>运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息</li><li>当配置发生变动时，服务不需要重启，即可感知到配置的变化，并应用新的配置</li><li>将配置信息以REST接口的形式暴露</li></ul><p><strong>spring cloud config 分布式配置中心与GitHub整合</strong></p><p> 由于spring cloud config 默认使用git来存储配置文件 (也有其他方式，比如自持SVN 和本地文件)，但是最推荐的还是git ，而且使用的是 http / https 访问的形式。</p><h4 id="入门案例-3"><a href="#入门案例-3" class="headerlink" title="入门案例"></a>入门案例</h4><blockquote><p>在gitee新建仓库，克隆到本地，在其中新建一个application.yml，写上配置，一会要用</p></blockquote><h5 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a><strong>服务端</strong></h5><p>新建springcloud-config-server-3344模块导入pom.xml依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--web--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--config--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-config-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--eureka--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-eureka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>resource下创建application.yml配置文件，Spring Cloud Config服务器从git存储库（必须提供）为远程客户端提供配置：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">server:  port: 3344spring:  application:    name: springcloud-config-server  # 连接码云远程仓库  cloud:    config:      server:        git:          # 注意是https的而不是ssh          uri: https:&#x2F;&#x2F;gitee.com&#x2F;ren-yichao&#x2F;springcloud_config.git             # 通过 config-server可以连接到git，访问其中的资源以及配置~# 不加这个配置会报Cannot execute request on any known server 这个错：连接Eureka服务端地址不对# 或者直接注释掉eureka依赖 这里暂时用不到eurekaeureka:  client:    register-with-eureka: false    fetch-registry: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@EnableConfigServer &#x2F;&#x2F; 开启spring cloud config server服务@SpringBootApplicationpublic class Config_server_3344 &#123;    public static void main(String[] args) &#123;        SpringApplication.run(Config_server_3344.class,args);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将本地git仓库springcloud-config文件夹下新建的application.yml提交到码云仓库：</p><p><img src="/2021/07/07/spring-cloud/20200521132326502.png"></p><p>定位资源的默认策略是克隆一个git仓库（在<code>spring.cloud.config.server.git.uri</code>），并使用它来初始化一个迷你<code>SpringApplication</code>。小应用程序的<code>Environment</code>用于枚举属性源并通过JSON端点发布。</p><p>HTTP服务具有以下格式的资源：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#x2F;&#123;application&#125;&#x2F;&#123;profile&#125;[&#x2F;&#123;label&#125;]&#x2F;&#123;application&#125;-&#123;profile&#125;.yml&#x2F;&#123;label&#125;&#x2F;&#123;application&#125;-&#123;profile&#125;.yml&#x2F;&#123;application&#125;-&#123;profile&#125;.properties&#x2F;&#123;label&#125;&#x2F;&#123;application&#125;-&#123;profile&#125;.properties<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中“应用程序”作为<code>SpringApplication</code>中的<code>spring.config.name</code>注入（即常规的Spring Boot应用程序中通常是“应用程序”），“配置文件”是活动配置文件（或逗号分隔列表的属性），“label”是可选的git标签（默认为“master”）。</p><blockquote><p>报错org.springframework.boot.builder.SpringApplicationBuilder.<init>([Ljava/lang/Object;)V</init></p></blockquote><p>==springboot与springcloud版本不对应==</p><p>测试访问<a href="http://localhost:3344/application-dev.yml">http://localhost:3344/application-dev.yml</a></p><p><img src="/2021/07/07/spring-cloud/20200521132350566.png"></p><p>测试访问 <a href="http://localhost:3344/application/test/master">http://localhost:3344/application/test/master</a></p><p><img src="/2021/07/07/spring-cloud/20200521132406474.png"></p><p>测试访问 <a href="http://localhost:3344/master/application-dev.yml">http://localhost:3344/master/application-dev.yml</a></p><p><img src="/2021/07/07/spring-cloud/20200521132423447.png"></p><p>如果测试访问不存在的配置则不显示 如：<a href="http://localhost:3344/master/application-aaa.yml">http://localhost:3344/master/application-aaa.yml</a></p><p><img src="/2021/07/07/spring-cloud/20200521132439404.png"></p><h5 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a><strong>客户端</strong></h5><p>将本地git仓库springcloud-config文件夹下新建的config-client.yml提交到码云仓库：</p><p><img src="/2021/07/07/spring-cloud/20200521132503261.png"></p><p>新建一个springcloud-config-client-3355模块，并导入依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--config--></span><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-start --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>resources下创建application.yml和bootstrap.yml配置文件</p><p><strong>bootstrap.yml</strong> 是系统级别的配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"># 系统级别的配置spring:  cloud:    config:      name: config-client # 需要从git上读取的资源名称，不要后缀      profile: dev      label: master      uri: http:&#x2F;&#x2F;localhost:3344<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>application.yml</strong> 是用户级别的配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"># 用户级别的配置spring:  application:    name: springcloud-config-client<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建controller包下的<strong>ConfigClientController.java</strong> 用于测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@RestControllerpublic class ConfigClientController &#123;    @Value(&quot;$&#123;spring.application.name&#125;&quot;)    private String applicationName; &#x2F;&#x2F;获取微服务名称    @Value(&quot;$&#123;eureka.client.service-url.defaultZone&#125;&quot;)    private String eurekaServer; &#x2F;&#x2F;获取Eureka服务    @Value(&quot;$&#123;server.port&#125;&quot;)    private String port; &#x2F;&#x2F;获取服务端的端口号    @RequestMapping(&quot;&#x2F;config&quot;)    public String getConfig()&#123;        return &quot;applicationName:&quot;+applicationName +         &quot;eurekaServer:&quot;+eurekaServer +         &quot;port:&quot;+port;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplicationpublic class ConfigClient &#123;    public static void main(String[] args) &#123;        SpringApplication.run(ConfigClient.class,args);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：</p><p>启动服务端Config_server_3344 再启动客户端ConfigClient</p><p>访问：<a href="http://localhost:8201/config/">http://localhost:8201/config/</a></p><p><img src="/2021/07/07/spring-cloud/20200521132534867.png"></p><p><strong>小案例</strong></p><p>本地新建config-dept.yml和config-eureka.yml并提交到码云仓库</p><p><img src="/2021/07/07/spring-cloud/20200521132550150.png"></p><p><img src="/2021/07/07/spring-cloud/20200521132601463.png"></p><p>这里配置文件内容不再列举直接到代码中看把。</p><p>新建springcloud-config-eureka-7001模块，并将原来的springcloud-eureka-7001模块下的内容拷贝的该模块。</p><p>1.清空该模块的application.yml配置，并新建bootstrap.yml连接远程配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">spring:  cloud:    config:      name: config-eureka # 仓库中的配置文件名称      label: master      profile: dev      uri: http:&#x2F;&#x2F;localhost:3344<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.在pom.xml中添加spring cloud config依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--config--></span><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-config --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.主启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication@EnableEurekaServer &#x2F;&#x2F;EnableEurekaServer 服务端的启动类，可以接受别人注册进来~public class ConfigEurekaServer_7001 &#123;    public static void main(String[] args) &#123;        SpringApplication.run(ConfigEurekaServer_7001.class,args);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.测试</p><p>第一步：启动 Config_Server_3344，并访问 <a href="http://localhost:3344/master/config-eureka-dev.yml">http://localhost:3344/master/config-eureka-dev.yml</a> 测试</p><p><img src="/2021/07/07/spring-cloud/2020052113262082.png"><br>第二部：启动ConfigEurekaServer_7001，访问 <a href="http://localhost:7001/">http://localhost:7001/</a> 测试</p><p><img src="/2021/07/07/spring-cloud/20200521132633925.png"><br>显示上图则成功</p><p>新建springcloud-config-dept-8001模块并拷贝springcloud-provider-dept-8001的内容</p><p>同理导入spring cloud config依赖、清空application.yml 、新建bootstrap.yml配置文件并配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">spring:  cloud:    config:      name: config-dept      label: master      profile: dev      uri: http:&#x2F;&#x2F;localhost:3344<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主启动类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication@EnableEurekaClient &#x2F;&#x2F;在服务启动后自动注册到Eureka中！@EnableDiscoveryClient &#x2F;&#x2F;服务发现~@EnableCircuitBreaker &#x2F;&#x2F;public class ConfigDeptProvider_8001 &#123;    public static void main(String[] args) &#123;        SpringApplication.run(ConfigDeptProvider_8001.class,args);    &#125;    &#x2F;&#x2F;增加一个 Servlet    @Bean    public ServletRegistrationBean hystrixMetricsStreamServlet()&#123;        ServletRegistrationBean registrationBean &#x3D; new ServletRegistrationBean(new HystrixMetricsStreamServlet());        registrationBean.addUrlMappings(&quot;&#x2F;actuator&#x2F;hystrix.stream&quot;);        return registrationBean;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试 (略)</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery</title>
      <link href="/2021/07/07/jquery/"/>
      <url>/2021/07/07/jquery/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="1-jQuery"><a href="#1-jQuery" class="headerlink" title="1. jQuery"></a>1. jQuery</h1><h2 id="1-1-jQuery简介"><a href="#1-1-jQuery简介" class="headerlink" title="1.1. jQuery简介"></a>1.1. jQuery简介</h2><h3 id="1-1-1-JavaScript库的概念"><a href="#1-1-1-JavaScript库的概念" class="headerlink" title="1.1.1. JavaScript库的概念"></a>1.1.1. JavaScript库的概念</h3><p>JavaScript开发的过程中，处理浏览器的兼容很复杂而且很耗时，于是一些封装了这些操作的库应运而生。这些库还会把一些常用的代码进行封装。</p><p>把一些常用到的方法写到一个单独的js文件，使用的时候直接去引用这js文件就可以了。（animate.js、common.js）</p><p>常见的JavaScript 库 - jQuery、Prototype、MooTools。其中jQuery是最常用的一个</p><p>jQuery其实就是一个js文件，里面封装了一大堆的方法方便我们的开发，其实就是一个加强版的common.js，因此我们学习jQuery，其实就是学习jQuery这个js文件中封装的一大堆方法。</p><h3 id="1-1-2-jQuery的优点好处"><a href="#1-1-2-jQuery的优点好处" class="headerlink" title="1.1.2. jQuery的优点好处"></a>1.1.2. jQuery的优点好处</h3><pre class="line-numbers language-none"><code class="language-none">jQuery设计的宗旨是&#39;Write Less，Do More&#39;，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的操作，优化HTML文档操作、事件处理、动画设计和Ajax交互。jQuery的核心特性可以总结为：具有独特的链式语法和短小清晰的多功能接口；具有高效灵活的css选择器，并且可对CSS选择器进行扩展；拥有便捷的插件扩展机制和丰富的插件。jQuery兼容各种主流浏览器。极大地简化了 JavaScript 编程。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-1-3-jQuery的版本"><a href="#1-1-3-jQuery的版本" class="headerlink" title="1.1.3. jQuery的版本"></a>1.1.3. jQuery的版本</h3><pre class="line-numbers language-none"><code class="language-none">jQuery版本有很多，分为1.x 2.x 3.x1.x版本：能够兼容IE678浏览器2.x版本：不兼容IE678浏览器1.x和2.x版本jquery都不再更新版本了，现在只更新3.x版本。3.x版本：不兼容IE678，更加的精简（在国内不流行，因为国内使用jQuery的主要目的就是兼容IE678）国内多数网站还在使用1.x的版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[jQuery官网](http:// jquery.com/)</p><h3 id="1-1-4-体验jQuery"><a href="#1-1-4-体验jQuery" class="headerlink" title="1.1.4. 体验jQuery"></a>1.1.4. 体验jQuery</h3><p>案例：让div显示与设置内容</p><p>使用JavaScript开发过程中，有许多不便之处</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">-</span>查找元素的方法太少，麻烦。<span class="token operator">-</span>遍历伪数组很麻烦，通常要嵌套一大堆的<span class="token keyword">for</span>循环。<span class="token operator">-</span>有兼容性问题。<span class="token operator">-</span>想要实现简单的动画效果，也很麻烦<span class="token operator">-</span>代码冗余。<span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btn1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 隐式迭代：偷偷的遍历，在jQuery中，不需要手动写for循环了，会自动进行遍历。</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btn2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">'我是内容'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优点总结：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">-</span>查找元素的方法多种多样，非常灵活<span class="token operator">-</span>拥有隐式迭代特性，因此不再需要手写<span class="token keyword">for</span>循环了。<span class="token operator">-</span>完全没有兼容性问题。<span class="token operator">-</span>实现动画非常简单，而且功能更加的强大。<span class="token operator">-</span>代码简单、粗暴。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-1-5-jQuery中顶级对象"><a href="#1-1-5-jQuery中顶级对象" class="headerlink" title="1.1.5. jQuery中顶级对象"></a>1.1.5. jQuery中顶级对象</h3><p>jQuery中的顶级对象是$或jQuery</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">获取jQuery对象入口函数高级功能<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意：jQuery中的$和JQuery关键字本身为同一对象；</p><h3 id="1-1-6-jQuery中页面加载事件"><a href="#1-1-6-jQuery中页面加载事件" class="headerlink" title="1.1.6. jQuery中页面加载事件"></a>1.1.6. jQuery中页面加载事件</h3><p>使用jQuery的三个步骤：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">引入jQuery文件入口函数功能实现<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>关于jQuery的入口函数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 第一种写法</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 第二种写法</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>jQuery入口函数与window.onload的对比</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">JavaScript的入口函数要等到页面中所有资源（包括图片、文件）加载完成才开始执行。jQuery的入口函数只会等待文档树加载完成就开始执行，并不会等待图片、文件的加载。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="1-2-jQuery对象和DOM对象"><a href="#1-2-jQuery对象和DOM对象" class="headerlink" title="1.2. jQuery对象和DOM对象"></a>1.2. jQuery对象和DOM对象</h2><h3 id="1-2-1-jQuery对象和DOM对象的区别"><a href="#1-2-1-jQuery对象和DOM对象的区别" class="headerlink" title="1.2.1. jQuery对象和DOM对象的区别"></a>1.2.1. jQuery对象和DOM对象的区别</h3><h4 id="1-2-1-1-DOM对象"><a href="#1-2-1-1-DOM对象" class="headerlink" title="1.2.1.1. DOM对象"></a>1.2.1.1. DOM对象</h4><pre class="line-numbers language-none"><code class="language-none">用原生JavaScript获取的DOM对象    通过document.getElementById()  反馈的是元素(DOM对象)通过document.getElementsByTagName()获取到的是什么？    伪数组(集合)，集合中的每一个对象是DOM对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-1-2-jQuery对象"><a href="#1-2-1-2-jQuery对象" class="headerlink" title="1.2.1.2. jQuery对象"></a>1.2.1.2. jQuery对象</h4><pre class="line-numbers language-none"><code class="language-none">jQuery对象用$()的方式获取的对象jQuery对象又可以叫做包装集(包装的DOM对象的集合)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="1-2-1-3-区别"><a href="#1-2-1-3-区别" class="headerlink" title="1.2.1.3. 区别"></a>1.2.1.3. 区别</h4><p>jQuery对象不能使用DOM对象的成员，DOM对象不能使用jQuery对象的成员</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// DOM对象</span><span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 错误</span>box<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 正确</span>box<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span><span class="token comment">// jQuery对象，jQuery对象加前缀$，用以区分DOM对象</span><span class="token keyword">var</span> $box <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 错误</span>$box<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span><span class="token comment">// 正确</span>$box<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-2-jQuery对象和DOM对象的相互转换"><a href="#1-2-2-jQuery对象和DOM对象的相互转换" class="headerlink" title="1.2.2. jQuery对象和DOM对象的相互转换"></a>1.2.2. jQuery对象和DOM对象的相互转换</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">jQuery对象转换成<span class="token constant">DOM</span>对象：       jQuery对象<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>索引值<span class="token punctuation">)</span><span class="token punctuation">;</span>     jQuery对象<span class="token punctuation">[</span>索引值<span class="token punctuation">]</span>         <span class="token function">jQuery对象是包装集</span><span class="token punctuation">(</span>集合<span class="token punctuation">)</span>，从集合中取数据可以使用索引的方式<span class="token constant">DOM</span>对象转换成jQuery对象：       <span class="token function">$</span><span class="token punctuation">(</span><span class="token constant">DOM</span>对象<span class="token punctuation">)</span> 只有这一种方法<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-3-案例"><a href="#1-2-3-案例" class="headerlink" title="1.2.3. 案例"></a>1.2.3. 案例</h3><ul><li>开关灯 [01-开关灯.html]</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 仅仅演示对象之间的转换，代码不推荐这么写</span><span class="token function">jQuery</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 获取元素；</span>  <span class="token keyword">var</span> inpArr <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取第一个按钮，然后绑定事件；</span>  <span class="token function">$</span><span class="token punctuation">(</span>inpArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 设置body的背景色</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'#fff'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取第二个按钮，然后绑定事件；</span>  <span class="token function">$</span><span class="token punctuation">(</span>inpArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 设置body的背景色</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">'#000'</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3-选择器"><a href="#1-3-选择器" class="headerlink" title="1.3. 选择器"></a>1.3. 选择器</h2><p>jQuery选择器是jQuery为我们提供的一组方法，让我们更加方便的获取到页面中的元素。注意：jQuery选择器返回的是jQuery对象。</p><p>jQuery选择器有很多，基本兼容了CSS1到CSS3所有的选择器，并且jQuery还添加了很多更加复杂的选择器。（查看jQuery文档）</p><p>jQuery选择器虽然很多，但是选择器之间可以相互替代，就是说获取一个元素，你会有很多种方法获取到。所以我们平时真正能用到的只是少数的最常用的选择器。</p><h3 id="1-3-1-jQuery基本选择器"><a href="#1-3-1-jQuery基本选择器" class="headerlink" title="1.3.1. jQuery基本选择器"></a>1.3.1. jQuery基本选择器</h3><table><thead><tr><th>名称</th><th>用法</th><th align="left">描述</th></tr></thead><tbody><tr><td>ID选择器</td><td>$(‘#id’);</td><td align="left">获取指定ID的元素</td></tr><tr><td>类选择器</td><td>$(‘.class’);</td><td align="left">获取同一类class的元素</td></tr><tr><td>标签选择器</td><td>$(‘div’);</td><td align="left">获取同一类标签的所有元素</td></tr><tr><td>并集选择器</td><td>$(‘div,p,li’);</td><td align="left">使用逗号分隔，只要符合条件之一就可。</td></tr><tr><td>交集选择器</td><td>$(‘div.redClass’);</td><td align="left">获取class为redClass的div元素</td></tr></tbody></table><ul><li>总结：跟css的选择器用法一模一样。</li></ul><h3 id="1-3-2-jQuery层级选择器"><a href="#1-3-2-jQuery层级选择器" class="headerlink" title="1.3.2. jQuery层级选择器"></a>1.3.2. jQuery层级选择器</h3><table><thead><tr><th>名称</th><th>用法</th><th align="left">描述</th></tr></thead><tbody><tr><td>子代选择器</td><td>$(‘ul &gt; li’);</td><td align="left">使用-号，获取儿子层级的元素，注意，并不会获取孙子层级的元素</td></tr><tr><td>后代选择器</td><td>$(‘ul li’);</td><td align="left">使用空格，代表后代选择器，获取ul下的所有li元素，包括孙子等</td></tr></tbody></table><ul><li>跟CSS的选择器一模一样。</li></ul><h3 id="1-3-3-jQuery过滤选择器"><a href="#1-3-3-jQuery过滤选择器" class="headerlink" title="1.3.3. jQuery过滤选择器"></a>1.3.3. jQuery过滤选择器</h3><ul><li>这类选择器都带冒号:</li></ul><table><thead><tr><th>名称</th><th>用法</th><th align="left">描述</th></tr></thead><tbody><tr><td>:eq（index）</td><td>$(‘li:eq(2)’).css(‘color’, ‘red’);</td><td align="left">获取到的li元素中，选择索引号为2的元素，索引号index从0开始。</td></tr><tr><td>:odd</td><td>$(‘li:odd’).css(‘color’, ‘red’);</td><td align="left">获取到的li元素中，选择索引号为奇数的元素</td></tr><tr><td>:even</td><td>$(‘li:even’).css(‘color’, ‘red’);</td><td align="left">获取到的li元素中，选择索引号为偶数的元素</td></tr></tbody></table><h3 id="1-3-4-jQuery筛选选择器-方法"><a href="#1-3-4-jQuery筛选选择器-方法" class="headerlink" title="1.3.4. jQuery筛选选择器(方法)"></a>1.3.4. jQuery筛选选择器(方法)</h3><ul><li>筛选选择器的功能与过滤选择器有点类似，但是用法不一样，筛选选择器主要是方法。</li></ul><table><thead><tr><th>名称</th><th>用法</th><th align="left">描述</th></tr></thead><tbody><tr><td>children(selector)</td><td>$(‘ul’).children(‘li’)</td><td align="left">相当于$(‘ul-li’)，子类选择器</td></tr><tr><td>find(selector)</td><td>$(‘ul’).find(‘li’);</td><td align="left">相当于$(‘ul li’),后代选择器</td></tr><tr><td>siblings(selector)</td><td>$(‘#first’).siblings(‘li’);</td><td align="left">查找兄弟节点，不包括自己本身。</td></tr><tr><td>parent()</td><td>$(‘#first’).parent();</td><td align="left">查找父亲</td></tr><tr><td>eq(index)</td><td>$(‘li’).eq(2);</td><td align="left">相当于$(‘li:eq(2)’),index从0开始</td></tr><tr><td>next()</td><td>$(‘li’).next()</td><td align="left">找下一个兄弟</td></tr><tr><td>prev()</td><td>$(‘li’).prev()</td><td align="left">找上一次兄弟</td></tr></tbody></table><h3 id="1-3-5-案例"><a href="#1-3-5-案例" class="headerlink" title="1.3.5. 案例"></a>1.3.5. 案例</h3><ul><li>鼠标放上突出展示 [02-突出展示.html]</li><li>鼠标进入高亮显示 [03-鼠标进入高亮显示.html]</li><li>下拉菜单 [04-下拉菜单.html]</li><li>手风琴 [05-手风琴.html]</li><li>淘宝服饰精品 [06-淘宝服饰精品.html]</li></ul><h2 id="1-4-jQuery操作样式"><a href="#1-4-jQuery操作样式" class="headerlink" title="1.4. jQuery操作样式"></a>1.4. jQuery操作样式</h2><h3 id="1-4-1-CSS操作"><a href="#1-4-1-CSS操作" class="headerlink" title="1.4.1. CSS操作"></a>1.4.1. CSS操作</h3><ul><li>功能：设置或者修改样式，操作的是style属性。</li><li>操作单个样式</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// name：需要设置的样式名称</span><span class="token comment">// value：对应的样式值</span>$obj<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用案例</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#one'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background'</span><span class="token punctuation">,</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将背景色修改为灰色</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>设置多个样式</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 参数是一个对象，对象中包含了需要设置的样式名和样式值</span>$obj<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用案例</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#one'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token string-property property">'background'</span><span class="token operator">:</span><span class="token string">'gray'</span><span class="token punctuation">,</span>    <span class="token string-property property">'width'</span><span class="token operator">:</span><span class="token string">'400px'</span><span class="token punctuation">,</span>    <span class="token string-property property">'height'</span><span class="token operator">:</span><span class="token string">'200px'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>获取样式</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// name:需要获取的样式名称</span>$obj<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 案例</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-color'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：获取样式操作只会返回第一个元素对应的样式值。</p><p>隐式迭代：</p><ol><li>设置操作的时候，如果是多个元素，那么给所有的元素设置相同的值</li><li>获取操作的时候，如果是多个元素，那么只会返回第一个元素的值。</li></ol><h3 id="1-4-2-class操作"><a href="#1-4-2-class操作" class="headerlink" title="1.4.2. class操作"></a>1.4.2. class操作</h3><ul><li>添加样式类</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// name：需要添加的样式类名，注意参数不要带点.</span>$obj<span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 例子,给所有的div添加one的样式。</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'one'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>移除样式类</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// name:需要移除的样式类名</span>$obj<span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 例子，移除div中one的样式类名</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'one'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>判断是否有某个样式类</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// name:用于判断的样式类名，返回值为true false</span>$obj<span class="token punctuation">.</span><span class="token function">hasClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token comment">// 例子，判断第一个div是否有one的样式类</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasClass</span><span class="token punctuation">(</span><span class="token string">'one'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>切换样式类</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// name:需要切换的样式类名，如果有，移除该样式，如果没有，添加该样式。</span>$obj<span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 例子</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">'one'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-3-案例"><a href="#1-4-3-案例" class="headerlink" title="1.4.3. 案例"></a>1.4.3. 案例</h3><ul><li>tab栏切换案例 [07-tab栏切换.html]</li></ul><h2 id="1-5-jQuery动画"><a href="#1-5-jQuery动画" class="headerlink" title="1.5. jQuery动画"></a>1.5. jQuery动画</h2><ul><li>jQuery提供了三组基本动画，这些动画都是标准的、有规律的效果，jQuery还提供了自定义动画的功能。</li><li>演示动画效果 [08-演示jQuery动画（animate）.html]</li></ul><h3 id="1-5-1-三组基本动画"><a href="#1-5-1-三组基本动画" class="headerlink" title="1.5.1. 三组基本动画"></a>1.5.1. 三组基本动画</h3><ul><li>显示(show)与隐藏(hide)是一组动画：</li><li>滑入(slideDown)与滑出(slideUp)与切换(slideToggle)，效果与卷帘门类似</li><li>淡入(fadeIn)与淡出(fadeOut)与切换(fadeToggle)</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$obj<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">[</span>speed<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>callback<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// speed(可选)：动画的执行时间</span>     <span class="token comment">// 1.如果不传，就没有动画效果。如果是slide和fade系列，会默认为normal</span>     <span class="token comment">// 2.毫秒值(比如1000),动画在1000毫秒执行完成(推荐)</span>     <span class="token comment">// 3.固定字符串，slow(200)、normal(400)、fast(600)，如果传其他字符串，则默认为normal。</span><span class="token comment">// callback(可选):执行完动画后执行的回调函数</span><span class="token function">slideDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">slideToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>同理<span class="token function">fadeIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">fadeOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fadeToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>同理<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5-2-自定义动画"><a href="#1-5-2-自定义动画" class="headerlink" title="1.5.2. 自定义动画"></a>1.5.2. 自定义动画</h3><ul><li>animate: 自定义动画</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>params<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">[</span>speed<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>easing<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>callback<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &#123;params&#125;：要执行动画的CSS属性，带数字（必选）</span><span class="token comment">// speed：执行动画时长（可选）</span><span class="token comment">// easing:执行效果，默认为swing（缓动）  可以是linear（匀速）</span><span class="token comment">// callback：动画执行完后立即执行的回调函数（可选）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5-3-动画队列与停止动画"><a href="#1-5-3-动画队列与停止动画" class="headerlink" title="1.5.3. 动画队列与停止动画"></a>1.5.3. 动画队列与停止动画</h3><ul><li>在同一个元素上执行多个动画，那么对于这个动画来说，后面的动画会被放到动画队列中，等前面的动画执行完成了才会执行（联想：火车进站）。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// stop方法：停止动画效果</span><span class="token function">stop</span><span class="token punctuation">(</span>clearQueue<span class="token punctuation">,</span> jumpToEnd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 第一个参数：是否清除队列</span><span class="token comment">// 第二个参数：是否跳转到最终效果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5-4-案例"><a href="#1-5-4-案例" class="headerlink" title="1.5.4. 案例"></a>1.5.4. 案例</h3><ul><li>开机动画案例 [09-开关机动画.html]</li><li>下拉菜单-动画 [10-下拉菜单-动画.html]</li></ul><h2 id="1-6-jQuery节点操作"><a href="#1-6-jQuery节点操作" class="headerlink" title="1.6. jQuery节点操作"></a>1.6. jQuery节点操作</h2><h3 id="1-6-1-创建节点"><a href="#1-6-1-创建节点" class="headerlink" title="1.6.1. 创建节点"></a>1.6.1. 创建节点</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// $(htmlStr)</span><span class="token comment">// htmlStr：html格式的字符串</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;span-这是一个span元素&lt;/span-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-6-2-添加节点"><a href="#1-6-2-添加节点" class="headerlink" title="1.6.2. 添加节点"></a>1.6.2. 添加节点</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">append  appendTo    在被选元素的结尾插入内容prepend prependTo    在被选元素的开头插入内容before                在被选元素之后插入内容after                在被选元素之前插入内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-6-3-清空节点与删除节点"><a href="#1-6-3-清空节点与删除节点" class="headerlink" title="1.6.3. 清空节点与删除节点"></a>1.6.3. 清空节点与删除节点</h3><ul><li>empty：清空指定节点的所有元素，自身保留(清理门户)</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清空div的所有内容（推荐使用，会清除子元素上绑定的内容，源码）</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用html方法来清空元素，不推荐使用，会造成内存泄漏，绑定的事件不会被清除。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>remove：相比于empty，自身也删除（自杀）</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-6-4-克隆节点"><a href="#1-6-4-克隆节点" class="headerlink" title="1.6.4. 克隆节点"></a>1.6.4. 克隆节点</h3><ul><li>作用：复制匹配的元素</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 复制$(selector)所匹配到的元素（深度复制）</span><span class="token comment">// cloneNode(true)</span><span class="token comment">// 返回值为复制的新元素，和原来的元素没有任何关系了。即修改新元素，不会影响到原来的元素。</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-6-5-案例"><a href="#1-6-5-案例" class="headerlink" title="1.6.5. 案例"></a>1.6.5. 案例</h3><ul><li>城市选择 [11-城市选择案例.html]</li><li>删除表格 [12 表格删除案例.html]</li><li>根据数据生成表格 [13-表格生成案例.html]</li><li>添加和删除表格数据 [14-动态数据添加和删除.html]</li></ul><h2 id="1-7-jQuery操作属性"><a href="#1-7-jQuery操作属性" class="headerlink" title="1.7. jQuery操作属性"></a>1.7. jQuery操作属性</h2><h3 id="1-7-1-attr操作"><a href="#1-7-1-attr操作" class="headerlink" title="1.7.1. attr操作"></a>1.7.1. attr操作</h3><ul><li>设置单个属性</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 第一个参数：需要设置的属性名</span><span class="token comment">// 第二个参数：对应的属性值</span>$obj<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 用法举例</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">,</span><span class="token string">'哎哟，不错哦'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'alt'</span><span class="token punctuation">,</span><span class="token string">'哎哟，不错哦'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>设置多个属性</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 参数是一个对象，包含了需要设置的属性名和属性值</span>$obj<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token comment">// 用法举例</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">'哎哟，不错哦'</span><span class="token punctuation">,</span>    <span class="token literal-property property">alt</span><span class="token operator">:</span><span class="token string">'哎哟，不错哦'</span><span class="token punctuation">,</span>    <span class="token literal-property property">style</span><span class="token operator">:</span><span class="token string">'opacity:.5'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>获取属性</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 传需要获取的属性名称，返回对应的属性值</span>$obj<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token comment">// 用法举例</span><span class="token keyword">var</span> oTitle <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>oTitle<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>移除属性</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 参数：需要移除的属性名，</span>$obj<span class="token punctuation">.</span><span class="token function">removeAttr</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 用法举例</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAttr</span><span class="token punctuation">(</span><span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-7-2-prop操作"><a href="#1-7-2-prop操作" class="headerlink" title="1.7.2. prop操作"></a>1.7.2. prop操作</h3><ul><li>在jQuery1.6之后，对于checked、selected、disabled这类boolean类型的属性来说，不能用attr方法，只能用prop方法。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 设置属性</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">':checked'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">'checked'</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取属性</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">':checked'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">'checked'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回true或者false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-7-3-val-text-html"><a href="#1-7-3-val-text-html" class="headerlink" title="1.7.3. val()/text/()html()"></a>1.7.3. val()/text/()html()</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$obj<span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        获取或者设置表单元素的value属性的值$obj<span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     对应innerHTML$obj<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        对应innerText<span class="token operator">/</span>textContent，处理了浏览器的兼容性<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-7-4-案例"><a href="#1-7-4-案例" class="headerlink" title="1.7.4. 案例"></a>1.7.4. 案例</h3><ul><li>表格全选反选 [15-表格全选反选.html]</li><li>打字效果 [16-打字效果.html]</li></ul><h2 id="1-8-jQuery尺寸和位置操作"><a href="#1-8-jQuery尺寸和位置操作" class="headerlink" title="1.8. jQuery尺寸和位置操作"></a>1.8. jQuery尺寸和位置操作</h2><h3 id="1-8-1-width方法与height方法"><a href="#1-8-1-width方法与height方法" class="headerlink" title="1.8.1. width方法与height方法"></a>1.8.1. width方法与height方法</h3><ul><li>设置或者获取高度，不包括内边距、边框和外边距</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 带参数表示设置高度</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 不带参数获取高度</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>获取网页的可视区宽高</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 获取可视区宽度</span><span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取可视区高度</span><span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-8-2-innerWidth-innerHeight-outerWidth-outerHeight"><a href="#1-8-2-innerWidth-innerHeight-outerWidth-outerHeight" class="headerlink" title="1.8.2. innerWidth/innerHeight/outerWidth/outerHeight"></a>1.8.2. innerWidth/innerHeight/outerWidth/outerHeight</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">innerWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">innerHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    方法返回元素的宽度<span class="token operator">/</span>高度（包括内边距）。<span class="token function">outerWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">outerHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  方法返回元素的宽度<span class="token operator">/</span>高度（包括内边距和边框）。<span class="token function">outerWidth</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">outerHeight</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>  方法返回元素的宽度<span class="token operator">/</span>高度（包括内边距、边框和外边距）。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-8-3-scrollTop与scrollLeft"><a href="#1-8-3-scrollTop与scrollLeft" class="headerlink" title="1.8.3. scrollTop与scrollLeft"></a>1.8.3. scrollTop与scrollLeft</h3><ul><li>设置或者获取垂直滚动条的位置</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 获取页面被卷曲的高度</span><span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取页面被卷曲的宽度</span><span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-8-4-offset方法与position方法"><a href="#1-8-4-offset方法与position方法" class="headerlink" title="1.8.4. offset方法与position方法"></a>1.8.4. offset方法与position方法</h3><ul><li>offset方法获取元素距离document的位置，position方法获取的是元素距离有定位的父元素(offsetParent)的位置。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 获取元素距离document的位置,返回值为对象：&#123;left:100, top:100&#125;</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取相对于其最近的有定位的父元素的位置。</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>案例：固定导航栏 [17-固定导航栏.html] 案例：电梯导航 [18-电梯导航.html]</p><h2 id="1-9-jQuery事件机制"><a href="#1-9-jQuery事件机制" class="headerlink" title="1.9. jQuery事件机制"></a>1.9. jQuery事件机制</h2><ul><li>JavaScript中已经学习过了事件，jQuery对JavaScript事件进行了封装，增加并扩展了事件处理机制。jQuery不仅提供了更加优雅的事件处理语法，而且极大的增强了事件的处理能力。</li></ul><h3 id="1-9-1-jQuery事件发展历程-了解"><a href="#1-9-1-jQuery事件发展历程-了解" class="headerlink" title="1.9.1. jQuery事件发展历程(了解)"></a>1.9.1. jQuery事件发展历程(了解)</h3><p>简单事件绑定–bind事件绑定–delegate事件绑定–on事件绑定(推荐)</p><ul><li>简单事件注册</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">click</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span>            单击事件<span class="token function">mouseenter</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span>        鼠标进入事件<span class="token function">mouseleave</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span>        鼠标离开事件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>缺点：不能同时注册多个事件</p><ul><li>bind方式注册事件</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 第一个参数：事件类型</span><span class="token comment">// 第二个参数：事件处理程序</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">'click mouseenter'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 事件响应方法</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缺点：不支持动态事件绑定</p><ul><li>delegate注册委托事件</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 第一个参数：selector，要绑定事件的元素</span><span class="token comment">// 第二个参数：事件类型</span><span class="token comment">// 第三个参数：事件处理函数</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.parentBox'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delegate</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 为 .parentBox下面的所有的p标签绑定事件</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缺点：只能注册委托事件，因此注册时间需要记得方法太多了</p><ul><li>on注册事件</li></ul><h3 id="1-9-2-on注册事件-重点"><a href="#1-9-2-on注册事件-重点" class="headerlink" title="1.9.2. on注册事件(重点)"></a>1.9.2. on注册事件(重点)</h3><ul><li>jQuery1.7之后，jQuery用on统一了所有事件的处理方法。</li><li>最现代的方式，兼容zepto(移动端类似jQuery的一个库)，强烈建议使用。</li></ul><p>on注册简单事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 表示给$(selector)绑定事件，并且由自己触发，不支持动态绑定。</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span> <span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>on注册事件委托</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 表示给$(selector)绑定代理事件，当必须是它的内部元素span才能触发这个事件，支持动态绑定</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span> <span class="token string">'click'</span><span class="token punctuation">,</span><span class="token string">'span'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>事件委托原理</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 事件委托的原理</span><span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#ul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ul<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// console.log(e.target.tagName);</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'li'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>on注册事件的语法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 第一个参数：events，绑定事件的名称可以是由空格分隔的多个事件（标准事件或者自定义事件）</span><span class="token comment">// 第二个参数：selector, 执行事件的后代元素（可选），如果没有后代元素，那么事件将有自己执行。</span><span class="token comment">// 第三个参数：data，传递给处理函数的数据，事件触发的时候通过event.data来使用（不常使用）</span><span class="token comment">// 第四个参数：handler，事件处理函数</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>events<span class="token punctuation">[</span><span class="token punctuation">,</span>selector<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span>data<span class="token punctuation">]</span><span class="token punctuation">,</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>通过源码查看 bind click delegate on 注册事件的区别</li></ul><h3 id="1-9-3-事件解绑"><a href="#1-9-3-事件解绑" class="headerlink" title="1.9.3. 事件解绑"></a>1.9.3. 事件解绑</h3><ul><li>unbind方式（不用）</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unbind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解绑所有的事件</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unbind</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解绑指定的事件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>undelegate方式（不用）</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span> selector <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">undelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解绑所有的delegate事件</span><span class="token function">$</span><span class="token punctuation">(</span> selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">undelegate</span><span class="token punctuation">(</span> <span class="token string">'click'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解绑所有的click事件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>off方式（推荐）</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 解绑匹配元素的所有事件</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 解绑匹配元素的所有click事件</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-9-4-触发事件"><a href="#1-9-4-触发事件" class="headerlink" title="1.9.4. 触发事件"></a>1.9.4. 触发事件</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 触发 click事件</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-9-5-jQuery事件对象"><a href="#1-9-5-jQuery事件对象" class="headerlink" title="1.9.5. jQuery事件对象"></a>1.9.5. jQuery事件对象</h3><p>jQuery事件对象其实就是js事件对象的一个封装，处理了兼容性。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// screenX和screenY    对应屏幕最左上角的值</span><span class="token comment">// clientX和clientY    距离页面左上角的位置（忽视滚动条）</span><span class="token comment">// pageX和pageY    距离页面最顶部的左上角的位置（会计算滚动条的距离）</span><span class="token comment">// event.keyCode    按下的键盘代码</span><span class="token comment">// event.data    存储绑定事件时传递的附加数据</span><span class="token comment">// event.stopPropagation()    阻止事件冒泡行为</span><span class="token comment">// event.preventDefault()    阻止浏览器默认行为</span><span class="token comment">// return false:既能阻止事件冒泡，又能阻止浏览器默认行为。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-9-6-案例"><a href="#1-9-6-案例" class="headerlink" title="1.9.6. 案例"></a>1.9.6. 案例</h3><ul><li>按键变色 [19-按键变色.html]</li></ul><h2 id="1-10-jQuery补充知识点"><a href="#1-10-jQuery补充知识点" class="headerlink" title="1.10. jQuery补充知识点"></a>1.10. jQuery补充知识点</h2><h3 id="1-10-1-链式编程"><a href="#1-10-1-链式编程" class="headerlink" title="1.10.1. 链式编程"></a>1.10.1. 链式编程</h3><ul><li>通常情况下，只有设置操作才能把链式编程延续下去。因为获取操作的时候，会返回获取到的相应的值，无法返回 jQuery对象。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 筛选选择器会改变jQuery对象的DOM对象，想要回复到上一次的状态，并且返回匹配元素之前的状态。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-10-2-each方法"><a href="#1-10-2-each方法" class="headerlink" title="1.10.2. each方法"></a>1.10.2. each方法</h3><ul><li>jQuery的隐式迭代会对所有的DOM对象设置相同的值，但是如果我们需要给每一个对象设置不同的值的时候，就需要自己进行迭代了。</li></ul><p>作用：遍历jQuery对象集合，为每个匹配的元素执行一个函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 参数一表示当前元素在所有匹配元素中的索引号</span><span class="token comment">// 参数二表示当前元素（DOM对象）</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span>element</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="1-10-3-多库共存"><a href="#1-10-3-多库共存" class="headerlink" title="1.10.3. 多库共存"></a>1.10.3. 多库共存</h3><ul><li>jQuery使用$作为标示符，但是如果与其他框架中的$冲突时，jQuery可以释放$符的控制权.</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> c <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">noConflict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 释放$的控制权,并且把$的能力给了c</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-10-4-案例"><a href="#1-10-4-案例" class="headerlink" title="1.10.4. 案例"></a>1.10.4. 案例</h3><ul><li>五角星评分案例 [20-五角星评分案例.html]</li></ul><h2 id="1-11-插件"><a href="#1-11-插件" class="headerlink" title="1.11. 插件"></a>1.11. 插件</h2><h3 id="1-11-1-常用插件"><a href="#1-11-1-常用插件" class="headerlink" title="1.11.1. 常用插件"></a>1.11.1. 常用插件</h3><ul><li>弹出层插件 layer<ul><li><a href="https://github.com/sentsin/layer">layer插件</a></li></ul></li><li>放大镜插件<ul><li><a href="http://www.jacklmoore.com/zoom/">jQuery.zoom</a></li></ul></li><li>轮播图插件<ul><li><a href="http://sorgalla.com/jcarousel/">http://sorgalla.com/jcarousel/</a></li><li><a href="https://github.com/OwlCarousel2/OwlCarousel2">https://github.com/OwlCarousel2/OwlCarousel2</a></li></ul></li><li>图片懒加载插件<ul><li><a href="https://github.com/tuupola/jquery_lazyload">jQuery.lazyload</a></li></ul></li><li>jQueryUI<ul><li>常用的2-3个功能演示</li></ul></li><li>查看jQuery插件的源码</li></ul><h3 id="1-11-2-自己探索插件"><a href="#1-11-2-自己探索插件" class="headerlink" title="1.11.2. 自己探索插件"></a>1.11.2. 自己探索插件</h3><ul><li><a href="https://github.com/aui/artDialog">artDialog</a></li><li><a href="https://github.com/fat/zoom.js">图片放大</a></li><li><a href="http://www.github.com/">github上搜索</a></li></ul><h2 id="1-12-jQuery插件开发"><a href="#1-12-jQuery插件开发" class="headerlink" title="1.12. jQuery插件开发"></a>1.12. jQuery插件开发</h2><ul><li>给jQuery增加方法的两种方式</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$<span class="token punctuation">.</span>method <span class="token operator">=</span> fn        静态方法$<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>method <span class="token operator">=</span> fn    实例方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>增加一个静态方法，实现两个数的和，插件</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  $<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token punctuation">)</span>$<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>tab栏插件 [21-tab栏插件.html]</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// &#123;tabMenu: '#aa'&#125;</span>  $<span class="token punctuation">.</span><span class="token function-variable function">tab</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 默认参数</span>    <span class="token keyword">var</span> defaults <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">tabMenu</span><span class="token operator">:</span> <span class="token string">'#tab'</span><span class="token punctuation">,</span>      <span class="token literal-property property">activeClass</span><span class="token operator">:</span> <span class="token string">'active'</span><span class="token punctuation">,</span>      <span class="token literal-property property">tabMain</span><span class="token operator">:</span> <span class="token string">'#tab-main'</span><span class="token punctuation">,</span>      <span class="token literal-property property">tabMainSub</span><span class="token operator">:</span> <span class="token string">'.main'</span><span class="token punctuation">,</span>      <span class="token literal-property property">selectedClass</span><span class="token operator">:</span> <span class="token string">'selected'</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 把options中的属性，把对应属性的值赋给defaults对应的属性</span>    <span class="token comment">// defaults.tabMenu = options.tabMenu || defaults.tabMenu;</span>    <span class="token comment">// for(var key in options) &#123;</span>    <span class="token comment">//   defaults[key] = options[key];</span>    <span class="token comment">// &#125;</span>    $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>defaults<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span>defaults<span class="token punctuation">.</span>tabMenu<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token string">'li'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span>defaults<span class="token punctuation">.</span>activeClass<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span>defaults<span class="token punctuation">.</span>activeClass<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//</span>      <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//</span>      <span class="token function">$</span><span class="token punctuation">(</span>defaults<span class="token punctuation">.</span>tabMain <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> defaults<span class="token punctuation">.</span>tabMainSub<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span>defaults<span class="token punctuation">.</span>selectedClass<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">siblings</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span>defaults<span class="token punctuation">.</span>selectedClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>jQuery<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>表格插件 [22-表格插件.html]</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">$</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 内部的变量，外部无法访问，防止变量名冲突</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 给$增加了一个实例方法</span>  $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function-variable function">table</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">header<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'&lt;table>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'&lt;tr>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 生成表头</span>    $<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>header<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'&lt;th>'</span> <span class="token operator">+</span> <span class="token keyword">this</span> <span class="token operator">+</span> <span class="token string">'&lt;/th>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'&lt;/tr>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 生成数据行</span>    $<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// this是当前遍历到的数组中的每一个对象</span>      <span class="token comment">// 拼数据行</span>      array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'&lt;tr>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'&lt;td>'</span> <span class="token operator">+</span> <span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&lt;/td>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 遍历对象，拼表格</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'&lt;td>'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'&lt;/td>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'&lt;/tr>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'&lt;/table>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>jQuery<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>插件开发的原理</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="/2021/07/07/javascript/"/>
      <url>/2021/07/07/javascript/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="0、前端知识体系"><a href="#0、前端知识体系" class="headerlink" title="0、前端知识体系"></a>0、前端知识体系</h1><p>想要成为真正的“互联网Java全栈工程师”还有很长的一段路要走，其中前端是绕不开的一门必修课。本阶段课程的主要目的就是带领Java后台程序员认识前端、了解前端、掌握前端，为实现成为“互联网Java全栈工程师”再向前迈进一步。</p><h2 id="0-1、前端三要素"><a href="#0-1、前端三要素" class="headerlink" title="0.1、前端三要素"></a>0.1、前端三要素</h2><ul><li>HTML（结构）：超文本标记语言（Hyper Text Markup Language），决定网页的结构和内容</li><li>CSS（表现）：层叠样式表（Cascading Style Sheets），设定网页的表现样式。</li><li>JavaScript（行为）：是一种弱类型脚本语言，其源码不需经过编译，而是由浏览器解释运行，用于控制网页的行为</li></ul><blockquote><h2 id="0-2、结构层（HTML）"><a href="#0-2、结构层（HTML）" class="headerlink" title="0.2、结构层（HTML）"></a>0.2、结构层（HTML）</h2></blockquote><p>太简单，略</p><blockquote><h2 id="0-3、表现层（CSS）"><a href="#0-3、表现层（CSS）" class="headerlink" title="0.3、表现层（CSS）"></a>0.3、表现层（CSS）</h2></blockquote><p>CSS层叠样式表是一门标记语言，并不是编程语言，因此不可以自定义变量，不可以引用等，换句话说就是不具备任何语法支持，它主要缺陷如下：</p><ul><li>语法不够强大，比如无法嵌套书写，导致模块化开发中需要书写很多重复的选择器；</li><li>没有变量和合理的样式复用机制，使得逻辑上相关的属性值必须以字面量的形式重复输出，导致难以维护；<br>这就导致了我们在工作中无端增加了许多工作量。为了解决这个问题，前端开发人员会使用一种称之为【CSS预处理器】的工具,提供CSS缺失的样式层复用机制、减少冗余代码，提高样式代码的可维护性。大大的提高了前端在样式上的开发效率。</li></ul><blockquote><p>什么是CSS预处理器</p></blockquote><p>CSS预处理器定义了一种新的语言，其基本思想是，用一种专门的编程语言，为CSS增加了一些编程的特性，将CSS作为目标生成文件，然后开发者就只需要使用这种语言进行CSS的编码工作。转化成通俗易懂的话来说就是“<strong>用一种专门的编程语言，进行Web页面样式设计，再通过编译器转化为正常的CSS文件，以供项目使用”</strong>。</p><p>常用的CSS预处理器有哪些</p><ul><li>SASS：基于Ruby ，通过服务端处理，功能强大。解析效率高。需要学习Ruby语言，上手难度高于LESS。</li><li>LESS：基于NodeJS，通过客户端处理，使用简单。功能比SASS简单，解析效率也低于SASS，但在实际开发中足够了，所以如果我们后台人员如果需要的话，建议使用LESS。</li></ul><h2 id="0-4、行为层（JavaScript）"><a href="#0-4、行为层（JavaScript）" class="headerlink" title="0.4、行为层（JavaScript）"></a>0.4、行为层（JavaScript）</h2><p>JavaScript一门弱类型脚本语言，其源代码在发往客户端运行之前不需要经过编译，而是将文本格式的字符代码发送给浏览器，由浏览器解释运行。</p><h2 id="JavaScript框架"><a href="#JavaScript框架" class="headerlink" title="JavaScript框架"></a>JavaScript框架</h2><ul><li>JQuery：大家熟知的JavaScript库，优点就是简化了DOM操作，缺点就是DOM操作太频繁，影响前端性能；在前端眼里使用它仅仅是为了兼容IE6，7，8；</li><li>Angular：Google收购的前端框架，由一群Java程序员开发，其特点是将后台的MVC模式搬到了前端并增加了<strong>模块化开发</strong>的理念，与微软合作，采用了TypeScript语法开发；对后台程序员友好，对前端程序员不太友好；最大的缺点是版本迭代不合理（如1代–&gt;2 代，除了名字，基本就是两个东西；截止发表博客时已推出了Angular6）</li><li>React：Facebook 出品，一款高性能的JS前端框架；特点是提出了新概念 【虚拟DOM】用于减少真实 DOM 操作，在内存中模拟 DOM操作，有效的提升了前端渲染效率；缺点是使用复杂，因为需要额外学习一门【JSX】语言；</li><li>Vue：一款渐进式 JavaScript 框架，所谓渐进式就是逐步实现新特性的意思，如实现模块化开发、路由、状态管理等新特性。其特点是综合了 Angular（模块化）和React(虚拟 DOM) 的优点；</li><li>Axios：前端通信框架；因为 Vue 的边界很明确，就是为了处理 DOM，所以并不具备通信能力，此时就需要额外使用一个通信框架与服务器交互；当然也可以直接选择使用jQuery 提供的AJAX 通信功能；</li></ul><h2 id="UI框架"><a href="#UI框架" class="headerlink" title="UI框架"></a>UI框架</h2><ul><li>Ant-Design：阿里巴巴出品，基于React的UI框架</li><li>ElementUI、iview、ice：饿了么出品，基于Vue的UI框架</li><li>BootStrap：Teitter推出的一个用于前端开发的开源工具包</li><li>AmazeUI：又叫“妹子UI”，一款HTML5跨屏前端框架</li></ul><h2 id="JavaScript构建工具"><a href="#JavaScript构建工具" class="headerlink" title="JavaScript构建工具"></a>JavaScript构建工具</h2><ul><li>Babel：JS编译工具，主要用于浏览器不支持的ES新特性，比如用于编译TypeScript</li><li>WebPack：模块打包器，主要作用就是打包、压缩、合并及按序加载</li></ul><blockquote><p>注：以上知识点已将WebApp开发所需技能全部梳理完毕</p></blockquote><h2 id="0-5、三端同一"><a href="#0-5、三端同一" class="headerlink" title="0.5、三端同一"></a>0.5、三端同一</h2><h3 id="混合开发（Hybrid-App）"><a href="#混合开发（Hybrid-App）" class="headerlink" title="混合开发（Hybrid App）"></a>混合开发（Hybrid App）</h3><p>主要目的是实现一套代码三端统一（PC、Android：.apk、iOS：.ipa）并能够调用到设备底层硬件（如：传感器、GPS、摄像头等），打包方式主要有以下两种：</p><ul><li>云打包：HBuild -&gt; HBuildX，DCloud 出品；API Cloud</li><li>本地打包： Cordova（前身是 PhoneGap）</li></ul><h3 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h3><p>详见微信官网，这里就是介绍一个方便微信小程序UI开发的框架：WeUI</p><h1 id="1、什么是Javascript"><a href="#1、什么是Javascript" class="headerlink" title="1、什么是Javascript"></a>1、什么是Javascript</h1><h2 id="1-1、概述"><a href="#1-1、概述" class="headerlink" title="1.1、概述"></a>1.1、概述</h2><p>javaScript是一门世界上最流行的脚本语言<br>Java，JavaScript<br>10天<br>一个合格的后端人员，必须精通JavaScript</p><h2 id="1-2、历史"><a href="#1-2、历史" class="headerlink" title="1.2、历史"></a>1.2、历史</h2><p>见百度</p><p>ECMAScript它可以理解为JavaScript的一个标准<br>最新版本已经到es6版本~<br>但是大部分浏览器还只停留在支持es5代码上！<br>开发环境–线上环境，版本不一致</p><h1 id="2、快速入门"><a href="#2、快速入门" class="headerlink" title="2、快速入门"></a>2、快速入门</h1><h2 id="2-1、引入JavaScript"><a href="#2-1、引入JavaScript" class="headerlink" title="2.1、引入JavaScript"></a>2.1、引入JavaScript</h2><p>1、内部标签</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span> //....<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2、外部引入<br>hj.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"hello,world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>test.html</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--外部引入       注意：script必须成对出现   --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/hj.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--不用显示定义type，也默认就是javaScript--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试代码</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--script标签内，写Javascript代码--></span>    <span class="token comment">&lt;!--&lt;script>        alert("hello,world");    &lt;/script>--></span>    <span class="token comment">&lt;!--外部引入        注意：script必须成对出现    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>js/hj.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--不用显示定义type，也默认就是javaScript--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--这里也可以存放--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-2、基本语法入门"><a href="#2-2、基本语法入门" class="headerlink" title="2.2、基本语法入门"></a>2.2、基本语法入门</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--JavaScript严格区分大小写--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">// 1. 定义变量   变量类型 变量名 = 变量值</span>        <span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>        <span class="token comment">//alert(num)</span>        <span class="token comment">// 2. 条件控制</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">></span> <span class="token number">60</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"60~70"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>score <span class="token operator">></span> <span class="token number">70</span> <span class="token operator">&amp;&amp;</span> score <span class="token operator">&lt;</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"70~80"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"other"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>浏览器必备调试须知：调试在浏览器调试</p><p><img src="/2021/07/07/javascript/20200508101436683.png"></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">//在网页的控制台输入console.log(num)           在浏览器的控制台打印变量alert(num);                在浏览器上弹窗输出变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-3、数据类型"><a href="#2-3、数据类型" class="headerlink" title="2.3、数据类型"></a>2.3、数据类型</h2><p>数值，文本，图形，音频，视频</p><p>变量</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>==number==<br>js不区分小树和整数，Number</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">123</span><span class="token comment">//整数123</span><span class="token number">123.1</span><span class="token comment">//浮点数123.1</span><span class="token number">1.123e3</span><span class="token comment">//科学计数法</span><span class="token operator">-</span><span class="token number">99</span><span class="token comment">//负数</span><span class="token number">NaN</span><span class="token comment">//not a number</span><span class="token number">Infinity</span> <span class="token comment">// 表示无限大</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==字符串==<br>‘abc’ “abc”</p><p>==布尔值==<br>true，false</p><p>==逻辑运算==</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&amp;&amp;</span> 两个都为真，结果为真<span class="token operator">||</span> 一个为真，结果为真<span class="token operator">!</span> 真即假，假即真<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==比较运算符== ！！！重要！</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">=</span><span class="token number">1</span>，<span class="token string">"1"</span><span class="token operator">==</span> 等于（类型不一样，值一样，也会判断为<span class="token boolean">true</span>）<span class="token operator">===</span> 绝对等于（类型一样，值一样，结果为<span class="token boolean">true</span>）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这是一个JS的缺陷，坚持不要使用 == 比较<br>须知：</p><ul><li>NaN === NaN，这个与所有的数值都不相等，包括自己(返回false)</li><li>只能通过isNaN（NaN）来判断这个数是否是NaN（返回true）</li></ul><p>==浮点数问题==</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//结果为false，有精度损失</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>尽量避免使用浮点数进行运算，存在精度问题！</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">3</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0.00000001</span>  <span class="token comment">////结果为true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>==null 和 undefined==</p><ul><li>null 空</li><li>undefined 未定义</li></ul><p>==数组==<br>Java的数组必须是相同类型的对象~，JS中不需要这样</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//保证代码的可读性，尽量使用[]</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//第二种定义方法</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>取数字下标：如果越界了，就会 报undefined</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>==对象==<br>对象是大括号，数组是中括号</p><blockquote><p>每个属性之间使用逗号隔开，最后一个属性不需要逗号</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Person person = new Person(1,2,3,4,5);</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'Tom'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token literal-property property">tags</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'js'</span><span class="token punctuation">,</span><span class="token string">'java'</span><span class="token punctuation">,</span><span class="token string">'web'</span><span class="token punctuation">,</span><span class="token string">'...'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==取对象值==</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">person<span class="token punctuation">.</span>name<span class="token operator">></span> <span class="token string">"Tom"</span>person<span class="token punctuation">.</span>age<span class="token operator">></span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4、严格检查格式"><a href="#2-4、严格检查格式" class="headerlink" title="2.4、严格检查格式"></a>2.4、严格检查格式</h2><p><img src="/2021/07/07/javascript/20200508105351996.png"></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--    前提：IDEA需要设置支持ES6语法        'use strict';严格检查模式，预防JavaScript的随意性导致产生的一些问题        必须写在JavaScript的第一行！        局部变量建议都使用let去定义~    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token string">'use strict'</span><span class="token punctuation">;</span>        <span class="token comment">//全局变量</span>         <span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span>        <span class="token comment">//ES6 let</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3、数据类型"><a href="#3、数据类型" class="headerlink" title="3、数据类型"></a>3、数据类型</h1><h2 id="3-1、字符串"><a href="#3-1、字符串" class="headerlink" title="3.1、字符串"></a>3.1、字符串</h2><p>1.正常字符串我们使用单引号，或者双引号</p><p>2.注意转义字符 \</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">\&#39;\n\t\u4e2d    \u##### Unicode字符\x41Ascall字符  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、多行字符串编写</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//tab 上面 esc下面这个键</span>        <span class="token keyword">var</span> msg <span class="token operator">=</span>            <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello            world            你好呀            nihao</span><span class="token template-punctuation string">`</span></span>            `<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、模板字符串</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//tab 上面 esc下面</span><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'Tom'</span><span class="token punctuation">;</span><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">你好，</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token number">12345</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、字符串长度</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">str<span class="token punctuation">.</span>length<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.字符串的可变性，不可变</p><p><img src="/2021/07/07/javascript/1605689496601.png"></p><p>7、大小写转换</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//注意，这里是方法，不是属性了</span>student<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>student<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>8、student.indexof(‘t’)      ：获取索引<br>9、substring，从0开始    ：截取字符串</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token punctuation">)</span>student<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//从第一个字符串截取到最后一个字符串</span>student<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">//[1,3)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-2、数组"><a href="#3-2、数组" class="headerlink" title="3.2、数组"></a>3.2、数组</h2><p>Array可以包含任意的数据类型</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//通过下标取值和赋值</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1、长度</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr<span class="token punctuation">.</span>length<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：假如给arr.lennth赋值，数组大小就会发生变化~，赋值变大时多出来的都为未被定义，如果赋值过小，元素就会丢失</p><p><img src="/2021/07/07/javascript/1605690233599.png"></p><p>2、indexOf，通过元素获得下标索引</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>字符串的”1”和数字 1 是不同的</p><p>3、slice（）截取Array的一部分，返回的一个新数组，类似于String中substring</p><p>4、push()，pop()尾部</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">push：压入到尾部，可以一次加多个pop：弹出尾部的一个元素，一次一个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>5、unshift(),shift() 头部</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">unshift：压入到头部shift：弹出头部的一个元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>6、排序sort()</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"B"</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>7、元素反转reverse()</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"C"</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>8、元素拼接concat()</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"C"</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"C"</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token function">arr</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"C"</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：concat()并没有修改数组，只是会返回一个新的数组</p><p>9、连接符join<br>打印拼接数组，使用特定的字符串连接</p><pre class="line-numbers language-[" data-language="["><code class="language-[">(3)[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;]arr.join(&#39;-&#39;)&quot;C-B-A&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>10、多维数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"5"</span><span class="token punctuation">,</span><span class="token string">"6"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>数组：存储数据（如何存，如何取，方法都可以自己实现！）</p><h2 id="3-3、对象"><a href="#3-3、对象" class="headerlink" title="3.3、对象"></a>3.3、对象</h2><p>若干个键值对</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> 对象名 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>属性名：属性值，属性名：属性值，属性名：属性值<span class="token punctuation">&#125;</span><span class="token comment">//定义了一个person对象，它有四个属性</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token literal-property property">email</span><span class="token operator">:</span><span class="token string">"123456798@QQ.com"</span><span class="token punctuation">,</span><span class="token literal-property property">score</span><span class="token operator">:</span><span class="token number">66</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Js中对象，{…}表示一个对象，建制对描述属性xxx：xxx，多个属性之间用逗号隔开，最后一个属性不加逗号！<br>JavaScript中的所有的键都是字符串，值是任意对象！</p><p> 1、对象赋值</p><pre class="line-numbers language-javas" data-language="javas"><code class="language-javas">person.name &#x3D;&quot;qinjiang&quot;&gt;&quot;qinjiang&quot;person.name&gt;&quot;qinjiang&quot;person&gt;Object &#123; name: &quot;qinjiang&quot;, age: 25, qq: 727958639, score: 20 &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、使用一个不存在的对象属性，不会报错！undefined</p><pre class="line-numbers language-javas" data-language="javas"><code class="language-javas">person.hahaundefined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3、动态的删减属性，通过delete删除对象的属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">delete</span> person<span class="token punctuation">.</span>name<span class="token operator">></span><span class="token boolean">true</span>person<span class="token operator">></span>Object <span class="token punctuation">&#123;</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token literal-property property">qq</span><span class="token operator">:</span> <span class="token number">727958639</span><span class="token punctuation">,</span> <span class="token literal-property property">score</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、动态的添加，直接给新的属性添加值即可</p><pre class="line-numbers language-javas" data-language="javas"><code class="language-javas">person.haha &#x3D; &quot;haha&quot;&gt;hahaperson&gt;Object &#123; age: 25, qq: 727958639, score: 20, haha: &quot;haha&quot; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、判断属性值是否在这个对象中！xxx in xxx</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'age'</span> <span class="token keyword">in</span> person<span class="token boolean">true</span><span class="token comment">//继承,父类里面有这个方法</span><span class="token string">'toSting'</span> <span class="token keyword">in</span> person<span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、判断一个属性是否是这个对象自身拥有的 hasOwnProperty()</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">person<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'toString'</span><span class="token punctuation">)</span><span class="token boolean">false</span>person<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-4、流程控制"><a href="#3-4、流程控制" class="headerlink" title="3.4、流程控制"></a>3.4、流程控制</h2><p>if判断<br><img src="/2021/07/07/javascript/20200508161158507.png"></p><p>while循环，避免程序死循环<br><img src="/2021/07/07/javascript/20200508161549241.png"><br>for循环<br><img src="/2021/07/07/javascript/20200508161625832.png"><br>forEach循环</p><blockquote><p>ES5.1特性</p></blockquote><p><img src="/2021/07/07/javascript/20200508162100917.png"><br>for …in——-下标<br><img src="/2021/07/07/javascript/20200508162209421.png"></p><h2 id="3-5、Map和Set"><a href="#3-5、Map和Set" class="headerlink" title="3.5、Map和Set"></a>3.5、Map和Set</h2><blockquote><p>ES6的新特性~</p></blockquote><p>Map<br><img src="/2021/07/07/javascript/20200508163109596.png"><br>Set：无序不重复的集合<br><img src="/2021/07/07/javascript/20200508163211654.png"></p><h2 id="3-6、iterator"><a href="#3-6、iterator" class="headerlink" title="3.6、iterator"></a>3.6、iterator</h2><blockquote><p>es6新特性</p></blockquote><p>作业：使用iterator来遍历迭代我们Map，Set！<br>遍历数组<br><img src="/2021/07/07/javascript/2020050816410825.png"><br>遍历Map<br><img src="/2021/07/07/javascript/20200508164125573.png"><br>遍历set<br><img src="/2021/07/07/javascript/20200508164144469.png"></p><h1 id="4、函数"><a href="#4、函数" class="headerlink" title="4、函数"></a>4、函数</h1><h2 id="4-1、定义函数"><a href="#4-1、定义函数" class="headerlink" title="4.1、定义函数"></a>4.1、定义函数</h2><blockquote><p>定义方式一</p></blockquote><p>绝对值函数<br><img src="/2021/07/07/javascript/2020050818170197.png"><br>一旦执行到return代表函数结束，返回结果！<br>如果没有执行return，函数执行完也会返回结果，结果就是undefined</p><blockquote><p>定义方式二</p></blockquote><p><img src="/2021/07/07/javascript/20200508182120582.png"><br>function(x){…}这是一个匿名函数。但是可以吧结果赋值给abs，通过abs就可以调用函数！<br>方式一和方式二等价！</p><blockquote><p>调用函数</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">//10</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">//10</span><span class="token number">12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>参数问题：javaScript可以传任意个参数，也可以不传递参数~<br>参数进来是否存在问题？<br>假设不存在参数，如何规避？<br><img src="/2021/07/07/javascript/20200508182908571.png"></p><blockquote><p>arguments</p></blockquote><p>arguments是一个JS免费赠送的关键字；<br>代表，传递进来的所有参数，是一个数组！<br><img src="/2021/07/07/javascript/20200508183337762.png"><br>问题：arguments包含所有的参数，我们有时候想使用多余的参数来进行附加操作。需要排除已有参数~</p><blockquote><p>rest</p></blockquote><p>以前：<br><img src="/2021/07/07/javascript/20200508183752806.png"></p><p>ES6引入的新特性，获取除了已经定义的参数之外的所有参数~…<br><img src="/2021/07/07/javascript/20200508183918899.png"><br>rest参数只能写在最后面，必须用…标识。</p><h2 id="4-2、变量的作用域"><a href="#4-2、变量的作用域" class="headerlink" title="4.2、变量的作用域"></a>4.2、变量的作用域</h2><p>在javascript中，var定义变量实际是有作用于的。<br>假设在函数体重声明，则在函数体外不可以使用<del>（闭包）<br><img src="/2021/07/07/javascript/202005081843310.png"><br>如果两个函数使用了相同的变量名，只要在函数内部就不冲突<br><img src="/2021/07/07/javascript/20200508213017794.png"><br>内部函数可以访问外部函数的成员，反之则不行<br><img src="/2021/07/07/javascript/2020050821304022.png"><br>假设，内部函数变量和外部函数变量，重名！<br><img src="/2021/07/07/javascript/20200508214742767.png"><br>假设在JavaScript中，函数查找变量从自身函数开始</del>， 由“内”向“外”查找，假设外部存在这个同名的函数变量，则内部函数会屏蔽外部函数的变量。</p><blockquote><p>提升变量的作用域</p></blockquote><p><img src="/2021/07/07/javascript/20200508215241301.png"><br>结果：x undefined<br>说明：js执行引擎，自动提升了y的声明，但是不会提升变量y的赋值；<br><img src="/2021/07/07/javascript/20200508215909640.png"><br>这个是在javascript建立之初就存在的特性。 养成规范：所有 的变量定义都放在函数的头部，不要乱放，便于代码维护；<br><img src="/2021/07/07/javascript/2020050822470141.png"></p><blockquote><p>全局变量</p></blockquote><p><img src="/2021/07/07/javascript/20200508224905458.png"></p><p>全局对象window<br><img src="/2021/07/07/javascript/20200508225326543.png"></p><p>alert() 这个函数本身也是一个window的变量；<br><img src="/2021/07/07/javascript/20200508225810801.png"><br>javascript实际上只有一个全局作用域，任何变量（函数也可以视为变量），假设没有在函数作用范围内找到，就会向外查找，如果在全局作用域都没有找到，就会报错 Refrence</p><blockquote><p>规范</p></blockquote><p>由于我们的所有变量都会绑定到window上，。如果不同的js文件，使用了相同的全局变量，就会产生冲突—&gt;如何减少这样的冲突？<br><img src="/2021/07/07/javascript/20200508230620266.png"><br>把自己的代码全部放入自己定义的唯一空间名字中，降低全局命名冲突问题~<br>jQuery中就是使用的该方法：jQuery.name，简便写法：**$()**</p><blockquote><p>局部作用域</p></blockquote><p><img src="/2021/07/07/javascript/20200508231056855.png"><br>ES6的let关键字，解决了局部作用域冲突的问题！<br><img src="/2021/07/07/javascript/20200508231207856.png"><br>建议大家都用let去定义局部作用域的变量；</p><blockquote><p>常量</p></blockquote><p>在ES6之前，怎么定义常量：只有用全部大写字母命名的变量就是常量；建议不要修改这样的值。<br><img src="/2021/07/07/javascript/20200508231525623.png"><br>在ES6引入了常量关键字 const<br><img src="/2021/07/07/javascript/20200508232049107.png"></p><h2 id="4-3、方法"><a href="#4-3、方法" class="headerlink" title="4.3、方法"></a>4.3、方法</h2><blockquote><p>定义方法</p></blockquote><p>方法就是把函数放在对象的里面，对象只有两个东西：属性和方法<br><img src="/2021/07/07/javascript/20200508232559873.png"><br>this.代表什么？拆开上main的代码看看<br><img src="/2021/07/07/javascript/20200508232827102.png"><br>this是无法指向的，是默认指向调用它的那个对象的；</p><blockquote><p>apply</p></blockquote><p>在js中可以控制this指向<br><img src="/2021/07/07/javascript/20200508233222629.png"></p><h1 id="5、内部对象"><a href="#5、内部对象" class="headerlink" title="5、内部对象"></a>5、内部对象</h1><blockquote><p>标准对象</p></blockquote><p><img src="/2021/07/07/javascript/20200508233500524.png"></p><h2 id="5-1、Date"><a href="#5-1、Date" class="headerlink" title="5.1、Date"></a>5.1、Date</h2><p><strong>基本使用</strong><br><img src="/2021/07/07/javascript/2020050823390552.png"><br>转换<br><img src="/2021/07/07/javascript/20200508233954136.png"></p><h2 id="5-2、JSON"><a href="#5-2、JSON" class="headerlink" title="5.2、JSON"></a>5.2、JSON</h2><blockquote><p>JSON是什么</p></blockquote><p><img src="/2021/07/07/javascript/20200508234238700.png" alt="在这里插入图片描述"><br>在javascript中，一切皆为对象，任何js支持的类型都可以用JSON表示<br>格式</p><ul><li>对象都用{}</li><li>数组都用[]</li><li>所有的键值对 都是用key:value</li></ul><p>JSON字符串和js对象转化<br><img src="/2021/07/07/javascript/20200508234804502.png"><br>很多人搞不清楚，JSON和JS对象的区别</p><pre class="line-numbers language-javas" data-language="javas"><code class="language-javas">var obj &#x3D;&#123;a:&#39;hello&#39;,b:&#39;hellob&#39;&#125;;var json &#x3D;&#39;&#123;&quot;a&quot;:&quot;hello&quot;,&quot;b&quot;:&quot;hellob&quot;&#125;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> 5.3、AJAX</p><ul><li>原生的js写法 xhr异步请求</li><li>jQuery封装好的方法$(#name).ajax(“”)</li><li>axios请求</li></ul><h1 id="6、面向对象编程"><a href="#6、面向对象编程" class="headerlink" title="6、面向对象编程"></a>6、面向对象编程</h1><blockquote><p>原型对象<br>javascript、java、c#——面向对象；但是javascript有些区别！</p></blockquote><ul><li>类：模板</li><li>对象：具体实例</li></ul><p>在javascript中，需要大家转换一下思维方式！<br>原型：<br><img src="/2021/07/07/javascript/20200509210303742.png"><br><img src="/2021/07/07/javascript/20200509210627825.png" alt="在这里插入图片描述"></p><blockquote><p>class集继承</p></blockquote><p>class关键字，是在ES6引入的<br>1、定义一个类、属性、方法<br><img src="/2021/07/07/javascript/20200509210756344.png"><br>2、继承</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment">//ES6之后========================</span><span class="token comment">//定义一个学生的类</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">XiaoStudent</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>grade</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>grade <span class="token operator">=</span> grade<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">myGrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'我是一名小学生'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> xiaoming <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"xiaoming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> xiaohong <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XiaoStudent</span><span class="token punctuation">(</span><span class="token string">"xiaohong"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本质：查看对象原型<br><img src="/2021/07/07/javascript/20200509211811667.png"></p><blockquote><p>原型链</p></blockquote><p><em>proto</em>:<br><img src="/2021/07/07/javascript/20200509212115371.png"></p><h1 id="7、操作BOM对象（重点）"><a href="#7、操作BOM对象（重点）" class="headerlink" title="7、操作BOM对象（重点）"></a>7、操作BOM对象（重点）</h1><blockquote><p>浏览器介绍</p></blockquote><p>javascript和浏览器关系？<br>BOM：浏览器对象模型</p><ul><li>IE6~11</li><li>Chrome</li><li>Safari</li><li>FireFox</li><li>Opera</li></ul><p>三方</p><ul><li>QQ浏览器</li><li>360浏览器</li></ul><blockquote><p>window</p></blockquote><p>window代表浏览器窗口<br><img src="/2021/07/07/javascript/20200509224733766.png"></p><blockquote><p>Navigator（不建议使用）</p></blockquote><p>Navigator封装了浏览器的信息<br><img src="/2021/07/07/javascript/20200509225010877.png"><br>大多数时候，我们不会使用navigator对象，因为会被认为修改!<br>不建议使用这些属性来判断和编写代码</p><blockquote><p>screen</p></blockquote><p>代表屏幕尺寸</p><p><img src="/2021/07/07/javascript/20200509225316614.png"></p><blockquote><p>location(重要)</p></blockquote><p>location代表当前页面的URL信息<br><img src="/2021/07/07/javascript/20200509225614305.png"></p><blockquote><p>document（内容DOM）</p></blockquote><p>document代表当前的页面，HTML DOM文档树<br><img src="/2021/07/07/javascript/20200509225911170.png"><br>获取具体的文档树节点<br><img src="/2021/07/07/javascript/20200509225947396.png"><br>获取cookie<br><img src="/2021/07/07/javascript/20200509230037645.png"><br>劫持cookie原理<br><a href="http://www.taobao.com/">www.taobao.com</a><br><img src="/2021/07/07/javascript/2020050923025532.png" alt="在这里插入图片描述"><br>服务器端可以设置cookie为httpOnly</p><blockquote><p>history（不建议使用 ）</p></blockquote><p>history代表浏览器的历史记录<br><img src="/2021/07/07/javascript/20200509230639949.png"></p><h1 id="8、操作DOM对象（重点）"><a href="#8、操作DOM对象（重点）" class="headerlink" title="8、操作DOM对象（重点）"></a>8、操作DOM对象（重点）</h1><p>DOM：文档对象模型</p><blockquote><p>核心</p></blockquote><p>浏览器网页就是一个Dom树形结构！</p><ul><li>更新：更新Dom节点</li><li>遍历Dom节点：得到Dom节点</li><li>删除：删除一个Dom节点</li><li>添加：添加一个新的节点</li></ul><p>要操作一个Dom节点，就必须要先获得这个Dom节点</p><blockquote><p>获得Dom节点</p></blockquote><p><img src="/2021/07/07/javascript/20200509231806822.png"><br>这是原生代码，之后我们尽量都使用jQuery();</p><blockquote><p>更新节点</p></blockquote><p><img src="/2021/07/07/javascript/20200509232232560.png"><br>操作文本<br><img src="/2021/07/07/javascript/20200509232256674.png"><br>操作css<br><img src="/2021/07/07/javascript/20200509232439513.png"></p><blockquote><p>删除节点</p></blockquote><p>删除节点的步骤：先获取父节点，再通过父节点删除自己<br><img src="/2021/07/07/javascript/20200509232903448.png"><br>注意：删除多个节点的时候，children是在时刻变化的，删除节点的时候一定要注意。</p><blockquote><p>插入节点</p></blockquote><p>我们获得了某个Dom节点，假设这个dom节点是空的，我们通过innerHTML就可以增加一个元素了，但是这个Dom节点已经存在元素了，我们就不能这么干了！会产生覆盖</p><p>追加<br><img src="/2021/07/07/javascript/20200509233556254.png"><br><img src="/2021/07/07/javascript/2020050923363290.png"></p><blockquote><p>创建一个新的标签</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> js <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//已经存在的节点</span>    <span class="token keyword">var</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//通过JS创建一个新的节点</span>    <span class="token keyword">var</span> newP <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">creatElement</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建一个p标签</span>    newP<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">'newP'</span><span class="token punctuation">;</span>    newP<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'Hello,Kuangshen'</span><span class="token punctuation">;</span>    <span class="token comment">//创建一个标签节点</span>    <span class="token keyword">var</span> myScript <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">creatElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    myScript<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'type'</span><span class="token punctuation">,</span><span class="token string">'text/javascript'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//可以创建一个style标签</span>    <span class="token keyword">var</span> myStyle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">creatElement</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建了一个空style标签</span>    myStyle<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'type'</span><span class="token punctuation">,</span><span class="token string">'text/css'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    myStyle<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'body&#123;background-color:chartreuse;&#125;'</span><span class="token punctuation">;</span><span class="token comment">//设置标签内容</span>        document<span class="token punctuation">.</span><span class="token function">getElementByTagName</span><span class="token punctuation">(</span><span class="token string">'head'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>myStyle<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>insertBefore</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> ee <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'ee'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> js <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> list <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'list'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//要包含的节点.insertBefore(newNode,targetNode)</span>list<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>js<span class="token punctuation">,</span>ee<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="9、操作表单"><a href="#9、操作表单" class="headerlink" title="9、操作表单"></a>9、操作表单</h1><blockquote><p>表单是什么？form—–DOM树</p></blockquote><ul><li>文本框—-text</li><li>下拉框—-select</li><li>单选框—-radio</li><li>多选框—-checkbox</li><li>隐藏域—-hidden</li><li>密码框—-password</li><li>…</li></ul><p>表单的目的提交信息</p><blockquote><p>获得要提交的信息</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--多选框的值就是定义好的value--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>性别：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>man<span class="token punctuation">"</span></span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>boy<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>男           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>woman<span class="token punctuation">"</span></span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>girl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>女        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> input_text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> boy_radio <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"boy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> girl_radio <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"girl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//得到输入框的值</span>        input_text<span class="token punctuation">.</span>value         <span class="token comment">//修改输入框的值</span>        input_text<span class="token punctuation">.</span>value  <span class="token operator">=</span> <span class="token string">"value"</span><span class="token punctuation">;</span>                <span class="token comment">//对于单选框，多选框等等固定的值，boy_radio.value只能取到当前的值</span>        boy_radio<span class="token punctuation">.</span>checked<span class="token punctuation">;</span><span class="token comment">//查看返回的结果，是否为true，如果为true，则被选中。</span>        girl_radio<span class="token punctuation">.</span>checked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//赋值</span>            </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>提交表单。md5加密密码，表单优化</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--MD5加密工具类--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">                </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--表达绑定提交事件οnsubmit= 绑定一个提交检测的函数，true，false将这个结果返回给表单，使用onsubmit接收--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>https://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">method</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onsubmit</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token keyword">return</span> <span class="token function">aaa</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">name</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>md5-password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                         <span class="token comment">&lt;!--绑定事件 onclick 被点击--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">function</span> <span class="token function">aaa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> username <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> pwd <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> md5pwd <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"md5-password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//pwd.value = md5(pwd,value);</span>                md5pwd<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">mad5</span><span class="token punctuation">(</span>pwd<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//可以校验判断表单内容，true就是通过提交，false就是阻止提交</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="10、jQuery"><a href="#10、jQuery" class="headerlink" title="10、jQuery"></a>10、jQuery</h1><p>javaScript和jQuery的关系？</p><p>jQuery库，里面存在大量的JavaScript函数</p><blockquote><p>获取jQuery</p></blockquote><p><img src="/2021/07/07/javascript/2020051021540896.png"></p><p><strong>公式：$(selector).action()</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lib/jquery-3.4.1.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>test-jquery<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">//选择器就是css选择器</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#test-jquery'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'hello,jQuery!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>选择器</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//原生js，选择器少，麻烦不好记</span><span class="token comment">//标签</span>document<span class="token punctuation">.</span><span class="token function">getElementByTagName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//id</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//class</span>document<span class="token punctuation">.</span><span class="token function">getElementByClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//jQuery css中的选择器它全部都能用！</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//标签选择器</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#id1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//id选择器</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.class1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">;</span><span class="token comment">//class选择器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文档工具站：<a href="http://jquery.cuishifeng.cn/">http://jquery.cuishifeng.cn/</a></p><blockquote><p>事件</p></blockquote><p>鼠标事件、键盘事件，其他事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">mousedown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span>按下<span class="token function">mouseenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token function">mouseleave</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token function">mousemove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span>移动<span class="token function">mouseout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token function">mouseover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token function">mouseup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span><span class="token number">1234567</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span><span class="token operator">&lt;</span>html lang <span class="token operator">=</span> <span class="token string">"en"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta charset <span class="token operator">=</span> <span class="token string">"UTF-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>Title<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>        <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"lib/jquery-3.4.1.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>        <span class="token operator">&lt;</span>style<span class="token operator">></span>            #divMove<span class="token punctuation">&#123;</span>                <span class="token literal-property property">width</span><span class="token operator">:</span>500px<span class="token punctuation">;</span>                <span class="token literal-property property">height</span><span class="token operator">:</span>500px<span class="token punctuation">;</span>                <span class="token literal-property property">border</span><span class="token operator">:</span>1px solid red<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>要求：获取鼠标当前的一个坐标<span class="token operator">--</span><span class="token operator">></span>        mouse：<span class="token operator">&lt;</span>span id <span class="token operator">=</span> <span class="token string">"mouseMove"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span>div id <span class="token operator">=</span> <span class="token string">"divMove"</span><span class="token operator">></span>            在这里移动鼠标试试        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token comment">//当网页元素加载完毕之后，响应事件</span>            <span class="token comment">//$(document).ready(function()&#123;&#125;)</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#divMove'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mousemove</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#mouseMove'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">'x:'</span><span class="token operator">+</span>e<span class="token punctuation">.</span>pageX<span class="token operator">+</span><span class="token string">"y:"</span><span class="token operator">+</span>e<span class="token punctuation">.</span>pageY<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>操作DOM</p></blockquote><p>节点文本操作</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#test-ul li[name=python]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得值</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#test-ul li[name=python]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">'设置值'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置值</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#test-ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得值</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#test-ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">'&lt;strong>123&lt;/strong>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>CSS的操作</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#test-ul li[name=python]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"red"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>元素的显示和隐藏，：本质display:none</p><pre class="line-numbers language-none"><code class="language-none">$(&#39;#test-ul li[name&#x3D;python]&#39;).show();$(&#39;#test-ul li[name&#x3D;python]&#39;).hide();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>娱乐测试</p><pre class="line-numbers language-none"><code class="language-none">$(window).width()$(window).height()$(&#39;#test-ul li[name&#x3D;python]&#39;).toggle();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>未来ajax()；</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#form'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">)</span>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">"test.html"</span><span class="token punctuation">,</span><span class="token literal-property property">context</span><span class="token operator">:</span>document<span class="token punctuation">.</span>body<span class="token punctuation">,</span><span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>小技巧</p></blockquote><p>1、如何巩固JS（看jQuery源码，看游戏源码！）</p><p>2、巩固HTML、CSS（扒网站，全部down下来，然后对应修改看效果~）</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css</title>
      <link href="/2021/07/07/css/"/>
      <url>/2021/07/07/css/</url>
      
        <content type="html"><![CDATA[<hr><h1 id><a href="#" class="headerlink" title></a><img src="/2021/07/07/css/20200507153758833.png"></h1><h1 id="1、什么是CSS"><a href="#1、什么是CSS" class="headerlink" title="1、什么是CSS"></a>1、什么是CSS</h1><p>如何学习</p><ol><li>CSS是什么</li><li>CSS怎么用（快速入门）</li><li>CSS选择器（重点+难点）</li><li>美化网页（文字，阴影，超链接，列表，渐变…）</li><li>盒子模型</li><li>浮动</li><li>定位</li><li>网页动画（特效效果）</li></ol><h2 id="1-1、什么是CSS"><a href="#1-1、什么是CSS" class="headerlink" title="1.1、什么是CSS"></a>1.1、什么是CSS</h2><p>Cascading Style Sheet层叠样式表<br>CSS：表现（美化网页）<br>字体，颜色，边距，高度，宽度，背景图片，网页定位，网页浮动</p><h2 id="1-2、发展史"><a href="#1-2、发展史" class="headerlink" title="1.2、发展史"></a>1.2、发展史</h2><p>CSS1.0<br>CSS2.0：DIV（块）+CSS，HTML与CSS结构分离的思想，网页变得简单，SEO<br>CSS2.1：浮动，定位<br>CSS3.0：圆角、阴影、动画…浏览器兼容性~</p><p><img src="/2021/07/07/css/20200428235217246.png"></p><h2 id="1-3快速入门"><a href="#1-3快速入门" class="headerlink" title="1.3快速入门"></a>1.3快速入门</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--规范，&lt;style>可以编写CSS的代码，每一个声明最好以“;”结尾语法：选择器&#123;声明1;声明2;声明3;&#125;--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">h1</span><span class="token punctuation">&#123;</span>            <span class="token property">color</span><span class="token punctuation">:</span> crimson<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>CSS测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建议使用这种规范<br><img src="/2021/07/07/css/20200429002326219.png"><br>CSS的优势：<br>1、内容和表现分离；<br>2、网页结构表现统一，可以实现复用<br>3、样式十分的丰富<br>4、建议使用独立于html的css文件<br>5、利用SEO，容易被搜索引擎收录！</p><h2 id="1-4、CSS的3种导入方式"><a href="#1-4、CSS的3种导入方式" class="headerlink" title="1.4、CSS的3种导入方式"></a>1.4、CSS的3种导入方式</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;&#x2F;title&gt;    &lt;!--内部样式--&gt;    &lt;style&gt;        h1&#123;            color: green;        &#125;    &lt;&#x2F;style&gt;    &lt;!--外部样式--&gt;    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;css&#x2F;style.css&quot; &#x2F;&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;!--优先级：就近原则--&gt;&lt;!--行内样式：在标签元素中，编写一个style属性，编写样式即可--&gt;&lt;h1 style&#x3D;&quot;color: red&quot;&gt;这是标签&lt;&#x2F;h1&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拓展：外部样式两种方法</p><ul><li>链接式<br>html</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--外部样式--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css/style.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>导入式<br>@import是CSS2.1特有的！</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;!--导入式--&gt;    &lt;style&gt;        @import url(&quot;css&#x2F;style.css&quot;);    &lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2、选择器"><a href="#2、选择器" class="headerlink" title="2、选择器"></a>2、选择器</h1><blockquote><p>作用：选择页面上的某一个后者某一类元素</p></blockquote><h2 id="2-1、基本选择器"><a href="#2-1、基本选择器" class="headerlink" title="2.1、基本选择器"></a>2.1、基本选择器</h2><p>1、标签选择器：选择一类标签 标签{}</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">h1</span><span class="token punctuation">&#123;</span>            <span class="token property">color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>标签选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、类 选择器class：选择所有class一致的标签，跨标签，格式：.类名{}</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token comment">/*类选择器的格式 .class的名称&#123;&#125;            好处：可以多个标签归类，是同一个class，可以复用        */</span>        <span class="token selector">.demo1</span><span class="token punctuation">&#123;</span>            <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.demo2</span><span class="token punctuation">&#123;</span>            <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.demo3</span><span class="token punctuation">&#123;</span>            <span class="token property">color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>demo1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>类选择器：demo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>类选择器：demo2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>类选择器：demo3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、id 选择器：全局唯一，格式：#id名{}</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token comment">/*id选择器：id必须保证全局唯一            #id名称&#123;&#125;            不遵循就近原则，优先级是固定的            id选择器 > 类选择器  >  标签选择器        */</span>        <span class="token selector">#demo1</span><span class="token punctuation">&#123;</span>            <span class="token property">color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.demo2</span><span class="token punctuation">&#123;</span>            <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#demo2</span><span class="token punctuation">&#123;</span>            <span class="token property">color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">h1</span><span class="token punctuation">&#123;</span>            <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>id选择器：demo1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo2<span class="token punctuation">"</span></span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>demo2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>id选择器：demo2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>id选择器：demo3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>id选择器：demo4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>id选择器：demo5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优先级：id &gt; class &gt; 标签</p><h2 id="2-2、层次选择器"><a href="#2-2、层次选择器" class="headerlink" title="2.2、层次选择器"></a>2.2、层次选择器</h2><ol><li>后代选择器：在某个元素的后面</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">/*后代选择器*/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">body p</span><span class="token punctuation">&#123;</span><span class="token property">background</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>子选择器，一代</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">/*子选择器*/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">body>p</span><span class="token punctuation">&#123;</span><span class="token property">background</span><span class="token punctuation">:</span>orange<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>相邻的兄弟选择器 同辈</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">/*相邻兄弟选择器：只有一个，相邻（向下）*/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.active+p</span><span class="token punctuation">&#123;</span><span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>p1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>p2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>通用选择器</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token comment">/*通用兄弟选择器，当前选中元素的向下的所有兄弟元素*/</span><span class="token selector">.active~p</span><span class="token punctuation">&#123;</span><span class="token property">background</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>p1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>p2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-3、结构伪类选择器"><a href="#2-3、结构伪类选择器" class="headerlink" title="2.3、结构伪类选择器"></a>2.3、结构伪类选择器</h2><p>伪类</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token comment">/*ul的第一个子元素*/</span>        <span class="token selector">ul li:first-child</span><span class="token punctuation">&#123;</span>            <span class="token property">background</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/*ul的最后一个子元素*/</span>        <span class="token selector">ul li:last-child</span><span class="token punctuation">&#123;</span>            <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/*选中p1：定位到父元素，选择当前的第一个元素            选择当前p元素 的父级元素，选中父级元素的第一个，并且是当前元素才生效！        */</span>        <span class="token selector">p:nth-child(1)</span><span class="token punctuation">&#123;</span>            <span class="token property">background</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/*选中父元素下的，第2个p元素*/</span>        <span class="token selector">p:nth-of-type(2)</span><span class="token punctuation">&#123;</span>            <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4、属性选择器（常用）"><a href="#2-4、属性选择器（常用）" class="headerlink" title="2.4、属性选择器（常用）"></a>2.4、属性选择器（常用）</h2><p>id + class结合</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">         <span class="token selector">.demo a</span><span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>            <span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> beige<span class="token punctuation">;</span>            <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">margin-right</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>            <span class="token property">font</span><span class="token punctuation">:</span> bold 20px/50px Arial<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>         <span class="token comment">/*属性名，属性名=属性值（正则）         =表示绝对等于         *=表示包含         ^=表示以...开头         $=表示以...结尾         存在id属性的元素  a[]&#123;&#125;         */</span>        <span class="token comment">/* a[id]&#123;             background: red;         &#125;*/</span>         <span class="token comment">/*id=first的元素*/</span>       <span class="token comment">/* a[id=first]&#123;            background: aqua;        &#125;*/</span>        <span class="token comment">/*class中有links元素*/</span>       <span class="token comment">/* a[class = "links item2 first2"]&#123;            background: orange;        &#125;*/</span>        <span class="token comment">/*a[class*="links"]&#123;            background: black ;        &#125;*/</span>        <span class="token comment">/*选中href中以http开头的元素*/</span>        <span class="token selector">a[href^="http"]</span><span class="token punctuation">&#123;</span>            <span class="token property">background</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>links item first<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>first<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/adad/faf<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>links item2 first2<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>qwe123<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>links item3 first3<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eweqe<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>links item4 first4<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rrrrr<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>links item5 first5<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ttt<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>links item6 first6<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yyy<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>links item7 first7<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/css/20200429141215183.png"></p><h1 id="3、美化网页元素"><a href="#3、美化网页元素" class="headerlink" title="3、美化网页元素"></a>3、美化网页元素</h1><h2 id="3-1、为什么要美化网页"><a href="#3-1、为什么要美化网页" class="headerlink" title="3.1、为什么要美化网页"></a>3.1、为什么要美化网页</h2><ol><li>有效的传递页面信息</li><li>美化网页，页面漂亮才能吸引客户</li><li>凸显页面的主题</li><li>提高用户的体验</li></ol><p>span标签：重点要突出的字，使用span标签套起来</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">#title1</span><span class="token punctuation">&#123;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>学习语言<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>JAVA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>font-family：字体<br>font-size：字体大小<br>font-weight：字体粗细</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> &lt;style&gt;body&#123;font-family:楷体;color：red;&#125;h1&#123;font-size： 50px;&#125;.p1&#123;font-weight：blod;&#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2、字体样式"><a href="#3-2、字体样式" class="headerlink" title="3.2、字体样式"></a>3.2、字体样式</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">font-weight</span><span class="token punctuation">:</span>bolder<span class="token punctuation">;</span><span class="token comment">/*也可以填px，但不能超过900,相当于bloder*/</span><span class="token comment">/*常用写法：*/</span><span class="token property">font</span><span class="token punctuation">:</span>oblique bloder 12px <span class="token string">"楷体"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-3、文本样式"><a href="#3-3、文本样式" class="headerlink" title="3.3、文本样式"></a>3.3、文本样式</h2><ol><li>颜色–&gt;color</li><li>文本对齐方式–&gt;text-align：center</li><li>首行缩进–&gt;text-indent：2em</li><li>行高–&gt;line-height：300px；</li><li>下划线–&gt;text-decoration</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">text-decoration</span><span class="token punctuation">:</span>underline<span class="token comment">/*下划线*/</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>line-through<span class="token comment">/*中划线*/</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>overline<span class="token comment">/*上划线*/</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token comment">/*超链接去下划线*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>图片、文字水平对齐</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">img,span</span><span class="token punctuation">&#123;</span><span class="token property">vetical-align</span><span class="token punctuation">:</span>middle<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-4、文本，阴影和超链接伪类"><a href="#3-4、文本，阴影和超链接伪类" class="headerlink" title="3.4、文本，阴影和超链接伪类"></a>3.4、文本，阴影和超链接伪类</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style>a</span><span class="token punctuation">&#123;</span><span class="token comment">/*超链接有默认的颜色*/</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>#000000<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">a:hover</span><span class="token punctuation">&#123;</span><span class="token comment">/*鼠标悬浮的状态*/</span><span class="token property">color</span><span class="token punctuation">:</span>orange<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">a:active</span><span class="token punctuation">&#123;</span><span class="token comment">/*鼠标按住未释放的状态*/</span><span class="token property">color</span><span class="token punctuation">:</span>green<span class="token punctuation">&#125;</span><span class="token selector">a:visited</span><span class="token punctuation">&#123;</span><span class="token comment">/*点击之后的状态*/</span><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">&#125;</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>阴影：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*第一个参数：表示水平偏移第二个参数：表示垂直偏移第三个参数：表示模糊半径第四个参数：表示颜色*/</span><span class="token property">text-shadow</span><span class="token punctuation">:</span>5px 5px 5px 颜色<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-6、列表ul-li"><a href="#3-6、列表ul-li" class="headerlink" title="3.6、列表ul li"></a>3.6、列表ul li</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*list-style&#123;none:去掉原点circle：空心圆decimal：数字square：正方形&#125;*/</span><span class="token selector">ul li</span><span class="token punctuation">&#123;</span><span class="token property">height</span><span class="token punctuation">:</span>30px<span class="token punctuation">;</span><span class="token property">list-style</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token property">text-indent</span><span class="token punctuation">:</span>1em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">a</span><span class="token punctuation">&#123;</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span>14px<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>#000<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">a:hover</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>orange<span class="token punctuation">;</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>underline<span class="token punctuation">&#125;</span><span class="token comment">/*放在div中，作为导航栏*/</span><span class="token selector">&lt;div id="nav">&lt;/div>#nav</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span>300px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-7、背景"><a href="#3-7、背景" class="headerlink" title="3.7、背景"></a>3.7、背景</h2><ol><li>背景颜色：background</li><li>背景图片</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">background-image</span><span class="token punctuation">:</span><span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">""</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token comment">/*默认是全部平铺的*/</span><span class="token property">background-repeat</span><span class="token punctuation">:</span>repeat-x<span class="token comment">/*水平平铺*/</span><span class="token property">background-repeat</span><span class="token punctuation">:</span>repeat-y<span class="token comment">/*垂直平铺*/</span><span class="token property">background-repeat</span><span class="token punctuation">:</span>no-repeat<span class="token comment">/*不平铺*/</span>1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>综合使用</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">background</span><span class="token punctuation">:</span>red <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"图片相对路劲"</span><span class="token punctuation">)</span></span> 270px 10px no-repeatbackground-position：<span class="token comment">/*定位：背景位置*/</span>12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-8、渐变"><a href="#3-8、渐变" class="headerlink" title="3.8、渐变"></a>3.8、渐变</h2><p>网址：<a href="https://www.grablent.com/">https://www.grablent.com</a><br>径向渐变、圆形渐变</p><h1 id="4、盒子模型"><a href="#4、盒子模型" class="headerlink" title="4、盒子模型"></a>4、盒子模型</h1><h2 id="4-1什么是盒子模型"><a href="#4-1什么是盒子模型" class="headerlink" title="4.1什么是盒子模型"></a>4.1什么是盒子模型</h2><ol><li>margin：外边距</li><li>padding：内边距</li><li>border：边框</li></ol><h2 id="4-2、边框"><a href="#4-2、边框" class="headerlink" title="4.2、边框"></a>4.2、边框</h2><p>border：粗细 样式 颜色</p><ol><li>边框的粗细</li><li>边框的样式</li><li>边框的颜色</li></ol><h2 id="4-3、外边距—-妙用：居中"><a href="#4-3、外边距—-妙用：居中" class="headerlink" title="4.3、外边距—-妙用：居中"></a>4.3、外边距—-妙用：居中</h2><p>margin-left/right/top/bottom–&gt;表示四边，可分别设置，也可以同时设置如下</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">margin</span><span class="token punctuation">:</span>0 0 0 0<span class="token comment">/*分别表示上、右、下、左；从上开始顺时针*/</span><span class="token comment">/*例1：居中*/</span><span class="token property">margin</span><span class="token punctuation">:</span>0 auto <span class="token comment">/*auto表示左右自动*/</span><span class="token comment">/*例2：*/</span><span class="token property">margin</span><span class="token punctuation">:</span>4px<span class="token comment">/*表示上、右、下、左都为4px*/</span><span class="token comment">/*例3*/</span><span class="token property">margin</span><span class="token punctuation">:</span>10px 20px 30px<span class="token comment">/*表示上为10px，左右为20px，下为30px*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>盒子的计算方式：<br>margin+border+padding+内容的大小</p><p>总结：<br>body总有一个默认的外边距 margin:0<br>常见操作：初始化</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">margin</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-4、圆角边框—-border-radius"><a href="#4-4、圆角边框—-border-radius" class="headerlink" title="4.4、圆角边框—-border-radius"></a>4.4、圆角边框—-border-radius</h2><p>border-radius有四个参数（顺时针），左上开始<br>圆圈：圆角=半径</p><h2 id="4-5、盒子阴影"><a href="#4-5、盒子阴影" class="headerlink" title="4.5、盒子阴影"></a>4.5、盒子阴影</h2><h1 id="5、浮动"><a href="#5、浮动" class="headerlink" title="5、浮动"></a>5、浮动</h1><h2 id="5-1标准文档流"><a href="#5-1标准文档流" class="headerlink" title="5.1标准文档流"></a>5.1标准文档流</h2><p><img src="/2021/07/07/css/20200507094752916.png"></p><p>块级元素：独占一行 h1~h6 、p、div、 列表…<br>行内元素：不独占一行 span、a、img、strong</p><blockquote><p>注： 行内元素可以包含在块级元素中，反之则不可以。</p></blockquote><h2 id="5-2、display（重要）"><a href="#5-2、display（重要）" class="headerlink" title="5.2、display（重要）"></a>5.2、display（重要）</h2><ol><li>block：块元素</li><li>inline：行内元素</li><li>inline-block：是块元素，但是可以内联，在一行</li></ol><blockquote><p>这也是一种实现行内元素排列的方式，但是我们很多情况用float</p></blockquote><ol><li>none：消失</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--block 块元素        inline 行内元素        inline-block 是块元素，但是可以内联 ，在一行    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">div</span><span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">span</span><span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid red<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>div块元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>span行内元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>QQ会员页面导航练习<br><img src="/2021/07/07/css/20200507102302375.png"></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>QQ会员<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css/style.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--头部--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nav-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>head-contain<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top-logo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/logo.png<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>145<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>90<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top-nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>功能特权<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>游戏特权<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>生活特权<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>会员特权<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>成长体系<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>年费专区<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>超级会员<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>开通超级会员<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>*&#123;    padding:0;    margin: 0;&#125;a&#123;    text-decoration: none;&#125;.nav-header&#123;    height: 90px;    width: 100%;    background: rgba(0,0,0,.6);&#125;.head-contain&#123;    width: 1180px;    height: 90px;    margin: 0 auto;    text-align: center;&#125;.top-logo,.top-nav,.top-nav li,.top-right&#123;    height: 90px;    display: inline-block;    vertical-align: top;&#125;.top-nav&#123;    margin: 0 48px;&#125;.top-nav li&#123;    line-height: 90px;    width: 90px;&#125;.top-nav li a&#123;    display: block;    text-align: center;    font-size: 16px;    color: #fff;&#125;.top-nav li a:hover&#123;    color: blue;&#125;.top-right a&#123;    display: inline-block;    font-size: 16px;    text-align: center;    margin-top: 25px;    border-radius: 35px;&#125;.top-right a:first-of-type&#123;    width: 93px;    height: 38px;    line-height: 38px;    color: #fad65c;    border: 1px #fad65c solid;&#125;.top-right a:first-of-type:hover&#123;    color: #986b0d;    background: #fad65c;&#125;.top-right a:last-of-type&#123;    width: 140px;    height: 40px;    font-weight: 700;    line-height: 40px;    background: #fad65c;    color: #986b0d;&#125;.top-right a:last-of-type:hover&#123;    background: #fddc6c;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-3、float：left-right左右浮动"><a href="#5-3、float：left-right左右浮动" class="headerlink" title="5.3、float：left/right左右浮动"></a>5.3、float：left/right左右浮动</h2><p>clear：both</p><h2 id="5-4、overflow及父级边框塌陷问题"><a href="#5-4、overflow及父级边框塌陷问题" class="headerlink" title="5.4、overflow及父级边框塌陷问题"></a>5.4、overflow及父级边框塌陷问题</h2><p>clear：<br>right：右侧不允许有浮动元素<br>left：左侧不允许有浮动元素<br>both：两侧不允许有浮动元素<br>none：</p><p>解决塌陷问题方案：<br>方案一：增加父级元素的高度；<br>方案二：增加一个空的div标签，清除浮动</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>clear<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.clear</span><span class="token punctuation">&#123;</span><span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方案三：在父级元素中增加一个overflow：hidden</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token comment">/*隐藏*/</span>overflow：scoll<span class="token comment">/*滚动*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>方案四：父类添加一个伪类:after</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#father:after</span><span class="token punctuation">&#123;</span><span class="token property">content</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span><span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小结：</p><ol><li>浮动元素增加空div—-》简单、代码尽量避免空div</li><li>设置父元素的高度—–》简单，元素假设没有了固定的高度，就会超出</li><li>overflow—-》简单，下拉的一些场景避免使用</li><li>父类添加一个伪类:after（推荐）—-》写法稍微复杂，但是没有副作用，<strong>推荐使用</strong></li></ol><h2 id="5-5、display与float对比"><a href="#5-5、display与float对比" class="headerlink" title="5.5、display与float对比"></a>5.5、display与float对比</h2><ol><li>display：方向不可以控制</li><li>float：浮动起来的话会脱离标准文档流，所以要解决父级边框塌陷的问题。</li></ol><h1 id="6、定位"><a href="#6、定位" class="headerlink" title="6、定位"></a>6、定位</h1><h2 id="6-1、相对定位"><a href="#6-1、相对定位" class="headerlink" title="6.1、相对定位"></a>6.1、相对定位</h2><p>相对定位：positon：relstive；<br>相对于原来的位置，进行指定的偏移，相对定位的话，它仍然在标准文档流中，原来的位置会被保留</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">top</span><span class="token punctuation">:</span>-20px<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span><span class="token property">bottom</span><span class="token punctuation">:</span>-10px<span class="token punctuation">;</span><span class="token property">right</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span>1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>练习题：连接卡</p><h2 id="6-2、绝对定位-absolute"><a href="#6-2、绝对定位-absolute" class="headerlink" title="6.2、绝对定位-absolute"></a>6.2、绝对定位-absolute</h2><p>定位：基于xxx定位，上下左右~<br>1、没有父级元素定位的前提下，相对于浏览器定位<br>2、假设父级元素存在定位，我们通常会相对于父级元素进行偏移<br>3、在父级元素范围内移动<br>总结：相对一父级或浏览器的位置，进行指定的偏移，绝对定位的话，它不在标准文档流中，原来的位置不会被保留</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">div</span><span class="token punctuation">&#123;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> 25px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#father</span><span class="token punctuation">&#123;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #666<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#first</span><span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #a13d30<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px dashed #b27530<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#second</span><span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px dashed #0ece4f<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span>30px<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span>30px        <span class="token punctuation">&#125;</span>        <span class="token selector">#third</span><span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px dashed #ff1b87<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>first<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>第一个盒子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>second<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>第二个盒子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>third<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>第三个盒子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-3、固定定位-fixed"><a href="#6-3、固定定位-fixed" class="headerlink" title="6.3、固定定位-fixed"></a>6.3、固定定位-fixed</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">body</span><span class="token punctuation">&#123;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 1000px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>         <span class="token selector">div:nth-of-type(1)</span><span class="token punctuation">&#123;</span><span class="token comment">/*绝对定位：没有相对的父级元素，所以相对于浏览器*/</span>             <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>             <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>             <span class="token property">background</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>             <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>             <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>             <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>        <span class="token selector">div:nth-of-type(2)</span><span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>div1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>div2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-4、z-index"><a href="#6-4、z-index" class="headerlink" title="6.4、z-index"></a>6.4、z-index</h2><p><img src="/2021/07/07/css/2020050618393791.png"><br>图层~<br>z-index：默认是0，最高无限~999</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css/style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>images/bg.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tipText<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>学习微服务，找狂神<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tipBg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>时间：2099-01=01<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>地点：月球一号基地<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>1234567891011121314151617181920#content&#123;    width: 380;    padding: 0px;    margin: 0px;    overflow: hidden;    font-size: 12px;    line-height: 25px;    border: 1px solid yellow;&#125;ul,li&#123;    padding: 0px;    margin: 0px;    list-style: none;&#125;/*父级元素相对定位*/#content ul&#123;    position: relative;&#125;.tipText,.tipBg&#123;    position: absolute;    width: 380px;    height: 25px;    top:216px&#125;.tipText&#123;    color: white;    z-index: 999;&#125;.tipBg&#123;    background: orange;    opacity: 0.5;/*背景透明度*/    filter: alpha(opacity=50);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="7、动画及视野拓展"><a href="#7、动画及视野拓展" class="headerlink" title="7、动画及视野拓展"></a>7、动画及视野拓展</h1>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue</title>
      <link href="/2021/07/07/vue/"/>
      <url>/2021/07/07/vue/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Vue笔记"><a href="#Vue笔记" class="headerlink" title="Vue笔记"></a>Vue笔记</h1><p> 想要成为真正的“互联网Java全栈工程师”还有很长的一段路要走，其中前端是绕不开的一门必修课。本阶段课程的主要目的就是带领Java后台程序员认识前端、了解前端、掌握前端，为实现成为“互联网Java全栈工程师”再向前迈进一步。</p><h2 id="一、前端核心分析"><a href="#一、前端核心分析" class="headerlink" title="一、前端核心分析"></a>一、前端核心分析</h2><h3 id="1-1、概述"><a href="#1-1、概述" class="headerlink" title="1.1、概述"></a>1.1、概述</h3><p>Soc原则：关注点分离原则</p><p>Vue 的核心库只关注视图层，方便与第三方库或既有项目整合。</p><p>HTML + CSS + JS : 视图 ： <code>给用户看，刷新后台给的数据</code></p><p>网络通信 ： axios</p><p>页面跳转 ： vue-router</p><p>状态管理：vuex</p><p>Vue-UI : ICE , Element UI</p><h3 id="1-2、前端三要素"><a href="#1-2、前端三要素" class="headerlink" title="1.2、前端三要素"></a>1.2、前端三要素</h3><ul><li>HTML（结构）：超文本标记语言（Hyper Text Markup Language），决定网页的结构和内容</li><li>CSS（表现）：层叠样式表（Cascading Style Sheets），设定网页的表现样式。</li><li>JavaScript（行为）：是一种弱类型脚本语言，其源码不需经过编译，而是由浏览器解释运行，用于控制网页的行为</li></ul><h3 id="1-3、结构层（HTML）"><a href="#1-3、结构层（HTML）" class="headerlink" title="1.3、结构层（HTML）"></a>1.3、<strong>结构层</strong>（HTML）</h3><p>太简单，略</p><h3 id="1-4、表现层（CSS）"><a href="#1-4、表现层（CSS）" class="headerlink" title="1.4、表现层（CSS）"></a>1.4、表现层（CSS）</h3><p>CSS层叠样式表是一门标记语言，并不是编程语言，因此不可以自定义变量，不可以引用等，换句话说就是不具备任何语法支持，它主要缺陷如下：</p><ul><li>语法不够强大，比如无法嵌套书写，导致模块化开发中需要书写很多重复的选择器；</li><li>没有变量和合理的样式复用机制，使得逻辑上相关的属性值必须以字面量的形式重复输出，导致难以维护；<br>这就导致了我们在工作中无端增加了许多工作量。为了解决这个问题，前端开发人员会使用一种称之为【CSS预处理器】的工具,提供CSS缺失的样式层复用机制、减少冗余代码，提高样式代码的可维护性。大大的提高了前端在样式上的开发效率。</li></ul><blockquote><p>什么是CSS预处理器</p></blockquote><p>CSS预处理器定义了一种新的语言，其基本思想是，用一种专门的编程语言，为CSS增加了一些编程的特性，将CSS作为目标生成文件，然后开发者就只需要使用这种语言进行CSS的编码工作。转化成通俗易懂的话来说就是“<strong>用一种专门的编程语言，进行Web页面样式设计，再通过编译器转化为正常的CSS文件，以供项目使用”</strong>。</p><p>常用的CSS预处理器有哪些</p><ul><li>SASS：基于Ruby ，通过服务端处理，功能强大。解析效率高。需要学习Ruby语言，上手难度高于LESS。</li><li>LESS：基于NodeJS，通过客户端处理，使用简单。功能比SASS简单，解析效率也低于SASS，但在实际开发中足够了，所以如果我们后台人员如果需要的话，建议使用LESS。</li></ul><h3 id="1-5、行为层（JavaScript）"><a href="#1-5、行为层（JavaScript）" class="headerlink" title="1.5、行为层（JavaScript）"></a>1.5、行为层（JavaScript）</h3><p>JavaScript一门弱类型脚本语言，其源代码在发往客户端运行之前不需要经过编译，而是将文本格式的字符代码发送给浏览器，由浏览器解释运行。</p><p><strong>Native 原生JS开发</strong></p><p>原生JS开发，也就是让我们按照【ECMAScript】标准的开发方式，简称ES，特点是所有浏览器都支持。截至到当前，ES标准以发布如下版本：</p><ul><li>ES3</li><li>ES4（内部，未正式发布）</li><li>ES5（全浏览器支持）</li><li>ES6（常用，当前主流版本：webpack打包成为ES5支持）</li><li>ES7</li><li>ES8</li><li>ES9（草案阶段）</li></ul><p>区别就是逐步增加新特性。<br><strong>TypeScript 微软的标准</strong><br>TypeScript是一种由微软开发的自由和开源的编程语言。它是JavaScript的一个超集， 而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。由安德斯·海尔斯伯格(C#、Delphi、TypeScript之父； .NET创立者) 主导。该语言的特点就是除了具备ES的特性之外还纳入了许多不在标准范围内的新特性，所以会导致很多浏览器不能直接支持TypeScript语法， 需要编译后(编译成JS) 才能被浏览器正确执行。</p><p><strong>JavaScript框架</strong></p><ul><li>JQuery：大家熟知的JavaScript库，优点就是简化了DOM操作，缺点就是DOM操作太频繁，影响前端性能；在前端眼里使用它仅仅是为了兼容IE6，7，8；</li><li>Angular：Google收购的前端框架，由一群Java程序员开发，其特点是将后台的MVC模式搬到了前端并增加了<strong>模块化开发</strong>的理念，与微软合作，采用了TypeScript语法开发；对后台程序员友好，对前端程序员不太友好；最大的缺点是版本迭代不合理（如1代–&gt;2 代，除了名字，基本就是两个东西；截止发表博客时已推出了Angular6）</li><li>React：Facebook 出品，一款高性能的JS前端框架；特点是提出了新概念 【虚拟DOM】用于减少真实 DOM 操作，在内存中模拟 DOM操作，有效的提升了前端渲染效率；缺点是使用复杂，因为需要额外学习一门【JSX】语言；</li><li>Vue：一款渐进式 JavaScript 框架，所谓渐进式就是逐步实现新特性的意思，如实现模块化开发、路由、状态管理等新特性。其特点是综合了 Angular（模块化）和React(虚拟 DOM) 的优点；</li><li>Axios：前端通信框架；因为 Vue 的边界很明确，就是为了处理 DOM，所以并不具备通信能力，此时就需要额外使用一个通信框架与服务器交互；当然也可以直接选择使用jQuery 提供的AJAX 通信功能；</li></ul><h2 id="二、前端发展史"><a href="#二、前端发展史" class="headerlink" title="二、前端发展史"></a>二、前端发展史</h2><h3 id="2-1、UI框架"><a href="#2-1、UI框架" class="headerlink" title="2.1、UI框架"></a>2.1、UI框架</h3><ul><li>Ant-Design：阿里巴巴出品，基于React的UI框架</li><li>ElementUI、iview、ice：饿了么出品，基于Vue的UI框架</li><li>BootStrap：Teitter推出的一个用于前端开发的开源工具包</li><li>AmazeUI：又叫“妹子UI”，一款HTML5跨屏前端框架</li></ul><h3 id="2-2、JavaScript构建工具"><a href="#2-2、JavaScript构建工具" class="headerlink" title="2.2、JavaScript构建工具"></a>2.2、JavaScript构建工具</h3><ul><li>Babel：JS编译工具，主要用于浏览器不支持的ES新特性，比如用于编译TypeScript</li><li>WebPack：模块打包器，主要作用就是打包、压缩、合并及按序加载</li></ul><p>注：以上知识点已将WebApp开发所需技能全部梳理完毕</p><h3 id="2-3、三端同一"><a href="#2-3、三端同一" class="headerlink" title="2.3、三端同一"></a>2.3、三端同一</h3><p><strong>混合开发</strong>（Hybrid App）</p><p>主要目的是实现一套代码三端统一（PC、Android：.apk、iOS：.ipa）并能够调用到设备底层硬件（如：传感器、GPS、摄像头等），打包方式主要有以下两种：</p><ul><li>云打包：HBuild -&gt; HBuildX，DCloud 出品；API Cloud</li><li>本地打包： Cordova（前身是 PhoneGap）</li></ul><p><strong>微信小程序</strong></p><p>详见微信官网，这里就是介绍一个方便微信小程序UI开发的框架：WeUI</p><h3 id="2-4、后端技术"><a href="#2-4、后端技术" class="headerlink" title="2.4、后端技术"></a>2.4、后端技术</h3><p>前端人员为了方便开发也需要掌握一定的后端技术但我们Java后台人员知道后台知识体系极其庞大复杂，所以为了方便前端人员开发后台应用，就出现了Node JS这样的技术。Node JS的作者已经声称放弃Node JS(说是架构做的不好再加上笨重的node modules，可能让作者不爽了吧)开始开发全新架构的De no<br>既然是后台技术，那肯定也需要框架和项目管理工具， Node JS框架及项目管理工具如下：</p><ul><li>Express：Node JS框架</li><li>Koa：Express简化版</li><li>NPM：项目综合管理工具，类似于Maven</li><li>YARN：NPM的替代方案，类似于Maven和Gradle的关系</li></ul><h3 id="2-5、主流前端框架"><a href="#2-5、主流前端框架" class="headerlink" title="2.5、主流前端框架"></a>2.5、主流前端框架</h3><p>Vue.js</p><p><strong>iView</strong></p><p>iview是一个强大的基于Vue的UI库， 有很多实用的基础组件比element ui的组件更丰富， 主要服务于PC界面的中后台产品。使用单文件的Vue组件化开发模式基于npm+webpack+babel开发， 支持ES 2015高质量、功能丰富友好的API， 自由灵活地使用空间。</p><ul><li>官网地址</li><li>Github</li><li>iview-admin</li></ul><p><strong>备注：属于前端主流框架，选型时可考虑使用，主要特点是移动端支持较多</strong></p><p><strong>Element UI</strong></p><p>Element是饿了么前端开源维护的Vue UI组件库， 组件齐全， 基本涵盖后台所需的所有组件，文档讲解详细， 例子也很丰富。主要用于开发PC端的页面， 是一个质量比较高的Vue UI组件库。<br>·官网地址<br>·Git hub<br>·vue-element-admin<br><strong>备注：属于前端主流框架，选型时可考虑使用，主要特点是桌面端支持较多</strong></p><p><strong>ICE</strong></p><p>飞冰是阿里巴巴团队基于React/Angular/Vue的中后台应用解决方案， 在阿里巴巴内部， 已经有270多个来自几乎所有BU的项目在使用。飞冰包含了一条从设计端到开发端的完整链路，帮助用户快速搭建属于自己的中后台应用。</p><ul><li>官网地址。</li><li>Git hub</li></ul><p><strong>备注：主要组件还是以React为主， 截止2019年02月17日更新博客前对Vue的支持还不太完善，目前尚处于观望阶段</strong></p><p>VantUI</p><p>Vant UI是有赞前端团队基于有赞统一的规范实现的Vue组件库， 提供了-整套UI基础组件和业务组件。通过Vant， 可以快速搭建出风格统一的页面，提升开发效率。</p><ul><li>官网地址</li><li>Github</li></ul><p><strong>AtUI</strong></p><p>at-ui是一款基于Vue 2.x的前端UI组件库， 主要用于快速开发PC网站产品。它提供了一套n pm+web pack+babel前端开发工作流程， CSS样式独立， 即使采用不同的框架实现都能保持统一的UI风格。<br>·官网地址<br>·Git hub</p><p><strong>Cube Ul</strong></p><p>cube-ui是滴滴团队开发的基于Vue js实现的精致移动端组件库。支持按需引入和后编译， 轻量灵活；扩展性强，可以方便地基于现有组件实现二次开发。</p><ul><li>官网地址</li><li>Github</li></ul><p><strong>混合开发</strong></p><p><strong>Flutter</strong></p><p>Flutter是谷歌的移动端UI框架， 可在极短的时间内构建Android和iOS上高质量的原生级应用。Flutter可与现有代码一起工作， 它被世界各地的开发者和组织使用， 并且Flutter是免费和开源的。</p><ul><li>官网地址</li><li>Github<br><strong>备注：Google出品， 主要特点是快速构建原生APP应用程序， 如做混合应用该框架为必选框架</strong></li></ul><p><strong>lonic</strong></p><p>lonic既是一个CSS框架也是一个Javascript UI库， lonic是目前最有潜力的一款HTML 5手机应用开发框架。通过SASS构建应用程序， 它提供了很多UI组件来帮助开发者开发强大的应用。它使用JavaScript MV VM框架和Angular JS/Vue来增强应用。提供数据的双向绑定， 使用它成为Web和移动开发者的共同选择。</p><ul><li>官网地址</li></ul><p>·官网文档<br>·Git hub</p><p><strong>微信小程序</strong></p><p><strong>mpvue</strong></p><p>mpvue是美团开发的一个使用<code>Vue.js</code>开发小程序的前端框架， 目前支持微信小程序、百度智能小程序，头条小程序和支付宝小程序。框架基于<code>Vue.js</code>， 修改了的运行时框架<code>runtime</code>和代码编译器<code>compiler</code>实现， 使其可运行在小程序环境中， 从而为小程序开发引入了<code>Vue.js</code>开发体验。<br>·官网地址<br>·Git hub<br><strong>备注：完备的Vue开发体验， 井且支持多平台的小程序开发， 推荐使用</strong></p><p><strong>WeUI</strong></p><p>WeUI是一套同微信原生视觉体验一致的基础样式库， 由微信官方设计团队为微信内网页和微信小程序量身设计， 令用户的使用感知更加统一。包含button、cell、dialog、toast、article、icon等各式元素。</p><ul><li>官网地址</li><li>Github</li></ul><h2 id="三、了解前后分离的演变史"><a href="#三、了解前后分离的演变史" class="headerlink" title="三、了解前后分离的演变史"></a>三、了解前后分离的演变史</h2><p>为什么需要前后分离</p><h3 id="3-1、后端为主的MVC时代"><a href="#3-1、后端为主的MVC时代" class="headerlink" title="3.1、后端为主的MVC时代"></a>3.1、后端为主的MVC时代</h3><p>为了降低开发的复杂度， 以后端为出发点， 比如：Struts、Spring MVC等框架的使用， 就是后端的MVC时代；<br>以<code>SpringMVC</code>流程为例：<br><img src="/2021/07/07/vue/20200612174447902.png"></p><ul><li>发起请求到前端控制器(<code>Dispatcher Servlet</code>)</li><li>前端控制器请求<code>HandlerMapping</code>查找<code>Handler</code>，可以根据<code>xml</code>配置、注解进行查找</li><li>处理器映射器<code>HandlerMapping</code>向前端控制器返回<code>Handler</code></li><li>前端控制器调用处理器适配器去执行<code>Handler</code></li><li>处理器适配器去执行<code>Handler</code></li><li><code>Handler</code>执行完成给适配器返回<code>ModelAndView</code></li><li>处理器适配器向前端控制器返回<code>ModelAndView</code>，<code>ModelAndView</code>是<code>SpringMvc</code>框架的一个底层对象，包括<code>Model</code>和<code>View</code></li><li>前端控制器请求视图解析器去进行视图解析，根据逻辑视图名解析成真正的视图(<code>JSP</code>)</li><li>视图解析器向前端控制器返回<code>View</code></li><li>前端控制器进行视图渲染，视图渲染将模型数据(在<code>ModelAndView</code>对象中)填充到<code>request</code>域</li><li>前端控制器向用户响应结果<br><strong>优点</strong><br>MVC是一个非常好的协作模式， 能够有效降低代码的耦合度从架构上能够让开发者明白代码应该写在哪里。为了让View更纯粹， 还可以使用Thyme leaf、Frree marker等模板引擎， 使模板里无法写入Java代码， 让前后端分工更加清晰。<br><strong>缺点</strong></li><li>前端开发重度依赖开发环境，开发效率低，这种架构下，前后端协作有两种模式：<ul><li>第一种是前端写DEMO， 写好后， 让后端去套模板。好处是DEMO可以本地开发， 很高效。不足是还需要后端套模板，有可能套错，套完后还需要前端确定，来回沟通调整的成本比较大；</li><li>另一种协作模式是前端负责浏览器端的所有开发和服务器端的View层模板开发。好处是UI相关的代码都是前端去写就好，后端不用太关注，不足就是前端开发重度绑定后端环境，环境成为影响前端开发效率的重要因素。</li></ul></li><li>前后端职责纠缠不清：模板引擎功能强大，依旧可以通过拿到的上下文变量来实现各种业务逻辑。这样，只要前端弱势一点，往往就会被后端要求在模板层写出不少业务代码，还有一个很大的灰色地带是Controller， 页面路由等功能本应该是前端最关注的， 但却是由后端来实现。Controller本身与Model往往也会纠缠不清，看了让人咬牙的业务代码经常会出现在Controller层。这些问题不能全归结于程序员的素养， 否则JSP就够了。</li><li>对前端发挥的局限性：性能优化如果只在前端做空间非常有限，于是我们经常需要后端合作，但由于后端框架限制，我们很难使用[Comet】、【Big Pipe】等技术方案来优化性能。<br><strong>注：在这期间(2005年以前) ， 包括早期的JSP、PHP可以称之为Web 1.0时代。在这里想说一句， 如果你是一名Java初学者， 请你不要再把一些陈旧的技术当回事了， 比如JSP， 因为时代在变、技术在变、什么都在变(引用扎克伯格的一句话：唯一不变的是变化本身)；当我们去给大学做实训时，有些同学会认为我们没有讲什么干货，其实不然，只能说是你认知里的干货对于市场来说早就过时了而已</strong></li></ul><h3 id="3-2、基于AJAX带来的SPA时代"><a href="#3-2、基于AJAX带来的SPA时代" class="headerlink" title="3.2、基于AJAX带来的SPA时代"></a>3.2、基于AJAX带来的SPA时代</h3><p>时间回到2005年A OAX(Asynchronous JavaScript And XML， 异步JavaScript和XML，老技术新用法)被正式提出并开始使用CDN作为静态资源存储， 于是出现了JavaScript王者归来(在这之前JS都是用来在网页上贴狗皮膏药广告的) 的SPA(Single Page Application) 单页面应用时代。<br><img src="/2021/07/07/vue/2020061218034279.png"><br><strong>优点</strong><br>这种模式下， <strong>前后端的分工非常清晰， 前后端的关键协作点是AJAX接口。</strong>看起来是如此美妙， 但回过头来看看的话， 这与JSP时代区别不大。复杂度从服务端的JSP里移到了浏览器的JavaScript，浏览器端变得很复杂。类似Spring MVC， <strong>这个时代开始出现浏览器端的分层架构</strong>：<br><img src="/2021/07/07/vue/20200612180725928.png"><br>缺点</p><ul><li><strong>前后端接口的约定</strong>：如果后端的接口一塌糊涂，如果后端的业务模型不够稳定，那么前端开发会很痛苦；不少团队也有类似尝试，通过接口规则、接口平台等方式来做。<strong>有了和后端一起沉淀的接口规则，还可以用来模拟数据，使得前后端可以在约定接口后实现高效并行开发。</strong></li><li>前端开发的复杂度控制：SPA应用大多以功能交互型为主，JavaScript代码过十万行很正常。大量JS代码的组织，与View层的绑定等，都不是容易的事情。</li></ul><h3 id="3-3、前端为主的MV-时代"><a href="#3-3、前端为主的MV-时代" class="headerlink" title="3.3、前端为主的MV*时代"></a>3.3、前端为主的MV*时代</h3><p>此处的MV*模式如下：</p><ul><li>MVC(同步通信为主) ：Model、View、Controller</li><li>MVP(异步通信为主) ：Model、View、Presenter</li><li>MVVM(异步通信为主)：Model、View、View Model为了降低前端开发复杂度，涌现了大量的前端框架，比如：<code>Angular JS</code>、<code>React</code>、<code>Vue.js</code>、<code>Ember JS</code>等， 这些框架总的原则是先按类型分层， 比如Templates、Controllers、Models， 然后再在层内做切分，如下图：</li></ul><p><img src="/2021/07/07/vue/20200612223107534.png"></p><p><strong>优点</strong></p><ul><li><strong>前后端职责很清晰</strong>：前端工作在浏览器端，后端工作在服务端。清晰的分工，可以让开发并行，测试数据的模拟不难， 前端可以本地开发。后端则可以专注于业务逻辑的处理， 输出RESTful等接口。</li><li><strong>前端开发的复杂度可控</strong>：前端代码很重，但合理的分层，让前端代码能各司其职。这一块蛮有意思的，简单如模板特性的选择，就有很多很多讲究。并非越强大越好，限制什么，留下哪些自由，代码应该如何组织，所有这一切设计，得花一本书的厚度去说明。</li><li><strong>部署相对独立</strong>：可以快速改进产品体验缺点</li><li>代码不能复用。比如后端依旧需要对数据做各种校验，校验逻辑无法复用浏览器端的代码。如果可以复用，那么后端的数据校验可以相对简单化。</li><li>全异步， 对SEO不利。往往还需要服务端做同步渲染的降级方案。</li><li>性能并非最佳，特别是移动互联网环境下。</li><li>SPA不能满足所有需求， 依旧存在大量多页面应用。URL Design需要后端配合， 前端无法完全掌控。</li></ul><h3 id="3-4、Node-JS带来的全栈时代"><a href="#3-4、Node-JS带来的全栈时代" class="headerlink" title="3.4、Node JS带来的全栈时代"></a>3.4、Node JS带来的全栈时代</h3><p>前端为主的MV*模式解决了很多很多问题， 但如上所述， 依旧存在不少不足之处。随着Node JS的兴起， JavaScript开始有能力运行在服务端。这意味着可以有一种新的研发模式：<br><img src="/2021/07/07/vue/20200612223913421.png"><br>在这种研发模式下，前后端的职责很清晰。对前端来说，两个UI层各司其职：</p><ul><li>Front-end Ul layer处理浏览器层的展现逻辑。通过CSS渲染样式， 通过JavaScript添加交互功能， HTML的生成也可以放在这层， 具体看应用场景。</li><li>Back-end Ul layer处理路由、模板、数据获取、Cookie等。通过路由， 前端终于可以自主把控URL Design， 这样无论是单页面应用还是多页面应用， 前端都可以自由调控。后端也终于可以摆脱对展现的强关注，转而可以专心于业务逻辑层的开发。<br>通过Node， WebServer层也是JavaScript代码， 这意味着部分代码可前后复用， 需要SEO的场景可以在服务端同步渲染，由于异步请求太多导致的性能问题也可以通过服务端来缓解。前一种模式的不足，通过这种模式几乎都能完美解决掉。<br>与JSP模式相比， 全栈模式看起来是一种回归， 也的确是一种向原始开发模式的回归， 不过是一种螺旋上升式的回归。<br>基于Node JS的全栈模式， 依旧面临很多挑战：</li><li>需要前端对服务端编程有更进一步的认识。比如TCP/IP等网络知识的掌握。</li><li>Node JS层与Java层的高效通信。Node JS模式下， 都在服务器端， RESTful HTTP通信未必高效， 通过SOAP等方式通信更高效。一切需要在验证中前行。</li><li>对部著、运维层面的熟练了解，需要更多知识点和实操经验。</li><li>大量历史遗留问题如何过渡。这可能是最大最大的阻力。<br><strong>注：看到这里，相信很多同学就可以理解，为什么我总在课堂上说：“前端想学后台很难，而我们后端程序员学任何东西都很简单”；就是因为我们后端程序员具备相对完善的知识体系。</strong><br>全栈!So Easy!</li></ul><h3 id="3-5、总结"><a href="#3-5、总结" class="headerlink" title="3.5、总结"></a>3.5、总结</h3><p>综上所述，模式也好，技术也罢，没有好坏优劣之分，只有适合不适合；前后分离的开发思想主要是基于<code>Soc</code>(关注度分离原则)，上面种种模式，都是让前后端的职责更清晰，分工更合理高效。</p><h2 id="四、第一个Vue程序"><a href="#四、第一个Vue程序" class="headerlink" title="四、第一个Vue程序"></a>四、第一个Vue程序</h2><h3 id="4-1、什么是MVVM"><a href="#4-1、什么是MVVM" class="headerlink" title="4.1、什么是MVVM"></a>4.1、什么是MVVM</h3><p>MVVM（Model-View-ViewModel）是一种软件设计模式，由微软WPF（用于替代WinForm，以前就是用这个技术开发桌面应用程序的）和Silverlight（类似于Java Applet，简单点说就是在浏览器上运行WPF）的架构师Ken Cooper和Ted Peters开发，是一种简化用户界面的<strong>事件驱动编程方式</strong>。由John Gossman（同样也是WPF和Sliverlight的架构师）与2005年在他的博客上发表。</p><p>MVVM源自于经典的MVC（Model-View-Controller）模式。MVVM的核心是ViewModel层，负责转换Model中的数据对象来让数据变得更容易管理和使用。其作用如下：</p><ul><li>该层向上与视图层进行双向数据绑定</li><li>向下与Model层通过接口请求进行数据交互</li></ul><p><img src="/2021/07/07/vue/20200615175823742.png"></p><p>MVVM已经相当成熟了，主要运用但不仅仅在网络应用程序开发中。当下流行的MVVM框架有<code>Vue.js</code>，<code>Anfular JS</code></p><h3 id="4-2、为什么要使用MVVM"><a href="#4-2、为什么要使用MVVM" class="headerlink" title="4.2、为什么要使用MVVM"></a>4.2、为什么要使用MVVM</h3><p>MVVM模式和MVC模式一样，主要目的是分离视图（View）和模型（Model），有几大好处</p><ul><li><strong>低耦合</strong>：视图（View）可以独立于Model变化和修改，一个ViewModel可以绑定到不同的View上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变。</li><li><strong>可复用</strong>：你可以把一些视图逻辑放在一个ViewModel里面，让很多View重用这段视图逻辑。</li><li><strong>独立开发</strong>：开发人员可以专注于业务逻辑和数据的开发（ViewMode），设计人员可以专注于页面设计。</li><li><strong>可测试</strong>：界面素来是比较难以测试的，而现在测试可以针对ViewModel来写。</li></ul><p><img src="/2021/07/07/vue/2020061517580183.png"></p><p><strong>（1）View</strong></p><p>View是视图层， 也就是用户界面。前端主要由HTH L和csS来构建， 为了更方便地展现vi eu to del或者Hodel层的数据， 已经产生了各种各样的前后端模板语言， 比如FreeMarker，Thyme leaf等等， 各大MV VM框架如Vue.js.Angular JS， EJS等也都有自己用来构建用户界面的内置模板语言。</p><p><strong>（2）Model</strong></p><p>Model是指数据模型， 泛指后端进行的各种业务逻辑处理和数据操控， 主要围绕数据库系统展开。这里的难点主要在于需要和前端约定统一的接口规则</p><p><strong>（3）ViewModel</strong></p><p>ViewModel是由前端开发人员组织生成和维护的视图数据层。在这一层， 前端开发者对从后端获取的Model数据进行转换处理， 做二次封装， 以生成符合View层使用预期的视图数据模型。<br>  需要注意的是View Model所封装出来的数据模型包括视图的状态和行为两部分， 而Model层的数据模型是只包含状态的</p><ul><li>比如页面的这一块展示什么，那一块展示什么这些都属于视图状态(展示)</li><li>页面加载进来时发生什么，点击这一块发生什么，这一块滚动时发生什么这些都属于视图行为(交互)</li></ul><p>视图状态和行为都封装在了View Model里。这样的封装使得View Model可以完整地去描述View层。由于实现了双向绑定， View Model的内容会实时展现在View层， 这是激动人心的， 因为前端开发者再也不必低效又麻烦地通过操纵DOM去更新视图。<br>  MVVM框架已经把最脏最累的一块做好了， 我们开发者只需要处理和维护View Model， 更新数据视图就会自动得到相应更新，真正实现<code>事件驱动编程</code>。<br>  View层展现的不是<code>Model</code>层的数据， 而是<code>ViewModel</code>的数据， 由<code>ViewModel</code>负责与<code>Model</code>层交互， 这就<strong>完全解耦了View层和Model层， 这个解耦是至关重要的， 它是前后端分离方案实施的重要一环。</strong></p><h3 id="4-3、Vue"><a href="#4-3、Vue" class="headerlink" title="4.3、Vue"></a>4.3、Vue</h3><p>Vue(读音/vju/， 类似于view) 是一套用于构建用户界面的渐进式框架， 发布于2014年2月。与其它大型框架不同的是， Vue被设计为可以自底向上逐层应用。Vue的核心库只关注视图层， 不仅易于上手， 还便于与第三方库(如：vue-router，vue-resource，vue x) 或既有项目整合。</p><p><strong>（1）MVVM模式的实现者</strong></p><ul><li>Model：模型层， 在这里表示JavaScript对象</li><li>View：视图层， 在这里表示DOM(HTML操作的元素)</li><li>ViewModel：连接视图和数据的中间件， Vue.js就是MVVM中的View Model层的实现者</li></ul><p>在MVVM架构中， 是不允许数据和视图直接通信的， 只能通过ViewModel来通信， 而View Model就是定义了一个Observer观察者</p><ul><li>ViewModel能够观察到数据的变化， 并对视图对应的内容进行更新</li><li>ViewModel能够监听到视图的变化， 并能够通知数据发生改变</li></ul><p>至此， 我们就明白了， Vue.js就是一个MV VM的实现者， 他的核心就是实现了DOM监听与数据绑定</p><p><strong>（2）为什么要使用Vue.js</strong></p><ul><li>轻量级， 体积小是一个重要指标。Vue.js压缩后有只有20多kb(Angular压缩后56kb+，React压缩后44kb+)</li><li>移动优先。更适合移动端， 比如移动端的Touch事件</li><li>易上手，学习曲线平稳，文档齐全</li><li>吸取了Angular(模块化) 和React(虚拟DOＭ) 的长处， 并拥有自己独特的功能，如：计算属性</li><li>开源，社区活跃度高</li></ul><h3 id="4-4、第一个Vue程序"><a href="#4-4、第一个Vue程序" class="headerlink" title="4.4、第一个Vue程序"></a>4.4、第一个Vue程序</h3><p>【说明】IDEA可以安装Vue的插件!<br>  注意：Vue不支持IE 8及以下版本， 因为Vue使用了IE 8无法模拟的ECMAScript 5特性。但它支持所有兼容ECMAScript 5的浏览器。</p><p><strong>（1）下载地址</strong></p><ul><li><p>开发版本</p><ul><li>包含完整的警告和调试模式：https：//yuejs.org/js/vue.js</li><li>删除了警告， 30.96KB min+gzip：https：//vuejs.org/js/vue.min.js</li></ul></li><li><p>CDN</p><ul><li><script src="https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.js"></script></li><li><script src="https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js"></script></li></ul></li></ul><p><strong>（2）代码编写</strong></p><p>Vue.js的核心是实现了MVVM模式， 她扮演的角色就是View Model层， 那么所谓的第一个应用程序就是展示她的数据绑定功能，操作流程如下：<br>  <strong>1、创建一个HTML文件</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2、引入Vue.js</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--1.导入Vue.js--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>3、创建一个Vue实例</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token comment">/*Model：数据*/</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">message</span><span class="token operator">:</span><span class="token string">"hello,vue!"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li><code>el: &#39;#vue&#39;</code>：绑定元素的ID</li><li><code>data:&#123;message:&#39;Hello Vue!&#39;&#125;</code>：数据对象中有一个名为message的属性，并设置了初始值 Hello Vue！</li></ul><p>4、将数据绑定到页面元素</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--view层，模板--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &#123;&#123;message&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>说明：只需要在绑定的元素中使用双花括号将Vue创建的名为message属性包裹起来， 即可实现数据绑定功能， 也就实现了View Model层所需的效果， 是不是和EL表达式非常像?</p><p><strong>（3）完整的HTML</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--view层，模板--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &#123;&#123;message&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--1.导入Vue.js--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token comment">/*Model：数据*/</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">message</span><span class="token operator">:</span><span class="token string">"hello,vue!"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>（4）测试</strong></p><p>为了能够更直观的体验Vue带来的数据绑定功能， 我们需要在浏览器测试一番， 操作流程如下：<br>  1、在浏览器上运行第一个Vue应用程序， 进入开发者工具<br>  2、在控制台输入vm.message=‘HelloWorld’， 然后回车， 你会发现浏览器中显示的内容会直接变成HelloWorld<br>  此时就可以在控制台直接输入vm.message来修改值， 中间是可以省略data的， 在这个操作中， 我并没有主动操作DOM， 就让页面的内容发生了变化， 这就是借助了Vue的数据绑定功能实现的； MV VM模式中要求View Model层就是使用观察者模式来实现数据的监听与绑定， 以做到数据与视图的快速响应。</p><h2 id="五、基础语法指令"><a href="#五、基础语法指令" class="headerlink" title="五、基础语法指令"></a>五、基础语法指令</h2><h3 id="4-1、v-bind"><a href="#4-1、v-bind" class="headerlink" title="4.1、v-bind"></a>4.1、v-bind</h3><p>我们已经成功创建了第一个Vue应用!看起来这跟渲染一个字符串模板非常类似， 但是Vue在背后做了大量工作。现在数据和DOM已经被建立了关联， 所有东西都是响应式的。我们在控制台操作对象属性，界面可以实时更新!<br>  我们还可以使用v-bind来绑定元素特性!<br>  <strong>上代码</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--view层，模板--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    鼠标悬停几秒钟查看此处动态绑定的提示信息！  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--1.导入Vue.js--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token comment">/*Model：数据*/</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'页面加载于 '</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你看到的v-bind等被称为指令。指令带有前缀v以表示它们是Vue提供的特殊特性。可能你已经猜到了， 它们会在渲染的DOM上应用特殊的响应式行为在这里，该指令的意思是：“将这个元素节点的title特性和Vue实例的message属性保持一致”。<br>  如果你再次打开浏览器的JavaScript控制台， 输入app， message=‘新消息’，就会再一次看到这个绑定了title特性的HTML已经进行了更新。</p><h3 id="4-2、v-if，-v-else"><a href="#4-2、v-if，-v-else" class="headerlink" title="4.2、v-if， v-else"></a>4.2、v-if， v-else</h3><p>什么是条件判断语句，就不需要我说明了吧，以下两个属性!</p><ul><li><code>v-if</code></li><li><code>v-else</code></li></ul><p><strong>上代码</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--view层，模板--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ok<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Yes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>No<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--1.导入Vue.js--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token comment">/*Model：数据*/</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：<br>1.在浏览器上运行，打开控制台!<br>2.在控制台输入<code>vm.ok=false</code>然后回车，你会发现浏览器中显示的内容会直接变成NO<br>  注：使用<code>v-*</code>属性绑定数据是不需要<code>双花括号</code>包裹的</p><p><strong>v-else-if</strong></p><ul><li>v-if</li><li>v-else-if</li><li>v-else<br>注：<code>===</code>三个等号在JS中表示绝对等于(就是数据与类型都要相等)上代码：</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--view层，模板--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>type==='A'<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>type==='B'<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>type==='D'<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>D<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--1.导入Vue.js--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token comment">/*Model：数据*/</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'A'</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3、v-for"><a href="#4-3、v-for" class="headerlink" title="4.3、v-for"></a>4.3、v-for</h3><ul><li>v-for</li></ul><p>格式说明</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item,index) in items<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        &#123;&#123;item.message&#125;&#125;---&#123;&#123;index&#125;&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：<code>items</code>是数组，<code>item</code>是数组元素迭代的别名。我们之后学习的Thymeleaf模板引擎的语法和这个十分的相似！<br>  上代码：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--view层，模板--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item,index) in items<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        &#123;&#123;item.message&#125;&#125;---&#123;&#123;index&#125;&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--1.导入Vue.js--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token comment">/*Model：数据*/</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">items</span><span class="token operator">:</span><span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span><span class="token literal-property property">message</span><span class="token operator">:</span><span class="token string">'狂神说Java'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token literal-property property">message</span><span class="token operator">:</span><span class="token string">'狂神说前端'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span><span class="token literal-property property">message</span><span class="token operator">:</span><span class="token string">'狂神说运维'</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：在控制台输入<code>vm.items.push(&#123;message：&#39;狂神说运维&#39;&#125;)</code>，尝试追加一条数据，你会发现浏览器中显示的内容会增加一条<code>狂神说运维</code>.</p><h3 id="4-4、v-on"><a href="#4-4、v-on" class="headerlink" title="4.4、v-on"></a>4.4、v-on</h3><p><code>v-on</code>监听事件<br> emsp;事件有Vue的事件、和前端页面本身的一些事件!我们这里的<code>click</code>是vue的事件， 可以绑定到Vue中的<code>methods</code>中的方法事件!<br>  <strong>上代码</strong>：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>v-on</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sayHi<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">message</span><span class="token operator">:</span><span class="token string">'Hello World'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token function-variable function">sayHi</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//'this'在方法里面指向当前Vue实例</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>点击测试</strong><br>  Vue还有一些基本的使用方式， 大家有需要的可以再跟着官方文档看看， 因为这些基本的指令几乎我们都见过了，一通百通!掌握学习的方式!</p><h2 id="六、表单双绑、组件"><a href="#六、表单双绑、组件" class="headerlink" title="六、表单双绑、组件"></a>六、表单双绑、组件</h2><h3 id="6-1、什么是双向数据绑定"><a href="#6-1、什么是双向数据绑定" class="headerlink" title="6.1、什么是双向数据绑定"></a>6.1、什么是双向数据绑定</h3><p>Vue.js是一个MV VM框架， 即数据双向绑定， 即当数据发生变化的时候， 视图也就发生变化， 当视图发生变化的时候，数据也会跟着同步变化。这也算是Vue.js的精髓之处了。<br>  值得注意的是，我们所说的数据双向绑定，一定是对于UI控件来说的非UI控件不会涉及到数据双向绑定。单向数据绑定是使用状态管理工具的前提。如果我们使用vue x那么数据流也是单项的，这时就会和双向数据绑定有冲突。</p><p><strong>（1）为什么要实现数据的双向绑定</strong></p><p>在<code>Vue.js</code>中，如果使用<code>vuex</code>， 实际上数据还是单向的， 之所以说是数据双向绑定，这是用的UI控件来说， 对于我们处理表单， <code>Vue.js</code>的双向数据绑定用起来就特别舒服了。即两者并不互斥，在全局性数据流使用单项，方便跟踪；局部性数据流使用双向，简单易操作。</p><h3 id="6-2、在表单中使用双向数据绑定"><a href="#6-2、在表单中使用双向数据绑定" class="headerlink" title="6.2、在表单中使用双向数据绑定"></a>6.2、在表单中使用双向数据绑定</h3><p>你可以用<code>v-model</code>指令在表单、及元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇， 但<code>v-model</code>本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。<br>  注意：<code>v-model</code>会忽略所有表单元素的<code>value</code>、<code>checked</code>、<code>selected</code>特性的初始值而总是将<code>Vue</code>实例的数据作为数据来源。你应该通过<code>JavaScript</code>在组件的<code>data</code>选项中声明初始值!</p><h4 id="（1）单行文本"><a href="#（1）单行文本" class="headerlink" title="（1）单行文本"></a><strong>（1）单行文本</strong></h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    输入的文本：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;message&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">message</span><span class="token operator">:</span><span class="token string">""</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（2）多行文本"><a href="#（2）多行文本" class="headerlink" title="（2）多行文本"></a><strong>（2）多行文本</strong></h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   多行文本：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pan<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>多行文本是：&#123;&#123;pan&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">message</span><span class="token operator">:</span><span class="token string">"Hello hello!"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（3）单复选框"><a href="#（3）单复选框" class="headerlink" title="（3）单复选框"></a><strong>（3）单复选框</strong></h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    单复选框：    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checked<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;checked&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">checked</span><span class="token operator">:</span><span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（4）多复选框"><a href="#（4）多复选框" class="headerlink" title="（4）多复选框"></a>（<strong>4</strong>）<strong>多复选框</strong></h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    多复选框：    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jack<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Jack<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkedNames<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jack<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Jack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>join<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Join<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkedNames<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>join<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Jack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mike<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Mike<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkedNames<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mike<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Mike<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>选中的值：&#123;&#123;checkedNames&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">checkedNames</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（6）单选按钮"><a href="#（6）单选按钮" class="headerlink" title="（6）单选按钮"></a><strong>（6）单选按钮</strong></h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    单选框按钮    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>One<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>picked<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>One<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Two<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>picked<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Two<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>选中的值：&#123;&#123;picked&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">picked</span><span class="token operator">:</span><span class="token string">'Two'</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="（7）下拉框"><a href="#（7）下拉框" class="headerlink" title="（7）下拉框"></a><strong>（7）下拉框</strong></h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--    性别：    &lt;input type="radio" name="sex" value="男" v-model="pan">男    &lt;input type="radio" name="sex" value="女" v-model="pan">女    &lt;p>选中了：&#123;&#123;pan&#125;&#125;&lt;/p>--></span>    下拉框:    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pan<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">disabled</span><span class="token punctuation">></span></span>---请选择---<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>D<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>value:&#123;&#123;pan&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">pan</span><span class="token operator">:</span><span class="token string">"A"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：<code>v-model</code>表达式的初始值未能匹配任何选项，元系将被渲染为“未选中”状态。 在iOS中， 这会使用户无法选择第一个选项，因为这样的情况下，iOS不会触发<code>change</code>事件。因此，更推荐像上面这样提供一个值为空的禁用选项。</p><h3 id="6-3、什么是组件"><a href="#6-3、什么是组件" class="headerlink" title="6.3、什么是组件"></a>6.3、什么是组件</h3><p>组件是可复用的<code>Vue</code>实例， 说白了就是一组可以重复使用的模板， 跟<code>JSTL</code>的自定义标签、<code>Thymeleal</code>的<code>th:fragment</code>等框架有着异曲同工之妙，通常一个应用会以一棵嵌套的组件树的形式来组织：<br><img src="/2021/07/07/vue/20200616171528707.png"><br><img src="/2021/07/07/vue/20200616171908189.png"></p><p>例如，你可能会有页头、侧边栏、内容区等组件，每个组件又包含了其它的像导航链接、博文之类的组件。</p><h4 id="（1）第一个Vue组件"><a href="#（1）第一个Vue组件" class="headerlink" title="（1）第一个Vue组件"></a><strong>（1）第一个Vue组件</strong></h4><p>注意：在实际开发中，我们并不会用以下方式开发组件，而是采用<code>vue-cli</code>创建，<code>vue</code>模板文件的方式开发，以下方法只是为了让大家理解什么是组件。<br>  <strong>使用<code>Vue.component()</code>方法注册组件，格式如下：</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pan</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pan</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">//先注册组件</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"pan"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">'&lt;li>Hello&lt;/li>'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//再实例化Vue</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ul><li><code>Vue.component()</code>：注册组件</li><li><code>pan</code>：自定义组件的名字</li><li><code>template</code>：组件的模板</li></ul><h4 id="（2）使用props属性传递参数"><a href="#（2）使用props属性传递参数" class="headerlink" title="（2）使用props属性传递参数"></a><strong>（2）使用<code>props</code>属性传递参数</strong></h4><p>像上面那样用组件没有任何意义，所以我们是需要传递参数到组件的，此时就需要使用<code>props</code>属性了！<br>  <strong>注意：默认规则下props属性里的值不能为大写；</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--组件：传递给组件中的值：props--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pan</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in items<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>panh</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pan</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">//定义组件</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"pan"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'panh'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">'&lt;li>&#123;&#123;panh&#125;&#125;&lt;/li>'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">items</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"java"</span><span class="token punctuation">,</span><span class="token string">"Linux"</span><span class="token punctuation">,</span><span class="token string">"前端"</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>说明</strong>：</p><ul><li><code>v-for=&quot;item in items&quot;</code>：遍历<code>Vue</code>实例中定义的名为<code>items</code>的数组，并创建同等数量的组件</li><li><code>v-bind:panh=&quot;item&quot;</code>：将遍历的<code>item</code>项绑定到组件中<code>props</code>定义名为<code>item</code>属性上；= 号左边的<code>panh</code>为<code>props</code>定义的属性名，右边的为<code>item in items</code> 中遍历的item项的值</li></ul><h2 id="七、Axios异步通信"><a href="#七、Axios异步通信" class="headerlink" title="七、Axios异步通信"></a>七、Axios异步通信</h2><h3 id="7-1、什么是Axios"><a href="#7-1、什么是Axios" class="headerlink" title="7.1、什么是Axios"></a>7.1、什么是Axios</h3><p>Axios是一个开源的可以用在浏览器端和<code>Node JS</code>的异步通信框架， 她的主要作用就是实现AJAX异步通信，其功能特点如下：</p><ul><li>从浏览器中创建<code>XMLHttpRequests</code></li><li>从node.js创建http请求</li><li>支持Promise API[JS中链式编程]</li><li>拦截请求和响应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换JSON数据</li><li>客户端支持防御XSRF(跨站请求伪造)</li></ul><p>GitHub：<a href="https://github.com/axios/axios">https://github.com/axios/axios</a><br>  中文文档：<a href="http://www.axios-js.com/">http://www.axios-js.com/</a></p><h3 id="7-2、为什么要使用Axios"><a href="#7-2、为什么要使用Axios" class="headerlink" title="7.2、为什么要使用Axios"></a>7.2、为什么要使用Axios</h3><p>由于<code>Vue.js</code>是一个视图层框架并且作者(尤雨溪) 严格准守SoC(关注度分离原则)所以<code>Vue.js</code>并不包含AJAX的通信功能， 为了解决通信问题， 作者单独开发了一个名为<code>vue-resource</code>的插件， 不过在进入2.0版本以后停止了对该插件的维护并推荐了<code>Axios</code>框架。少用jQuery， 因为它操作Dom太频繁!</p><h3 id="7-3、第一个Axios应用程序"><a href="#7-3、第一个Axios应用程序" class="headerlink" title="7.3、第一个Axios应用程序"></a>7.3、第一个Axios应用程序</h3><p>咱们开发的接口大部分都是采用JSON格式， 可以先在项目里模拟一段JSON数据， 数据内容如下：创建一个名为data.json的文件并填入上面的内容， 放在项目的根目录下</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;  &quot;name&quot;: &quot;狂神说Java&quot;,  &quot;url&quot;: &quot;https:&#x2F;&#x2F;blog.kuangstudy.com&quot;,  &quot;page&quot;: 1,  &quot;isNonProfit&quot;: true,  &quot;address&quot;: &#123;    &quot;street&quot;: &quot;含光门&quot;,    &quot;city&quot;: &quot;陕西西安&quot;,    &quot;country&quot;: &quot;中国&quot;  &#125;,  &quot;links&quot;: [    &#123;      &quot;name&quot;: &quot;bilibili&quot;,      &quot;url&quot;: &quot;https:&#x2F;&#x2F;space.bilibili.com&#x2F;95256449&quot;    &#125;,    &#123;      &quot;name&quot;: &quot;狂神说Java&quot;,      &quot;url&quot;: &quot;https:&#x2F;&#x2F;blog.kuangstudy.com&quot;    &#125;,    &#123;      &quot;name&quot;: &quot;百度&quot;,      &quot;url&quot;: &quot;https:&#x2F;&#x2F;www.baidu.com&#x2F;&quot;    &#125;  ]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试代码</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>v-binf</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xhtml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--v-cloak 解决闪烁问题--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">[v-cloak]</span><span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>地名：&#123;&#123;info.name&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>地址：&#123;&#123;info.address.country&#125;&#125;--&#123;&#123;info.address.city&#125;&#125;--&#123;&#123;info.address.street&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>链接：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-binf:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info.url<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123;info.url&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--引入js文件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/axios/dist/axios.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#vue"</span><span class="token punctuation">,</span>        <span class="token comment">//data：属性：vm</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">info</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>                    <span class="token literal-property property">address</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>                        <span class="token literal-property property">country</span><span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>                        <span class="token literal-property property">city</span><span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>                        <span class="token literal-property property">street</span><span class="token operator">:</span><span class="token keyword">null</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                    <span class="token literal-property property">url</span><span class="token operator">:</span><span class="token keyword">null</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//钩子函数</span>            axios                <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'data.json'</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token operator">=></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>info<span class="token operator">=</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ol><li>在这里使用了v-bind将a:href的属性值与Vue实例中的数据进行绑定</li><li>使用axios框架的get方法请求AJAX并自动将数据封装进了Vue实例的数据对象中</li><li>我们在data中的数据结构必须和<code>Ajax</code>响应回来的数据格式匹配！</li></ol><h4 id="7-4、Vue的生命周期"><a href="#7-4、Vue的生命周期" class="headerlink" title="7.4、Vue的生命周期"></a>7.4、Vue的生命周期</h4><p>官方文档：<a href="https://cn.vuejs.org/v2/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA">https://cn.vuejs.org/v2/guide/instance.html#生命周期图示</a><br>  Vue实例有一个完整的生命周期，也就是从开始创建初女台化数据、编译模板、挂载DOM、渲染一更新一渲染、卸载等一系列过程，我们称这是Vue的生命周期。通俗说就是Vue实例从创建到销毁的过程，就是生命周期。<br>  在Vue的整个生命周期中，它提供了一系列的事件，可以让我们在事件触发时注册JS方法，可以让我们用自己注册的JS方法控制整个大局，在这些事件响应方法中的this直接指向的是Vue的实例。<br><img src="/2021/07/07/vue/20200616222020393.png"></p><h2 id="八、计算属性、内容分发、自定义事件"><a href="#八、计算属性、内容分发、自定义事件" class="headerlink" title="八、计算属性、内容分发、自定义事件"></a>八、计算属性、内容分发、自定义事件</h2><h3 id="1、什么是计算属性"><a href="#1、什么是计算属性" class="headerlink" title="1、什么是计算属性"></a>1、什么是计算属性</h3><p>计算属性的重点突出在<code>属性</code>两个字上(属性是名词)，首先它是个<code>属性</code>其次这个属性有<code>计算</code>的能力(计算是动词)，这里的<code>计算</code>就是个函数：简单点说，它就是一个能够将计算结果缓存起来的属性(将行为转化成了静态的属性)，仅此而已；可以想象为缓存!<br>  <strong>上代码</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--view层，模板--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>currentTime1:&#123;&#123;currentTime1()&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>currentTime2:&#123;&#123;currentTime2&#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--1.导入Vue.js--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>          <span class="token literal-property property">message</span><span class="token operator">:</span><span class="token string">"pan"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token function-variable function">currentTime1</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回一个时间戳</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token function-variable function">currentTime2</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//计算属性：methods，computed方法名不能重名，重名之后，只会调用methods的方法</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">;</span>                <span class="token keyword">return</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回一个时间戳</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：methods和computed里的东西不能重名<br>说明：</p><ul><li><p>methods：定义方法， 调用方法使用currentTime1()， 需要带括号</p></li><li><p>computed：定义计算属性， 调用属性使用currentTime2， 不需要带括号：this.message是为了能够让currentTime2观察到数据变化而变化</p></li><li><p>如何在方法中的值发生了变化，则缓存就会刷新!可以在控制台使用<code>vm.message=”q in jiang&quot;</code>， 改变下数据的值，再次测试观察效果!</p><p><strong>结论：</strong><br>  调用方法时，每次都需要讲行计算，既然有计算过程则必定产生系统开销，那如果这个结果是不经常变化的呢?此时就可以考虑将这个结果缓存起来，采用计算属性可以很方便的做到这点，<strong>计算属性的主要特性就是为了将不经常变化的计算结果进行缓存，以节约我们的系统开销；</strong></p></li></ul><h3 id="8-2、内容分发"><a href="#8-2、内容分发" class="headerlink" title="8.2、内容分发"></a>8.2、内容分发</h3><p>在<code>Vue.js</code>中我们使用``元素作为承载分发内容的出口，作者称其为插槽，可以应用在组合组件的场景中；</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>比如准备制作一个待办事项组件(todo) ， 该组件由待办标题(todo-title) 和待办内容(todo-items)组成，但这三个组件又是相互独立的，该如何操作呢?<br>  <strong>第一步定义一个待办事项的组件</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--1.导入Vue.js--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'todo'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">'&lt;div>\                &lt;div>代办事项&lt;/div>\                &lt;ul>\                    &lt;li>学习狂神说Java&lt;/li>\                &lt;/ul>\            &lt;/div>'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第二步 我们需要让，代办事项的标题和值实现动态绑定，怎么做呢？我们可以留一个插槽！</strong><br>  1-将上面的代码留出一个插槽，即slot</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">Vue.component('todo',&#123;       template:'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>\               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>\                   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo-items<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>\               <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>\           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>'   &#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2-定义一个名为todo-title的待办标题组件 和 todo-items的待办内容组件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'todo-title'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">'&lt;div>&#123;&#123;title&#125;&#125;&lt;/div>'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//这里的index，就是数组的下标，使用for循环遍历的时候，可以循环出来！</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"todo-items"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"item"</span><span class="token punctuation">,</span><span class="token string">"index"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">"&lt;li>&#123;&#123;index+1&#125;&#125;,&#123;&#123;item&#125;&#125;&lt;/li>"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3-实例化Vue并初始化数据</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#vue"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">todoItems</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'test1'</span><span class="token punctuation">,</span><span class="token string">'test2'</span><span class="token punctuation">,</span><span class="token string">'test3'</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4-将这些值，通过插槽插入</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-title</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo-title<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>秦老师系列课程<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-title</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--&lt;todo-items slot="todo-items" v-for="&#123;item,index&#125; in todoItems" v-bind:item="item">&lt;/todo-items>--></span>        <span class="token comment">&lt;!--如下为简写--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-items</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo-items<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in todoItems<span class="token punctuation">"</span></span> <span class="token attr-name">:item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&lt;/todo-items    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：我们的todo-title和todo-items组件分别被分发到了todo组件的todo-title和todo-items插槽中<br>  完整代码如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--view层，模板--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-title</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo-title<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-title</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--&lt;todo-items slot="todo-items" v-for="&#123;item,index&#125; in todoItems" v-bind:item="item">&lt;/todo-items>--></span>        <span class="token comment">&lt;!--如下为简写--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-items</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo-items<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in todoItems<span class="token punctuation">"</span></span> <span class="token attr-name">:item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&lt;/todo-items    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--1.导入Vue.js--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'todo'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">'&lt;div>\                &lt;slot name="todo-title">&lt;/slot>\                &lt;ul>\                    &lt;slot name="todo-items">&lt;/slot>\                &lt;/ul>\            &lt;/div>'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'todo-title'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">'&lt;div>&#123;&#123;title&#125;&#125;&lt;/div>'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//这里的index，就是数组的下标，使用for循环遍历的时候，可以循环出来！</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"todo-items"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"item"</span><span class="token punctuation">,</span><span class="token string">"index"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">"&lt;li>&#123;&#123;index+1&#125;&#125;,&#123;&#123;item&#125;&#125;&lt;/li>"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#vue"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">title</span><span class="token operator">:</span><span class="token string">"秦老师系列课程"</span><span class="token punctuation">,</span>            <span class="token literal-property property">todoItems</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'test1'</span><span class="token punctuation">,</span><span class="token string">'test2'</span><span class="token punctuation">,</span><span class="token string">'test3'</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-3、自定义事件"><a href="#8-3、自定义事件" class="headerlink" title="8.3、自定义事件"></a>8.3、自定义事件</h3><p>通以上代码不难发现，数据项在Vue的实例中， 但删除操作要在组件中完成， 那么组件如何才能删除Vue实例中的数据呢?此时就涉及到参数传递与事件分发了， Vue为我们提供了自定义事件的功能很好的帮助我们解决了这个问题； 使用this.$emit(‘自定义事件名’， 参数) ， 操作过程如下：<br>  1-在vue的实例中增加了methods对象并定义了一个名为removeTodoltems的方法</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">var vm = new Vue(&#123;        el:"#vue",        data:&#123;            title_text:"秦老师系列课程",            todoItems:['test1','test2','test3']        &#125;,        methods:&#123;            removeItems:function(index)&#123;                console.log("删除了"+this.todoItems[index]+"OK");                //splice（） 方法向/从数组中添加/删除项目，然后返回被删除的项目，其中index                this.todoItems.splice(index,1);            &#125;        &#125;    &#125;);1234567891011121314<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2-修改todo-items待办内容组件的代码，增加一个删除按钮，并且绑定事件！</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"> Vue.component("todo-items",&#123;        props:["item_p","index_p"],        template:"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&#123;&#123;index_p+1&#125;&#125;,&#123;&#123;item_p&#125;&#125; <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>remove<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>",        methods:&#123;            remove:function (index) &#123;            //这里的remove是自定义事件名称，需要在HTML中使用v-on:remove的方式                //this.$emit 自定义事件分发                this.$emit('remove',index);            &#125;        &#125;    &#125;);1234567891011<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3-修改todo-items待办内容组件的HTML代码，增加一个自定义事件，比如叫remove，可以和组件的方法绑定，然后绑定到vue的方法！</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--增加了v-on:remove="removeTodoItems(index)"自定义事件，该组件会调用Vue实例中定义的--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-items</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo-items<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item,index) in todoItems<span class="token punctuation">"</span></span>                    <span class="token attr-name">:item_p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">:index_p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>remove</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>removeItems(index)<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-items</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>对上一个代码进行修改，实现删除功能</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--view层，模板--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-title</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo-title<span class="token punctuation">"</span></span> <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title_text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-title</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--&lt;todo-items slot="todo-items" v-for="(item,index) in todoItems" v-bind:item="item">&lt;/todo-items>--></span>        <span class="token comment">&lt;!--如下为简写--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-items</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todo-items<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item,index) in todoItems<span class="token punctuation">"</span></span>                    <span class="token attr-name">:item_p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">:index_p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>remove</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>removeItems(index)<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-items</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--1.导入Vue.js--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'todo'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">'&lt;div>\                &lt;slot name="todo-title">&lt;/slot>\                &lt;ul>\                    &lt;slot name="todo-items">&lt;/slot>\                &lt;/ul>\            &lt;/div>'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'todo-title'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">'&lt;div>&#123;&#123;title&#125;&#125;&lt;/div>'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//这里的index，就是数组的下标，使用for循环遍历的时候，可以循环出来！</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"todo-items"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"item_p"</span><span class="token punctuation">,</span><span class="token string">"index_p"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">"&lt;li>&#123;&#123;index_p+1&#125;&#125;,&#123;&#123;item_p&#125;&#125; &lt;button @click='remove_methods'>删除&lt;/button>&lt;/li>"</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token function-variable function">remove_methods</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//this.$emit 自定义事件分发</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'remove'</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#vue"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">title_text</span><span class="token operator">:</span><span class="token string">"秦老师系列课程"</span><span class="token punctuation">,</span>            <span class="token literal-property property">todoItems</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'test1'</span><span class="token punctuation">,</span><span class="token string">'test2'</span><span class="token punctuation">,</span><span class="token string">'test3'</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token function-variable function">removeItems</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"删除了"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>todoItems<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>todoItems<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="逻辑理解"><a href="#逻辑理解" class="headerlink" title="逻辑理解"></a>逻辑理解</h4><p><img src="/2021/07/07/vue/20200618181139418.png"></p><h3 id="8-4、Vue入门小结"><a href="#8-4、Vue入门小结" class="headerlink" title="8.4、Vue入门小结"></a>8.4、Vue入门小结</h3><p>核心：数据驱动，组件化</p><p>优点：借鉴了AngularJS的模块化开发和React的虚拟Dom，虚拟Dom就是把Demo操作放到内存中执行；</p><p>常用的属性：</p><ul><li>v-if</li><li>v-else-if</li><li>v-else</li><li>v-for</li><li>v-on绑定事件，简写@</li><li>v-model数据双向绑定</li><li>v-bind给组件绑定参数，简写：</li></ul><p>组件化：</p><ul><li>组合组件slot插槽</li><li>组件内部绑定事件需要使用到<code>this.$emit(&quot;事件名&quot;,参数);</code></li><li>计算属性的特色，缓存计算数据</li></ul><p>遵循SoC关注度分离原则，Vue是纯粹的视图框架，并不包含，比如Ajax之类的通信功能，为了解决通信问题，我们需要使用Axios框架做异步通信；</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>Vue的开发都是要基于NodeJS，实际开发采用Vue-cli脚手架开发，vue-router路由，vuex做状态管理；Vue UI，界面我们一般使用ElementUI（饿了么出品），或者ICE（阿里巴巴出品）来快速搭建前端项目~~</p><p>官网：</p><ul><li><a href="https://element.eleme.cn/#/zh-CN">https://element.eleme.cn/#/zh-CN</a></li><li><a href="https://ice.work/">https://ice.work/</a></li></ul><h2 id="九、第一个vue-cli项目"><a href="#九、第一个vue-cli项目" class="headerlink" title="九、第一个vue-cli项目"></a>九、第一个vue-cli项目</h2><h3 id="9-1、什么是vue-cli"><a href="#9-1、什么是vue-cli" class="headerlink" title="9.1、什么是vue-cli"></a>9.1、什么是vue-cli</h3><p>vue-cli官方提供的一个脚手架，用于快速生成一个vue的项目模板；<br>  预先定义好的目录结构及基础代码，就好比咱们在创建Maven项目时可以选择创建一个骨架项目，这个估计项目就是脚手架，我们的开发更加的快速；<br>  <strong>项目的功能</strong></p><ul><li>统一的目录结构</li><li>本地调试</li><li>热部署</li><li>单元测试</li><li>集成打包上线</li></ul><h3 id="9-2、需要的环境"><a href="#9-2、需要的环境" class="headerlink" title="9.2、需要的环境"></a>9.2、需要的环境</h3><ul><li>Node.js：<a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a><br>安装就是无脑的下一步就好，安装在自己的环境目录下</li><li>Git：<a href="https://git-scm.com/doenloads">https://git-scm.com/doenloads</a><br>镜像：<a href="https://npm.taobao.org/mirrors/git-for-windows/">https://npm.taobao.org/mirrors/git-for-windows/</a></li></ul><p><strong>确认nodejs安装成功：</strong></p><ul><li>cmd下输入<code>node -v</code>，查看是否能够正确打印出版本号即可！</li><li>cmd下输入<code>npm -v</code>，查看是否能够正确打印出版本号即可！<br>这个npm，就是一个软件包管理工具，就和linux下的apt软件安装差不多！<br>  <strong>安装Node.js淘宝镜像加速器（cnpm）</strong><br>  这样的话，下载会快很多~</li></ul><pre class="line-numbers language-none"><code class="language-none"># -g 就是全局安装npm install cnpm -g# 或使用如下语句解决npm速度慢的问题npm install --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org12345<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装的过程可能有点慢~，耐心等待！虽然安装了cnpm，但是尽量少用！<br>  安装的位置：<code>C:\Users\administrator\AppData\Roaming\npm</code></p><p><img src="/2021/07/07/vue/20200619110151865.jpg"><br>  <strong>安装vue-cli</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">cnpm instal1 vue-cli-g#测试是否安装成功#查看可以基于哪些模板创建vue应用程序，通常我们选择webpackvue list123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/vue/20200619111125386.jpg"></p><h3 id="9-3、第一个vue-cli应用程序"><a href="#9-3、第一个vue-cli应用程序" class="headerlink" title="9.3、第一个vue-cli应用程序"></a>9.3、第一个vue-cli应用程序</h3><p>1.创建一个Vue项目，我们随便建立一个空的文件夹在电脑上，我这里在D盘下新建一个目录</p><pre class="line-numbers language-none"><code class="language-none">D:\Project\vue-study;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.创建一个基于webpack模板的vue应用程序</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">#1、首先需要进入到对应的目录 cd D:\Project\vue-study#2、这里的myvue是顶日名称，可以根据自己的需求起名vue init webpack myvue123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>一路都选择no即可；<br>  <strong>说明：</strong></p><ul><li>Project name：项目名称，默认回车即可</li><li>Project description：项目描述，默认回车即可</li><li>Author：项目作者，默认回车即可</li><li>Install vue-router：是否安装vue-router，选择n不安装（后期需要再手动添加）</li><li>Use ESLint to lint your code:是否使用ESLint做代码检查，选择n不安装（后期需要再手动添加)</li><li>Set up unit tests:单元测试相关，选择n不安装（后期需要再手动添加）</li><li>Setupe2etests with Nightwatch：单元测试相关，选择n不安装（后期需要再手动添加）</li><li>Should we run npm install for you after the,project has been created:创建完成后直接初始化，选择n，我们手动执行；运行结果！</li></ul><p><strong>（1）初始化并运行</strong></p><pre class="line-numbers language-none"><code class="language-none">cd myvuenpm installnpm run dev123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>执行完成后，目录多了很多依赖</p><p>当出现问题时，可以查看提示进行处理如下<br><img src="/2021/07/07/vue/20200619113101422.jpg"></p><h2 id="十、webpack使用"><a href="#十、webpack使用" class="headerlink" title="十、webpack使用"></a>十、webpack使用</h2><h3 id="10-1、什么是Webpack"><a href="#10-1、什么是Webpack" class="headerlink" title="10.1、什么是Webpack"></a>10.1、什么是Webpack</h3><p>本质上， webpack是一个现代JavaScript应用程序的静态模块打包器(module bundler) 。当webpack处理应用程序时， 它会递归地构建一个依赖关系图(dependency graph) ， 其中包含应用程序需要的每个模块， 然后将所有这些模块打包成一个或多个bundle.<br>  Webpack是当下最热门的前端资源模块化管理和打包工具， 它可以将许多松散耦合的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分离，等到实际需要时再异步加载。通过loader转换， 任何形式的资源都可以当做模块， 比如Commons JS、AMD、ES 6、CSS、JSON、Coffee Script、LESS等；<br>  伴随着移动互联网的大潮， 当今越来越多的网站已经从网页模式进化到了WebApp模式。它们运行在现代浏览器里， 使用HTML 5、CSS 3、ES 6等新的技术来开发丰富的功能， 网页已经不仅仅是完成浏览器的基本需求； WebApp通常是一个SPA(单页面应用) ， 每一个视图通过异步的方式加载，这导致页面初始化和使用过程中会加载越来越多的JS代码，这给前端的开发流程和资源组织带来了巨大挑战。<br>  前端开发和其他开发工作的主要区别，首先是前端基于多语言、多层次的编码和组织工作，其次前端产品的交付是基于浏览器的，这些资源是通过增量加载的方式运行到浏览器端，如何在开发环境组织好这些碎片化的代码和资源，并且保证他们在浏览器端快速、优雅的加载和更新，就需要一个模块化系统，这个理想中的模块化系统是前端工程师多年来一直探索的难题。</p><h3 id="10-2、模块化的演进"><a href="#10-2、模块化的演进" class="headerlink" title="10.2、模块化的演进"></a>10.2、模块化的演进</h3><h4 id="Script标签"><a href="#Script标签" class="headerlink" title="Script标签"></a>Script标签</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>module1.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>module2.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>module3.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这是最原始的JavaScript文件加载方式，如果把每一个文件看做是一个模块，那么他们的接口通常是暴露在全局作用域下，也就是定义在window对象中，不同模块的调用都是一个作用域。<br>  这种原始的加载方式暴露了一些显而易见的弊端：</p><ul><li>全局作用域下容易造成变量冲突</li><li>文件只能按照``的书写顺序进行加载</li><li>开发人员必须主观解决模块和代码库的依赖关系</li><li>在大型项目中各种资源难以管理，长期积累的问题导致代码库混乱不堪</li></ul><h4 id="CommonsJS"><a href="#CommonsJS" class="headerlink" title="CommonsJS"></a><strong>CommonsJS</strong></h4><hr><p>服务器端的NodeJS遵循CommonsJS规范，该规范核心思想是允许模块通过require方法来同步加载所需依赖的其它模块，然后通过exports或module.exports来导出需要暴露的接口。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"module"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"../module.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span><span class="token punctuation">.</span><span class="token function-variable function">doStuff</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> someValue<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优点：</strong></p><ul><li>服务器端模块便于重用</li><li>NPM中已经有超过45万个可以使用的模块包</li><li>简单易用</li></ul><p><strong>缺点：</strong></p><ul><li>同步的模块加载方式不适合在浏览器环境中，同步意味着阻塞加载，浏览器资源是异步加载的</li><li>不能非阻塞的并行加载多个模块</li></ul><p><strong>实现：</strong></p><ul><li>服务端的NodeJS</li><li>•Browserify，浏览器端的CommonsJS实现，可以使用NPM的模块，但是编译打包后的文件体积较大</li><li>modules-webmake，类似Browserify，但不如Browserify灵活</li><li>wreq，Browserify的前身</li></ul><h4 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a><strong>AMD</strong></h4><hr><p>Asynchronous Module Definition规范其实主要一个主要接口define(id?,dependencies?,factory);它要在声明模块的时候指定所有的依赖dependencies，并且还要当做形参传到factory中，对于依赖的模块提前执行。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"module"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"dep1"</span><span class="token punctuation">,</span><span class="token string">"dep2"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">functian</span><span class="token punctuation">(</span><span class="token parameter">d1<span class="token punctuation">,</span>d2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> someExportedValue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>require（<span class="token punctuation">[</span><span class="token string">"module"</span><span class="token punctuation">,</span><span class="token string">"../file.js"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">module，file</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优点</strong></p><ul><li>适合在浏览器环境中异步加载模块</li><li>可以并行加载多个模块</li></ul><p><strong>缺点</strong></p><ul><li>提高了开发成本，代码的阅读和书写比较困难，模块定义方式的语义不畅</li><li>不符合通用的模块化思维方式，是一种妥协的实现</li></ul><p>实现</p><ul><li>RequireJS</li><li>curl</li></ul><h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a><strong>CMD</strong></h4><hr><p>Commons Module Definition规范和AMD很相似，尽保持简单，并与CommonsJS和NodeJS的Modules规范保持了很大的兼容性。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span>exports<span class="token punctuation">,</span>module</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> $<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"jquery"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> Spinning <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./spinning"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>doSomething <span class="token operator">=</span> <span class="token operator">...</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token operator">...</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优点：</strong></p><ul><li>依赖就近，延迟执行</li><li>可以很容易在NodeJS中运行缺点</li><li>依赖SPM打包，模块的加载逻辑偏重</li></ul><p><strong>实现</strong></p><ul><li>Sea.js</li><li>coolie</li></ul><p>ES6模块</p><hr><p>EcmaScript 6标准增加了JavaScript语言层面的模块体系定义。ES 6模块的设计思想， 是尽量静态化， 使编译时就能确定模块的依赖关系， 以及输入和输出的变量。Commons JS和AMD模块，都只能在运行时确定这些东西。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">"jquery"</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>module <span class="token string">"localModule"</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优点</strong></p><ul><li>容易进行静态分析</li><li>面向未来的Ecma Script标准</li></ul><p><strong>缺点</strong></p><ul><li>原生浏览器端还没有实现该标准</li><li>全新的命令，新版的Node JS才支持</li></ul><p><strong>实现</strong></p><ul><li>Babel</li></ul><p><strong>大家期望的模块</strong><br>  系统可以兼容多种模块风格， 尽量可以利用已有的代码， 不仅仅只是JavaScript模块化， 还有CSS、图片、字体等资源也需要模块化。</p><h3 id="10-3、安装Webpack"><a href="#10-3、安装Webpack" class="headerlink" title="10.3、安装Webpack"></a>10.3、安装Webpack</h3><p>WebPack是一款模块加载器兼打包工具， 它能把各种资源， 如JS、JSX、ES 6、SASS、LESS、图片等都作为模块来处理和使用。<br>  <strong>安装：</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm install webpack <span class="token operator">-</span>gnpm install webpack<span class="token operator">-</span>cli <span class="token operator">-</span>g<span class="token number">12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>测试安装成功</p><ul><li><code>webpack -v</code></li><li><code>webpack-cli -v</code></li></ul><p><img src="/2021/07/07/vue/20200619215458179.png"></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>创建 <code>webpack.config.js</code>配置文件</p><ul><li>entry：入口文件， 指定Web Pack用哪个文件作为项目的入口</li><li>output：输出， 指定WebPack把处理完成的文件放置到指定路径</li><li>module：模块， 用于处理各种类型的文件</li><li>plugins：插件， 如：热更新、代码重用等</li><li>resolve：设置路径指向</li><li>watch：监听， 用于设置文件改动后直接打包</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">entry</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token literal-property property">output</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token literal-property property">filename</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">module</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">loaders</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token literal-property property">test</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token punctuation">;</span>\loade<span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">plugins</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">resolve</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">watch</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接运行<code>webpack</code>命令打包</p><h3 id="10-4、使用webpack"><a href="#10-4、使用webpack" class="headerlink" title="10.4、使用webpack"></a>10.4、使用webpack</h3><ol><li>创建项目</li><li>创建一个名为modules的目录，用于放置JS模块等资源文件</li><li>在modules下创建模块文件，如hello.js，用于编写JS模块相关代码</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//暴露一个方法：sayHi</span>exports<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;div>Hello Webpack&lt;/div>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>在modules下创建一个名为main.js的入口文件，用于打包时设置entry属性</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//require 导入一个模块，就可以调用这个模块中的方法了</span><span class="token keyword">var</span> hello <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hello<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>在项目目录下创建webpack.config.js配置文件，使用webpack命令打包</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">entry</span><span class="token operator">:</span><span class="token string">"./modules/main.js"</span><span class="token punctuation">,</span><span class="token literal-property property">output</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">filename</span><span class="token operator">:</span><span class="token string">"./js/bundle.js"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>在项目目录下创建HTML页面，如index.html，导入webpack打包后的JS文件</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>狂神说Java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dist/js/bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>在IDEA控制台中直接执行webpack；如果失败的话，就使用管理员权限运行即可！</li><li>运行HTML看效果</li></ol><p><strong>说明</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 参数--watch 用于监听变化webpack --watch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="十一、vue-router路由"><a href="#十一、vue-router路由" class="headerlink" title="十一、vue-router路由"></a>十一、vue-router路由</h2><h3 id="11-1、说明"><a href="#11-1、说明" class="headerlink" title="11.1、说明"></a>11.1、说明</h3><hr><p>学习的时候，尽量的打开官方的文档</p><p>Vue Router是Vue.js官方的路由管理器。它和Vue.js的核心深度集成， 让构建单页面应用变得易如反掌。包含的功能有：</p><ul><li>嵌套的路由/视图表</li><li>模块化的、基于组件的路由配置</li><li>路由参数、查询、通配符</li><li>基于Vue js过渡系统的视图过渡效果</li><li>细粒度的导航控制</li><li>带有自动激活的CSS class的链接</li><li>HTML5 历史模式或hash模式， 在IE 9中自动降级</li><li>自定义的滚动行为</li></ul><h3 id="11-2、安装"><a href="#11-2、安装" class="headerlink" title="11.2、安装"></a>11.2、安装</h3><p><strong>基于第一个<code>vue-cli</code>进行测试学习； 先查看node modules中是否存在vue-router</strong><br>  vue-router是一个插件包， 所以我们还是需要用n pm/cn pm来进行安装的。打开命令行工具，进入你的项目目录，输入下面命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npm install vue-router --save-dev1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果在一个模块化工程中使用它，必须要通过Vue.use()明确地安装路由功能：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">import Vue from &#39;vue&#39;import VueRouter from &#39;vue-router&#39;Vue.use(VueRouter);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-3、测试"><a href="#11-3、测试" class="headerlink" title="11.3、测试"></a>11.3、测试</h3><p>1、先删除没有用的东西<br>2、<code>components</code> 目录下存放我们自己编写的组件<br>3、定义一个<code>Content.vue</code> 的组件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>内容页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"Content"</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>1234567891011<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Main.vue</code>组件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"Main"</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、安装路由，在src目录下，新建一个文件夹：<code>router</code>，专门存放路由，配置路由index.js，如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span><span class="token string">'vue'</span><span class="token comment">//导入路由插件</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token comment">//导入上面定义的组件</span><span class="token keyword">import</span> Content <span class="token keyword">from</span> <span class="token string">'../components/Content'</span><span class="token keyword">import</span> Main <span class="token keyword">from</span> <span class="token string">'../components/Main'</span><span class="token comment">//安装路由</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment">//配置路由</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">routes</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token comment">//路由路径</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/content'</span><span class="token punctuation">,</span><span class="token comment">//路由名称</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'content'</span><span class="token punctuation">,</span><span class="token comment">//跳转到组件</span><span class="token literal-property property">component</span><span class="token operator">:</span>Content<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token comment">//路由路径</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/main'</span><span class="token punctuation">,</span><span class="token comment">//路由名称</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'main'</span><span class="token punctuation">,</span><span class="token comment">//跳转到组件</span><span class="token literal-property property">component</span><span class="token operator">:</span>Main<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、在<code>main.js</code>中配置路由</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token comment">//导入上面创建的路由配置目录</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token comment">//自动扫描里面的路由配置</span><span class="token comment">//来关闭生产模式下给出的提示</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span><span class="token comment">//配置路由</span>router<span class="token punctuation">,</span><span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>App<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">'&lt;App/>'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、在<code>App.vue</code>中使用路由</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--router-link：默认会被渲染成一个&lt;a>标签，to属性为指定链接router-view：用于渲染路由匹配到的组件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'App'</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十二、实战快速上手"><a href="#十二、实战快速上手" class="headerlink" title="十二、实战快速上手"></a>十二、实战快速上手</h2><p>我们采用实战教学模式并结合ElementUI组件库，将所需知识点应用到实际中，以最快速度带领大家掌握Vue的使用；</p><h3 id="12-1、创建工程"><a href="#12-1、创建工程" class="headerlink" title="12.1、创建工程"></a>12.1、创建工程</h3><p>注意：命令行都要使用管理员模式运行<br>1、创建一个名为hello-vue的工程<code>vue init webpack hello-vue</code><br>2、安装依赖， 我们需要安装vue-router、element-ui、sass-loader和node-sass四个插件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#进入工程目录cd hello-vue#安装vue-routern npm install vue-router --save-dev#安装element-uinpm i element-ui -S#安装依赖npm install# 安装SASS加载器cnpm install sass-loader node-sass --save-dev#启功测试npm run dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、Npm命令解释：</p><ul><li><code>npm install moduleName</code>：安装模块到项目目录下</li><li><code>npm install -g moduleName</code>：-g的意思是将模块安装到全局，具体安装到磁盘哪个位置要看npm config prefix的位置</li><li><code>npm install -save moduleName</code>：–save的意思是将模块安装到项目目录下， 并在package文件的dependencies节点写入依赖，-S为该命令的缩写</li><li><code>npm install -save-dev moduleName</code>:–save-dev的意思是将模块安装到项目目录下，并在package文件的devDependencies节点写入依赖，-D为该命令的缩写</li></ul><h3 id="12-2、创建登录页面"><a href="#12-2、创建登录页面" class="headerlink" title="12.2、创建登录页面"></a>12.2、创建登录页面</h3><p>把没有用的初始化东西删掉！<br>  在源码目录中创建如下结构：</p><ul><li>assets：用于存放资源文件</li><li>components：用于存放Vue功能组件</li><li>views：用于存放Vue视图组件</li><li>router：用于存放vue-router配置</li></ul><p><img src="/2021/07/07/vue/20200619234826107.png"></p><p><strong>创建首页视图，在views目录下创建一个名为Main.vue的视图组件：</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"Main"</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建登录页视图在views目录下创建名为Login.vue的视图组件，其中el-*的元素为ElementUI组件；</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loginForm<span class="token punctuation">"</span></span> <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span> <span class="token attr-name">:rules</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rules<span class="token punctuation">"</span></span> <span class="token attr-name">label-width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80px<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>login-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>login-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>欢迎登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>账号<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入账号<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form.username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>密码<span class="token punctuation">"</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入密码<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form.password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onsubmit('loginForm')<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dialog</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>温馨提示<span class="token punctuation">"</span></span> <span class="token attr-name">:visible.sync</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dialogVisiable<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30%<span class="token punctuation">"</span></span> <span class="token attr-name">:before-close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleClose<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>请输入账号和密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dialog-footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dialogVisible = false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>确定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dialog</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Login"</span><span class="token punctuation">,</span>      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">return</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">form</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>              <span class="token literal-property property">username</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span>              <span class="token literal-property property">password</span><span class="token operator">:</span><span class="token string">''</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">//表单验证，需要在 el-form-item 元素中增加prop属性</span>            <span class="token literal-property property">rules</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>              <span class="token literal-property property">username</span><span class="token operator">:</span><span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span><span class="token literal-property property">required</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token literal-property property">message</span><span class="token operator">:</span><span class="token string">"账号不可为空"</span><span class="token punctuation">,</span><span class="token literal-property property">trigger</span><span class="token operator">:</span><span class="token string">"blur"</span><span class="token punctuation">&#125;</span>              <span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token literal-property property">password</span><span class="token operator">:</span><span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span><span class="token literal-property property">required</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token literal-property property">message</span><span class="token operator">:</span><span class="token string">"密码不可为空"</span><span class="token punctuation">,</span><span class="token literal-property property">tigger</span><span class="token operator">:</span><span class="token string">"blur"</span><span class="token punctuation">&#125;</span>              <span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">//对话框显示和隐藏</span>            <span class="token literal-property property">dialogVisible</span><span class="token operator">:</span><span class="token boolean">false</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>          <span class="token function">onSubmit</span><span class="token punctuation">(</span><span class="token parameter">formName</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//为表单绑定验证功能</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">[</span>formName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">valid</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>valid<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//使用vue-router路由到指定界面，该方式称为编程式导航</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/main'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>dialogVisible<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.login-box</span><span class="token punctuation">&#123;</span>    <span class="token property">border</span><span class="token punctuation">:</span>1px solid #DCDFE6<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 350px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span>180px auto<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 35px 35px 15px 35px<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>    <span class="token property">-webkit-border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>    <span class="token property">-moz-border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>    <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 25px #909399<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.login-title</span><span class="token punctuation">&#123;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto 40px auto<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #303133<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建路由，在router目录下创建一个名为<code>index.js</code>的vue-router路由配置文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//导入vue</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token punctuation">;</span><span class="token comment">//导入组件</span><span class="token keyword">import</span> Main <span class="token keyword">from</span> <span class="token string">"../views/Main"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Login <span class="token keyword">from</span> <span class="token string">"../views/Login"</span><span class="token punctuation">;</span><span class="token comment">//使用</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//导出</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token comment">//登录页</span>      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/main'</span><span class="token punctuation">,</span>      <span class="token literal-property property">component</span><span class="token operator">:</span> Main    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//首页</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span>      <span class="token literal-property property">component</span><span class="token operator">:</span> Login    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>APP.vue</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">#app</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'Avenir'</span><span class="token punctuation">,</span> Helvetica<span class="token punctuation">,</span> Arial<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>  <span class="token property">-webkit-font-smoothing</span><span class="token punctuation">:</span> antialiased<span class="token punctuation">;</span>  <span class="token property">-moz-osx-font-smoothing</span><span class="token punctuation">:</span> grayscale<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #2c3e50<span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// The Vue build version to load with the `import` command</span><span class="token comment">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">"./router"</span><span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token keyword">import</span> <span class="token string">'element-ui/lib/theme-chalk/index.css'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span><span class="token comment">/* eslint-disable no-new */</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  router<span class="token punctuation">,</span>  <span class="token function-variable function">render</span><span class="token operator">:</span><span class="token parameter">h</span><span class="token operator">=></span><span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试：在浏览器打开 <a href="http://localhost:8080/#/login">http://localhost:8080/#/login</a><br>如果出现错误: 可能是因为sass-loader的版本过高导致的编译错误，当前最高版本是8.0.2，需要退回到7.3.1 ；<br>去package.json文件里面的 “sass-loader”的版本更换成7.3.1，然后重新cnpm install就可以了；</p><h3 id="12-3、路由嵌套"><a href="#12-3、路由嵌套" class="headerlink" title="12.3、路由嵌套"></a>12.3、路由嵌套</h3><p>嵌套路由又称子路由，在实际应用中，通常由多层嵌套的组件组合而成。<br>demo<br>1、 创建用户信息组件，在 views/user 目录下创建一个名为 Profile.vue 的视图组件；<br>Profile.vue</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>个人信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"UserProfile"</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、在用户列表组件在 views/user 目录下创建一个名为 List.vue 的视图组件；<br>List.vue</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>用户列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"UserList"</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、 修改首页视图，我们修改 Main.vue 视图组件，此处使用了 ElementUI 布局容器组件，代码如下：<br>Main.vue</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-container</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-aside</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu</span> <span class="token attr-name">:default-openeds</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>['1']<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-submenu</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon-caret-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>用户管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item-group</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!--插入的地方--></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/user/profile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>个人信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!--插入的地方--></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/user/list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item-group</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-submenu</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-submenu</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon-caret-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>内容管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item-group</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>分类管理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>内容列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item-group</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-submenu</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-aside</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-container</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-header</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">text-align</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 12px</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dropdown</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon-setting<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">margin-right</span><span class="token punctuation">:</span> 15px</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dropdown-menu</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dropdown<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dropdown-item</span><span class="token punctuation">></span></span>个人信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dropdown-item</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dropdown-item</span><span class="token punctuation">></span></span>退出登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dropdown-item</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dropdown-menu</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dropdown</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-header</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-main</span><span class="token punctuation">></span></span>          <span class="token comment">&lt;!--在这里展示视图--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-main</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-container</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-container</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Main"</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scss<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">  <span class="token selector">.el-header</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #B3C0D1<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token selector">.el-aside</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、 配置嵌套路由修改 router 目录下的 index.js 路由配置文件，使用children放入main中写入子模块，代码如下<br>index.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//导入vue</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token punctuation">;</span><span class="token comment">//导入组件</span><span class="token keyword">import</span> Main <span class="token keyword">from</span> <span class="token string">"../views/Main"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Login <span class="token keyword">from</span> <span class="token string">"../views/Login"</span><span class="token punctuation">;</span><span class="token comment">//导入子模块</span><span class="token keyword">import</span> UserList <span class="token keyword">from</span> <span class="token string">"../views/user/List"</span><span class="token punctuation">;</span><span class="token keyword">import</span> UserProfile <span class="token keyword">from</span> <span class="token string">"../views/user/Profile"</span><span class="token punctuation">;</span><span class="token comment">//使用</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//导出</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token comment">//登录页</span>      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/main'</span><span class="token punctuation">,</span>      <span class="token literal-property property">component</span><span class="token operator">:</span> Main<span class="token punctuation">,</span>      <span class="token comment">//  写入子模块</span>      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/user/profile'</span><span class="token punctuation">,</span>          <span class="token literal-property property">component</span><span class="token operator">:</span> UserProfile<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/user/list'</span><span class="token punctuation">,</span>          <span class="token literal-property property">component</span><span class="token operator">:</span> UserList<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">//首页</span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span>      <span class="token literal-property property">component</span><span class="token operator">:</span> Login    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、 路由嵌套实战效果图<br><img src="/2021/07/07/vue/2020062413282631.png"></p><p>图 路由嵌套效果图</p><h3 id="12-4、参数传递"><a href="#12-4、参数传递" class="headerlink" title="12.4、参数传递"></a>12.4、参数传递</h3><p>这里演示如果请求带有参数该怎么传递<br>demo<br> 用的还是上述例子的代码 修改一些代码 这里不放重复的代码了<br>第一种取值方式<br>1、 修改路由配置, 主要是router下的index.js中的 path 属性中增加了 :id 这样的占位符</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span><span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/user/profile/:id'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'UserProfile'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> UserProfile<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、传递参数<br> 此时我们在Main.vue中的route-link位置处 to 改为了 :to，是为了将这一属性当成对象使用，注意 router-link 中的 name 属性名称 一定要和 路由中的 name 属性名称 匹配，因为这样 Vue 才能找到对应的路由路径；</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--name是组件的名字 params是传的参数 如果要传参数的话就需要用v:bind:来绑定--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;name:'UserProfile',params:&#123;id:1&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>个人信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3、在要展示的组件Profile.vue中接收参数 使用 来接收<br>Profile.vue 部分代码</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--  所有的元素必须在根节点下--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>个人信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    &#123;&#123;$route.params.id&#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种取值方式 使用props 减少耦合<br>1、修改路由配置 , 主要在router下的index.js中的路由属性中增加了 props: true 属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span><span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/user/profile/:id'</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'UserProfile'</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> UserProfile<span class="token punctuation">,</span> <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、传递参数和之前一样 在Main.vue中修改route-link地址</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--name是组件的名字 params是传的参数 如果要传参数的话就需要用v:bind:来绑定--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;name:'UserProfile',params:&#123;id:1&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>个人信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3、在Profile.vue接收参数为目标组件增加 props 属性<br>Profile.vue</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    个人信息    &#123;&#123; id &#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"UserProfile"</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/vue/20200624140100715.png"></p><p>图 传参效果图</p><h3 id="12-5、组件重定向"><a href="#12-5、组件重定向" class="headerlink" title="12.5、组件重定向"></a>12.5、组件重定向</h3><p>重定向的意思大家都明白，但 Vue 中的重定向是作用在路径不同但组件相同的情况下，比如：<br>在router下面index.js的配置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>  <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/main'</span><span class="token punctuation">,</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Main'</span><span class="token punctuation">,</span>  <span class="token literal-property property">component</span><span class="token operator">:</span> Main<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/goHome'</span><span class="token punctuation">,</span>  <span class="token literal-property property">redirect</span><span class="token operator">:</span> <span class="token string">'/main'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：这里定义了两个路径，一个是 /main ，一个是 /goHome，其中 /goHome 重定向到了 /main 路径，由此可以看出重定向不需要定义组件；</p><p>使用的话，只需要在Main.vue设置对应路径即可；</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-menu-item</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/goHome<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>回到首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-menu-item</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="12-6、路由模式与-404"><a href="#12-6、路由模式与-404" class="headerlink" title="12.6、路由模式与 404"></a>12.6、路由模式与 404</h3><p>路由模式有两种</p><ul><li>hash：路径带 # 符号，如 <a href="http://localhost/#/login">http://localhost/#/login</a></li><li>history：路径不带 # 符号，如 <a href="http://localhost/login">http://localhost/login</a></li></ul><p>修改路由配置，代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'history'</span><span class="token punctuation">,</span>  <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>404 demo<br>1.创建一个NotFound.vue视图组件<br>NotFound.vue</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>404,你的页面走丢了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"NotFound"</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.修改路由配置index.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> NotFound <span class="token keyword">from</span> <span class="token string">'../views/NotFound'</span><span class="token punctuation">&#123;</span>   <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'*'</span><span class="token punctuation">,</span>   <span class="token literal-property property">component</span><span class="token operator">:</span> NotFound<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.效果图<br><img src="/2021/07/07/vue/20200624142229445.png"></p><p>图 404效果图</p><p><strong>路由钩子与异步请求</strong></p><p>beforeRouteEnter：在进入路由前执行<br>beforeRouteLeave：在离开路由前执行</p><p>在Profile.vue中写</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"UserProfile"</span><span class="token punctuation">,</span>  <span class="token function-variable function">beforeRouteEnter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"准备进入个人信息页"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">beforeRouteLeave</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"准备离开个人信息页"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数说明：<br>to：路由将要跳转的路径信息<br>from：路径跳转前的路径信息<br>next：路由的控制参数<br>next() 跳入下一个页面<br>next(’/path’) 改变路由的跳转方向，使其跳到另一个路由<br>next(false) 返回原来的页面<br>next((vm)=&gt;{}) 仅在 beforeRouteEnter 中可用，vm 是组件实例</p><p><strong>在钩子函数中使用异步请求</strong></p><p>1、安装 Axios</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">cnpm install --save vue-axios<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、main.js引用 Axios</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">import</span> VueAxios <span class="token keyword">from</span> <span class="token string">'vue-axios'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueAxios<span class="token punctuation">,</span> axios<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3、准备数据 ： 只有我们的 static 目录下的文件是可以被访问到的，所以我们就把静态文件放入该目录下。<br>数据和之前用的json数据一样 需要的去上述axios例子里</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 静态数据存放的位置static&#x2F;mock&#x2F;data.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4.在 beforeRouteEnter 中进行异步请求<br>Profile.vue</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//第二种取值方式</span>  <span class="token comment">// props:['id'],</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"UserProfile"</span><span class="token punctuation">,</span>  <span class="token comment">//钩子函数 过滤器</span>  <span class="token function-variable function">beforeRouteEnter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//加载数据</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"进入路由之前"</span><span class="token punctuation">)</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token parameter">vm</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">//进入路由之前执行getData方法</span>      vm<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">beforeRouteLeave</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"离开路由之前"</span><span class="token punctuation">)</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">//axios</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">getData</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>        <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">'http://localhost:8080/static/mock/data.json'</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.路由钩子和axios结合图<br><img src="/2021/07/07/vue/20200624143534392.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2021/07/07/git/"/>
      <url>/2021/07/07/git/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Git学习笔记"><a href="#Git学习笔记" class="headerlink" title="Git学习笔记"></a>Git学习笔记</h1><h1 id="一-版本控制分类"><a href="#一-版本控制分类" class="headerlink" title="一.版本控制分类"></a>一.版本控制分类</h1><p>记录文件每次的更新,可以对每一个版本做一个快照,或是记录补丁文件,适合个人用,如RCS</p><p><img src="/2021/07/07/git/1626940328250.png"></p><p>所有的版本数据都保存在服务器上,协同开发这从服务器上同步更新或上传自己的修改.</p><p><img src="/2021/07/07/git/1626940351110.png"></p><p>​                             <img src="/2021/07/07/git/1626940366184.png"><br>)</p><p>缺点:每个人都拥有全部代码,安全隐患.</p><p>所有版本信息仓库全部同步到本地的每个用户,这样就可以在本地查看所有版本历史,可以离线在本地提交,只需要在联网时push到相应的服务器或其他用户那里.由于每个用户那里保存的都是所有的版本数据,只要有一个用户的折本没有问题就可以恢复所有的数据,但这增加了本地存储空间的占用.</p><p>不会因为服务器损坏或者网络问题,造成不能工作的情况;</p><p><img src="/2021/07/07/git/1626940411759.png"></p><blockquote><p>Git和SVN主要区别</p></blockquote><p>SVN是集中式版本控制系统,版本库是集中放在中央服务器的,而工作的时候,用的都是自己的电脑,所有首先要从中央服务器得到最新的版本,然后工作,完成工作后,需要把自己做完的活推送到中央服务器.集中式版本控制系统是必须联网才能工作,对网络带宽要求较高.</p><p><img src="/2021/07/07/git/1626940437562.png"><br>)</p><p>Git是分布式版本控制系统,没有中央服务器,每个人的电脑就是一个完整的版本库,工作的时候不需要联网了,因为版本都在自己电脑上.系统的方法是这样的:比如说自己在电脑上改了文件A,其他人也在电脑上改了文件A,这是,你们两之间只需把各自的修改推送给对方,就可以互相看到对方的修改了.Git可以直接看到更新了哪些代码和文件!</p><p>? <strong>Git是目前世界上最先进的分布式版本控制系统</strong></p><h1 id="二-聊聊Git历史"><a href="#二-聊聊Git历史" class="headerlink" title="二.聊聊Git历史"></a>二.聊聊Git历史</h1><p><img src="/2021/07/07/git/1626940466521.png"></p><h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><p>打开 [git官网] <a href="https://git-scm.com/%EF%BC%8C%E4%B8%8B%E8%BD%BDgit%E5%AF%B9%E5%BA%94%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%88%E6%9C%AC%E3%80%82">https://git-scm.com/，下载git对应操作系统的版本。</a></p><p>所有东西下载慢的话就可以去找镜像！</p><p>官网下载太慢，我们可以使用淘宝镜像下载：<a href="http://npm.taobao.org/mirrors/git-for-windows/">http://npm.taobao.org/mirrors/git-for-windows/</a></p><h2 id="启动Git"><a href="#启动Git" class="headerlink" title="启动Git"></a>启动Git</h2><p>安装成功后在开始菜单中会有Git项，菜单下有3个程序：任意文件夹下右键也可以看到对应的程序！</p><p> <img src="/2021/07/07/git/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy91SkRBVUtyR0M3S3N1OFVsSVR3TWxiWDNrTUd0WjlwMGphaWFBZnIycEFmV3RGWDU3a0dZcVIzU2xOeERsQVpEa0NVNklPQjFZQWljS3hIaWI1eUdidjl6US82NDA.png"> </p><p><strong>Git Bash</strong>：Unix与Linux风格的命令行，使用最多，推荐最多</p><p><strong>Git CMD</strong>：Windows风格的命令行</p><p><strong>Git GUI</strong>：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令</p><h1 id="三-Linux常用命令"><a href="#三-Linux常用命令" class="headerlink" title="三.Linux常用命令"></a>三.Linux常用命令</h1><h2 id="常用的Linux命令"><a href="#常用的Linux命令" class="headerlink" title="常用的Linux命令"></a>常用的Linux命令</h2><p>平时一定要多使用这些基础的命令！</p><p>1）、cd : 改变目录。</p><p>2）、cd . . 回退到上一个目录，直接cd进入默认目录</p><p>3）、pwd : 显示当前所在的目录路径。</p><p>4）、ls(ll):  都是列出当前目录中的所有文件，只不过ll(两个ll)列出的内容更为详细。</p><p>5）、touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件。</p><p>6）、rm:  删除一个文件, rm index.js 就会把index.js文件删除。</p><p>7）、mkdir:  新建一个目录,就是新建一个文件夹。</p><p>8）、rm -r :  删除一个文件夹, rm -r src 删除src目录</p><blockquote><p>rm -rf /  切勿在Linux中尝试！删除电脑中全部文件！</p></blockquote><p>9）、mv 移动文件, mv index.html src index.html 是我们要移动的文件, src 是目标文件夹,当然, 这样写,必须保证文件和目标文件夹在同一目录下。</p><p>10）、reset 重新初始化终端/清屏。</p><p>11）、clear 清屏。</p><p>12）、history 查看命令历史。</p><p>13）、help 帮助。</p><p>14）、exit 退出。</p><ol start="15"><li>  、#表示注释</li></ol><h1 id="四-Git配置"><a href="#四-Git配置" class="headerlink" title="四.Git配置"></a>四.Git配置</h1><blockquote><p>设置用户名与邮箱(用户标识,必要)</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">#查看系统configgit config --system --list　　#查看当前用户（global）配置git config --global  --list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有的配置文件，其实都保存在本地！</p><blockquote><p>查看配置 git config -l</p></blockquote><p><img src="/2021/07/07/git/1619411358517.png"></p><blockquote><p>配置用户名和密码很重要，因为每次提交都会使用该信息，永远嵌入提交中</p></blockquote><p><img src="/2021/07/07/git/1626940530654.png"></p><p><strong>Git相关的配置文件：</strong></p><p>1）、Git\etc\gitconfig  ：Git 安装目录下的 gitconfig     –system 系统级</p><p>2）、C:\Users\Administrator\ .gitconfig    只适用于当前登录用户的配置  –global 全局</p><p>C:\Users\Administrator.gitconfig</p><p><img src="/2021/07/07/git/1626940550107.png"></p><h2 id="设置用户名与邮箱（用户标识，必要）"><a href="#设置用户名与邮箱（用户标识，必要）" class="headerlink" title="设置用户名与邮箱（用户标识，必要）"></a>设置用户名与邮箱（用户标识，必要）</h2><p>当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>name <span class="token string">"kuangshen"</span>  #名称git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>email <span class="token number">727958639</span>@qq<span class="token punctuation">.</span>com   #邮箱<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>只需要做一次这个设置，如果你传递了–global 选项，因为Git将总是会使用该信息来处理你在系统中所做的一切操作。如果你希望在一个特定的项目中使用不同的名称或e-mail地址，你可以在该项目中运行该命令而不要–global选项。总之–global为全局配置，不加为某个项目的特定配置。</p><p><img src="/2021/07/07/git/1619412224512.png"></p><h1 id="五-Git的基本理论-核心"><a href="#五-Git的基本理论-核心" class="headerlink" title="五.Git的基本理论(核心)"></a>五.Git的基本理论(核心)</h1><blockquote><p>工作区域</p></blockquote><p>Git本地有三个工作区域:工作目录(Working Firectory) , 暂存区(Stage/Index) , 资源库(Repository或Git Directory).如果在加上远程的git仓库(Remote Directory) 就可以分为四个工作区域.文件在这四个区域之间的转换关系如下:</p><p><img src="/2021/07/07/git/1626940573537.png"></p><ul><li>Workspace : 工作区,就是你平时存放项目代码的地方</li><li>Index/Stage : 暂存区,用于临时存放你的改动,事实上他只是一个文件,保存即将提交到文件列表信息</li><li>Repository : 仓库区(或本地仓库) , 就是安全存放数据的位置,这里面有你提交到所有版本的数据.其中HEAD指向最新放入仓库的版本.</li><li>Remote : 远程仓库,托管底阿妈的服务器,可以简单的认为是你项目组中的一台电脑用于远程数据交换.</li></ul><p>本地的三个区域确切的说应该是git仓库中HEAD指向的版本:</p><p><img src="/2021/07/07/git/1626940597115.png"></p><blockquote><p>工作流程</p></blockquote><p>git的工作流程一般是这样的:</p><ol><li>在工作目录中添加,修改文件; (需要保存的代码 userMapper)</li><li>将需要进行版本管理的文件放入暂存区;(git add)</li><li>将暂存区的文件提交到git仓库.(git commit)</li></ol><p>因此,git管理的文件有三种状态: 已修改(modified),已暂存(staged),已提交(committed)</p><p><img src="https://images1.tqwba.com/20201004/i4mnam3nugm.png"></p><h1 id="六-Git项目搭建"><a href="#六-Git项目搭建" class="headerlink" title="六.Git项目搭建"></a>六.Git项目搭建</h1><h2 id="创建工作目录与常用指令"><a href="#创建工作目录与常用指令" class="headerlink" title="创建工作目录与常用指令"></a>创建工作目录与常用指令</h2><p>工作目录（WorkSpace)一般就是你希望Git帮助你管理的文件夹，可以是你项目的目录，也可以是一个空目录，建议不要有中文。</p><p>日常使用只要记住下图6个命令：</p><p> <img src="/2021/07/07/git/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy91SkRBVUtyR0M3S3N1OFVsSVR3TWxiWDNrTUd0WjlwMEFJSTZZVm9vVXppYnBpYnpKbm9PSEhYVXNMM2Y5RHFBNGhvclVpYmZjcEVaODhPeWYyZ1FRTlI2dy82NDA.png"> </p><h2 id="本地仓库搭建"><a href="#本地仓库搭建" class="headerlink" title="本地仓库搭建"></a>本地仓库搭建</h2><p>创建本地仓库的方法有两种: 一种是创建全新的仓库,两一种是克隆远程仓库.</p><p>1.创建全新的仓库,需要用GIT管理的项目的根目录执行:</p><pre class="line-numbers language-none"><code class="language-none">#在当前目录新建一个Git代码库$ git init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.执行后可以看到,仅仅在项目目录多出了一个.git目录,关于版本等的所有信息都在这个目录里面.</p><p><img src="/2021/07/07/git/1626940634205.png"></p><h2 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h2><p>1.另一种方式是克隆远程目录,是将远程服务器删的仓库完全镜像一份至本地!</p><pre class="line-numbers language-none"><code class="language-none">#克隆一个项目和他的整个代码历史(版本信息)$ git clone [url] #git 克隆的地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.去gitee或者github上克隆一个测试!</p><h1 id="七-GIT文件操作"><a href="#七-GIT文件操作" class="headerlink" title="七.GIT文件操作"></a>七.GIT文件操作</h1><h2 id="文件4种状态"><a href="#文件4种状态" class="headerlink" title="文件4种状态"></a>文件4种状态</h2><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作，首先要知道文件当前在什么状态，不然可能会提交了现在还不想提交的文件，或者要提交的文件没提交上。</p><blockquote><p><strong>Untracked:</strong> 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过==git add== 状态变为==Staged==.</p></blockquote><blockquote><p><strong>Unmodify:</strong> 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为==Modified==. 如果使用==git rm==移出版本库, 则成为==Untracked==文件</p></blockquote><blockquote><p><strong>Modified:</strong> 文件已修改, 仅仅是修改, 并没有进其他的操作. 这个文件也有两个去处, 通过==git add==可进入暂存==staged==状态, 使用==git checkout== 则丢弃修改过, 返回到==unmodify==状态, 这个==git checkout==即从库中取出文件, 覆盖当前修改 !</p></blockquote><blockquote><p><strong>Staged:</strong> 暂存状态. 执行==git commit==则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为==Unmodify==状态. 执行==git reset HEAD filename==取消暂存, 文件状态为==Modified==</p></blockquote><h2 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h2><p>上面说的文件有四种转态,通过如下命令可以查看到文件的状态:</p><pre class="line-numbers language-none"><code class="language-none"># 查看指定文件状态git status [filename]# 查看所有文件状态git status# git add .    添加所有文件到暂存区# git commit -m &quot;消息内容&quot;  提交暂存区中的内容到本地仓库 -m 提交信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p><p>在主目录下建立”.gitignore”文件，此文件有如下规则：</p><ol><li><p>忽略文件中的空行或以井号（#）开始的行将会被忽略。</p></li><li><p>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</p></li><li><p>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</p></li><li><p>如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</p></li><li><p>如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">#为注释*.txt        #忽略所有 .txt结尾的文件,这样的话上传就不会被选中！!lib.txt     #但lib.txt除外&#x2F;temp        #仅忽略项目根目录下的TODO文件,不包括其它目录tempbuild&#x2F;       #忽略build&#x2F;目录下的所有文件doc&#x2F;*.txt    #会忽略 doc&#x2F;notes.txt 但不包括 doc&#x2F;server&#x2F;arch.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>.gitignore</p><p><img src="/2021/07/07/git/1626940682558.png"></p><h1 id="八-使用码云"><a href="#八-使用码云" class="headerlink" title="八.使用码云"></a>八.使用码云</h1><p>1.注册登录码云,完善个人信息</p><p><img src="/2021/07/07/git/1619423943742.png"></p><p>2.==设置本机绑定SSH公钥,实现免密码登录!==</p><pre class="line-numbers language-none"><code class="language-none"># 进入C:\users\Administrator\.ssh  目录没有就用命令建一个文件夹# 生成公钥ssh-keygen -t rsa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/git/1626940704217.png"></p><p><img src="https://images1.tqwba.com/20201004/fkxkrsn03dj.png" alt="Git学习笔记(git/fkxkrsn03dj.png)(自己总结方便复习)"></p><p><img src="https://images1.tqwba.com/20201004/rmthwgwekln.png"></p><p>3.将公钥信息public Key 添加到码云账户中即可!</p><p><img src="/2021/07/07/git/1619424578117.png"></p><p>4.使用码云创建一个自己的仓库!</p><p><img src="/2021/07/07/git/1619424610440.png"></p><p><img src="/2021/07/07/git/1626940778439.png"></p><p>创建成功</p><p><img src="/2021/07/07/git/1626940804295.png"></p><p>git clone [url] 克隆到本地</p><p><img src="/2021/07/07/git/1626940823919.png"></p><p><img src="/2021/07/07/git/1626940839363.png"></p><h1 id="九-IDEA中集成Git"><a href="#九-IDEA中集成Git" class="headerlink" title="九.IDEA中集成Git"></a>九.IDEA中集成Git</h1><p>1.建一个普通的SpringBoot项目</p><p>? 项目的文件夹就是git的文件夹</p><p>2.将git工程中的文件夹直接拷贝到java文件夹中</p><p><img src="/2021/07/07/git/1626940862537.png"></p><ul><li><p>观察idea的变化</p></li><li><p>刚才是红的</p></li><li><p><img src="/2021/07/07/git/1619432358808.png"></p><blockquote><p>可以用命令提交，也可以用图标</p></blockquote></li></ul><p><img src="/2021/07/07/git/1626940906122.png"></p><ul><li>1.)git commit</li></ul><p><img src="/2021/07/07/git/1626940928999.png"></p><ul><li>2.)git commit -m “消息”</li></ul><p><img src="/2021/07/07/git/1626940969539.png"></p><ul><li>git push</li></ul><p>​                          <img src="/2021/07/07/git/1626940981138.png">)</p><ul><li>查看远程仓库已经提交上去了</li></ul><p><img src="/2021/07/07/git/1626941010621.png"></p><p>这些是单个人操作</p><h1 id="十-说明-GIT分支"><a href="#十-说明-GIT分支" class="headerlink" title="十.说明:GIT分支"></a>十.说明:GIT分支</h1><p>git分支常用命令</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"># 列出所有本地分支git branch # 列出所有远程分支git branch -r # 新建一个分支，但依然停留在当前分支git branch [branch-name] # 新建一个分支，并切换到该分支git checkout -b [branch] # 合并指定分支到当前分支$ git merge [branch] # 删除分支$ git branch -d [branch-name] # 删除远程分支$ git push origin --delete [branch-name]$ git branch -dr [remote&#x2F;branch]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分支(多人开发)</p><p><img src="/2021/07/07/git/1626941038274.png"></p><p>如果冲突了就需要协商了</p><p>如果同一个文件在合并分支时都修改了则会引起冲突:解决的办法是我们可以修改冲突文件后重新提交!选择要保留他的代码还是你的代码!</p><p>master主分支应该非常稳定,用来发布新版本,一般情况下不允许在上面工作,工作一般情况下在新建的dev分支上工作,工作完后,比如上要发布,或者说dev分支代码稳定后可以合并到主分支master上来.</p>]]></content>
      
      
      <categories>
          
          <category> 与命令有关的笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2021/07/07/linux/"/>
      <url>/2021/07/07/linux/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="入门概述"><a href="#入门概述" class="headerlink" title="入门概述"></a>入门概述</h2><blockquote><p>我们为什么要学习Linux</p></blockquote><p>linux诞生了这么多年，以前还喊着如何能取代windows系统，现在这个口号已经小多了，任何事物发展都有其局限性都有其天花板。就如同在国内再搞一个社交软件取代腾讯一样，想想而已基本不可能，因为用户已经习惯于使用微信交流，不是说技术上实现不了解而是老百姓已经习惯了，想让他们不用，即使他们自己不用亲戚朋友还是要用，没有办法的事情。</p><p>用习惯了windows操作系统，再让大家切换到别的操作系统基本上是不可能的事情，改变一个人已经养成的习惯太难。没有办法深入到普通老百姓的生活中，并不意味着linux就没有用武之地了。在服务器端，在开发领域linux倒是越来越受欢迎，很多程序员都觉得不懂点linux都觉得不好意思，linux在开源社区的地位依然岿然不动。</p><p>尤其是作为一个后端程序员，是必须要掌握Linux的，因为这都成为了你找工作的基础门槛了，所以不得不学习！</p><blockquote><p>Linux 简介</p></blockquote><p>Linux 内核最初只是由芬兰人林纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的。</p><p>Linux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX（可移植操作系统接口） 和 UNIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。</p><p>Linux 能运行主要的 UNIX 工具软件、应用程序和网络协议。它支持 32 位和 64 位硬件。Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p><blockquote><p>Linux 发行版</p></blockquote><p>Linux 的发行版说简单点就是将 Linux 内核与应用软件做一个打包。</p><p><img src="/2021/07/07/linux/1620808203153.png"></p><p>目前市面上较知名的发行版有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS 等。</p><p><img src="/2021/07/07/linux/1620808242618.png"></p><blockquote><p>Linux 应用领域</p></blockquote><p>今天各种场合都有使用各种 Linux 发行版，从嵌入式设备到超级计算机，并且在服务器领域确定了地位，通常服务器使用 LAMP（Linux + Apache + MySQL + PHP）或 LNMP（Linux + Nginx+ MySQL + PHP）组合。</p><p>目前 Linux 不仅在家庭与企业中使用，并且在政府中也很受欢迎。</p><ul><li>巴西联邦政府由于支持 Linux 而世界闻名。</li><li>有新闻报道俄罗斯军队自己制造的 Linux 发布版的，做为 G.H.ost 项目已经取得成果。</li><li>印度的 Kerala 联邦计划在向全联邦的高中推广使用 Linux。</li><li>中华人民共和国为取得技术独立，在龙芯处理器中排他性地使用 Linux。</li><li>在西班牙的一些地区开发了自己的 Linux 发布版，并且在政府与教育领域广泛使用，如 Extremadura 地区的 gnuLinEx 和 Andalusia 地区的 Guadalinex。</li><li>葡萄牙同样使用自己的 Linux 发布版 Caixa Mágica，用于 Magalh?es 笔记本电脑和 e-escola 政府软件。</li><li>法国和德国同样开始逐步采用 Linux。</li></ul><blockquote><p>Linux vs Windows</p></blockquote><p><img src="/2021/07/07/linux/640.jpg"></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>Linux 的安装，安装步骤比较繁琐，现在其实云服务器挺普遍的，价格也便宜，如果直接不想搭建，也可以直接买一台学习用用！</p><blockquote><p>安装CentOS（虚拟机安装，耗资源）</p></blockquote><p>1、可以通过镜像进行安装！</p><p>2、可以使用我已经制作好的镜像！视频中讲解了该种方式！</p><p>3、安装 VMware 虚拟机软件，然后打开我们的镜像即可使用！</p><blockquote><p>购买云服务器（推荐）</p></blockquote><p>虚拟机安装后占用空间，也会有些卡顿，我们作为程序员其实可以选择购买一台自己的服务器，这样的话更加接近真实线上工作；</p><p>1、阿里云购买服务器：<a href="https://www.aliyun.com/minisite/goods?userCode=0phtycgr">https://www.aliyun.com/minisite/goods?userCode=0phtycgr</a></p><p>2、购买完毕后，获取服务器的ip地址，重置服务器密码，就可以远程登录了</p><p>3、下载 xShell 工具，进行远程连接使用！连接成功效果如下：</p><p><strong>注意事项：</strong></p><p>如果要打开端口，需要在阿里云的安全组面板中开启对应的出入规则，不然的话会被阿里拦截！</p><blockquote><p>如果前期不好操作，可以推荐安装宝塔面板，傻瓜式管理服务器</p></blockquote><p>安装教程：<a href="https://www.bt.cn/bbs/thread-19376-1-1.html">https://www.bt.cn/bbs/thread-19376-1-1.html</a></p><p>1、开启对应的端口</p><p>2、一键安装</p><p>3、安装完毕后会得到远程面板的地址，账号，密码，就可以登录了</p><p>4、登录之后就可以可视化的安装环境和部署网站！</p><p><img src="/2021/07/07/linux/gif;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVQImWNgYGBgAAAABQABh6FO1AAAAABJRU5ErkJggg==" alt="图片"></p><blockquote><p>关于域名</p></blockquote><p>如果自己的网站想要上线，就一定要购买一个域名然后进行备案；</p><p>备案的话需要一些认证和时间，备完完毕后，就可以解析到自己的网站了，这个时候就可以使用域名来进行服务器的访问！</p><h2 id="阿里云使用"><a href="#阿里云使用" class="headerlink" title="阿里云使用"></a>阿里云使用</h2><blockquote><p>连接阿里云服务器要用到的两个软件Xshell  和 xftp 用软件管家下载</p></blockquote><p><img src="/2021/07/07/linux/1620880992557.png"></p><p><img src="/2021/07/07/linux/1620881050905.png"></p><h2 id="走近Linux系统"><a href="#走近Linux系统" class="headerlink" title="走近Linux系统"></a>走近Linux系统</h2><blockquote><p>开机登录</p></blockquote><p>开机会启动许多程序。它们在Windows叫做”服务”（service），在Linux就叫做”守护进程”（daemon）。</p><p>开机成功后，它会显示一个文本登录界面，这个界面就是我们经常看到的登录界面，在这个登录界面中会提示用户输入用户名，而用户输入的用户将作为参数传给login程序来验证用户的身份，密码是不显示的，输完回车即可！</p><p>一般来说，用户的登录方式有三种：</p><ul><li>命令行登录</li><li>ssh登录</li><li>图形界面登录</li></ul><p>最高权限账户为 root，可以操作一切！</p><blockquote><p>关机</p></blockquote><p>在linux领域内大多用在服务器上，很少遇到关机的操作。毕竟服务器上跑一个服务是永无止境的，除非特殊情况下，不得已才会关机。</p><p>关机指令为：shutdown ；</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sync # 将数据由内存同步到硬盘中。shutdown # 关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机：shutdown –h 10 # 这个命令告诉大家，计算机将在10分钟后关机shutdown –h now # 立马关机shutdown –h 20:25 # 系统会在今天20:25关机shutdown –h +10 # 十分钟后关机shutdown –r now # 系统立马重启shutdown –r +10 # 系统十分钟后重启reboot # 就是重启，等同于 shutdown –r nowhalt # 关闭系统，等同于shutdown –h now 和 poweroff<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后总结一下，不管是重启系统还是关闭系统，首先要运行 <strong>sync</strong> 命令，把内存中的数据写到磁盘中。</p><blockquote><p>系统目录结构</p></blockquote><p>登录系统后，在当前命令窗口下输入命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ls &#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你会看到如下图所示：</p><p><img src="/2021/07/07/linux/640.webp"></p><p>树状目录结构：（Linux的一切资源都挂载在这个 / 根节点下）</p><p><img src="/2021/07/07/linux/typora文件\md\Linux2.assets\640.webp" alt="图片"></p><p><strong>以下是对这些目录的解释：</strong></p><ul><li><strong>/bin</strong>：bin是Binary的缩写, 这个目录存放着最经常使用的命令。</li><li><strong>/boot：</strong> 这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。</li><li><strong>/dev ：</strong> dev是Device(设备)的缩写, 存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。</li><li><strong>/etc：</strong> 这个目录用来存放所有的系统管理所需要的配置文件和子目录。</li><li>==<strong>/home</strong>：用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。==</li><li><strong>/lib</strong>：这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。</li><li><strong>/lost+found</strong>：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</li><li><strong>/media</strong>：linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</li><li><strong>/mnt</strong>：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。</li><li><strong>/opt</strong>：这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</li><li><strong>/proc</strong>：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。</li><li><strong>/root</strong>：该目录为系统管理员，也称作超级权限者的用户主目录。</li><li><strong>/sbin</strong>：s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</li><li><strong>/srv</strong>：该目录存放一些服务启动之后需要提取的数据。</li><li><strong>/sys</strong>：这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。</li><li><strong>/tmp</strong>：这个目录是用来存放一些临时文件的。</li><li>==<strong>/usr</strong>：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。==</li><li><strong>/var</strong>：这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</li><li><strong>/run</strong>：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。 </li><li>==**/www:**存放服务器网站相关资源，环境，网站项目==</li></ul><h2 id="常用基本命令"><a href="#常用基本命令" class="headerlink" title="常用基本命令"></a>常用基本命令</h2><h3 id="目录管理"><a href="#目录管理" class="headerlink" title="目录管理"></a>目录管理</h3><blockquote><p>绝对路径和相对路径</p></blockquote><p>我们知道Linux的目录结构为树状结构，最顶级的目录为根目录 /。</p><p>其他目录通过挂载可以将它们添加到树中，通过解除挂载可以移除它们。</p><p>在开始本教程前我们需要先知道什么是绝对路径与相对路径。</p><p><strong>绝对路径：</strong></p><p>路径的写法，由根目录 / 写起，例如：/usr/share/doc 这个目录。</p><p><strong>相对路径：</strong></p><p>路径的写法，不是由 / 写起，例如由 /usr/share/doc 要到 /usr/share/man 底下时，可以写成：cd ../man 这就是相对路径的写法啦！</p><blockquote><p>处理目录的常用命令</p></blockquote><p>接下来我们就来看几个常见的处理目录的命令吧：</p><ul><li>ls: 列出目录</li><li>cd：切换目录</li><li>pwd：显示目前的目录</li><li>mkdir：创建一个新的目录</li><li>rmdir：删除一个空的目录</li><li>cp: 复制文件或目录</li><li>rm: 移除文件或目录</li><li>mv: 移动文件与目录，或修改文件与目录的名称</li></ul><p>你可以使用 <em>man [命令]</em> 来查看各个命令的使用文档，如 ：man cp。</p><blockquote><p>ls （列出目录）</p></blockquote><p>在Linux系统当中， ls 命令可能是最常被运行的。</p><p>语法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@www ~]# ls [-aAdfFhilnrRSt] 目录名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选项与参数：</p><ul><li>-a ：全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来(常用)</li><li>-l ：长数据串列出，包含文件的属性与权限等等数据；(常用)</li></ul><p>将目录下的所有文件列出来(含属性与隐藏档)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@www ~]# ls -al ~<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>cd （切换目录）</p></blockquote><p>cd是Change Directory的缩写，这是用来变换工作目录的命令。</p><p>语法：</p><pre class="line-numbers language-none"><code class="language-none">cd [相对路径或绝对路径]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 切换到用户目录下[root@kuangshen &#x2F;]# cd home  # 使用 mkdir 命令创建 kuangstudy 目录[root@kuangshen home]# mkdir kuangstudy# 进入 kuangstudy 目录[root@kuangshen home]# cd kuangstudy# 回到上一级[root@kuangshen kuangstudy]# cd ..# 回到根目录[root@kuangshen kuangstudy]# cd &#x2F;# 表示回到自己的家目录，亦即是 &#x2F;root 这个目录[root@kuangshen kuangstudy]# cd ~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来大家多操作几次应该就可以很好的理解 cd 命令的。</p><blockquote><p>pwd ( 显示目前所在的目录 )</p></blockquote><p>pwd 是 <strong>Print Working Directory</strong> 的缩写，也就是显示目前所在目录的命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@kuangshen kuangstudy]#pwd [-P]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选项与参数：**-P** ：显示出确实的路径，而非使用连接(link) 路径。</p><p>测试：</p><pre class="line-numbers language-none"><code class="language-none"># 单纯显示出目前的工作目录[root@kuangshen ~]# pwd&#x2F;root# 如果是链接，要显示真实地址，可以使用 -P参数[root@kuangshen &#x2F;]# cd bin[root@kuangshen bin]# pwd -P&#x2F;usr&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>mkdir （创建新目录）</p></blockquote><p>如果想要创建新的目录的话，那么就使用mkdir (make directory)吧。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mkdir [-mp] 目录名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>选项与参数：</p><ul><li>-m ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～</li><li>-p ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！</li></ul><p>测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 进入我们用户目录下[root@kuangshen &#x2F;]# cd &#x2F;home# 创建一个 test 文件夹[root@kuangshen home]# mkdir test# 创建多层级目录[root@kuangshen home]# mkdir test1&#x2F;test2&#x2F;test3&#x2F;test4mkdir: cannot create directory ‘test1&#x2F;test2&#x2F;test3&#x2F;test4’:No such file or directory  # &lt;&#x3D;&#x3D; 没办法直接创建此目录啊！# 加了这个 -p 的选项，可以自行帮你创建多层目录！[root@kuangshen home]# mkdir -p test1&#x2F;test2&#x2F;test3&#x2F;test4# 创建权限为 rwx--x--x 的目录。[root@kuangshen home]# mkdir -m 711 test2[root@kuangshen home]# ls -ldrwxr-xr-x 2 root root  4096 Mar 12 21:55 testdrwxr-xr-x 3 root root  4096 Mar 12 21:56 test1drwx--x--x 2 root root  4096 Mar 12 21:58 test2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>rmdir ( 删除空的目录 )</p></blockquote><p>语法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rmdir [-p] 目录名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选项与参数：**-p ：**连同上一级『空的』目录也一起删除</p><p>测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 看看有多少目录存在？[root@kuangshen home]# ls -ldrwxr-xr-x 2 root root  4096 Mar 12 21:55 testdrwxr-xr-x 3 root root  4096 Mar 12 21:56 test1drwx--x--x 2 root root  4096 Mar 12 21:58 test2# 可直接删除掉，没问题[root@kuangshen home]# rmdir test# 因为尚有内容，所以无法删除！[root@kuangshen home]# rmdir test1rmdir: failed to remove ‘test1’: Directory not empty# 利用 -p 这个选项，立刻就可以将 test1&#x2F;test2&#x2F;test3&#x2F;test4 依次删除。[root@kuangshen home]# rmdir -p test1&#x2F;test2&#x2F;test3&#x2F;test4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：这个 rmdir 仅能删除空的目录，你可以使用 rm 命令来删除非空目录，后面我们会将！</p><blockquote><p>cp ( 复制文件或目录 )</p></blockquote><p>语法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@www ~]# cp [-adfilprsu] 来源档(source) 目标档(destination)[root@www ~]# cp [options] source1 source2 source3 .... directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>选项与参数：</p><ul><li><strong>-a：</strong>相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</li><li><strong>-p：</strong>连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</li><li><strong>-d：</strong>若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</li><li><strong>-r：</strong>递归持续复制，用於目录的复制行为；(常用)</li><li><strong>-f：</strong>为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</li><li><strong>-i：</strong>若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</li><li><strong>-l：</strong>进行硬式连结(hard link)的连结档创建，而非复制文件本身。</li><li><strong>-s：</strong>复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</li><li><strong>-u：</strong>若 destination 比 source 旧才升级 destination ！</li></ul><p>测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 找一个有文件的目录，我这里找到 root目录[root@kuangshen home]# cd &#x2F;root[root@kuangshen ~]# lsinstall.sh[root@kuangshen ~]# cd &#x2F;home# 复制 root目录下的install.sh 到 home目录下[root@kuangshen home]# cp &#x2F;root&#x2F;install.sh &#x2F;home[root@kuangshen home]# lsinstall.sh# 再次复制，加上-i参数，增加覆盖询问？[root@kuangshen home]# cp -i &#x2F;root&#x2F;install.sh &#x2F;homecp: overwrite ‘&#x2F;home&#x2F;install.sh’? y # n不覆盖，y为覆盖<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>rm ( 移除文件或目录 )</p></blockquote><p>语法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rm [-fir] 文件或目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>选项与参数：</p><ul><li>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</li><li>-i ：互动模式，在删除前会询问使用者是否动作</li><li>-r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！</li></ul><p>测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 将刚刚在 cp 的实例中创建的 install.sh删除掉！[root@kuangshen home]# rm -i install.shrm: remove regular file ‘install.sh’? y# 如果加上 -i 的选项就会主动询问喔，避免你删除到错误的档名！# 尽量不要在服务器上使用 rm -rf &#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>mv  ( 移动文件与目录，或修改名称 )</p></blockquote><p>语法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@www ~]# mv [-fiu] source destination[root@www ~]# mv [options] source1 source2 source3 .... directory[root@www ~]# mv [-fiu] source destination[root@www ~]# mv [options] source1 source2 source3 .... directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>选项与参数：</p><ul><li>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</li><li>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</li><li>-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)</li></ul><p>测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 复制一个文件到当前目录[root@kuangshen home]# cp &#x2F;root&#x2F;install.sh &#x2F;home# 创建一个文件夹 test[root@kuangshen home]# mkdir test# 将复制过来的文件移动到我们创建的目录，并查看[root@kuangshen home]# mv install.sh test[root@kuangshen home]# lstest[root@kuangshen home]# cd test[root@kuangshen test]# lsinstall.sh# 将文件夹重命名，然后再次查看！[root@kuangshen test]# cd ..[root@kuangshen home]# mv test mvtest[root@kuangshen home]# lsmvtest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解压打包命令"><a href="#解压打包命令" class="headerlink" title="解压打包命令"></a>解压打包命令</h3><p>打包成tar.gz格式压缩包</p><pre class="line-numbers language-none"><code class="language-none"># tar -zcvf renwolesshel.tar.gz &#x2F;renwolesshel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解压tar.gz格式压缩包</p><pre class="line-numbers language-none"><code class="language-none"># tar zxvf renwolesshel.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>打包成tar.bz2格式压缩包</p><pre class="line-numbers language-none"><code class="language-none"># tar -jcvf renwolesshel.tar.bz2 &#x2F;renwolesshel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解压tar.bz2格式的压缩包</p><pre class="line-numbers language-none"><code class="language-none"># tar jxvf renwolesshel.tar.bz2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>压缩成zip格式</p><pre class="line-numbers language-none"><code class="language-none"># zip -q -r renwolesshel.zip renwolesshel&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解压zip格式的压缩包</p><pre class="line-numbers language-none"><code class="language-none"># unzip renwolesshel.zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h3><blockquote><p>看懂文件属性</p></blockquote><p>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p><p>在Linux中我们可以使用<code>ll</code>或者<code>ls –l</code>命令来显示一个文件的属性以及文件所属的用户和组，如：</p><p> <img src="/2021/07/07/linux/20200630091157920.png"> </p><p>实例中，boot文件的第一个属性用”d”表示。”d”在Linux中代表该文件是一个目录文件。</p><p>在Linux中第一个字符代表这个文件是目录、文件或链接文件等等：</p><ul><li>当为[ <strong>d</strong> ]则是目录</li><li>当为[ <strong>-</strong> ]则是文件；</li><li>若是[ <strong>l</strong> ]则表示为链接文档 ( link file )；</li><li>若是[ <strong>b</strong> ]则表示为装置文件里面的可供储存的接口设备 ( 可随机存取装置 )；</li><li>若是[ <strong>c</strong> ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标 ( 一次性读取装置 )。</li></ul><p>接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。</p><p>其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。</p><p>要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。</p><p>每个文件的属性由左边第一部分的10个字符来确定（如下图）：</p><p> <img src="/2021/07/07/linux/20200630091910216.png"> </p><p>从左至右用0-9这些数字来表示。</p><p>第0位确定文件类型，第1-3位确定属主（该文件的所有者）拥有该文件的权限。第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。</p><p>其中：</p><p>第1、4、7位表示读权限，如果用”r”字符表示，则有读权限，如果用”-“字符表示，则没有读权限；</p><p>第2、5、8位表示写权限，如果用”w”字符表示，则有写权限，如果用”-“字符表示没有写权限；</p><p>第3、6、9位表示可执行权限，如果用”x”字符表示，则有执行权限，如果用”-“字符表示，则没有执行权限。</p><p>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。</p><p>同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。</p><p>文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。</p><p>因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。</p><p>在以上实例中，boot 文件是一个目录文件，属主和属组都为 root。</p><blockquote><p>修改文件属性</p></blockquote><p><strong>1、chgrp：更改文件属组</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chgrp [-R] 属组名 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。</p><p><strong>2、chown：更改文件属主，也可以同时更改文件属组</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chown [–R] 属主名 文件名chown [-R] 属主名：属组名 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>==<strong>3、chmod：更改文件9个属性</strong>==</p><pre class="line-numbers language-none"><code class="language-none">chmod [-R] xyz 文件或目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Linux文件属性有两种设置方法，一种是数字，一种是符号。</p><p>Linux文件的基本权限就有九个，分别是owner/group/others三种身份各有自己的read/write/execute权限。</p><p>先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">r:4     w:2         x:1可读可写不可执行     rw-   6可读可写可执行     rwx     7chmod 777 文件赋予所有用户可读可写可执行(最高权限)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为：[-rwxrwx—] 分数则是：</p><ul><li>owner = rwx = 4+2+1 = 7</li><li>group = rwx = 4+2+1 = 7</li><li>others= — = 0+0+0 = 0</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chmod 770 filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以自己下去多进行测试！</p><h3 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h3><blockquote><p>概述</p></blockquote><blockquote><p>网络配置目录：   /etc/sysconfig/network-scripts</p></blockquote><p>Linux系统中使用以下命令来查看文件的内容：</p><ul><li>cat 由第一行开始显示文件内容</li><li>tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</li><li>nl  显示的时候，顺道输出行号！</li><li>more 一页一页的显示文件内容</li><li>less 与 more 类似，但是比 more 更好的是，他可以往前翻页！</li><li>head 只看头几行</li><li>tail 只看尾巴几行</li></ul><p>你可以使用 *man [命令]*来查看各个命令的使用文档，如 ：man cp。</p><blockquote><p>cat 由第一行开始显示文件内容</p></blockquote><p>语法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cat [-AbEnTv]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选项与参数：</p><ul><li>-A ：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</li><li>-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</li><li>-E ：将结尾的断行字节 $ 显示出来；</li><li>-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；</li><li>-T ：将 [tab] 按键以 ^I 显示出来；</li><li>-v ：列出一些看不出来的特殊字符</li></ul><p>测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 查看网络配置: 文件地址 &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;[root@kuangshen ~]# cat &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eth0DEVICE&#x3D;eth0BOOTPROTO&#x3D;dhcpONBOOT&#x3D;yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>tac</p></blockquote><p>tac与cat命令刚好相反，文件内容从最后一行开始显示，可以看出 tac 是 cat 的倒着写！如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@kuangshen ~]# tac &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eth0ONBOOT&#x3D;yesBOOTPROTO&#x3D;dhcpDEVICE&#x3D;eth0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>nl  显示行号</p></blockquote><p>语法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nl [-bnw] 文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/07/linux/1620890201080.png"></p><p>选项与参数：</p><ul><li>-b ：指定行号指定的方式，主要有两种：-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；-b t ：如果有空行，空的那一行不要列出行号(默认值)；</li><li>-n ：列出行号表示的方法，主要有三种：-n ln ：行号在荧幕的最左方显示；-n rn ：行号在自己栏位的最右方显示，且不加 0 ；-n rz ：行号在自己栏位的最右方显示，且加 0 ；</li><li>-w ：行号栏位的占用的位数。</li></ul><p>测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@kuangshen ~]# nl &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eth01DEVICE&#x3D;eth02BOOTPROTO&#x3D;dhcp3ONBOOT&#x3D;yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>more  一页一页翻动</p></blockquote><p>在 more 这个程序的运行过程中，你有几个按键可以按的：</p><ul><li>空白键 (space)：代表向下翻一页；</li><li>Enter   ：代表向下翻『一行』；</li><li>/字串   ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</li><li>:f    ：立刻显示出档名以及目前显示的行数；</li><li>q    ：代表立刻离开 more ，不再显示该文件内容。</li><li>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@kuangshen etc]# more &#x2F;etc&#x2F;csh.login....(中间省略)....--More--(28%) # 重点在这一行喔！你的光标也会在这里等待你的命令<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>less  一页一页翻动，以下实例输出/etc/man.config文件的内容：</p></blockquote><p>less运行时可以输入的命令有：</p><ul><li>空白键  ：向下翻动一页；</li><li>[pagedown]：向下翻动一页；</li><li>[pageup] ：向上翻动一页；</li><li>==/字串  ：向下搜寻『字串』的功能；==</li><li>?字串  ：向上搜寻『字串』的功能；</li><li>n   ：重复前一个搜寻 (与 / 或 ? 有关！)，向下寻找下一个关键字</li><li>N   ：反向的重复前一个搜寻 (与 / 或 ? 有关！)，向上寻找下一个关键字</li><li>==q   ：离开 less 这个程序；==</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@kuangshen etc]# more &#x2F;etc&#x2F;csh.login....(中间省略)....:  # 这里可以等待你输入命令！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>head  取出文件前面几行</p></blockquote><p>语法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">head [-n number] 文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选项与参数：**-n** 后面接数字，代表显示几行的意思！</p><p>默认的情况中，显示前面 10 行！若要显示前 20 行，就得要这样：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@kuangshen etc]# head -n 20 &#x2F;etc&#x2F;csh.login     看头20行<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>tail  取出文件后面几行</p></blockquote><p>语法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tail [-n number] 文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选项与参数：</p><ul><li>-n ：后面接数字，代表显示几行的意思</li></ul><p>默认的情况中，显示最后 10 行！若要显示最后 20 行，就得要这样：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@kuangshen etc]# tail -n 20 &#x2F;etc&#x2F;csh.login     看后20行<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Linux-链接概念（了解）"><a href="#Linux-链接概念（了解）" class="headerlink" title="Linux 链接概念（了解）"></a>Linux 链接概念（了解）</h3><blockquote><p>拓展：Linux 链接概念</p></blockquote><p>Linux 链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。</p><p>情况下，==<strong>ln</strong> 命令产生硬链接==。</p><p> touch命令创建文件！<br> echo输入字符串 : echo “字符串”  &gt;&gt;  要输入的文件</p><blockquote><p><strong>硬链接：A—B,假设B是A的硬链接，那么他们两个指向了同一个文件!允许一个文件拥有多个路径，用户可以通过这种机制硬链接到一个重要文件上，防止误删</strong></p></blockquote><blockquote><p>软链接：类似Windows下的快捷方式，删除源文件，快捷方式也就访问不**了 </p></blockquote><p><strong>硬连接</strong></p><p>硬连接指通过索引节点来进行连接。在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在 Linux 中，多个文件名指向同一索引节点是存在的。比如：A 是 B 的硬链接（A 和 B 都是文件名），则 A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号相同，即一个 inode 节点对应两个不同的文件名，两个文件名指向同一个文件，A 和 B 对文件系统来说是完全平等的。删除其中任何一个都不会影响另外一个的访问。</p><p>硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。</p><p><strong>软连接</strong></p><p>另外一种连接称之为符号连接（Symbolic Link），也叫软连接。软链接文件有类似于 Windows 的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。比如：A 是 B 的软链接（A 和 B 都是文件名），A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号不相同，A 和 B 指向的是两个不同的 inode，继而指向两块不同的数据块。但是 A 的数据块中存放的只是 B 的路径名（可以根据这个找到 B 的目录项）。A 和 B 之间是“主从”关系，如果 B 被删除了，A 仍然存在（因为两个是不同的文件），但指向的是一个无效的链接。</p><p><strong>测试：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@kuangshen &#x2F;]# cd &#x2F;home[root@kuangshen home]# touch f1 # 创建一个测试文件f1[root@kuangshen home]# lsf1[root@kuangshen home]# ln f1 f2     # 创建f1的一个硬连接文件f2[root@kuangshen home]# ln -s f1 f3   # 创建f1的一个符号连接文件f3[root@kuangshen home]# ls -li       # -i参数显示文件的inode节点信息397247 -rw-r--r-- 2 root root     0 Mar 13 00:50 f1397247 -rw-r--r-- 2 root root     0 Mar 13 00:50 f2397248 lrwxrwxrwx 1 root root     2 Mar 13 00:50 f3 -&gt; f1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的结果中可以看出，硬连接文件 f2 与原文件 f1 的 inode 节点相同，均为 397247，然而符号连接文件的 inode 节点不同。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># echo 字符串输出 &gt;&gt; f1 输出到 f1文件[root@kuangshen home]# echo &quot;I am f1 file&quot; &gt;&gt;f1[root@kuangshen home]# cat f1I am f1 file[root@kuangshen home]# cat f2I am f1 file[root@kuangshen home]# cat f3I am f1 file[root@kuangshen home]# rm -f f1[root@kuangshen home]# cat f2I am f1 file[root@kuangshen home]# cat f3cat: f3: No such file or directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上面的测试可以看出：当删除原始文件 f1 后，硬连接 f2 不受影响，但是符号连接 f1 文件无效；</p><p>依此您可以做一些相关的测试，可以得到以下全部结论：</p><ul><li>删除符号连接f3,对f1,f2无影响；</li><li>删除硬连接f2，对f1,f3也无影响；</li><li>删除原文件f1，对硬连接f2没有影响，导致符号连接f3失效；</li><li>同时删除原文件f1,硬连接f2，整个文件会真正的被删除。</li></ul><h2 id="什么是Vim编辑器"><a href="#什么是Vim编辑器" class="headerlink" title="什么是Vim编辑器"></a>什么是Vim编辑器</h2><p>Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p><p>简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。</p><p>vim 则可以说是程序开发者的一项很好用的工具。</p><p>所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。</p><p>连 vim 的官方网站 (<a href="http://www.vim.org/">http://www.vim.org</a>) 自己也说 vim 是一个程序开发工具而不是文字处理软件。</p><p>vim 键盘图：<br><img src="/2021/07/07/linux/20210308180240330.gif"></p><blockquote><p>三种使用模式</p></blockquote><p>基本上 vi/vim 共分为三种模式，分别是命令模式（Command mode），输入模式（Insert mode）和底线命令模式（Last line mode）。这三种模式的作用分别是：</p><p>命令模式：</p><p>用户刚刚启动 vi/vim，便进入了命令模式。</p><p><img src="/2021/07/07/linux/1620893303223.png"></p><p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p><p><img src="/2021/07/07/linux/1620893412501.png"></p><p>以下是常用的几个命令：</p><ul><li>i 切换到输入模式，以输入字符。</li><li>x 删除当前光标所在处的字符。</li><li>: 切换到底线命令模式，以在最底一行输入命令。</li></ul><p>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。</p><p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p><p><strong>输入模式</strong>：</p><p>在命令模式下按下i就进入了输入模式。</p><p>在输入模式中，可以使用以下按键：</p><ul><li>字符按键以及Shift组合，输入字符</li><li>ENTER，回车键，换行</li><li>BACK SPACE，退格键，删除光标前一个字符</li><li>DEL，删除键，删除光标后一个字符</li><li>方向键，在文本中移动光标</li><li>HOME/END，左右移动光标</li><li>Page Up/Page Down，上下移动光标</li><li>Insert，切换光标为输入/替换模式，光标将变成竖线/下划线</li><li>==ESC，退出输入模式，切换到命令模式==</li></ul><p>底线命令模式：</p><p>在命令模式下按下:（英文冒号）就进入了底线命令模式。</p><p><img src="/2021/07/07/linux/1620893684588.png"></p><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p><p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p><ul><li><p>q 退出程序</p></li><li><p>w 保存文件</p></li><li><blockquote><p>==wq保存并退出==</p></blockquote><p><img src="/2021/07/07/linux/1620893768208.png"></p><p><img src="/2021/07/07/linux/1620893952396.png"></p><p><img src="/2021/07/07/linux/1620894068303.png"></p></li><li><p>按ESC键可随时退出底线命令模式。</p></li></ul><p>简单的说，我们可以将这三个模式想成底下的图标来表示：<br><img src="/2021/07/07/linux/20210308180324674.png"></p><blockquote><p>测试</p></blockquote><p>语法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@xiaoding &#x2F;]# vim 查看文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意：</p><p>如果你要查看的文件不存在，那么vim则会创建一个对应的文件</p><p>测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@xiaoding xiaoding520]# vim f2.txt #创建一个f2文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>进入后：<br><img src="/2021/07/07/linux/20210308180407858.png"><br><strong>按下 i 进入输入模式(也称为编辑模式)，开始编辑文字</strong></p><p>在一般模式之中，只要按下 i, o, a 等字符就可以进入输入模式了！</p><p>在编辑模式当中，你可以发现在左下角状态栏中会出现 –INSERT- 的字样，那就是可以输入任意字符的提示。</p><p>这个时候，键盘上除了 Esc 这个按键之外，其他的按键都可以视作为一般的输入按钮了，所以你可以进行任何的编辑。<br><img src="/2021/07/07/linux/2021030818045841.png"><br><strong>按下 ESC 按钮回到一般模式</strong></p><p>好了，假设我已经按照上面的样式给他编辑完毕了，那么应该要如何退出呢？是的！没错！就是给他按下 Esc 这个按钮即可！马上你就会发现画面左下角的 – INSERT – 不见了！</p><p>在一般模式中按下 :wq 储存后离开 vim！<br><img src="/2021/07/07/linux/20210308180544564.png"><br>OK! 这样我们就成功创建了一个 f2.txt 的文件。</p><blockquote><p>Vim 按键说明</p></blockquote><p>除了上面简易范例的 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。</p><p><strong>第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等</strong></p><table><thead><tr><th align="left">移动光标的方法</th><th></th></tr></thead><tbody><tr><td align="left">h 或 向左箭头键(←)</td><td>光标向左移动一个字符</td></tr><tr><td align="left">j 或 向下箭头键(↓)</td><td>光标向下移动一个字符</td></tr><tr><td align="left">k 或 向上箭头键(↑)</td><td>光标向上移动一个字符</td></tr><tr><td align="left">l 或 向右箭头键(→)</td><td>光标向右移动一个字符</td></tr><tr><td align="left">[Ctrl] + [f]</td><td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td></tr><tr><td align="left">[Ctrl] + [b]</td><td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td></tr><tr><td align="left">[Ctrl] + [d]</td><td>屏幕『向下』移动半页</td></tr><tr><td align="left">[Ctrl] + [u]</td><td>屏幕『向上』移动半页</td></tr><tr><td align="left">+</td><td>光标移动到非空格符的下一行</td></tr><tr><td align="left">-</td><td>光标移动到非空格符的上一行</td></tr><tr><td align="left">n&lt; space&gt;</td><td>那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。</td></tr><tr><td align="left">0 或功能键[Home]</td><td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td></tr><tr><td align="left">$ 或功能键[End]</td><td>移动到这一行的最后面字符处(常用)</td></tr><tr><td align="left">H</td><td>光标移动到这个屏幕的最上方那一行的第一个字符</td></tr><tr><td align="left">M</td><td>光标移动到这个屏幕的中央那一行的第一个字符</td></tr><tr><td align="left">L</td><td>光标移动到这个屏幕的最下方那一行的第一个字符</td></tr><tr><td align="left">G</td><td>移动到这个档案的最后一行(常用)</td></tr><tr><td align="left">nG</td><td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td></tr><tr><td align="left">gg</td><td>移动到这个档案的第一行，相当于 1G 啊！(常用)</td></tr><tr><td align="left">==n&lt; Enter&gt;==</td><td>n 为数字。光标向下移动 n 行(常用)</td></tr></tbody></table><table><thead><tr><th align="left">搜索替换</th><th></th></tr></thead><tbody><tr><td align="left">==/word==</td><td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！(常用)</td></tr><tr><td align="left">?word</td><td>向光标之上寻找一个字符串名称为 word 的字符串。</td></tr><tr><td align="left">==n==</td><td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td></tr><tr><td align="left">==N==</td><td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td></tr></tbody></table><table><thead><tr><th align="left">删除复制粘贴</th><th></th></tr></thead><tbody><tr><td align="left">x, X</td><td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td></tr><tr><td align="left">nx</td><td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td></tr><tr><td align="left">dd</td><td>删除游标所在的那一整行(常用)</td></tr><tr><td align="left">ndd</td><td>n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)</td></tr><tr><td align="left">d1G</td><td>删除光标所在到第一行的所有数据</td></tr><tr><td align="left">dG</td><td>删除光标所在到最后一行的所有数据</td></tr><tr><td align="left">d$</td><td>删除游标所在处，到该行的最后一个字符</td></tr><tr><td align="left">d0</td><td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td></tr><tr><td align="left">yy</td><td>复制游标所在的那一行(常用)</td></tr><tr><td align="left">nyy</td><td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td></tr><tr><td align="left">y1G</td><td>复制游标所在行到第一行的所有数据</td></tr><tr><td align="left">yG</td><td>复制游标所在行到最后一行的所有数据</td></tr><tr><td align="left">y0</td><td>复制光标所在的那个字符到该行行首的所有数据</td></tr><tr><td align="left">y$</td><td>复制光标所在的那个字符到该行行尾的所有数据</td></tr><tr><td align="left">p, P</td><td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？那么原本的第 20 行会被推到变成 30 行。(常用)</td></tr><tr><td align="left">J</td><td>将光标所在行与下一行的数据结合成同一行</td></tr><tr><td align="left">c</td><td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td></tr><tr><td align="left">==u==</td><td>复原前一个动作。(常用)</td></tr><tr><td align="left">[Ctrl]+r</td><td>重做上一个动作。(常用)</td></tr></tbody></table><p><strong>第二部分：一般模式切换到编辑模式的可用的按钮说明</strong></p><table><thead><tr><th align="left">进入输入或取代的编辑模式</th><th></th></tr></thead><tbody><tr><td align="left">i, I</td><td>进入输入模式(Insert mode)：i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。(常用)</td></tr><tr><td align="left">a, A</td><td>进入输入模式(Insert mode)：a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td></tr><tr><td align="left">o, O</td><td>进入输入模式(Insert mode)：这是英文字母 o 的大小写。o 为『在目前光标所在的下一行处输入新的一行』；O 为在目前光标所在处的上一行输入新的一行！(常用)</td></tr><tr><td align="left">r, R</td><td>进入取代模式(Replace mode)：r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td></tr><tr><td align="left">[Esc]</td><td>退出编辑模式，回到一般模式中(常用)</td></tr></tbody></table><p><strong>第三部分：一般模式切换到指令行模式的可用的按钮说明</strong></p><table><thead><tr><th align="left">指令行的储存、离开等指令</th><th></th></tr></thead><tbody><tr><td align="left">:w</td><td>将编辑的数据写入硬盘档案中(常用)</td></tr><tr><td align="left">:w!</td><td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td></tr><tr><td align="left">:q</td><td>离开 vi (常用)</td></tr><tr><td align="left">:q!</td><td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td></tr><tr><td align="left">注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td><td></td></tr><tr><td align="left">:wq</td><td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td></tr><tr><td align="left">ZZ</td><td>这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！</td></tr><tr><td align="left">:w [filename]</td><td>将编辑的数据储存成另一个档案（类似另存新档）</td></tr><tr><td align="left">:r [filename]</td><td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td></tr><tr><td align="left">:n1,n2 w [filename]</td><td>将 n1 到 n2 的内容储存成 filename 这个档案。</td></tr><tr><td align="left">:! command</td><td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls /home』即可在 vi 当中看 /home 底下以 ls 输出的档案信息！</td></tr><tr><td align="left"><strong>:set nu</strong></td><td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td></tr><tr><td align="left">:set nonu</td><td>与 set nu 相反，为取消行号！</td></tr></tbody></table><h2 id="账号管理"><a href="#账号管理" class="headerlink" title="账号管理"></a>账号管理</h2><blockquote><p>简介</p></blockquote><p>Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p><p>用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。</p><p>每个用户账号都拥有一个唯一的用户名和各自的口令。</p><p>用户在登录时键入正确的用户名和口令后，就能够进入系统和自己的主目录。</p><p>实现用户账号的管理，要完成的工作主要有如下几个方面：</p><ul><li>用户账号的添加、删除与修改</li><li>用户口令的管理</li><li>用户组的管理</li></ul><blockquote><p>用户账号管理</p></blockquote><p>用户账号的管理工作主要涉及到用户账号的添加、修改和删除。</p><p>添加用户账号就是在系统中创建一个新账号，然后为新账号分配用户号、用户组、<br>主目录和登录Shell等资源</p><blockquote><p>添加账号 useradd</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">useradd 选择 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>选项参数：</p><ul><li>-c comment 指定一段注释性描述。</li><li>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</li><li>-g 用户组 指定用户所属的用户组。</li><li>-G 用户组，用户组 指定用户所属的附加组。</li><li>-m　使用者目录如不存在则自动建立。</li><li>-s Shell文件 指定用户的登录Shell。</li><li>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</li></ul><p>测试：</p><p>Linux中一切皆文件，这里添加用户说白了就是往一个文件中写入用户信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 创建用户[root@xiaoding &#x2F;]# useradd -m xiaoli#我们看一下配置文件信息，是不是多了一条xiaoli的用户信息[root@xiaoding &#x2F;]# cat etc&#x2F;passwdntp:x:38:38::&#x2F;etc&#x2F;ntp:&#x2F;sbin&#x2F;nologin..内容太多部分省略xiaoding:x:1003:0::&#x2F;home&#x2F;xiaoding:&#x2F;bin&#x2F;bashxiaoli:x:1004:1004::&#x2F;home&#x2F;xiaoli:&#x2F;bin&#x2F;bash[root@xiaoding &#x2F;]# #指定用户组创建用户[root@xiaoding &#x2F;]# useradd -m -g root xiaohong#再次查看配置文件信息[root@xiaoding &#x2F;]# cat etc&#x2F;passwdroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash      xiaohong:x:1005:0::&#x2F;home&#x2F;xiaohong:&#x2F;bin&#x2F;bash #看到了吗？xiaohong这一行 1005:后面是0，表示他的用户组是root[root@xiaoding &#x2F;]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当你创建一个用户后，会在/etc/passwd、/etc/shadow, /etc/group等文件，新增一条信<br>息，这些文件存放什么内容，将会在下面讲解</p><blockquote><p>LInux下如何切换用户 su</p></blockquote><p><img src="/2021/07/07/linux/1620896644466.png"></p><blockquote><p>主机名修改：hostname   要修改的名字</p><p>修改完后重新连接就可以了</p></blockquote><p><img src="/2021/07/07/linux/1620899569757.png" alt="1620899569757"></p><p><img src="/2021/07/07/linux/1620896913021.png"></p><p>语法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@xiaoding &#x2F;]# su 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>详细解释：</p><ul><li>从普通用户切换到root用户，还可以使用命令：sudo 用户名</li><li>在终端输入exit或logout或使用快捷方式ctrl+d，可以退回到原来用户，其实ctrl+d也是执行的exit命令</li><li>在切换用户时，如果想在切换用户之后使用新用户的工作环境，可以在su和username之间加-，例如：【su - root】</li><li>root切换其他用户使用su命令可以直接切换，无需密码</li><li>其他用户切换root不管是su或sudo，都需要密码</li><li>$表示普通用户</li><li>#表示超级用户，也就是root用户</li></ul><p>测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># root用户切换xiaoding用户[root@xiaoding &#x2F;]# su xiaoding# 注意不管是root用户还是普通用户使用sudo命令，切换其他用户#  是需要输入密码的[xiaoding@xiaoding &#x2F;]$ sudo rootWe trust you have received the usual lecture from the local SystemAdministrator. It usually boils down to these three things:    #1) Respect the privacy of others.    #2) Think before you type.    #3) With great power comes great responsibility.[sudo] password for xiaoding: xiaoding is not in the sudoers file.  This incident will be reported.# 切换成功，使用exit命令返回之前的用户[xiaoding@xiaoding &#x2F;]$ exitexit[root@xiaoding &#x2F;]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>删除账号 userdel</p></blockquote><p>如果一个用户的账号不再使用，可以从系统中删除。</p><p>删除用户账号就是要将/etc/passwd等系统文件中的该用户记录删除，必要时还删除用户的主目录。</p><p>删除一个已有的用户账号使用userdel命令，其格式如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@xiaoding &#x2F;]# userdel 选项 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常用的选项是 -r，它的作用是把用户的主目录一起删除。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@xiaoding &#x2F;]# userdel -r xiaoli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此命令删除用户kuangshen在系统文件中（主要是/etc/passwd, /etc/shadow, /etc/group等）的记录，同时删除用户的主目录。</p><blockquote><p>修改账号 usermod</p></blockquote><p>修改用户账号就是根据实际情况更改用户的有关属性，如用户号、主目录、用户组、登录Shell等。</p><p>修改已有用户的信息使用usermod命令，其格式如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@xiaoding &#x2F;]# usermod 选项 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常用的选项包括-c, -d, -m, -g, -G, -s, -u以及-o等，这些选项的意义与useradd命令中的选项一样，可以为用户指定新的资源值。</p><p>测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 修改用户id号[root@xiaoding home]# usermod -u 520 -d 123 -g mysql xiaohong# 查看用户信息[root@xiaoding home]# vim &#x2F;etc&#x2F;passwd..省略部分内容xiaohong:x:520:1002::123:&#x2F;bin&#x2F;bash[root@xiaoding home]#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此命令将用户xiaoli，主目录改为/home/123，用户组改为mysql。</p><blockquote><p>用户口令管理</p></blockquote><p>用户管理的一项重要内容是用户口令的管理。用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令。</p><p>指定和修改用户口令的Shell命令是passwd。超级用户可以为自己和其他用户指定口令，普通用户只能用它修改自己的口令。<br>命令的格式为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@xiaoding &#x2F;]#passwd 选项 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可使用的选项：</p><ul><li>-l 锁定口令，即禁用账号。</li><li>-u 口令解锁。</li><li>-d 使账号无口令。</li><li>-f 强迫用户下次登录时修改口令。</li></ul><p>如果默认用户名，则修改当前用户的口令。</p><blockquote><p>Linux系统上输入密码是不会显示的，正常输入就可以了，不是系统问题。</p></blockquote><p>测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># root用户修改其他用户密码[root@xiaoding &#x2F;]# passwd xiaodingChanging password for user xiaoding.New password:           # 输入密码BAD PASSWORD: The password is shorter than 8 characters  Retype new password:    # 确定密码passwd: all authentication tokens updated successfully. # 修改成功# 修改自己的密码[root@xiaoding &#x2F;]# passwd Changing password for user root.New password: BAD PASSWORD: The password is shorter than 8 charactersRetype new password: passwd: all authentication tokens updated successfully.# 切换普通用户[root@xiaoding &#x2F;]# su xiaoding[xiaoding@xiaoding &#x2F;]$ passwdChanging password for user xiaoding.Changing password for xiaoding.(current) UNIX password:  # 输入旧密码，旧密码正确，才能继续修改New password:  # 输入新密码Retype new password: # 确认密码passwd: all authentication tokens updated successfully. # 修改密码[xiaoding@xiaoding &#x2F;]$ [root@xiaoding &#x2F;]# clear# 将用户冻结[root@xiaoding &#x2F;]# passwd -i xiaodingpasswd: bad argument xiaoding: invalid numeric value# 将用户解锁[root@xiaoding &#x2F;]# passwd -u xiaodingUnlocking password for user xiaoding.passwd: Success# 将用户密码设置为空[root@xiaoding &#x2F;]# passwd -d xiaodingRemoving password for user xiaoding.passwd: Success[root@xiaoding &#x2F;]# # 注意：将用户冻结或密码设置为空，用户就不能登录了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h2><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux 系统对用户组的规定有所不同，如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。</p><p>用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对==/etc/group==文件的更新。</p><blockquote><p>添加新用户组 groupadd</p></blockquote><p>语法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@xiaoding &#x2F;]# groupadd 选项 用户组名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选择参数：</p><ul><li>-g GID 指定新用户组的组标识号（GID）。</li><li>-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。</li></ul><p>测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 创建一个用户组，并指定用户组的id[root@xiaoding &#x2F;]# groupadd -g 520 tg    指定的端口号为520，如果不指定就自增1[root@xiaoding &#x2F;]# # 查看group文件，是否新增一条记录[root@xiaoding &#x2F;]# vim etc&#x2F;group..省略部分内容mysql:x:1002:tg:x:520: #看到这个了吗，添加成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>删除用户组 groupdel</p></blockquote><p>语法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@xiaoding &#x2F;]# groupdel 用户组名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 删除用户组[root@xiaoding &#x2F;]# groupdel tg[root@xiaoding &#x2F;]#<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>修改用户组 groupmod</p></blockquote><p>语法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@xiaoding &#x2F;]# groupmod 选项 用户组名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选择参数：</p><ul><li>-g GID 为用户组指定新的组标识号。</li><li>-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</li><li>-n新用户组 将用户组的名字改为新名字</li></ul><p>测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 修改用户组名称[root@xiaoding &#x2F;]# groupmod -n tgnb tg    把tg改成tgnb[root@xiaoding &#x2F;]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>切换用户组</p></blockquote><p>如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。</p><p>用户可以在登录后，使用命令newgrp切换到其他用户组，这个命令的参数就是目的用户组。例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[jiang@xiaoding bin]$ newgrp www<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：如果当前用户不在这个组中，你切换到这个组，需要输入密码，一般用户组没密<br>码，即使有，你即便输入正确，也无法切换</p><blockquote><p>etc/passwd文件介绍</p></blockquote><p>完成用户管理的工作有许多种方法，但是每一种方法实际上都是对有关的系统文件进行修改。</p><p>与用户和用户组相关的信息都存放在一些系统文件中，这些文件包括/etc/passwd, /etc/shadow, /etc/group等。</p><p>下面分别介绍这些文件的内容。</p><p>/etc/passwd文件是用户管理工作涉及的最重要的一个文件。</p><p>Linux系统中的每个用户都在/etc/passwd文件中有一个对应的记录行，它记录了这个用户的一些基本属性。</p><p>这个文件对所有用户都是可读的。它的内容类似下面的例子：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[jiang@xiaoding bin]$ cat &#x2F;etc&#x2F;passwdroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bashbin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologindaemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologinadm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologinlp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologinsync:x:5:0:sync:&#x2F;sbin:&#x2F;bin&#x2F;sync<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的例子我们可以看到，/etc/passwd中一行记录对应着一个用户，每行记录又被冒号(:)分隔为7个字段，其格式和具体含义如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1）”用户名”是代表用户账号的字符串。</p><p>通常长度不超过8个字符，并且由大小写字母和/或数字组成。登录名中不能有冒号(😃，因为冒号在这里是分隔符。</p><p>为了兼容起见，登录名中最好不要包含点字符(.)，并且不使用连字符(-)和加号(+)打头。</p><p>2）“口令”一些系统中，存放着加密后的用户口令字。</p><p>虽然这个字段存放的只是用户口令的加密串，不是明文，但是由于/etc/passwd文件对所有用户都可读，所以这仍是一个安全隐患。因此，现在许多Linux 系统（如SVR4）都使用了shadow技术，把真正的加密后的用户口令字存放到/etc/shadow文件中，而在/etc/passwd文件的口令字段中只存放一个特殊的字符，例如“x”或者“*”。</p><p>3）“用户标识号”是一个整数，系统内部用它来标识用户。</p><p>一般情况下它与用户名是一一对应的。如果几个用户名对应的用户标识号是一样的，系统内部将把它们视为同一个用户，但是它们可以有不同的口令、不同的主目录以及不同的登录Shell等。</p><p>通常用户标识号的取值范围是0～65 535。0是超级用户root的标识号，1～99由系统保留，作为管理账号，普通用户的标识号从100开始。在Linux系统中，这个界限是500。</p><p>4）“组标识号”字段记录的是用户所属的用户组。</p><p>它对应着/etc/group文件中的一条记录。</p><p>5)“注释性描述”字段记录着用户的一些个人情况。</p><p>例如用户的真实姓名、电话、地址等，这个字段并没有什么实际的用途。在不同的Linux 系统中，这个字段的格式并没有统一。在许多Linux系统中，这个字段存放的是一段任意的注释性描述文字，用作finger命令的输出。</p><p>6)“主目录”，也就是用户的起始工作目录。</p><p>它是用户在登录到系统之后所处的目录。在大多数系统中，各用户的主目录都被组织在同一个特定的目录下，而用户主目录的名称就是该用户的登录名。各用户对自己的主目录有读、写、执行（搜索）权限，其他用户对此目录的访问权限则根据具体情况设置。</p><p>7)用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即Shell。</p><p>Shell是用户与Linux系统之间的接口。Linux的Shell有许多种，每种都有不同的特点。常用的有sh(Bourne Shell), csh(C Shell), ksh(Korn Shell), tcsh(TENEX/TOPS-20 type C Shell), bash(Bourne Again Shell)等。</p><p>系统管理员可以根据系统情况和用户习惯为用户指定某个Shell。如果不指定Shell，那么系统使用sh为默认的登录Shell，即这个字段的值为/bin/sh。</p><p>用户的登录Shell也可以指定为某个特定的程序（此程序不是一个命令解释器）。</p><p>利用这一特点，我们可以限制用户只能运行指定的应用程序，在该应用程序运行结束后，用户就自动退出了系统。有些Linux 系统要求只有那些在系统中登记了的程序才能出现在这个字段中。</p><p>8)系统中有一类用户称为伪用户（pseudo users）。</p><p>这些用户在/etc/passwd文件中也占有一条记录，但是不能登录，因为它们的登录Shell为空。它们的存在主要是方便系统管理，满足相应的系统进程对文件属主的要求。</p><p>常见的伪用户如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">伪 用 户 含 义bin 拥有可执行的用户命令文件sys 拥有系统文件adm 拥有帐户文件uucp UUCP使用lp lp或lpd子系统使用nobody NFS使用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>etc/group文件介绍</p></blockquote><p><strong>1、除了上面列出的伪用户外，还有许多标准的伪用户，例如：audit, cron, mail, usenet等，它们也都各自为相关的进程和文件所需要。</strong></p><p>由于/etc/passwd文件是所有用户都可读的，如果用户的密码太简单或规律比较明显的话，一台普通的计算机就能够很容易地将它破解，因此对安全性要求较高的Linux系统都把加密后的口令字分离出来，单独存放在一个文件中，这个文件是/etc/shadow文件。有超级用户才拥有该文件读权限，这就保证了用户密码的安全性。</p><p><strong>2、/etc/shadow中的记录行与/etc/passwd中的一一对应，它由pwconv命令根据/etc/passwd中的数据自动产生</strong></p><p>它的文件格式与/etc/passwd类似，由若干个字段组成，字段之间用”:”隔开。这些字段是：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>“登录名”是与/etc/passwd文件中的登录名相一致的用户账号</li><li>“口令”字段存放的是加密后的用户口令字，长度为13个字符。如果为空，则对应用户没有口令，登录时不需要口令；如果含有不属于集合 { ./0-9A-Za-z }中的字符，则对应的用户不能登录。</li><li>“最后一次修改时间”表示的是从某个时刻起，到用户最后一次修改口令时的天数。时间起点对不同的系统可能不一样。例如在SCO Linux 中，这个时间起点是1970年1月1日。</li><li>“最小时间间隔”指的是两次修改口令之间所需的最小天数。</li><li>“最大时间间隔”指的是口令保持有效的最大天数。</li><li>“警告时间”字段表示的是从系统开始警告用户到用户密码正式失效之间的天数。</li><li>“不活动时间”表示的是用户没有登录活动但账号仍能保持有效的最大天数。</li><li>“失效时间”字段给出的是一个绝对的天数，如果使用了这个字段，那么就给出相应账号的生存期。期满后，该账号就不再是一个合法的账号，也就不能再用来登录了。</li></ul><blockquote><p>etc/shadow文件介绍</p></blockquote><p>用户组的所有信息都存放在/etc/group文件中。</p><p>将用户分组是Linux 系统中对用户进行管理及控制访问权限的一种手段。</p><p>每个用户都属于某个用户组；一个组中可以有多个用户，一个用户也可以属于不同的组。</p><p>当一个用户同时是多个组中的成员时，在/etc/passwd文件中记录的是用户所属的主组，也就是登录时所属的默认组，而其他组称为附加组。</p><p>用户要访问属于附加组的文件时，必须首先使用newgrp命令使自己成为所要访问的组中的成员。</p><p>用户组的所有信息都存放在/etc/group文件中。此文件的格式也类似于/etc/passwd文件，由冒号(:)隔开若干个字段，这些字段有：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">组名:口令:组标识号:组内用户列表<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>“组名”是用户组的名称，由字母或数字构成。与/etc/passwd中的登录名一样，组名不应重复。</li><li>“口令”字段存放的是用户组加密后的口令字。一般Linux 系统的用户组都没有口令，即这个字段一般为空，或者是*。</li><li>“组标识号”与用户标识号类似，也是一个整数，被系统内部用来标识组。</li><li>“组内用户列表”是属于这个组的所有用户的列表/b]，不同用户之间用逗号(,)分隔。这个用户组可能是用户的主组，也可能是附加组。</li></ul><h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><blockquote><p>概述</p></blockquote><p>Linux磁盘管理好坏直接关系到整个系统的性能问题。</p><p>Linux磁盘管理常用命令为 df、du。</p><ul><li>df ：列出文件系统的整体磁盘使用量</li><li>du：检查磁盘空间使用量</li></ul><blockquote><p>df命令</p></blockquote><p>df命令参数功能：检查文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p><p>语法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">df [-ahikHTm] [目录或文件名]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选择参数：</p><ul><li>-a ：列出所有的文件系统，包括系统特有的 /proc 等文件系统；</li><li>-k ：以 KBytes 的容量显示各文件系统；</li><li>-m ：以 MBytes 的容量显示各文件系统；</li><li>-h ：以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</li><li>-H ：以 M=1000K 取代 M=1024K 的进位方式；</li><li>-T ：显示文件系统类型, 连同该 partition 的 filesystem 名称 (例如 ext3) 也列出；</li><li>-i ：不用硬盘容量，而以 inode 的数量来显示</li></ul><p>测试：</p><p><img src="/2021/07/07/linux/1620901817250.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 将系统内所有的文件系统列出来！# 在 Linux 底下如果 df 没有加任何选项# 那么默认会将系统内所有的 (不含特殊内存内的文件系统与 swap) 都以 1 Kbytes 的容量来列出来！[root@xiaoding &#x2F;]# dfFilesystem     1K-blocks   Used Available Use% Mounted ondevtmpfs          889100       0    889100   0% &#x2F;devtmpfs             899460     704    898756   1% &#x2F;dev&#x2F;shmtmpfs             899460     496    898964   1% &#x2F;runtmpfs             899460       0    899460   0% &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;dev&#x2F;vda1       41152812 6586736  32662368  17% &#x2F;tmpfs             179896       0    179896   0% &#x2F;run&#x2F;user&#x2F;01234567891011# 将容量结果以易读的容量格式显示出来[root@xiaoding &#x2F;]# df -hFilesystem     Size Used Avail Use% Mounted ondevtmpfs       869M     0 869M   0% &#x2F;devtmpfs           879M 708K 878M   1% &#x2F;dev&#x2F;shmtmpfs           879M 496K 878M   1% &#x2F;runtmpfs           879M     0 879M   0% &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;dev&#x2F;vda1       40G  6.3G   32G  17% &#x2F;tmpfs           176M     0 176M   0% &#x2F;run&#x2F;user&#x2F;0123456789# 将系统内的所有特殊文件格式及名称都列出来[root@xiaoding &#x2F;]# df -aTFilesystem     Type       1K-blocks   Used Available Use% Mounted onsysfs         sysfs               0       0         0    - &#x2F;sysproc           proc                0       0         0    - &#x2F;procdevtmpfs       devtmpfs       889100       0    889100   0% &#x2F;devsecurityfs     securityfs          0       0         0    - &#x2F;sys&#x2F;kernel&#x2F;securitytmpfs         tmpfs          899460     708    898752   1% &#x2F;dev&#x2F;shmdevpts         devpts              0       0         0    - &#x2F;dev&#x2F;ptstmpfs         tmpfs          899460     496    898964   1% &#x2F;runtmpfs         tmpfs          899460       0    899460   0% &#x2F;sys&#x2F;fs&#x2F;cgroupcgroup         cgroup              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;systemdpstore         pstore              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;pstorecgroup         cgroup              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;freezercgroup         cgroup              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpusetcgroup         cgroup              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;hugetlbcgroup         cgroup              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;blkiocgroup         cgroup              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;net_cls,net_priocgroup         cgroup              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;memorycgroup         cgroup              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;pidscgroup         cgroup              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;cpu,cpuacctcgroup         cgroup              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;devicescgroup         cgroup              0       0         0    - &#x2F;sys&#x2F;fs&#x2F;cgroup&#x2F;perf_eventconfigfs       configfs            0       0         0    - &#x2F;sys&#x2F;kernel&#x2F;config&#x2F;dev&#x2F;vda1     ext4         41152812 6586748  32662356  17% &#x2F;systemd-1      -                   -       -         -    - &#x2F;proc&#x2F;sys&#x2F;fs&#x2F;binfmt_miscmqueue         mqueue              0       0         0    - &#x2F;dev&#x2F;mqueuedebugfs       debugfs             0       0         0    - &#x2F;sys&#x2F;kernel&#x2F;debughugetlbfs     hugetlbfs           0       0         0    - &#x2F;dev&#x2F;hugepagestmpfs         tmpfs          179896       0    179896   0% &#x2F;run&#x2F;user&#x2F;0binfmt_misc   binfmt_misc         0       0         0    - &#x2F;proc&#x2F;sys&#x2F;fs&#x2F;binfmt_misc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>du命令</p></blockquote><p>Linux du命令也是查看使用空间的，但是与df命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的，这里介绍Linux du命令。</p><p>语法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">du [-ahskm] 文件或目录名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选择参数：</p><ul><li>-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。</li><li>-h ：以人们较易读的容量格式 (G/M) 显示；</li><li>-s ：列出总量而已，而不列出每个各别的目录占用容量；</li><li>-S ：不包括子目录下的总计，与 -s 有点差别。</li><li>-k ：以 KBytes 列出容量显示；</li><li>-m ：以 MBytes 列出容量显示；</li></ul><p><img src="/2021/07/07/linux/1620902119075.png"></p><p><img src="/2021/07/07/linux/1620902277797.png"></p><p>测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 只列出当前目录下的所有文件夹容量（包括隐藏文件夹）:# 直接输入 du 没有加任何选项时，则 du 会分析当前所在目录的文件与目录所占用的硬盘空间。[root@xiaoding home]# du16   .&#x2F;redis8    .&#x2F;www&#x2F;.oracle_jre_usage  # 包括隐藏文件的目录24   .&#x2F;www48.                        # 这个目录(.)所占用的总量1234567# 将文件的容量也列出来[root@xiaoding home]# du -a4  .&#x2F;redis&#x2F;.bash_profile4  .&#x2F;redis&#x2F;.bash_logout    ....中间省略....4  .&#x2F;xiaoding.txt # 有文件的列表了48.1234567# 检查根目录底下每个目录所占用的容量[root@xiaoding home]# du -sm &#x2F;*0&#x2F;bin146&#x2F;boot.....中间省略....0&#x2F;proc.....中间省略....1&#x2F;tmp3026&#x2F;usr  # 系统初期最大就是他了啦！513&#x2F;var2666&#x2F;www<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通配符 * 来代表每个目录。</p><p>与 df 不一样的是，du 这个命令其实会直接到文件系统内去搜寻所有的文件数据。</p><blockquote><p>磁盘挂载与卸载</p></blockquote><p>根文件系统之外的其他文件要想能够被访问，都必须通过“关联”至根文件系统上的某个目录来实现，此关联操作即为“挂载”，此目录即为“挂载点”,解除此关联关系的过程称之为“卸载”<br>Linux 的磁盘挂载使用mount命令，卸载使用umount命令。<br>磁盘挂载语法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mount [-t 文件系统] [-L Label名] [-o 额外选项] [-n] 装置文件名 挂载点<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 将 &#x2F;dev&#x2F;hdc6 挂载到 &#x2F;mnt&#x2F;hdc6 上面！[root@www ~]# mkdir &#x2F;mnt&#x2F;hdc6[root@www ~]# mount &#x2F;dev&#x2F;hdc6 &#x2F;mnt&#x2F;hdc6[root@www ~]# dfFilesystem           1K-blocks     Used Available Use% Mounted on&#x2F;dev&#x2F;hdc6              1976312     42072   1833836   3% &#x2F;mnt&#x2F;hdc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>磁盘卸载命令 umount 语法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">umount [-fn] 装置文件名或挂载点<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>选择参数：</p><ul><li>-f ：强制卸除！可用在类似网络文件系统 (NFS) 无法读取到的情况下；</li><li>-n ：不升级 /etc/mtab 情况下卸除。</li></ul><p>卸载/dev/hdc6</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@www ~]# umount &#x2F;dev&#x2F;hdc6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p>Linux中一切皆文件（文件：读写执行，权限（用户、用户组），系统：（磁盘、进程））</p><p>对于我们开发人员来说，其实Linux更多偏向使用即可</p><blockquote><p>基本概念</p></blockquote><ul><li>在Linux中，每一个程序都是有自己的一个进程，每一个进程都有一个id号！</li><li>每一个进程呢，都会有一个父进程！</li><li>进程可以有两种存在的方式：前台！后台运行！</li><li>一般的话服务都是后台运行，基本的程序都是前台运行的！</li></ul><blockquote><p>命令</p></blockquote><p><strong>ps</strong> 查看当前系统中正在执行的各种进程的信息！</p><p>选择参数：</p><ul><li>-a 显示当前终端运行的所有的进程信息（当前的进程的一个）</li><li>-u 以用户的信息显示进程</li><li>-x 显示后台运行的进程的参数</li></ul><p>测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#显示当前终端运行的所有进程信息[root@xiaoding520 &#x2F;]# ps -aux   # 获取所有进程的信息，根据进程名称来查询相应的进程# | 在Linux中叫做管道符       a|b 把a的输出作为b的输入# grep 查找文件中符合条件的字符串ps -aux|grep mysql  查看mysql的所有进程[root@xiaoding520 &#x2F;]# ps -aux|grep mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ps -ef</strong>：可以查看到父进程的信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 查询mysql的父进程，但是一般显示结果并不明显，我们可以通过目录树结构去查看[root@xiaoding520 &#x2F;]# ps -ef|grep mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第一个是用户启动的进程，第二个是父进程</p><p><strong>pstree</strong>：查看所有进程的目录树结构</p><p>选择参数：</p><ul><li>-p 显示所有进程id</li><li>-u 显示用户组</li></ul><p>测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 显示所有进程的目录树结构，显示id和用户组[root@xiaoding520 &#x2F;]# pstree -up<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>图解：</p><p><img src="/2021/07/07/linux/20210308181100984.png"><br><strong>如何杀死进程</strong></p><ol><li>首选查看当前端口号被那个进程占用</li><li>根据查询到进程的id，结束进程</li></ol><p><strong>lsof -i:端口号 #根据端口查询被占用的进程</strong></p><p><strong>netstat #查询端口被进程占用的信息</strong></p><p>可选参数：</p><ul><li>t：表示查看tcp</li><li>u：表示查看udp</li><li>n：表示端口以数字形式表示，没有n直接显示服务名。</li><li>l：表示显示所监听的端口</li><li>p：表示占用端口的进程</li></ul><p>测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#查询3306被那个进程占用[root@xiaoding520 &#x2F;]# lsof -i:3306 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>图解：PID表示当前进程的id<br><img src="/2021/07/07/linux/20210308181218194.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#根据当前进程的id号，杀死进程[root@xiaoding520 &#x2F;]# kill 1971#查询所有端口被进程占用的信息：[root@xiaoding520 &#x2F;]# netstat -tunlp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>图解：<br><img src="/2021/07/07/linux/20210308181259492.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 根据端口号，查询占用进程的信息[root@xiaoding520 &#x2F;]# netstat -tunlp|grep 3306tcp6       0      0 :::3306                 :::*                    LISTEN      1971&#x2F;mysqld         tcp6       0      0 :::33060                :::*                    LISTEN      1971&#x2F;mysqld         [root@xiaoding520 &#x2F;]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三种软件安装方式及服务器基本环境搭建"><a href="#三种软件安装方式及服务器基本环境搭建" class="headerlink" title="三种软件安装方式及服务器基本环境搭建"></a>三种软件安装方式及服务器基本环境搭建</h2><p>环境安装</p><h3 id="jdk安装（rpm安装）"><a href="#jdk安装（rpm安装）" class="headerlink" title="jdk安装（rpm安装）"></a>jdk安装（rpm安装）</h3><p>1、rpm下载地址<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p><p>2、如果有安装openjdk 则卸载</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@kuangshen ~]# java -versionjava version &quot;1.8.0_121&quot;Java(TM) SE Runtime Environment (build 1.8.0_121-b13)Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode)# 检查[root@kuangshen ~]# rpm -qa|grep jdkjdk1.8.0_121-1.8.0_121-fcs.x86_64# 卸载 -e --nodeps 强制删除[root@kuangshen ~]# rpm -e --nodeps jdk1.8.0_121-1.8.0_121-fcs.x86_64[root@kuangshen ~]# java -version-bash: &#x2F;usr&#x2F;bin&#x2F;java: No such file or directory  # OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/linux/1620911552287.png"></p><p>3、安装JDK</p><p><img src="/2021/07/07/linux/1620911727672.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 安装java rpm[root@kuangshen kuangshen]# rpm -ivh jdk-8u221-linux-x64.rpm&#x3D;&#x3D;rpm包安装的似乎不用配置环境&#x3D;&#x3D;（一定别配置）&#x3D;&#x3D;# 安装完成后配置环境变量 文件：&#x2F;etc&#x2F;profileJAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_221-amd64CLASSPATH&#x3D;%JAVA_HOME%&#x2F;lib:%JAVA_HOME%&#x2F;jre&#x2F;libPATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin:$JAVA_HOME&#x2F;jre&#x2F;binexport PATH CLASSPATH JAVA_HOME# 保存退出# 让新增的环境变量生效！source &#x2F;etc&#x2F;profile# 测试 java -version[root@kuangshen java]# java -versionjava version &quot;1.8.0_221&quot;Java(TM) SE Runtime Environment (build 1.8.0_221-b11)Java HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/linux/1620911933831.png"></p><blockquote><p>配置变量           文件：/etc/profile</p></blockquote><p>==rpm包安装的似乎不用配置环境==（一定别配置）</p><p><img src="/2021/07/07/linux/1620912591779.png"></p><blockquote><p>发布项目</p></blockquote><p>==先在idea打包==</p><p><img src="/2021/07/07/linux/1620914030392.png"></p><p>==找到包==</p><p><img src="/2021/07/07/linux/1620914052649.png"></p><p>==在本地试着跑一下==</p><p>==在jar目录下运行cmd==</p><p><img src="/2021/07/07/linux/1620914143715.png"></p><p>==上传==</p><p><img src="/2021/07/07/linux/1620914265526.png"></p><p>==看一下防火墙是否开启端口（下方有命令）==</p><p><img src="/2021/07/07/linux/1620914495622.png"></p><p><img src="/2021/07/07/linux/1620915806882.png"></p><h3 id="Tomcat安装（解压缩安装）"><a href="#Tomcat安装（解压缩安装）" class="headerlink" title="Tomcat安装（解压缩安装）"></a>Tomcat安装（解压缩安装）</h3><p>1、安装好了Java环境后我们可以测试下Tomcat！准备好Tomcat的安装包！</p><p>2、将文件移动到/usr/tomcat/下，并解压！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@kuangshen kuangshen]# mv apache-tomcat-9.0.22.tar.gz &#x2F;usr[root@kuangshen kuangshen]# cd &#x2F;usr[root@kuangshen usr]# lsapache-tomcat-9.0.22.tar.gz[root@kuangshen usr]# tar -zxvf apache-tomcat-9.0.22.tar.gz   # 解压<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、运行Tomcat，进入bin目录，和我们以前在Windows下看的都是一样的</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 执行：startup.sh --&gt;启动tomcat# 执行：shutdown.sh --&gt;关闭tomcat.&#x2F;startup.sh.&#x2F;shutdown.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、确保Linux的防火墙端口是开启的，如果是阿里云，需要保证阿里云的安全组策略是开放的！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 查看firewall服务状态systemctl status firewalld# 开启、重启、关闭、firewalld.service服务# 开启service firewalld start# 重启service firewalld restart# 关闭service firewalld stop# 查看防火墙规则firewall-cmd --list-all    # 查看全部信息firewall-cmd --list-ports  # 只看端口信息# 开启端口开端口命令：firewall-cmd --zone&#x3D;public --add-port&#x3D;80&#x2F;tcp --permanent重启防火墙：systemctl restart firewalld.service命令含义：--zone #作用域--add-port&#x3D;80&#x2F;tcp  #添加端口，格式为：端口&#x2F;通讯协议--permanent   #永久生效，没有此参数重启后失效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开启tomcat</p><p><img src="/2021/07/07/linux/1620965398732.png"></p><h3 id="安装Docker（yum安装）"><a href="#安装Docker（yum安装）" class="headerlink" title="安装Docker（yum安装）"></a>安装Docker（yum安装）</h3><blockquote><p>基于 CentOS 7 安装</p></blockquote><blockquote><p>yum install -y yumm源</p></blockquote><ol><li><p>官网安装参考手册：<a href="https://docs.docker.com/install/linux/docker-ce/centos/">https://docs.docker.com/install/linux/docker-ce/centos/</a></p></li><li><p>确定你是CentOS7及以上版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@192 Desktop]# cat &#x2F;etc&#x2F;redhat-releaseCentOS Linux release 7.2.1511 (Core)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>yum安装gcc相关（需要确保 虚拟机可以上外网 ）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum -y install 包名  #yum install 安装命令   -y 所有的提示都为yyum -y install gccyum -y install gcc-c++<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>卸载旧版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum -y remove docker docker-common docker-selinux docker-engine# 官网版本yum remove docker \          docker-client \          docker-client-latest \          docker-common \          docker-latest \          docker-latest-logrotate \          docker-logrotate \          docker-engine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>安装需要的软件包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum install -y yum-utils device-mapper-persistent-data lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>设置stable镜像仓库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 错误yum-config-manager --add-repo https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo## 报错[Errno 14] curl#35 - TCP connection reset by peer[Errno 12] curl#35 - Timeout# 正确推荐使用国内的yum-config-manager --add-repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>更新yum软件包索引</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum makecache fast   #centos8不用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>安装Docker CE</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum -y install docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>启动docker</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>测试</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker versiondocker run hello-worlddocker images<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="宝塔面板安装"><a href="#宝塔面板安装" class="headerlink" title="宝塔面板安装"></a>宝塔面板安装</h3><p><a href="https://www.bilibili.com/video/av91821322">https://www.bilibili.com/video/av91821322</a></p><h2 id="本地连接阿里云数据库"><a href="#本地连接阿里云数据库" class="headerlink" title="本地连接阿里云数据库"></a>本地连接阿里云数据库</h2><h2 id="本地电脑连接阿里云服务器上搭建的MySQL数据库"><a href="#本地电脑连接阿里云服务器上搭建的MySQL数据库" class="headerlink" title="本地电脑连接阿里云服务器上搭建的MySQL数据库"></a>本地电脑连接阿里云服务器上搭建的MySQL数据库</h2><h3 id="查看数据库是否启动"><a href="#查看数据库是否启动" class="headerlink" title="查看数据库是否启动"></a>查看数据库是否启动</h3><p> 首先要看一下数据库是否成功启动，如果没有启动肯定是不能连接的。使用以下命令查看我们云服务器端的数据库是否成功启动：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">service mysqld status1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/linux/20200626121345324.png"><br> 如果成功启动说明我们的数据库是启动的，可以进行下一步。</p><h3 id="对外开放3306端口"><a href="#对外开放3306端口" class="headerlink" title="对外开放3306端口"></a>对外开放3306端口</h3><p> 这个时候如果我们直接在本地 Navicat for MySQL 中直接连接时不能连接的，如果直接连接会报如下错误：<br><img src="/2021/07/07/linux/20200626122303966.png"><br><img src="/2021/07/07/linux/20200626121956983.png"><br> 因为<code>阿里云的服务器默认端口是不对外开放的，如果想要供外部访问，需要在安全组中手动添加规则</code>。所以我们需要手动在安全组中添加规则，具体操作步骤如下：<br>1.登录阿里云服务器并进入控制台，点击<code>【云服务器ECS】</code>。<br><img src="/2021/07/07/linux/20200626122715117.png"><br><img src="/2021/07/07/linux/20200626122803336.png"><br><img src="/2021/07/07/linux/20200626122955707.png"><br>2.在<code>【云服务器ECS】</code>点击<code>【实例】</code>并跳转到实例列表。在实例列表找到要开放端口的云服务器实例。并点击后面的<code>【更多】</code>–&gt;<code>【网络和安全组】</code>–&gt;<code>【安全组配置】</code>。<br><img src="/2021/07/07/linux/20200626123340876.png"><br><img src="/2021/07/07/linux/2020062613040129.png"><br>3.在<code>【本实例安全组】</code>内点击<code>【配置规则】</code>打开<code>【安全组规则】</code>。这里有出/入的方向，选择<code>入方向</code>。然后点击<code>【手动添加】</code>将3306端口开放即可。<br><img src="/2021/07/07/linux/20200626131037269.png"><br><img src="/2021/07/07/linux/20200626131230981.png"><br><img src="/2021/07/07/linux/20200626131711326.png"><br>注意：这里的优先级可选范围为1-100，默认值为1，即最高优先级。描述可以随便写，写不写都可以。</p><hr><h3 id="设置数据库用户访问权限"><a href="#设置数据库用户访问权限" class="headerlink" title="设置数据库用户访问权限"></a>设置数据库用户访问权限</h3><p> 将云服务器的3306端口开放之后还是不可以在本地进行连接，因为用户的访问权限默认是<code>localhost</code>，并不能从外部进行访问，需要手动赋权。<br> 我们可以使用如下命令查看数据库中各个用户的访问权限：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">select user,host from mysql.user;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/07/07/linux/2020062613241566.png"><br> 使用如下命令将所需要开放的用户的访问权限改为任意：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '*********' WITH GRANT OPTION;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意：这里的密码需要最短为8位，而且最好同时有<code>大写字母、小写字母、数字、特殊符号</code>否则可能通不过密码强度校验而报错。也可以使用<code>set global validate_password_policy=0;</code>命令临时去掉密码强度校验。<br><img src="/2021/07/07/linux/20200626133336373.png"><br>然后再查看一下用户的访问权限变为%说明赋权成功：<br><img src="/2021/07/07/linux/20200626133513499.png"></p><hr><h3 id="本地连接服务器数据库"><a href="#本地连接服务器数据库" class="headerlink" title="本地连接服务器数据库"></a>本地连接服务器数据库</h3><p> 完成上面三个步骤然后就可以正常在本地电脑上连接云服务器上的数据库了。然后就可以在Navicat for MySQL中操作云服务器上的数据库啦。<br><img src="/2021/07/07/linux/20200626122303966.png" alt="新建连接"><br><img src="/2021/07/07/linux/20200626133921758.png" alt="连接成功"><br><img src="/2021/07/07/linux/20200626134143341.png" alt="连接成功"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 与命令有关的笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis</title>
      <link href="/2021/07/07/redis/"/>
      <url>/2021/07/07/redis/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Redis笔记"><a href="#Redis笔记" class="headerlink" title="Redis笔记"></a>Redis笔记</h1><h2 id="一、Nosql概述"><a href="#一、Nosql概述" class="headerlink" title="一、Nosql概述"></a>一、Nosql概述</h2><h3 id="为什么使用Nosql"><a href="#为什么使用Nosql" class="headerlink" title="为什么使用Nosql"></a>为什么使用Nosql</h3><blockquote><p>1、单机Mysql时代</p></blockquote><p><img src="/2021/07/07/redis/2020082010365930.png"></p><p>90年代,一个网站的访问量一般不会太大，单个数据库完全够用。随着用户增多，网站出现以下问题</p><ol><li>数据量增加到一定程度，单机数据库就放不下了</li><li>数据的索引（B+ Tree）,一个机器内存也存放不下</li><li>访问量变大后（读写混合），一台服务器承受不住。</li></ol><blockquote><p>2、Memcached(缓存) + Mysql + 垂直拆分（读写分离）</p></blockquote><p>网站80%的情况都是在读，每次都要去查询数据库的话就十分的麻烦！所以说我们希望减轻数据库的压力，我们可以使用缓存来保证效率！</p><p><img src="/2021/07/07/redis/20200820103713734.png"></p><p>优化过程经历了以下几个过程：</p><ol><li>优化数据库的数据结构和索引(难度大)</li><li>文件缓存，通过IO流获取比每次都访问数据库效率略高，但是流量爆炸式增长时候，IO流也承受不了</li><li>MemCache,当时最热门的技术，通过在数据库和数据库访问层之间加上一层缓存，第一次访问时查询数据库，将结果保存到缓存，后续的查询先检查缓存，若有直接拿去使用，效率显著提升。</li></ol><blockquote><p>3、分库分表 + 水平拆分 + Mysql集群</p></blockquote><p><img src="/2021/07/07/redis/20200820103739584.png"></p><blockquote><p>4、如今最近的年代</p></blockquote><p> 如今信息量井喷式增长，各种各样的数据出现（用户定位数据，图片数据等），大数据的背景下关系型数据库（RDBMS）无法满足大量数据要求。Nosql数据库就能轻松解决这些问题。</p><blockquote><p>目前一个基本的互联网项目</p></blockquote><p><img src="/2021/07/07/redis/20200820103804572.png"></p><blockquote><p>为什么要用NoSQL ？</p></blockquote><p>用户的个人信息，社交网络，地理位置。用户自己产生的数据，用户日志等等爆发式增长！<br>这时候我们就需要使用NoSQL数据库的，Nosql可以很好的处理以上的情况！</p><h3 id="什么是Nosql"><a href="#什么是Nosql" class="headerlink" title="什么是Nosql"></a>什么是Nosql</h3><p><strong>NoSQL = Not Only SQL（不仅仅是SQL）</strong></p><p>Not Only Structured Query Language</p><p>关系型数据库：列+行，同一个表下数据的结构是一样的。</p><p>非关系型数据库：数据存储没有固定的格式，并且可以进行横向扩展。</p><p>NoSQL泛指非关系型数据库，随着web2.0互联网的诞生，传统的关系型数据库很难对付web2.0时代！尤其是超大规模的高并发的社区，暴露出来很多难以克服的问题，NoSQL在当今大数据环境下发展的十分迅速，Redis是发展最快的。</p><h3 id="Nosql特点"><a href="#Nosql特点" class="headerlink" title="Nosql特点"></a>Nosql特点</h3><ol><li><p>方便扩展（数据之间没有关系，很好扩展！）</p></li><li><p>大数据量高性能（Redis一秒可以写8万次，读11万次，NoSQL的缓存记录级，是一种细粒度的缓存，性能会比较高！）</p></li><li><p>数据类型是多样型的！（不需要事先设计数据库，随取随用）</p></li><li><p>传统的 RDBMS 和 NoSQL</p><pre class="line-numbers language-none"><code class="language-none">传统的 RDBMS(关系型数据库)- 结构化组织- SQL- 数据和关系都存在单独的表中 row col- 操作，数据定义语言- 严格的一致性- 基础的事务- ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><pre class="line-numbers language-none"><code class="language-none">Nosql- 不仅仅是数据- 没有固定的查询语言- 键值对存储，列存储，文档存储，图形数据库（社交关系）- 最终一致性- CAP定理和BASE- 高性能，高可用，高扩展- ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>了解：3V + 3高</p></blockquote><p>大数据时代的3V ：主要是<strong>描述问题</strong>的</p><ol><li>海量Velume</li><li>多样Variety</li><li>实时Velocity</li></ol><p>大数据时代的3高 ： 主要是<strong>对程序的要求</strong></p><ol><li>高并发</li><li>高可扩</li><li>高性能</li></ol><p>真正在公司中的实践：NoSQL + RDBMS 一起使用才是最强的。</p><h3 id="阿里巴巴演进分析"><a href="#阿里巴巴演进分析" class="headerlink" title="阿里巴巴演进分析"></a>阿里巴巴演进分析</h3><p>推荐阅读：阿里云的这群疯子<a href="https://yq.aliyun.com/articles/653511">https://yq.aliyun.com/articles/653511</a></p><p><img src="/2021/07/07/redis/20200820103829446.png"></p><p><img src="/2021/07/07/redis/20200820103851613.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 商品信息- 一般存放在关系型数据库：Mysql,阿里巴巴使用的Mysql都是经过内部改动的。# 商品描述、评论(文字居多)- 文档型数据库：MongoDB# 图片- 分布式文件系统 FastDFS- 淘宝：TFS- Google: GFS- Hadoop: HDFS- 阿里云: oss# 商品关键字 用于搜索- 搜索引擎：solr,elasticsearch- 阿里：Isearch 多隆# 商品热门的波段信息- 内存数据库：Redis，Memcache# 商品交易，外部支付接口- 第三方应用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Nosql的四大分类"><a href="#Nosql的四大分类" class="headerlink" title="Nosql的四大分类"></a>Nosql的四大分类</h3><blockquote><p><strong>KV键值对</strong></p></blockquote><ul><li>新浪：<strong>Redis</strong></li><li>美团：Redis + Tair</li><li>阿里、百度：Redis + Memcache</li></ul><blockquote><p><strong>文档型数据库（bson数据格式）：</strong></p></blockquote><ul><li><strong>MongoDB</strong>(掌握)<ul><li>基于分布式文件存储的数据库。C++编写，用于处理大量文档。</li><li>MongoDB是RDBMS和NoSQL的中间产品。MongoDB是非关系型数据库中功能最丰富的，NoSQL中最像关系型数据库的数据库。</li></ul></li><li>ConthDB</li></ul><blockquote><p><strong>列存储数据库</strong></p></blockquote><ul><li><strong>HBase</strong>(大数据必学)</li><li>分布式文件系统</li></ul><blockquote><p><strong>图关系数据库</strong></p></blockquote><p>用于广告推荐，社交网络</p><ul><li><strong>Neo4j</strong>、InfoGrid</li></ul><table><thead><tr><th><strong>分类</strong></th><th><strong>Examples举例</strong></th><th><strong>典型应用场景</strong></th><th><strong>数据模型</strong></th><th><strong>优点</strong></th><th><strong>缺点</strong></th></tr></thead><tbody><tr><td><strong>键值对（key-value）</strong></td><td>Tokyo Cabinet/Tyrant, Redis, Voldemort, Oracle BDB</td><td>内容缓存，主要用于处理大量数据的高访问负载，也用于一些日志系统等等。</td><td>Key 指向 Value 的键值对，通常用hash table来实现</td><td>查找速度快</td><td>数据无结构化，通常只被当作字符串或者二进制数据</td></tr><tr><td><strong>列存储数据库</strong></td><td>Cassandra, HBase, Riak</td><td>分布式的文件系统</td><td>以列簇式存储，将同一列数据存在一起</td><td>查找速度快，可扩展性强，更容易进行分布式扩展</td><td>功能相对局限</td></tr><tr><td><strong>文档型数据库</strong></td><td>CouchDB, MongoDb</td><td>Web应用（与Key-Value类似，Value是结构化的，不同的是数据库能够了解Value的内容）</td><td>Key-Value对应的键值对，Value为结构化数据</td><td>数据结构要求不严格，表结构可变，不需要像关系型数据库一样需要预先定义表结构</td><td>查询性能不高，而且缺乏统一的查询语法。</td></tr><tr><td><strong>图形(Graph)数据库</strong></td><td>Neo4J, InfoGrid, Infinite Graph</td><td>社交网络，推荐系统等。专注于构建关系图谱</td><td>图结构</td><td>利用图结构相关算法。比如最短路径寻址，N度关系查找等</td><td>很多时候需要对整个图做计算才能得出需要的信息，而且这种结构不太好做分布式的集群</td></tr></tbody></table><h2 id="二、Redis入门"><a href="#二、Redis入门" class="headerlink" title="二、Redis入门"></a>二、Redis入门</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote><p>Redis是什么？</p></blockquote><p>Redis（Remote Dictionary Server )，即远程字典服务。</p><p>是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、<strong>Key-Value数据库</strong>，并提供多种语言的API，被称为结构化数据库。</p><p>与memcached一样，为了保证效率，<strong>数据都是缓存在内存中</strong>。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p><blockquote><p>Redis能该干什么？</p></blockquote><ol><li>内存存储、持久化，内存是断电即失的，所以需要持久化（RDB、AOF）</li><li>高效率、用于高速缓冲</li><li>发布订阅系统</li><li>地图信息分析</li><li>计时器、计数器(eg：浏览量)</li><li>。。。</li></ol><blockquote><p>特性</p></blockquote><ol><li><p>多样的数据类型</p></li><li><p>持久化</p></li><li><p>集群</p></li><li><p>事务</p><p>…</p></li></ol><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>官网：<a href="https://redis.io/">https://redis.io/</a></p><p>推荐使用Linux服务器学习。</p><p>windows版本的Redis已经停更很久了…</p><h3 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows安装</h3><p>安装包：<a href="https://github.com/microsoftarchive/redis/releases/tag/win-3.2.100">https://github.com/microsoftarchive/redis/releases/tag/win-3.2.100</a></p><ol><li><p>解压安装包<br><img src="/2021/07/07/redis/1622445778025.png"></p></li><li><p>开启redis-server.exe</p></li><li><p><img src="/2021/07/07/redis/1622445850159.png"></p></li><li><p>启动redis-cli.exe测试（上面的服务不要关）</p><p><img src="/2021/07/07/redis/1622446056496.png"></p></li></ol><h3 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h3><ol><li><p>下载安装包！<code>redis-5.0.8.tar.gz</code></p></li><li><p>解压Redis的安装包！程序一般放在 <code>/opt</code> 目录下</p><p><img src="/2021/07/07/redis/20200820104016426.png"></p></li><li><p>基本环境安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum install gcc-c++# 然后进入redis目录下执行make# 然后执行make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p><img src="/2021/07/07/redis/20200820104048327.png"></p><ol><li><p>redis默认安装路径 <code>/usr/local/bin</code><img src="/2021/07/07/redis/20200820104140692.png"></p></li><li><p>将redis的配置文件复制到 程序安装目录 <code>/usr/local/bin/kconfig</code>下</p><p><img src="/2021/07/07/redis/1622448620604.png"></p></li><li><p>redis默认不是后台启动的，需要修改配置文件！</p><p><img src="/2021/07/07/redis/1622448635310.png"></p></li><li><p>通过制定的配置文件启动redis服务</p><p><img src="/2021/07/07/redis/1622448649650.png"></p></li></ol><blockquote><p>宝塔面板直接省略以上步骤</p></blockquote><ol><li><p>使用redis-cli连接指定的端口号测试，Redis的默认端口6379</p><p><img src="/2021/07/07/redis/1622448458671.png"></p></li><li><p>查看redis进程是否开启</p><p><img src="/2021/07/07/redis/1622448566371.png"></p></li><li><p>关闭Redis服务 <code>shutdown</code></p><p><img src="https://img-blog.csdnimg.cn/20200820104314297.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center"></p></li><li><p>再次查看进程是否存在</p></li><li><p><img src="/2021/07/07/redis/1622448923735.png"></p></li><li><p>后面我们会使用单机多Redis启动集群测试</p></li></ol><h3 id="测试性能"><a href="#测试性能" class="headerlink" title="测试性能"></a>测试性能</h3><p><strong>redis-benchmark：</strong>Redis官方提供的性能测试工具，参数选项如下：</p><p><img src="/2021/07/07/redis/20200513214125892.png"></p><p><strong>简单测试：</strong></p><blockquote><p>如果不行可以修改配置protected-mode yes  默认yes改成no</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 测试：100个并发连接 100000请求redis-benchmark -h localhost -p 6379 -c 100 -n 100000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/20200820104343472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center"></p><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><blockquote><p>redis默认有16个数据库</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200820104357466.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center"></p><p>默认使用的第0个;</p><p>16个数据库为：DB 0~DB 15<br>==默认使用DB 0== ，可以使用<code>select n</code>切换到DB n，<code>dbsize</code>可以查看当前数据库的大小，与key数量相关。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">127.0.0.1:6379&gt; config get databases # 命令行查看数据库数量databases1) &quot;databases&quot;2) &quot;16&quot;127.0.0.1:6379&gt; select 8 # 切换数据库 DB 8OK127.0.0.1:6379[8]&gt; dbsize # 查看数据库大小(integer) 0# 不同数据库之间 数据是不能互通的，并且dbsize 是根据库中key的个数。127.0.0.1:6379&gt; set name sakura OK127.0.0.1:6379&gt; SELECT 8OK127.0.0.1:6379[8]&gt; get name # db8中并不能获取db0中的键值对。(nil)127.0.0.1:6379[8]&gt; DBSIZE(integer) 0127.0.0.1:6379[8]&gt; SELECT 0OK127.0.0.1:6379&gt; keys *1) &quot;counter:__rand_int__&quot;2) &quot;mylist&quot;3) &quot;name&quot;4) &quot;key:__rand_int__&quot;5) &quot;myset:__rand_int__&quot;127.0.0.1:6379&gt; DBSIZE # size和key个数相关(integer) 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>keys *</code> ：查看当前数据库中所有的key。</p><p><code>flushdb</code>：清空当前数据库中的键值对。</p><p><code>flushall</code>：清空所有数据库的键值对。</p><blockquote><p><strong>Redis是单线程的，Redis是基于内存操作的。</strong></p></blockquote><p>所以Redis的性能瓶颈不是CPU,而是机器内存和网络带宽。</p><p>那么为什么Redis的速度如此快呢，性能这么高呢？QPS达到10W+</p><blockquote><p><strong>Redis为什么单线程还这么快？</strong></p></blockquote><ul><li>误区1：高性能的服务器一定是多线程的？</li><li>误区2：多线程（CPU上下文会切换！）一定比单线程效率高！</li></ul><p>核心：Redis是将所有的数据放在内存中的，所以说使用单线程去操作效率就是最高的，多线程（CPU上下文会切换：耗时的操作！），对于内存系统来说，如果没有上下文切换效率就是最高的，多次读写都是在一个CPU上的，在内存存储数据情况下，单线程就是最佳的方案。</p><h2 id="三、五大数据类型"><a href="#三、五大数据类型" class="headerlink" title="三、五大数据类型"></a>三、五大数据类型</h2><p> Redis是一个开源（BSD许可），内存存储的数据结构服务器，可用作<strong>数据库</strong>，<strong>高速缓存</strong>和<strong>消息队列代理</strong>。它支持<a href="https://www.redis.net.cn/tutorial/3508.html">字符串</a>、<a href="https://www.redis.net.cn/tutorial/3509.html">哈希表</a>、<a href="https://www.redis.net.cn/tutorial/3510.html">列表</a>、<a href="https://www.redis.net.cn/tutorial/3511.html">集合</a>、<a href="https://www.redis.net.cn/tutorial/3512.html">有序集合</a>，<a href="https://www.redis.net.cn/tutorial/3508.html">位图</a>，<a href="https://www.redis.net.cn/tutorial/3513.html">hyperloglogs</a>等数据类型。内置复制、<a href="https://www.redis.net.cn/tutorial/3516.html">Lua脚本</a>、LRU收回、<a href="https://www.redis.net.cn/tutorial/3515.html">事务</a>以及不同级别磁盘持久化功能，同时通过Redis Sentinel提供高可用，通过Redis Cluster提供自动<a href="https://www.redis.net.cn/tutorial/3524.html">分区</a>。</p><h3 id="Redis-key"><a href="#Redis-key" class="headerlink" title="Redis-key"></a>Redis-key</h3><blockquote><p>在redis中无论什么数据类型，在数据库中都是以key-value形式保存，通过进行对Redis-key的操作，来完成对数据库中数据的操作。</p></blockquote><p>下面学习的命令：</p><ul><li><code>exists key</code>：判断键是否存在</li><li><code>del key</code>：删除键值对</li><li><code>move key db</code>：将键值对移动到指定数据库</li><li><code>expire key second</code>：设置键值对的过期时间</li><li><code>type key</code>：查看value的数据类型</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">127.0.0.1:6379&gt; keys * # 查看当前数据库所有key(empty list or set)127.0.0.1:6379&gt; set name qinjiang # set keyOK127.0.0.1:6379&gt; set age 20OK127.0.0.1:6379&gt; keys *1) &quot;age&quot;2) &quot;name&quot;127.0.0.1:6379&gt; move age 1 # 将键值对移动到指定数据库(integer) 1127.0.0.1:6379&gt; EXISTS age # 判断键是否存在(integer) 0 # 不存在127.0.0.1:6379&gt; EXISTS name(integer) 1 # 存在127.0.0.1:6379&gt; SELECT 1OK127.0.0.1:6379[1]&gt; keys *1) &quot;age&quot;127.0.0.1:6379[1]&gt; del age # 删除键值对(integer) 1 # 删除个数127.0.0.1:6379&gt; set age 20OK127.0.0.1:6379&gt; EXPIRE age 15 # 设置键值对的过期时间(integer) 1 # 设置成功 开始计数127.0.0.1:6379&gt; ttl age # 查看key的过期剩余时间(integer) 13127.0.0.1:6379&gt; ttl age(integer) 11127.0.0.1:6379&gt; ttl age(integer) 9127.0.0.1:6379&gt; ttl age(integer) -2 # -2 表示key过期，-1表示key未设置过期时间127.0.0.1:6379&gt; get age # 过期的key 会被自动delete(nil)127.0.0.1:6379&gt; keys *1) &quot;name&quot;127.0.0.1:6379&gt; type name # 查看value的数据类型string<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于<code>TTL</code>命令</p><p>Redis的key，通过TTL命令返回key的过期时间，一般来说有3种：</p><ol><li>当前key没有设置过期时间，所以会返回-1.</li><li>当前key有设置过期时间，而且key已经过期，所以会返回-2.</li><li>当前key有设置过期时间，且key还没有过期，故会返回key的正常剩余时间.</li></ol><p>关于重命名<code>RENAME</code>和<code>RENAMENX</code></p><ul><li><code>RENAME key newkey</code>修改 key 的名称</li><li><code>RENAMENX key newkey</code>仅当 newkey 不存在时，将 key 改名为 newkey 。</li></ul><p>更多命令学习：<a href="https://www.redis.net.cn/order/">https://www.redis.net.cn/order/</a></p><h3 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String(字符串)"></a>String(字符串)</h3><p>普通的set、get直接略过。</p><table><thead><tr><th>命令</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>APPEND key value</code></td><td>向指定的key的value后追加字符串（如果key不存在，就相当于setkey）</td><td>127.0.0.1:6379&gt; set msg hello OK 127.0.0.1:6379&gt; append msg “ world” (integer) 11 127.0.0.1:6379&gt; get msg “hello world”</td></tr><tr><td><code>DECR/INCR key</code></td><td>将指定key的value数值进行+1/-1(仅对于数字)</td><td>127.0.0.1:6379&gt; set age 20 OK 127.0.0.1:6379&gt; incr age (integer) 21 127.0.0.1:6379&gt; decr age (integer) 20</td></tr><tr><td><code>INCRBY/DECRBY key n</code></td><td>按指定的步长对数值进行加减</td><td>127.0.0.1:6379&gt; INCRBY age 5 (integer) 25 127.0.0.1:6379&gt; DECRBY age 10 (integer) 15</td></tr><tr><td><code>INCRBYFLOAT key n</code></td><td>为数值加上浮点型数值</td><td>127.0.0.1:6379&gt; INCRBYFLOAT age 5.2 “20.2”</td></tr><tr><td><code>STRLEN key</code></td><td>获取key保存值的字符串长度</td><td>127.0.0.1:6379&gt; get msg “hello world” 127.0.0.1:6379&gt; STRLEN msg (integer) 11</td></tr><tr><td><code>GETRANGE key start end</code></td><td>按起止位置获取字符串（闭区间，起止位置都取）（0 -1 表示取全部）</td><td>127.0.0.1:6379&gt; get msg “hello world” 127.0.0.1:6379&gt; GETRANGE msg 3 9 “lo worl”</td></tr><tr><td><code>SETRANGE key offset value</code></td><td>用指定的value 替换key中 offset开始的值</td><td>127.0.0.1:6379&gt; SETRANGE msg 2 hello (integer) 7 127.0.0.1:6379&gt; get msg “tehello”</td></tr><tr><td><code>GETSET key value</code></td><td>将给定 key 的值设为 value ，并返回 key 的旧值(old value)。</td><td>127.0.0.1:6379&gt; GETSET msg test “hello world”</td></tr><tr><td><code>SETNX key value</code></td><td>仅当key不存在时进行set</td><td>127.0.0.1:6379&gt; SETNX msg test (integer) 0 127.0.0.1:6379&gt; SETNX name sakura (integer) 1</td></tr><tr><td><code>SETEX key seconds value</code></td><td>set 键值对并设置过期时间</td><td>127.0.0.1:6379&gt; setex name 10 root OK 127.0.0.1:6379&gt; get name (nil)</td></tr><tr><td><code>MSET key1 value1 [key2 value2..]</code></td><td>批量set键值对</td><td>127.0.0.1:6379&gt; MSET k1 v1 k2 v2 k3 v3 OK</td></tr><tr><td><code>MSETNX key1 value1 [key2 value2..]</code></td><td>批量设置键值对，仅当参数中所有的key都不存在时执行</td><td>127.0.0.1:6379&gt; MSETNX k1 v1 k4 v4 (integer) 0</td></tr><tr><td><code>MGET key1 [key2..]</code></td><td>批量获取多个key保存的值</td><td>127.0.0.1:6379&gt; MGET k1 k2 k3 1) “v1” 2) “v2” 3) “v3”</td></tr><tr><td><code>PSETEX key milliseconds value</code></td><td>和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，</td><td></td></tr><tr><td><code>getset key value</code></td><td>如果不存在值，则返回nil，如果存在值，获取原来的值，并设置新的值</td><td></td></tr></tbody></table><p>String类似的使用场景：value除了是字符串还可以是数字，用途举例：</p><ul><li><p>计数器</p></li><li><p>统计多单位的数量：uid:123666：follow 0</p></li><li><p>粉丝数</p></li><li><p>对象存储缓存</p><blockquote><p>对象的存储方法127.0.0.1:6379&gt; mset user:1:name  renyichao user:1:age  25</p></blockquote></li></ul><h3 id="List-列表"><a href="#List-列表" class="headerlink" title="List(列表)"></a>List(列表)</h3><blockquote><p>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</p><p>一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过40亿个元素)。</p></blockquote><p>首先我们列表，可以经过规则定义将其变为队列、栈、双端队列等</p><p>!(<a href="https://img-blog.csdnimg.cn/20200820104440398.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center">https://img-blog.csdnimg.cn/20200820104440398.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RERERlbmdf,size_16,color_FFFFFF,t_70#pic_center</a>)</p><p>正如图Redis中List是可以进行双端操作的，所以命令也就分为了LXXX和RLLL两类，有时候L也表示List例如LLEN</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>lpush/rpush key value1[value2..]</code></td><td>从左边/右边向列表中PUSH值(一个或者多个)。左插入的元素编号为0</td></tr><tr><td><code>lrange key start end</code></td><td>获取list 起止元素==（索引从左往右 递增）==</td></tr><tr><td><code>lpushx/rpushxkey value</code></td><td>向已存在的列名中push值（一个或者多个）</td></tr><tr><td>`linsert key before</td><td>after pivot value`</td></tr><tr><td><code>llen key</code></td><td>查看列表长度</td></tr><tr><td><code>lindex key index</code></td><td>通过索引获取列表元素</td></tr><tr><td><code>lset key index value</code></td><td>通过索引为元素设值</td></tr><tr><td><code>lpop/rpop key</code></td><td>从最左边/最右边移除值 并返回</td></tr><tr><td><code>rpoplpush source destination</code></td><td>将列表的尾部(右)最后一个值弹出，并返回，然后加到另一个列表的头部</td></tr><tr><td><code>ltrim key start end</code></td><td>通过下标截取指定范围内的列表，此时列表已经被改变了</td></tr><tr><td><code>lrem key count value</code></td><td>List中是允许value重复的 <code>count &gt; 0</code>：从头部开始搜索 然后删除指定的value 至多删除count个 <code>count &lt; 0</code>：从尾部开始搜索… <code>count = 0</code>：删除列表中所有的指定value。</td></tr><tr><td><code>blpol/brpop key1[key2] timout</code></td><td>移出并获取列表的第一个/最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td><code>brpoplpush source destination timeout</code></td><td>和<code>RPOPLPUSH</code>功能相同，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td><code>lset</code></td><td>将列表中指定下标的值，替换成另外一个值，如果不存在列表就会报错</td></tr><tr><td></td><td></td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">------------------LPUSH lpush---RPUSH rpush---LRANGE lrange------------------------------127.0.0.1:6379&gt; LPUSH mylist k1 # LPUSH mylist&#x3D;&gt;&#123;1&#125;(integer) 1127.0.0.1:6379&gt; LPUSH mylist k2 # LPUSH mylist&#x3D;&gt;&#123;2,1&#125;(integer) 2127.0.0.1:6379&gt; RPUSH mylist k3 # RPUSH mylist&#x3D;&gt;&#123;2,1,3&#125;(integer) 3127.0.0.1:6379&gt; get mylist # 普通的get是无法获取list值的(error) WRONGTYPE Operation against a key holding the wrong kind of value127.0.0.1:6379&gt; LRANGE mylist 0 4 # LRANGE 获取起止位置范围内的元素1) &quot;k2&quot;2) &quot;k1&quot;3) &quot;k3&quot;127.0.0.1:6379&gt; LRANGE mylist 0 21) &quot;k2&quot;2) &quot;k1&quot;3) &quot;k3&quot;127.0.0.1:6379&gt; LRANGE mylist 0 11) &quot;k2&quot;2) &quot;k1&quot;127.0.0.1:6379&gt; LRANGE mylist 0 -1 # 获取全部元素1) &quot;k2&quot;2) &quot;k1&quot;3) &quot;k3&quot;---------------------------LPUSHX---RPUSHX-----------------------------------127.0.0.1:6379&gt; LPUSHX list v1 # list不存在 LPUSHX失败(integer) 0127.0.0.1:6379&gt; LPUSHX list v1 v2  (integer) 0127.0.0.1:6379&gt; LPUSHX mylist k4 k5 # 向mylist中 左边 PUSH k4 k5(integer) 5127.0.0.1:6379&gt; LRANGE mylist 0 -11) &quot;k5&quot;2) &quot;k4&quot;3) &quot;k2&quot;4) &quot;k1&quot;5) &quot;k3&quot;---------------------------LINSERT--LLEN--LINDEX--LSET----------------------------127.0.0.1:6379&gt; LINSERT mylist after k2 ins_key1 # 在k2元素后 插入ins_key1(integer) 6127.0.0.1:6379&gt; LRANGE mylist 0 -11) &quot;k5&quot;2) &quot;k4&quot;3) &quot;k2&quot;4) &quot;ins_key1&quot;5) &quot;k1&quot;6) &quot;k3&quot;127.0.0.1:6379&gt; LLEN mylist # 查看mylist的长度(integer) 6127.0.0.1:6379&gt; LINDEX mylist 3 # 获取下标为3的元素&quot;ins_key1&quot;127.0.0.1:6379&gt; LINDEX mylist 0&quot;k5&quot;127.0.0.1:6379&gt; LSET mylist 3 k6 # 将下标3的元素 set值为k6OK127.0.0.1:6379&gt; LRANGE mylist 0 -11) &quot;k5&quot;2) &quot;k4&quot;3) &quot;k2&quot;4) &quot;k6&quot;5) &quot;k1&quot;6) &quot;k3&quot;---------------------------LPOP lpop--RPOP rpop--------------------------127.0.0.1:6379&gt; LPOP mylist # 左侧(头部)弹出&quot;k5&quot;127.0.0.1:6379&gt; RPOP mylist # 右侧(尾部)弹出&quot;k3&quot;--------------------RPOPLPUSH rpoplpush--------------------------#把list的第一个进去的元素放到另一个list的里面127.0.0.1:6379&gt; lpush list 1(integer) 1127.0.0.1:6379&gt; lpush list 12(integer) 2127.0.0.1:6379&gt; lpush list 123(integer) 3127.0.0.1:6379&gt; lpush list 1234(integer) 4127.0.0.1:6379&gt; lpush list 12345(integer) 5127.0.0.1:6379&gt; lpush list 123456(integer) 6127.0.0.1:6379&gt; 127.0.0.1:6379&gt; keys *1) &quot;list&quot;127.0.0.1:6379&gt; lrange 0 -1(error) ERR wrong number of arguments for &#39;lrange&#39; command127.0.0.1:6379&gt; lrange list 0 -11) &quot;123456&quot;2) &quot;12345&quot;3) &quot;1234&quot;4) &quot;123&quot;5) &quot;12&quot;6) &quot;1&quot;127.0.0.1:6379&gt; rpoplpush list mylist&quot;1&quot;127.0.0.1:6379&gt; lrange list 0 -11) &quot;123456&quot;2) &quot;12345&quot;3) &quot;1234&quot;4) &quot;123&quot;5) &quot;12&quot;127.0.0.1:6379&gt; lrange mylist 0 -11) &quot;1&quot;127.0.0.1:6379&gt; lpush mylist 66666666666666666(integer) 2127.0.0.1:6379&gt; rpoplpush list mylist&quot;12&quot;127.0.0.1:6379&gt; lrange mylist 0 -11) &quot;12&quot;2) &quot;66666666666666666&quot;3) &quot;1&quot;---------------------------LTRIM  ltrim--------------------------127.0.0.1:6379&gt; lpush list 1    # 截取mylist中的 一部分(integer) 1127.0.0.1:6379&gt; lpush list 2(integer) 2127.0.0.1:6379&gt; lpush list 23(integer) 3127.0.0.1:6379&gt; lpush list 234(integer) 4127.0.0.1:6379&gt; lpush list 2345(integer) 5127.0.0.1:6379&gt; lpush list 23456(integer) 6127.0.0.1:6379&gt; lrange list 0 -11) &quot;23456&quot;2) &quot;2345&quot;3) &quot;234&quot;4) &quot;23&quot;5) &quot;2&quot;6) &quot;1&quot;127.0.0.1:6379&gt; ltrim list 1 3OK127.0.0.1:6379&gt; lrange list 0 -11) &quot;2345&quot;2) &quot;234&quot;3) &quot;23&quot;---------------------------LREM lrem--------------------------127.0.0.1:6379&gt; LREM mylist 3 k2 # 从头部开始搜索 至多删除3个 k2(integer) 3# 删除后：mylist: k2,k2,k2,k4,k2,k2,k2,k2127.0.0.1:6379&gt; LREM mylist -2 k2 #从尾部开始搜索 至多删除2个 k2(integer) 2# 删除后：mylist: k2,k2,k2,k4,k2,k2---------------------------BLPOP--BRPOP--------------------------mylist: k2,k2,k2,k4,k2,k2newlist: k1127.0.0.1:6379&gt; BLPOP newlist mylist 30 # 从newlist中弹出第一个值，mylist作为候选1) &quot;newlist&quot; # 弹出2) &quot;k1&quot;127.0.0.1:6379&gt; BLPOP newlist mylist 301) &quot;mylist&quot; # 由于newlist空了 从mylist中弹出2) &quot;k2&quot;127.0.0.1:6379&gt; BLPOP newlist 30(30.10s) # 超时了127.0.0.1:6379&gt; BLPOP newlist 30 # 我们连接另一个客户端向newlist中push了test, 阻塞被解决。1) &quot;newlist&quot;2) &quot;test&quot;(12.54s)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>小结</p></blockquote><ul><li>list实际上是一个链表，before Node after , left, right 都可以插入值</li><li><strong>如果key不存在，则创建新的链表</strong></li><li>如果key存在，新增内容</li><li>如果移除了所有值，空链表，也代表不存在</li><li>在两边插入或者改动值，效率最高！修改中间元素，效率相对较低</li></ul><p><strong>应用：</strong></p><p><strong>消息排队！消息队列（Lpush Rpop）,栈（Lpush Lpop）</strong></p><h3 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set(集合)"></a>Set(集合)</h3><blockquote><p>Redis的Set是<strong>string类型</strong>的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</p><p>Redis 中 集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。</p><p>集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>sadd key member1[member2..]</code></td><td>向集合中无序增加一个/多个成员（不能重复）</td></tr><tr><td><code>scard key</code></td><td>获取集合的成员数</td></tr><tr><td><code>smembers key</code></td><td>返回集合中所有的成员</td></tr><tr><td><code>sismemeber key member</code></td><td>查询member元素是否是集合的成员,结果是无序的</td></tr><tr><td><code>srandmember key [count]</code></td><td>随机返回集合中count个成员，count缺省值为1</td></tr><tr><td><code>spop key [count]</code></td><td>随机移除并返回集合中count个成员，count缺省值为1</td></tr><tr><td><code>smove source destination member</code></td><td>将source集合的成员member移动到destination集合</td></tr><tr><td><code>srem key member1[member2..]</code></td><td>移除集合中一个/多个成员</td></tr><tr><td><code>sdiff key1[key2..]</code></td><td>返回所有集合的差集 key1- key2 - …（返回a中与b不同的元素）</td></tr><tr><td><code>sdiffstore destination key1[key2..]</code></td><td>在SDIFF的基础上，将结果保存到集合中==(覆盖)==。不能保存到其他类型key噢！</td></tr><tr><td><code>sinter key1 [key2..]</code></td><td>返回所有集合的交集(两个集合的公共元素)</td></tr><tr><td><code>sinterstore destination key1[key2..]</code></td><td>在SINTER的基础上，存储结果到集合中。覆盖</td></tr><tr><td><code>sunion key1 [key2..]</code></td><td>返回所有集合的并集（两个集合一共的元素）</td></tr><tr><td><code>sunionstoredestination key1 [key2..]</code></td><td>在SUNION的基础上，存储结果到及和张。覆盖</td></tr><tr><td><code>sscanKEY [MATCH pattern] [COUNT count]</code></td><td>在大量数据环境下，使用此命令遍历集合中元素，每次遍历部分</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---------------SADD--SCARD--SMEMBERS--SISMEMBER--------------------127.0.0.1:6379&gt; sadd myset &quot;hello&quot;(integer) 1127.0.0.1:6379&gt; sadd myset &quot;world&quot;(integer) 1127.0.0.1:6379&gt; sadd myset &quot;sd&quot;(integer) 1127.0.0.1:6379&gt; smembers myset1) &quot;hello&quot;2) &quot;sd&quot;3) &quot;world&quot; #注意顺序127.0.0.1:6379&gt; SADD myset m1 m2 m3 m4 # 向myset中增加成员 m1~m4(integer) 4127.0.0.1:6379&gt; SCARD myset # 获取集合的成员数目(integer) 4127.0.0.1:6379&gt; smembers myset # 获取集合中所有成员1) &quot;m4&quot;2) &quot;m3&quot;3) &quot;m2&quot;4) &quot;m1&quot;127.0.0.1:6379&gt; SISMEMBER myset m5 # 查询m5是否是myset的成员(integer) 0 # 不是，返回0127.0.0.1:6379&gt; SISMEMBER myset m2(integer) 1 # 是，返回1127.0.0.1:6379&gt; SISMEMBER myset m3(integer) 1---------------------SRANDMEMBER--SPOP----------------------------------127.0.0.1:6379&gt; SRANDMEMBER myset 3 # 随机返回3个成员1) &quot;m2&quot;2) &quot;m3&quot;3) &quot;m4&quot;127.0.0.1:6379&gt; SRANDMEMBER myset # 随机返回1个成员&quot;m3&quot;127.0.0.1:6379&gt; SPOP myset 2 # 随机移除并返回2个成员1) &quot;m1&quot;2) &quot;m4&quot;# 将set还原到&#123;m1,m2,m3,m4&#125;---------------------SMOVE--SREM----------------------------------------127.0.0.1:6379&gt; SMOVE myset newset m3 # 将myset中m3成员移动到newset集合(integer) 1127.0.0.1:6379&gt; SMEMBERS myset1) &quot;m4&quot;2) &quot;m2&quot;3) &quot;m1&quot;127.0.0.1:6379&gt; SMEMBERS newset1) &quot;m3&quot;127.0.0.1:6379&gt; SREM newset m3 # 从newset中移除m3元素(integer) 1127.0.0.1:6379&gt; SMEMBERS newset(empty list or set)# 下面开始是多集合操作,多集合操作中若只有一个参数默认和自身进行运算# setx&#x3D;&gt;&#123;m1,m2,m4,m6&#125;, sety&#x3D;&gt;&#123;m2,m5,m6&#125;, setz&#x3D;&gt;&#123;m1,m3,m6&#125;-----------------------------SDIFF------------------------------------127.0.0.1:6379&gt; SDIFF setx sety setz # 等价于setx-sety-setz1) &quot;m4&quot;127.0.0.1:6379&gt; SDIFF setx sety # setx - sety1) &quot;m4&quot;2) &quot;m1&quot;127.0.0.1:6379&gt; SDIFF sety setx # sety - setx1) &quot;m5&quot;-------------------------SINTER---------------------------------------# 共同关注（交集）127.0.0.1:6379&gt; SINTER setx sety setz # 求 setx、sety、setx的交集1) &quot;m6&quot;127.0.0.1:6379&gt; SINTER setx sety # 求setx sety的交集1) &quot;m2&quot;2) &quot;m6&quot;-------------------------SUNION---------------------------------------127.0.0.1:6379&gt; SUNION setx sety setz # setx sety setz的并集1) &quot;m4&quot;2) &quot;m6&quot;3) &quot;m3&quot;4) &quot;m2&quot;5) &quot;m1&quot;6) &quot;m5&quot;127.0.0.1:6379&gt; SUNION setx sety # setx sety 并集1) &quot;m4&quot;2) &quot;m6&quot;3) &quot;m2&quot;4) &quot;m1&quot;5) &quot;m5&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Hash（哈希）"><a href="#Hash（哈希）" class="headerlink" title="Hash（哈希）"></a>Hash（哈希）</h3><blockquote><p>相当于一个map集合</p></blockquote><blockquote><p>Redis hash 是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p><p>Set就是一种简化的Hash,只变动key,而value使用默认值填充。可以将一个Hash表作为一个对象进行存储，表中存放对象的信息。</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>hset key field value</code></td><td>将哈希表 key 中的字段 field 的值设为 value 。重复设置同一个field会覆盖,返回0</td></tr><tr><td><code>hmset key field1 value1 [field2 value2..]</code></td><td>同时将多个 field-value (域-值)对设置到哈希表 key 中。</td></tr><tr><td><code>hsetnx key field value</code></td><td>只有在字段 field 不存在时，设置哈希表字段的值。</td></tr><tr><td><code>hexistsH key field</code></td><td>查看哈希表 key 中，指定的字段是否存在。</td></tr><tr><td><code>hget key field value</code></td><td>获取存储在哈希表中指定字段的值</td></tr><tr><td><code>hmgetkey field1 [field2..]</code></td><td>获取所有给定字段的值</td></tr><tr><td><code>hgetall key</code></td><td>获取在哈希表key 的所有字段和值</td></tr><tr><td><code>hkeyskey</code></td><td>获取哈希表key中所有的字段</td></tr><tr><td><code>hlenkey</code></td><td>获取哈希表中字段的数量(key)</td></tr><tr><td><code>havls key</code></td><td>获取哈希表中所有值(value)</td></tr><tr><td><code>hdel key field1 [field2..]</code></td><td>删除哈希表key中一个/多个field字段</td></tr><tr><td><code>hincrby key field n</code></td><td>为哈希表 key 中的指定字段的整数值加上增量n，并返回增量后结果 一样只适用于整数型字段</td></tr><tr><td><code>hincrbyfloat key field n</code></td><td>为哈希表 key 中的指定字段的浮点数值加上增量 n。</td></tr><tr><td><code>hscan key cursor [MATCH pattern] [COUNT count]</code></td><td>迭代哈希表中的键值对。</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">------------------------HSET--HMSET--HSETNX----------------127.0.0.1:6379&gt; HSET studentx name sakura # 将studentx哈希表作为一个对象，设置name为sakura(integer) 1127.0.0.1:6379&gt; HSET studentx name gyc # 重复设置field进行覆盖，并返回0(integer) 0127.0.0.1:6379&gt; HSET studentx age 20 # 设置studentx的age为20(integer) 1127.0.0.1:6379&gt; HMSET studentx sex 1 tel 15623667886 # 设置sex为1，tel为15623667886OK127.0.0.1:6379&gt; HSETNX studentx name gyc # HSETNX 设置已存在的field(integer) 0 # 失败127.0.0.1:6379&gt; HSETNX studentx email 12345@qq.com(integer) 1 # 成功----------------------HEXISTS--------------------------------127.0.0.1:6379&gt; HEXISTS studentx name # name字段在studentx中是否存在(integer) 1 # 存在127.0.0.1:6379&gt; HEXISTS studentx addr(integer) 0 # 不存在-------------------HGET--HMGET--HGETALL-----------127.0.0.1:6379&gt; HGET studentx name # 获取studentx中name字段的value&quot;gyc&quot;127.0.0.1:6379&gt; HMGET studentx name age tel # 获取studentx中name、age、tel字段的value1) &quot;gyc&quot;2) &quot;20&quot;3) &quot;15623667886&quot;127.0.0.1:6379&gt; HGETALL studentx # 获取studentx中所有的field及其value 1) &quot;name&quot; 2) &quot;gyc&quot; 3) &quot;age&quot; 4) &quot;20&quot; 5) &quot;sex&quot; 6) &quot;1&quot; 7) &quot;tel&quot; 8) &quot;15623667886&quot; 9) &quot;email&quot;10) &quot;12345@qq.com&quot;--------------------HKEYS--HLEN--HVALS--------------127.0.0.1:6379&gt; HKEYS studentx # 查看studentx中所有的field1) &quot;name&quot;2) &quot;age&quot;3) &quot;sex&quot;4) &quot;tel&quot;5) &quot;email&quot;127.0.0.1:6379&gt; HLEN studentx # 查看studentx中的字段数量(integer) 5127.0.0.1:6379&gt; HVALS studentx # 查看studentx中所有的value1) &quot;gyc&quot;2) &quot;20&quot;3) &quot;1&quot;4) &quot;15623667886&quot;5) &quot;12345@qq.com&quot;-------------------------HDEL--------------------------127.0.0.1:6379&gt; HDEL studentx sex tel # 删除studentx 中的sex、tel字段(integer) 2127.0.0.1:6379&gt; HKEYS studentx1) &quot;name&quot;2) &quot;age&quot;3) &quot;email&quot;-------------HINCRBY--HINCRBYFLOAT------------------------127.0.0.1:6379&gt; HINCRBY studentx age 1 # studentx的age字段数值+1(integer) 21127.0.0.1:6379&gt; HINCRBY studentx name 1 # 非整数字型字段不可用(error) ERR hash value is not an integer127.0.0.1:6379&gt; HINCRBYFLOAT studentx weight 0.6 # weight字段增加0.6&quot;90.8&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> Hash变更的数据user name age，尤其是用户信息之类的，经常变动的信息！<strong>Hash更适合于对象的存储，Sring更加适合字符串存储！</strong></p><h3 id="Zset（有序集合）"><a href="#Zset（有序集合）" class="headerlink" title="Zset（有序集合）"></a>Zset（有序集合）</h3><blockquote><p>不同的是每个元素都会关联一个double类型的分数（score）。redis正是通过分数来为集合中的成员进行从小到大的排序。</p><p>score相同：按字典顺序排序</p><p>有序集合的成员是唯一的,但分数(score)却可以重复。</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>ZADD key score member1 [score2 member2]</code></td><td>向有序集合添加一个或多个成员，或者更新已存在成员的分数</td></tr><tr><td><code>ZCARD key</code></td><td>获取有序集合的成员数</td></tr><tr><td><code>ZCOUNT key min max</code></td><td>计算在有序集合中指定区间score的成员数</td></tr><tr><td><code>ZINCRBY key n member</code></td><td>有序集合中对指定成员的分数加上增量 n</td></tr><tr><td><code>ZSCORE key member</code></td><td>返回有序集中，成员的分数值</td></tr><tr><td><code>ZRANK key member</code></td><td>返回有序集合中指定成员的索引</td></tr><tr><td><code>ZRANGE key start end</code></td><td>通过索引区间返回有序集合成指定区间内的成员</td></tr><tr><td><code>ZRANGEBYLEX key min max</code></td><td>通过字典区间返回有序集合的成员</td></tr><tr><td><code>ZRANGEBYSCORE key min max</code></td><td>通过分数返回有序集合指定区间内的成员==-inf 和 +inf分别表示最小最大值，只支持开区间()==</td></tr><tr><td><code>ZLEXCOUNT key min max</code></td><td>在有序集合中计算指定字典区间内成员数量</td></tr><tr><td><code>ZREM key member1 [member2..]</code></td><td>移除有序集合中一个/多个成员</td></tr><tr><td><code>ZREMRANGEBYLEX key min max</code></td><td>移除有序集合中给定的字典区间的所有成员</td></tr><tr><td><code>ZREMRANGEBYRANK key start stop</code></td><td>移除有序集合中给定的排名区间的所有成员</td></tr><tr><td><code>ZREMRANGEBYSCORE key min max</code></td><td>移除有序集合中给定的分数区间的所有成员</td></tr><tr><td><code>ZREVRANGE key start end</code></td><td>返回有序集中指定区间内的成员，通过索引，分数从高到底</td></tr><tr><td><code>ZREVRANGEBYSCORRE key max min</code></td><td>返回有序集中指定分数区间内的成员，分数从高到低排序</td></tr><tr><td><code>ZREVRANGEBYLEX key max min</code></td><td>返回有序集中指定字典区间内的成员，按字典顺序倒序</td></tr><tr><td><code>ZREVRANK key member</code></td><td>返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</td></tr><tr><td><code>ZINTERSTORE destination numkeys key1 [key2 ..]</code></td><td>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中，numkeys：表示参与运算的集合数，将score相加作为结果的score</td></tr><tr><td><code>ZUNIONSTORE destination numkeys key1 [key2..]</code></td><td>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</td></tr><tr><td><code>ZSCAN key cursor [MATCH pattern\] [COUNT count]</code></td><td>迭代有序集合中的元素（包括元素成员和元素分值）</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java">127.0.0.1:6379&gt; zadd myset 1 hello(integer) 1127.0.0.1:6379&gt; zadd myset 2 world(integer) 1127.0.0.1:6379&gt; zadd myset 3 renyichao(integer) 1127.0.0.1:6379&gt; zrange myset 0 -11) &quot;hello&quot;2) &quot;world&quot;3) &quot;renyichao&quot;127.0.0.1:6379&gt; zadd myset 2 666(integer) 1127.0.0.1:6379&gt; zrange myset 0 -11) &quot;hello&quot;2) &quot;666&quot;3) &quot;world&quot;4) &quot;renyichao&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-------------------ZADD--ZCARD--ZCOUNT--------------127.0.0.1:6379&gt; ZADD myzset 1 m1 2 m2 3 m3 # 向有序集合myzset中添加成员m1 score&#x3D;1 以及成员m2 score&#x3D;2..(integer) 2127.0.0.1:6379&gt; ZCARD myzset # 获取有序集合的成员数(integer) 2127.0.0.1:6379&gt; ZCOUNT myzset 0 1 # 获取score在 [0,1]区间的成员数量(integer) 1127.0.0.1:6379&gt; ZCOUNT myzset 0 2(integer) 2----------------ZINCRBY--ZSCORE--------------------------127.0.0.1:6379&gt; ZINCRBY myzset 5 m2 # 将成员m2的score +5&quot;7&quot;127.0.0.1:6379&gt; ZSCORE myzset m1 # 获取成员m1的score&quot;1&quot;127.0.0.1:6379&gt; ZSCORE myzset m2&quot;7&quot;--------------ZRANK--ZRANGE-----------------------------------127.0.0.1:6379&gt; ZRANK myzset m1 # 获取成员m1的索引，索引按照score排序，score相同索引值按字典顺序顺序增加(integer) 0127.0.0.1:6379&gt; ZRANK myzset m2(integer) 2127.0.0.1:6379&gt; ZRANGE myzset 0 1 # 获取索引在 0~1的成员1) &quot;m1&quot;2) &quot;m3&quot;127.0.0.1:6379&gt; ZRANGE myzset 0 -1 # 获取全部成员1) &quot;m1&quot;2) &quot;m3&quot;3) &quot;m2&quot;#testset&#x3D;&gt;&#123;abc,add,amaze,apple,back,java,redis&#125; score均为0------------------ZRANGEBYLEX---------------------------------127.0.0.1:6379&gt; ZRANGEBYLEX testset - + # 返回所有成员1) &quot;abc&quot;2) &quot;add&quot;3) &quot;amaze&quot;4) &quot;apple&quot;5) &quot;back&quot;6) &quot;java&quot;7) &quot;redis&quot;127.0.0.1:6379&gt; ZRANGEBYLEX testset - + LIMIT 0 3 # 分页 按索引显示查询结果的 0,1,2条记录1) &quot;abc&quot;2) &quot;add&quot;3) &quot;amaze&quot;127.0.0.1:6379&gt; ZRANGEBYLEX testset - + LIMIT 3 3 # 显示 3,4,5条记录1) &quot;apple&quot;2) &quot;back&quot;3) &quot;java&quot;127.0.0.1:6379&gt; ZRANGEBYLEX testset (- [apple # 显示 (-,apple] 区间内的成员1) &quot;abc&quot;2) &quot;add&quot;3) &quot;amaze&quot;4) &quot;apple&quot;127.0.0.1:6379&gt; ZRANGEBYLEX testset [apple [java # 显示 [apple,java]字典区间的成员1) &quot;apple&quot;2) &quot;back&quot;3) &quot;java&quot;-----------------------ZRANGEBYSCORE---------------------127.0.0.1:6379&gt; ZRANGEBYSCORE myzset 1 10 # 返回score在 [1,10]之间的的成员1) &quot;m1&quot;2) &quot;m3&quot;3) &quot;m2&quot;127.0.0.1:6379&gt; ZRANGEBYSCORE myzset 1 51) &quot;m1&quot;2) &quot;m3&quot;--------------------ZLEXCOUNT-----------------------------127.0.0.1:6379&gt; ZLEXCOUNT testset - +(integer) 7127.0.0.1:6379&gt; ZLEXCOUNT testset [apple [java(integer) 3------------------ZREM--ZREMRANGEBYLEX--ZREMRANGBYRANK--ZREMRANGEBYSCORE--------------------------------127.0.0.1:6379&gt; ZREM testset abc # 移除成员abc(integer) 1127.0.0.1:6379&gt; ZREMRANGEBYLEX testset [apple [java # 移除字典区间[apple,java]中的所有成员(integer) 3127.0.0.1:6379&gt; ZREMRANGEBYRANK testset 0 1 # 移除排名0~1的所有成员(integer) 2127.0.0.1:6379&gt; ZREMRANGEBYSCORE myzset 0 3 # 移除score在 [0,3]的成员(integer) 2# testset&#x3D;&gt; &#123;abc,add,apple,amaze,back,java,redis&#125; score均为0# myzset&#x3D;&gt; &#123;(m1,1),(m2,2),(m3,3),(m4,4),(m7,7),(m9,9)&#125;----------------ZREVRANGE--ZREVRANGEBYSCORE--ZREVRANGEBYLEX-----------127.0.0.1:6379&gt; ZREVRANGE myzset 0 3 # 按score递减排序，然后按索引，返回结果的 0~31) &quot;m9&quot;2) &quot;m7&quot;3) &quot;m4&quot;4) &quot;m3&quot;127.0.0.1:6379&gt; ZREVRANGE myzset 2 4 # 返回排序结果的 索引的2~41) &quot;m4&quot;2) &quot;m3&quot;3) &quot;m2&quot;127.0.0.1:6379&gt; ZREVRANGEBYSCORE myzset 6 2 # 按score递减顺序 返回集合中分数在[2,6]之间的成员1) &quot;m4&quot;2) &quot;m3&quot;3) &quot;m2&quot;127.0.0.1:6379&gt; ZREVRANGEBYLEX testset [java (add # 按字典倒序 返回集合中(add,java]字典区间的成员1) &quot;java&quot;2) &quot;back&quot;3) &quot;apple&quot;4) &quot;amaze&quot;-------------------------ZREVRANK------------------------------127.0.0.1:6379&gt; ZREVRANK myzset m7 # 按score递减顺序，返回成员m7索引(integer) 1127.0.0.1:6379&gt; ZREVRANK myzset m2(integer) 4# mathscore&#x3D;&gt;&#123;(xm,90),(xh,95),(xg,87)&#125; 小明、小红、小刚的数学成绩# enscore&#x3D;&gt;&#123;(xm,70),(xh,93),(xg,90)&#125; 小明、小红、小刚的英语成绩-------------------ZINTERSTORE--ZUNIONSTORE-----------------------------------127.0.0.1:6379&gt; ZINTERSTORE sumscore 2 mathscore enscore # 将mathscore enscore进行合并 结果存放到sumscore(integer) 3127.0.0.1:6379&gt; ZRANGE sumscore 0 -1 withscores # 合并后的score是之前集合中所有score的和1) &quot;xm&quot;2) &quot;160&quot;3) &quot;xg&quot;4) &quot;177&quot;5) &quot;xh&quot;6) &quot;188&quot;127.0.0.1:6379&gt; ZUNIONSTORE lowestscore 2 mathscore enscore AGGREGATE MIN # 取两个集合的成员score最小值作为结果的(integer) 3127.0.0.1:6379&gt; ZRANGE lowestscore 0 -1 withscores1) &quot;xm&quot;2) &quot;70&quot;3) &quot;xg&quot;4) &quot;87&quot;5) &quot;xh&quot;6) &quot;93&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应用案例：</p><ul><li>set排序 存储班级成绩表 工资表排序！</li><li>普通消息，1.重要消息 2.带权重进行判断</li><li>排行榜应用实现，取Top N测试</li></ul><h2 id="四、三种特殊数据类型"><a href="#四、三种特殊数据类型" class="headerlink" title="四、三种特殊数据类型"></a>四、三种特殊数据类型</h2><h3 id="Geospatial-地理位置"><a href="#Geospatial-地理位置" class="headerlink" title="Geospatial(地理位置)"></a>Geospatial(地理位置)</h3><blockquote><p>使用经纬度定位地理坐标并用一个<strong>有序集合zset保存</strong>，所以zset命令也可以使用</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>geoadd key longitud(经度) latitude(纬度) member [..]</code></td><td>将具体经纬度的坐标存入一个有序集合</td></tr><tr><td><code>geopos key member [member..]</code></td><td>获取集合中的一个/多个成员坐标</td></tr><tr><td><code>geodist key member1 member2 [unit]</code></td><td>返回两个给定位置之间的距离。默认以米作为单位。</td></tr><tr><td>`georadius key longitude latitude radius m</td><td>km</td></tr><tr><td><code>GEORADIUSBYMEMBER key member radius...</code></td><td>功能与GEORADIUS相同，只是中心位置不是具体的经纬度，而是使用结合中已有的成员作为中心点。</td></tr><tr><td><code>geohash key member1 [member2..]</code></td><td>返回一个或多个位置元素的Geohash表示。使用Geohash位置52点整数编码。</td></tr></tbody></table><p><strong>有效经纬度</strong></p><blockquote><ul><li>有效的经度从-180度到180度。</li><li>有效的纬度从-85.05112878度到85.05112878度。</li></ul></blockquote><p>指定单位的参数 <strong>unit</strong> 必须是以下单位的其中一个：</p><ul><li><strong>m</strong> 表示单位为米。</li><li><strong>km</strong> 表示单位为千米。</li><li><strong>mi</strong> 表示单位为英里。</li><li><strong>ft</strong> 表示单位为英尺。</li></ul><p><strong>关于GEORADIUS的参数</strong></p><blockquote><p>通过<code>georadius</code>就可以完成 <strong>附近的人</strong>功能</p><p>withcoord:带上坐标</p><p>withdist:带上距离，单位与半径单位相同</p><p>COUNT n : 只显示前n个(按距离递增排序)</p></blockquote><blockquote><p>geoadd 添加数据</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;地理位置（经度（-180——180） 纬度（-85 ——85））127.0.0.1:6379&gt; geoadd china:city 116.40 39.90   beijing(integer) 1127.0.0.1:6379&gt; geoadd china:city 121.47 31.23   shanghai(integer) 1127.0.0.1:6379&gt; geoadd china:city 106.50 29.53   chongqing(integer) 1127.0.0.1:6379&gt; geoadd china:city 114.05 22.52   shenzhen(integer) 1127.0.0.1:6379&gt; geoadd china:city  120.16 30.24   hangzhou 108.96 34.26 xian(integer) 2&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;    127.0.0.1:6379&gt; geoadd china:city 39.90 116.40  beijing(error) ERR invalid longitude,latitude pair 39.900000,116.400000&#x2F;&#x2F;写反了会报错<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>geopos 获取数据</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">127.0.0.1:6379&gt; geopos china:city beijing1) 1) &quot;116.39999896287918091&quot;   2) &quot;39.90000009167092543&quot;127.0.0.1:6379&gt; geopos china:city beijing chongqing shanghai1) 1) &quot;116.39999896287918091&quot;   2) &quot;39.90000009167092543&quot;2) 1) &quot;106.49999767541885376&quot;   2) &quot;29.52999957900659211&quot;3) 1) &quot;121.47000163793563843&quot;   2) &quot;31.22999903975783553&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>geodist 获取连个城市距离</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">127.0.0.1:6379&gt; geodist china:city beijing shanghai &#x2F;&#x2F;北京到上海直线距离&quot;1067378.7564&quot;127.0.0.1:6379&gt; geodist china:city beijing shanghai km  &#x2F;&#x2F;北京到上海距离（单位变成km）&quot;1067.3788&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>georadis 以给定的经纬度为中心，找出某一半径内的元素</p></blockquote><p>附近的人？通过半径查询</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 1000 km  &#x2F;&#x2F;(110,30) 1000km以内的城市1) &quot;chongqing&quot;2) &quot;xian&quot;3) &quot;shenzhen&quot;4) &quot;hangzhou&quot;127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km1) &quot;chongqing&quot;2) &quot;xian&quot;127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withdist    &#x2F;&#x2F;(110,30) 1000km以内的城市（显示距离）1) 1) &quot;chongqing&quot;   2) &quot;341.9374&quot;2) 1) &quot;xian&quot;   2) &quot;483.8340&quot;127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withcoord    &#x2F;&#x2F;(110,30) 1000km以内的城市（显示坐标）1) 1) &quot;chongqing&quot;   2) 1) &quot;106.49999767541885376&quot;      2) &quot;29.52999957900659211&quot;2) 1) &quot;xian&quot;   2) 1) &quot;108.96000176668167114&quot;      2) &quot;34.25999964418929977&quot;     &#x2F;&#x2F;(110,30) 1000km以内的城市（显示坐标 距离）限定数量127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withcoord withdist count 11) 1) &quot;chongqing&quot;   2) &quot;341.9374&quot;   3) 1) &quot;106.49999767541885376&quot;      2) &quot;29.52999957900659211&quot;127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withcoord withdist count 21) 1) &quot;chongqing&quot;   2) &quot;341.9374&quot;   3) 1) &quot;106.49999767541885376&quot;      2) &quot;29.52999957900659211&quot;2) 1) &quot;xian&quot;   2) &quot;483.8340&quot;   3) 1) &quot;108.96000176668167114&quot;      2) &quot;34.25999964418929977&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>georadisbymember 以元素为中心，找出某一半径内的元素</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">127.0.0.1:6379&gt; georadiusbymember china:city beijing 1000 km &#x2F;&#x2F;北京周围1000km的城市1) &quot;beijing&quot;2) &quot;xian&quot;127.0.0.1:6379&gt; georadiusbymember china:city shanghai 400 km 1) &quot;hangzhou&quot;2) &quot;shanghai&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>geohash 返回一个或者多个元素的geohash（一个编码）的表示，返回11个字符的字符串</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">127.0.0.1:6379&gt; geohash china:city beijing shanghai &#x2F;&#x2F;返回的是当前位置坐标的字符串1) &quot;wx4fbxxfke0&quot;2) &quot;wtw3sj5zbj0&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>geo底层其实是zset集合,zrem移除一个元素，zrange查看全部元素</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">127.0.0.1:6379&gt; zrange china:city 0 -11) &quot;chongqing&quot;2) &quot;xian&quot;3) &quot;shenzhen&quot;4) &quot;hangzhou&quot;5) &quot;shanghai&quot;6) &quot;beijing&quot;127.0.0.1:6379&gt; zrem china:city beijing   &#x2F;&#x2F;移除北京(integer) 1127.0.0.1:6379&gt; zrange china:city 0 -1    &#x2F;&#x2F;查看全部元素1) &quot;chongqing&quot;2) &quot;xian&quot;3) &quot;shenzhen&quot;4) &quot;hangzhou&quot;5) &quot;shanghai&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">----------------georadius---------------------127.0.0.1:6379&gt; GEORADIUS china:city 120 30 500 km withcoord withdist # 查询经纬度(120,30)坐标500km半径内的成员1) 1) &quot;hangzhou&quot;   2) &quot;29.4151&quot;   3) 1) &quot;120.20000249147415&quot;      2) &quot;30.199999888333501&quot;2) 1) &quot;shanghai&quot;   2) &quot;205.3611&quot;   3) 1) &quot;121.40000134706497&quot;      2) &quot;31.400000253193539&quot;     ------------geohash---------------------------127.0.0.1:6379&gt; geohash china:city yichang shanghai # 获取成员经纬坐标的geohash表示1) &quot;wmrjwbr5250&quot;2) &quot;wtw6ds0y300&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Hyperloglog-基数统计"><a href="#Hyperloglog-基数统计" class="headerlink" title="Hyperloglog(基数统计)"></a>Hyperloglog(基数统计)</h3><blockquote><p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</p><p>花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。</p><p>因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p><p>其底层使用string数据类型</p></blockquote><p><strong>什么是基数？</strong></p><blockquote><p>数据集中不重复的元素的个数。</p></blockquote><p><strong>应用场景：</strong></p><p>网页的访问量（UV）：一个用户多次访问，也只能算作一个人。</p><blockquote><p>传统实现，存储用户的id,然后每次进行比较。当用户变多之后这种方式及其浪费空间，而我们的目的只是<strong>计数</strong>，Hyperloglog就能帮助我们利用最小的空间完成。</p></blockquote><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>PFADD key element1 [elememt2..]</code></td><td>添加指定元素到 HyperLogLog 中</td></tr><tr><td><code>PFCOUNT key [key]</code></td><td>返回给定 HyperLogLog 的基数估算值。</td></tr><tr><td><code>PFMERGE destkey sourcekey [sourcekey..]</code></td><td>将多个 HyperLogLog 合并为一个 HyperLogLog</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">----------PFADD--PFCOUNT---------------------127.0.0.1:6379&gt; PFADD myelemx a b c d e f g h i j k # 添加元素(integer) 1127.0.0.1:6379&gt; type myelemx # hyperloglog底层使用Stringstring127.0.0.1:6379&gt; PFCOUNT myelemx # 估算myelemx的基数(integer) 11127.0.0.1:6379&gt; PFADD myelemy i j k z m c b v p q s(integer) 1127.0.0.1:6379&gt; PFCOUNT myelemy(integer) 11----------------PFMERGE-----------------------127.0.0.1:6379&gt; PFMERGE myelemz myelemx myelemy # 合并myelemx和myelemy 成为myelemzOK127.0.0.1:6379&gt; PFCOUNT myelemz # 估算基数(integer) 17<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果允许容错，那么一定可以使用Hyperloglog !</p><p>如果不允许容错，就使用set或者自己的数据类型即可 ！</p><h3 id="BitMaps-位图"><a href="#BitMaps-位图" class="headerlink" title="BitMaps(位图)"></a>BitMaps(位图)</h3><blockquote><p>使用位存储，信息状态只有 0 和 1</p><p>Bitmap是一串连续的2进制数字（0或1），每一位所在的位置为偏移(offset)，在bitmap上可执行AND,OR,XOR,NOT以及其它位操作。</p></blockquote><p><strong>应用场景</strong></p><p>签到统计、状态统计</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>setbit key offset value</code></td><td>为指定key的offset位设置值</td></tr><tr><td><code>getbit key offset</code></td><td>获取offset位的值</td></tr><tr><td><code>bitcount key [start end]</code></td><td>统计字符串被设置为1的bit数，也可以指定统计范围按字节</td></tr><tr><td><code>bitop operration destkey key[key..]</code></td><td>对一个或多个保存二进制位的字符串 key 进行位元操作，并将结果保存到 destkey 上。</td></tr><tr><td><code>BITPOS key bit [start] [end]</code></td><td>返回字符串里面第一个被设置为1或者0的bit位。start和end只能按字节,不能按位</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">------------setbit--getbit--------------127.0.0.1:6379&gt; setbit sign 0 1 # 设置sign的第0位为 1 (integer) 0127.0.0.1:6379&gt; setbit sign 2 1 # 设置sign的第2位为 1  不设置默认 是0(integer) 0127.0.0.1:6379&gt; setbit sign 3 1(integer) 0127.0.0.1:6379&gt; setbit sign 5 1(integer) 0127.0.0.1:6379&gt; type signstring127.0.0.1:6379&gt; getbit sign 2 # 获取第2位的数值(integer) 1127.0.0.1:6379&gt; getbit sign 3(integer) 1127.0.0.1:6379&gt; getbit sign 4 # 未设置默认是0(integer) 0-----------bitcount----------------------------127.0.0.1:6379&gt; BITCOUNT sign # 统计sign中为1的位数(integer) 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>bitmaps的底层</strong></p><p>这样设置以后你能get到的值是：<strong>\xA2\x80</strong>，所以bitmaps是一串从左到右的二进制串</p><h2 id="五、事务"><a href="#五、事务" class="headerlink" title="五、事务"></a>五、事务</h2><p>Redis的单条命令是保证原子性的，但是redis事务不能保证原子性</p><blockquote><p>Redis事务本质：一组命令的集合。</p><p>—————– 队列 set set set 执行 ——————-</p><p>事务中每条命令都会被序列化，执行过程中按顺序执行，不允许其他命令进行干扰。</p><ul><li>一次性</li><li>顺序性</li><li>排他性</li></ul><hr><ol><li>Redis事务没有隔离级别的概念</li><li>Redis单条命令是保证原子性的，但是事务不保证原子性！</li></ol></blockquote><h3 id="Redis事务操作过程"><a href="#Redis事务操作过程" class="headerlink" title="Redis事务操作过程"></a>Redis事务操作过程</h3><ul><li>开启事务（<code>multi</code>）</li><li>命令入队</li><li>执行事务（<code>exec</code>）</li></ul><p>所以事务中的命令在加入时都没有被执行，直到提交时才会开始执行(Exec)一次性完成。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">127.0.0.1:6379&gt; multi # 开启事务OK127.0.0.1:6379&gt; set k1 v1 # 命令入队QUEUED127.0.0.1:6379&gt; set k2 v2 # ..QUEUED127.0.0.1:6379&gt; get k1QUEUED127.0.0.1:6379&gt; set k3 v3QUEUED127.0.0.1:6379&gt; keys *QUEUED127.0.0.1:6379&gt; exec # 事务执行1) OK2) OK3) &quot;v1&quot;4) OK5) 1) &quot;k3&quot;   2) &quot;k2&quot;   3) &quot;k1&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>取消事务(<code>discurd</code>)</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">127.0.0.1:6379&gt; multiOK127.0.0.1:6379&gt; set k1 v1QUEUED127.0.0.1:6379&gt; set k2 v2QUEUED127.0.0.1:6379&gt; DISCARD # 放弃事务OK127.0.0.1:6379&gt; EXEC (error) ERR EXEC without MULTI # 当前未开启事务127.0.0.1:6379&gt; get k1 # 被放弃事务中命令并未执行(nil)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事务错误"><a href="#事务错误" class="headerlink" title="事务错误"></a>事务错误</h3><blockquote><p>代码语法错误（编译时异常）所有的命令都不执行</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">127.0.0.1:6379&gt; multiOK127.0.0.1:6379&gt; set k1 v1QUEUED127.0.0.1:6379&gt; set k2 v2QUEUED127.0.0.1:6379&gt; error k1 # 这是一条语法错误命令(error) ERR unknown command &#96;error&#96;, with args beginning with: &#96;k1&#96;, # 会报错但是不影响后续命令入队 127.0.0.1:6379&gt; get k2QUEUED127.0.0.1:6379&gt; EXEC(error) EXECABORT Transaction discarded because of previous errors. # 执行报错127.0.0.1:6379&gt; get k1 (nil) # 其他命令并没有被执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>代码逻辑错误 (运行时异常) **其他命令可以正常执行 ** &gt;&gt;&gt; 所以不保证事务原子性</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">127.0.0.1:6379&gt; multiOK127.0.0.1:6379&gt; set k1 v1QUEUED127.0.0.1:6379&gt; set k2 v2QUEUED127.0.0.1:6379&gt; INCR k1 # 这条命令逻辑错误（对字符串进行增量）QUEUED127.0.0.1:6379&gt; get k2QUEUED127.0.0.1:6379&gt; exec1) OK2) OK3) (error) ERR value is not an integer or out of range # 运行时报错4) &quot;v2&quot; # 其他命令正常执行# 虽然中间有一条命令报错了，但是后面的指令依旧正常执行成功了。# 所以说Redis单条指令保证原子性，但是Redis事务不能保证原子性。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h3><p><strong>悲观锁：</strong></p><ul><li>很悲观，认为什么时候都会出现问题，无论做什么都会加锁</li></ul><p><strong>乐观锁：</strong></p><ul><li>很乐观，认为什么时候都不会出现问题，所以不会上锁！更新数据的时候去判断一下，在此期间是否有人修改过这个数据</li><li>获取version</li><li>更新的时候比较version</li></ul><p>使用<code>watch key</code>监控指定数据，相当于乐观锁加锁。</p><blockquote><p>正常执行</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">127.0.0.1:6379&gt; set money 100 # 设置余额:100OK127.0.0.1:6379&gt; set use 0 # 支出使用:0OK127.0.0.1:6379&gt; watch money # 监视money (上锁)OK127.0.0.1:6379&gt; multiOK127.0.0.1:6379&gt; DECRBY money 20QUEUED127.0.0.1:6379&gt; INCRBY use 20QUEUED127.0.0.1:6379&gt; exec # 监视值没有被中途修改，事务正常执行1) (integer) 802) (integer) 20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>测试多线程修改值，使用watch可以当做redis的乐观锁操作（相当于getversion）</p></blockquote><p>我们启动另外一个客户端模拟插队线程。</p><p>线程1：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">127.0.0.1:6379&gt; watch money # money上锁OK127.0.0.1:6379&gt; multiOK127.0.0.1:6379&gt; DECRBY money 20QUEUED127.0.0.1:6379&gt; INCRBY use 20QUEUED127.0.0.1:6379&gt; # 此时事务并没有执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模拟线程插队，线程2：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">127.0.0.1:6379&gt; INCRBY money 500 # 修改了线程一中监视的money(integer) 600<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>回到线程1，执行事务：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">127.0.0.1:6379&gt; EXEC # 执行之前，另一个线程修改了我们的值，这个时候就会导致事务执行失败(nil) # 没有结果，说明事务执行失败127.0.0.1:6379&gt; get money # 线程2 修改生效&quot;600&quot;127.0.0.1:6379&gt; get use # 线程1事务执行失败，数值没有被修改&quot;0&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>解锁获取最新值，然后再加锁进行事务。</p><p><code>unwatch</code>进行解锁。</p></blockquote><p>注意：每次提交执行exec后都会自动释放锁，不管是否成功</p><h2 id="六、Jedis"><a href="#六、Jedis" class="headerlink" title="六、Jedis"></a>六、Jedis</h2><p>使用Java来操作Redis，Jedis是Redis官方推荐使用的Java连接redis的客户端。</p><ol><li><p>导入依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--导入jredis的包--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--fastjson--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.70<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>编码测试</p><blockquote><p>测试链接</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.kuang;import redis.clients.jedis.Jedis;public class TextPing &#123;    public static void main(String[] args) &#123;        &#x2F;&#x2F;  new 一个 jedis 的对象        Jedis jedis &#x3D; new Jedis(&quot;127.0.0.1&quot;,6379);        &#x2F;&#x2F;jedis 所有的命令就是我们之前学的redis所有命令        &#x2F;&#x2F;测试链接        System.out.println(jedis.ping());    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/redis/1622695720910.png"></p><blockquote><p>方法测试</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">System.out.println(jedis.ping());System.out.println(&quot;清空数据库：&quot;+jedis.flushDB());System.out.println(&quot;判断某个键是否存在：&quot;+jedis.exists(&quot;k1&quot;));System.out.println(&quot;新增k1,v1键值对：&quot;+jedis.set(&quot;k1&quot;,&quot;v1&quot;));System.out.println(&quot;新增k2,v2键值对：&quot;+jedis.set(&quot;k2&quot;,&quot;v2&quot;));System.out.println(&quot;k1对应的值：&quot;+jedis.get(&quot;k1&quot;));System.out.println(&quot;系统中所有的键如下：&quot;);Set&lt;String&gt; keys &#x3D; jedis.keys(&quot;*&quot;);System.out.println(keys);System.out.println(&quot;删除键k2：&quot;+jedis.del(&quot;k2&quot;));System.out.println(&quot;判断键k2是否存在：&quot;+jedis.exists(&quot;k2&quot;));System.out.println(&quot;查看键 k1 所存储的数据类型：&quot;+jedis.type(&quot;k1&quot;));System.out.println(&quot;随机返回 key 空间的一个：&quot;+jedis.randomKey());System.out.println(&quot;重命名 key ：&quot;+jedis.rename(&quot;k1&quot;,&quot;newk1&quot;));System.out.println(&quot;取出改后的 newk1 ：&quot;+jedis.get(&quot;newk1&quot;));System.out.println(&quot;按索引查询：&quot;+jedis.select(0));System.out.println(&quot;删除当前选择数据库中的所有键：&quot;+jedis.flushDB());System.out.println(&quot;返回当前数据库中 key 的数量：&quot;+jedis.dbSize());System.out.println(&quot;删除所有数据库中的所有 key ：&quot;+jedis.flushAll());      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/redis/1622696819752.png"></p><ul><li><p>连接数据库(阿里云)</p><ol><li><p>修改redis的配置文件</p><blockquote><ol><li>daemonize yes</li></ol></blockquote><blockquote><p>2.注释 bind 127.0.0.1</p></blockquote></li></ol></li></ul><blockquote><p>3.protected-mode no</p></blockquote><blockquote><p>其次看一下自己防火墙对端口号开没开放</p><blockquote><p>firewall-cmd –query-port=6379/tcp<br>如果是yes就是开放的</p></blockquote></blockquote><blockquote><p>如果是no就打开端口</p><blockquote></blockquote><p>1、开放6379端口</p><blockquote><p>firewall-cmd –zone=public –add-port=6379/tcp –permanent<br>2、永久打开端口<br>firewall-cmd –reload<br>3、然后查看端口是否打开<br>firewall-cmd –query-port=6379/tcp</p></blockquote></blockquote><p>​     </p></li><li><p>开放端口6379</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd --zone&#x3D;public --add-port&#x3D;6379&#x2F;tcp --permanet<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启防火墙服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>阿里云服务器控制台配置安全组</p></li><li><p>重启redis-server</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@AlibabaECS bin]# redis-server myconfig&#x2F;redis.conf <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol></li></ol><ul><li><p>操作命令</p><p><strong>TestPing.java</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class TestPing &#123;    public static void main(String[] args) &#123;        Jedis jedis &#x3D; new Jedis(&quot;192.168.xx.xxx&quot;, 6379);        String response &#x3D; jedis.ping();        System.out.println(response); &#x2F;&#x2F; PONG    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>断开连接</p></li></ul><ol><li><p><strong>事务</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class TestTX &#123;    public static void main(String[] args) &#123;        Jedis jedis &#x3D; new Jedis(&quot;39.99.xxx.xx&quot;, 6379);        JSONObject jsonObject &#x3D; new JSONObject();        jsonObject.put(&quot;hello&quot;, &quot;world&quot;);        jsonObject.put(&quot;name&quot;, &quot;kuangshen&quot;);        &#x2F;&#x2F; 开启事务        Transaction multi &#x3D; jedis.multi();        &#x2F;&#x2F;转成字符串        String result &#x3D; jsonObject.toJSONString();        &#x2F;&#x2F; jedis.watch(result)        try &#123;            multi.set(&quot;user1&quot;, result);            multi.set(&quot;user2&quot;, result);            &#x2F;&#x2F; 执行事务            multi.exec();        &#125;catch (Exception e)&#123;            &#x2F;&#x2F; 放弃事务            multi.discard();        &#125; finally &#123;            &#x2F;&#x2F; 关闭连接            System.out.println(jedis.get(&quot;user1&quot;));            System.out.println(jedis.get(&quot;user2&quot;));            jedis.close();        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p><img src="/2021/07/07/redis/1622698729581.png"></p><blockquote><p>异常执行</p></blockquote><p>==失误全都不会执行==</p><h2 id="七、SpringBoot整合"><a href="#七、SpringBoot整合" class="headerlink" title="七、SpringBoot整合"></a>七、SpringBoot整合</h2><ol><li><p>新建spring boot项目</p><p><img src="/2021/07/07/redis/1622699567665.png"></p></li><li><p>导入依赖</p></li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>springboot 2.x后 ，原来使用的 Jedis 被 lettuce 替换。</p><blockquote><p>jedis：采用的直连，多个线程操作的话，是不安全的。如果要避免不安全，使用jedis pool连接池！更像BIO模式</p><p>lettuce：采用netty，实例可以在多个线程中共享，不存在线程不安全的情况！可以减少线程数据了，更像NIO模式</p></blockquote><p>我们在学习SpringBoot自动配置的原理时，整合一个组件并进行配置一定会有一个自动配置类xxxAutoConfiguration,并且在spring.factories中也一定能找到这个类的完全限定名。Redis也不例外。</p><p><img src="/2021/07/07/redis/20200513214531573.png"></p><p>那么就一定还存在一个RedisProperties类</p><p><img src="/2021/07/07/redis/20200513214554661.png"></p><p>之前我们说SpringBoot2.x后默认使用Lettuce来替换Jedis，现在我们就能来验证了。</p><p>先看Jedis:</p><p><img src="/2021/07/07/redis/20200513214607475.png"></p><p>@ConditionalOnClass注解中有两个类是默认不存在的，所以Jedis是无法生效的</p><p>然后再看Lettuce：</p><p><img src="/2021/07/07/redis/20200513214618179.png"></p><p>完美生效。</p><p>现在我们回到RedisAutoConfiguratio</p><p><img src="/2021/07/07/redis/2020051321462777.png"></p><p>只有两个简单的Bean</p><ul><li><strong>RedisTemplate</strong></li><li><strong>StringRedisTemplate</strong></li></ul><p>当看到xxTemplate时可以对比RestTemplat、SqlSessionTemplate,通过使用这些Template来间接操作组件。那么这俩也不会例外。分别用于操作Redis和Redis中的String数据类型。</p><p>在RedisTemplate上也有一个条件注解，说明我们是可以对其进行定制化的</p><p>说完这些，我们需要知道如何编写配置文件然后连接Redis，就需要阅读RedisProperties</p><p><img src="/2021/07/07/redis/20200513214638238.png"></p><p>这是一些基本的配置属性。</p><p><img src="/2021/07/07/redis/20200513214649380.png"></p><p>还有一些连接池相关的配置。注意使用时一定使用Lettuce的连接池。</p><p><img src="/2021/07/07/redis/20200513214700372.png"></p><ol><li><p>编写配置文件</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"># 配置redisspring.redis.host&#x3D;39.99.xxx.xxspring.redis.port&#x3D;6379<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>使用RedisTemplate</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootTestclass Redis02SpringbootApplicationTests &#123;    @Autowired    private RedisTemplate redisTemplate;    @Test    void contextLoads() &#123;        &#x2F;&#x2F; redisTemplate 操作不同的数据类型，api和我们的指令是一样的        &#x2F;&#x2F; opsForValue 操作字符串 类似String        &#x2F;&#x2F; opsForList 操作List 类似List        &#x2F;&#x2F; opsForHah        &#x2F;&#x2F; 除了基本的操作，我们常用的方法都可以直接通过redisTemplate操作，比如事务和基本的CRUD        &#x2F;&#x2F; 获取连接对象        &#x2F;&#x2F;RedisConnection connection &#x3D; redisTemplate.getConnectionFactory().getConnection();        &#x2F;&#x2F;connection.flushDb();        &#x2F;&#x2F;connection.flushAll();        redisTemplate.opsForValue().set(&quot;mykey&quot;,&quot;kuangshen&quot;);        System.out.println(redisTemplate.opsForValue().get(&quot;mykey&quot;));    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试结果</p><p><strong>此时我们回到Redis查看数据时候，惊奇发现全是乱码，可是程序中可以正常输出：</strong></p><p><img src="/2021/07/07/redis/20200513214734520.png"></p><p> 这时候就关系到存储对象的序列化问题，在网络中传输的对象也是一样需要序列化，否者就全是乱码。</p><p>我们转到看那个默认的RedisTemplate内部什么样子：</p><p><img src="/2021/07/07/redis/20200513214746506.png"></p><p>在最开始就能看到几个关于序列化的参数。</p><p>默认的序列化器是采用JDK序列化器</p><p><img src="/2021/07/07/redis/20200513214757247.png"></p><p>而默认的RedisTemplate中的所有序列化器都是使用这个序列化器：</p><p><img src="/2021/07/07/redis/20200513214809494.png"></p><p>后续我们定制RedisTemplate就可以对其进行修改。</p><p><code>RedisSerializer</code>提供了多种序列化方案：</p><ul><li><p>直接调用RedisSerializer的静态方法来返回序列化器，然后set</p><p><img src="/2021/07/07/redis/20200513214818682.png"></p></li><li><p>自己new 相应的实现类，然后set</p><p><img src="/2021/07/07/redis/20200513214827233.png"></p></li></ul></li><li><p><strong>定制RedisTemplate的模板：</strong></p><p>我们创建一个Bean加入容器，就会触发RedisTemplate上的条件注解使默认的RedisTemplate失效。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configurationpublic class RedisConfig &#123;   @Bean    public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory) throws UnknownHostException &#123;        &#x2F;&#x2F; 将template 泛型设置为 &lt;String, Object&gt;        RedisTemplate&lt;String, Object&gt; template &#x3D; new RedisTemplate();        &#x2F;&#x2F; 连接工厂，不必修改        template.setConnectionFactory(redisConnectionFactory);        &#x2F;*         * 序列化设置         *&#x2F;        &#x2F;&#x2F; key、hash的key 采用 String序列化方式        template.setKeySerializer(RedisSerializer.string());        template.setHashKeySerializer(RedisSerializer.string());        &#x2F;&#x2F; value、hash的value 采用 Jackson 序列化方式        template.setValueSerializer(RedisSerializer.json());        template.setHashValueSerializer(RedisSerializer.json());        template.afterPropertiesSet();                return template;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>这样一来，只要实体类进行了序列化，我们存什么都不会有乱码的担忧了。</p><h3 id="整个流程"><a href="#整个流程" class="headerlink" title="整个流程"></a>整个流程</h3><h4 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;&#x2F;artifactId&gt;&lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-配置redis文件"><a href="#2-配置redis文件" class="headerlink" title="2.配置redis文件"></a>2.配置redis文件</h4><pre class="line-numbers language-ba" data-language="ba"><code class="language-ba">server.port&#x3D;8080spring.redis.host&#x3D;127.0.0.1spring.redis.port&#x3D;6379spring.redis.database&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h4><blockquote><p>所有的方法都要使用到对象RedisTemplate</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"> @Autowiredprivate RedisTemplate redisTemplate;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;redisTemplate &#x2F;&#x2F;redisTemplate.opsForValue().   操作字符串 类似string &#x2F;&#x2F;redisTemplate.opsForList()     操作list &#x2F;&#x2F;redisTemplate.opsForSet()      操作Set &#x2F;&#x2F;redisTemplate.opsForHash()     操作Hash &#x2F;&#x2F;redisTemplate.opsForGeo()      操作Geo &#x2F;&#x2F;redisTemplate.opsForHyperLogLog()    操作Hyperloglog&#x2F;&#x2F;操作数据库  获取redis的连接对象 RedisConnection connection &#x3D; redisTemplate.getConnectionFactory().getConnection(); connection.flushDb(); connection.flushAll();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/redis/1622702048475.png"></p><blockquote><p>方法使用测试</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">redisTemplate.opsForValue().set(&quot;mykey&quot;,&quot;renyichao&quot;);System.out.println(redisTemplate.opsForValue().get(&quot;mykey&quot;));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">redisTemplate.opsForValue().set(&quot;mykey1&quot;,&quot;任宜超&quot;);System.out.println(redisTemplate.opsForValue().get(&quot;mykey1&quot;));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/redis/1622704630641.png"></p><p>==有中文的话会出现问题==<strong>此时我们回到Redis查看数据时候，惊奇发现全是乱码，可是程序中可以正常输出：</strong></p><p><img src="/2021/07/07/redis/1622704724793.png"></p><p> 这时候就关系到存储对象的序列化问题，在网络中传输的对象也是一样需要序列化，否者就全是乱码。</p><p>我们转到看那个默认的RedisTemplate内部什么样子：</p><p><img src="/2021/07/07/redis/typora文件\md\redis2.assets\20200513214746506.png" alt="在这里插入图片描述"></p><p>在最开始就能看到几个关于序列化的参数。</p><p>默认的序列化器是采用JDK序列化器</p><p><img src="/2021/07/07/redis/typora文件\md\redis2.assets\20200513214757247.png" alt="在这里插入图片描述"></p><p>而默认的RedisTemplate中的所有序列化器都是使用这个序列化器：</p><p><img src="/2021/07/07/redis/typora文件\md\redis2.assets\20200513214809494.png" alt="在这里插入图片描述"></p><p>后续我们定制RedisTemplate就可以对其进行修改。</p><p><code>RedisSerializer</code>提供了多种序列化方案：</p><blockquote><p>创建我们自己的配置类</p><p>我们创建一个Bean加入容器，就会触发RedisTemplate上的条件注解使默认的RedisTemplate失效。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.chao.config;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.data.redis.connection.RedisConnectionFactory;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.redis.serializer.RedisSerializer;import java.net.UnknownHostException;@Configurationpublic class RedisConfig &#123;    &#x2F;&#x2F;编写我们自己的 redisTemplate    @Bean    public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory) throws UnknownHostException &#123;        &#x2F;&#x2F; 将template 泛型设置为 &lt;String, Object&gt;        RedisTemplate&lt;String, Object&gt; template &#x3D; new RedisTemplate();        &#x2F;&#x2F; 连接工厂，不必修改        template.setConnectionFactory(redisConnectionFactory);        &#x2F;*         * 序列化设置         *&#x2F;        &#x2F;&#x2F; key、hash的key 采用 String序列化方式        template.setKeySerializer(RedisSerializer.string());        template.setHashKeySerializer(RedisSerializer.string());        &#x2F;&#x2F; value、hash的value 采用 Jackson 序列化方式        template.setValueSerializer(RedisSerializer.json());        template.setHashValueSerializer(RedisSerializer.json());        template.afterPropertiesSet();        return template;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>传对象</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.chao.pojo;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;import org.springframework.stereotype.Component;@Component@AllArgsConstructor@NoArgsConstructor@Datapublic class User &#123;    private String name;    private  int age;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Test   public void text1() throws JsonProcessingException &#123;       &#x2F;&#x2F;真实环境一般用json传递对象       User user&#x3D; new User(&quot;任宜超&quot;, 3);       String jsonUser &#x3D; new ObjectMapper().writeValueAsString(user);       redisTemplate.opsForValue().set(&quot;mykey&quot;,jsonUser);       System.out.println(redisTemplate.opsForValue().get(&quot;mykey&quot;));   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/redis/1622707176203.png"></p><p>==直接传对象进去==</p><p><img src="/2021/07/07/redis/1622707327946.png"></p><p>==有时会报序列化的错误，所以我们一般将对象进行序列化操作,实现接口Serializable==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Component@AllArgsConstructor@NoArgsConstructor@Datapublic class User implements Serializable &#123;    private String name;    private  int age;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写一个自己的redisTemplete序列化模板</p><blockquote><p>模板</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.chao.config;import com.fasterxml.jackson.annotation.JsonAutoDetect;import com.fasterxml.jackson.annotation.PropertyAccessor;import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.data.redis.connection.RedisConnectionFactory;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;import org.springframework.data.redis.serializer.RedisSerializer;import org.springframework.data.redis.serializer.StringRedisSerializer;import java.net.UnknownHostException;@Configurationpublic class RedisConfig &#123;    &#x2F;&#x2F;编写我们自己的 redisTemplate    @Bean    public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory) throws UnknownHostException &#123;        &#x2F;&#x2F; 将template 泛型设置为 &lt;String, Object&gt;        RedisTemplate&lt;String, Object&gt; template &#x3D; new RedisTemplate();        &#x2F;&#x2F; 连接工厂，不必修改        template.setConnectionFactory(redisConnectionFactory);        &#x2F;*         * 序列化设置         *&#x2F;        &#x2F;&#x2F; Json序列化配置        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer &#x3D; new                Jackson2JsonRedisSerializer(Object.class);        ObjectMapper om &#x3D; new ObjectMapper();        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);        om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL);        jackson2JsonRedisSerializer.setObjectMapper(om);        &#x2F;&#x2F; String 的序列化        StringRedisSerializer stringRedisSerializer &#x3D; new StringRedisSerializer();        &#x2F;&#x2F; key采用String的序列化方式        template.setKeySerializer(stringRedisSerializer);        &#x2F;&#x2F; hash的key也采用String的序列化方式        template.setHashKeySerializer(stringRedisSerializer);        &#x2F;&#x2F; value序列化方式采用jackson        template.setValueSerializer(jackson2JsonRedisSerializer);        &#x2F;&#x2F; hash的value序列化方式采用jackson        template.setHashValueSerializer(jackson2JsonRedisSerializer);        template.afterPropertiesSet();        return template;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>将redisTemplate变成我们自己写的</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootTestclass Redis02SpringbootApplicationTests &#123;    @Autowired    @Qualifier(&quot;redisTemplate&quot;)  &#x2F;&#x2F;重名的话用这个注解    private RedisTemplate redisTemplate;    @Test    public void text1() throws JsonProcessingException &#123;        &#x2F;&#x2F;真实环境一般用json传递对象        User user&#x3D; new User(&quot;任宜超&quot;, 3);        String jsonUser &#x3D; new ObjectMapper().writeValueAsString(user);        redisTemplate.opsForValue().set(&quot;mykey&quot;,user);        System.out.println(redisTemplate.opsForValue().get(&quot;mykey&quot;));    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>企业开发中我们一般都不会用这个原生方法编码，写一个自己的工具类RedisUtils</p><p>自己封装这些方法，例如：</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.oal.microservice.util; import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.stereotype.Component;import org.springframework.util.CollectionUtils; import java.util.List;import java.util.Map;import java.util.Set;import java.util.concurrent.TimeUnit; &#x2F;** * Redis工具类 * * @author zhangzhixiang * @date 2019年06月19日 *&#x2F;@Componentpublic final class RedisUtil &#123;     @Autowired    private RedisTemplate&lt;String, Object&gt; redisTemplate;     &#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;common&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;    &#x2F;**     * 指定缓存失效时间     *     * @param key  键     * @param time 时间(秒)     * @return     *&#x2F;    public boolean expire(String key, long time) &#123;        try &#123;            if (time &gt; 0) &#123;                redisTemplate.expire(key, time, TimeUnit.SECONDS);            &#125;            return true;        &#125; catch (Exception e) &#123;            e.printStackTrace();            return false;        &#125;    &#125;     &#x2F;**     * 根据key 获取过期时间     *     * @param key 键 不能为null     * @return 时间(秒) 返回0代表为永久有效     *&#x2F;    public long getExpire(String key) &#123;        return redisTemplate.getExpire(key, TimeUnit.SECONDS);    &#125;     &#x2F;**     * 判断key是否存在     *     * @param key 键     * @return true 存在 false不存在     *&#x2F;    public boolean hasKey(String key) &#123;        try &#123;            return redisTemplate.hasKey(key);        &#125; catch (Exception e) &#123;            e.printStackTrace();            return false;        &#125;    &#125;     &#x2F;**     * 删除缓存     *     * @param key 可以传一个值 或多个     *&#x2F;    @SuppressWarnings(&quot;unchecked&quot;)    public void del(String... key) &#123;        if (key !&#x3D; null &amp;&amp; key.length &gt; 0) &#123;            if (key.length &#x3D;&#x3D; 1) &#123;                redisTemplate.delete(key[0]);            &#125; else &#123;                redisTemplate.delete(CollectionUtils.arrayToList(key));            &#125;        &#125;    &#125;    &#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;String&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;     &#x2F;**     * 普通缓存获取     *     * @param key 键     * @return 值     *&#x2F;    public Object get(String key) &#123;        return key &#x3D;&#x3D; null ? null : redisTemplate.opsForValue().get(key);    &#125;     &#x2F;**     * 普通缓存放入     *     * @param key   键     * @param value 值     * @return true成功 false失败     *&#x2F;    public boolean set(String key, Object value) &#123;        try &#123;            redisTemplate.opsForValue().set(key, value);            return true;        &#125; catch (Exception e) &#123;            e.printStackTrace();            return false;        &#125;    &#125;     &#x2F;**     * 普通缓存放入并设置时间     *     * @param key   键     * @param value 值     * @param time  时间(秒) time要大于0 如果time小于等于0 将设置无限期     * @return true成功 false 失败     *&#x2F;    public boolean set(String key, Object value, long time) &#123;        try &#123;            if (time &gt; 0) &#123;                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);            &#125; else &#123;                set(key, value);            &#125;            return true;        &#125; catch (Exception e) &#123;            e.printStackTrace();            return false;        &#125;    &#125;     &#x2F;**     * 递增     *     * @param key   键     * @param delta 要增加几(大于0)     * @return     *&#x2F;    public long incr(String key, long delta) &#123;        if (delta &lt; 0) &#123;            throw new RuntimeException(&quot;递增因子必须大于0&quot;);        &#125;        return redisTemplate.opsForValue().increment(key, delta);    &#125;     &#x2F;**     * 递减     *     * @param key   键     * @param delta 要减少几(小于0)     * @return     *&#x2F;    public long decr(String key, long delta) &#123;        if (delta &lt; 0) &#123;            throw new RuntimeException(&quot;递减因子必须大于0&quot;);        &#125;        return redisTemplate.opsForValue().increment(key, -delta);    &#125;    &#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Map&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;     &#x2F;**     * HashGet     *     * @param key  键 不能为null     * @param item 项 不能为null     * @return 值     *&#x2F;    public Object hget(String key, String item) &#123;        return redisTemplate.opsForHash().get(key, item);    &#125;     &#x2F;**     * 获取hashKey对应的所有键值     *     * @param key 键     * @return 对应的多个键值     *&#x2F;    public Map&lt;Object, Object&gt; hmget(String key) &#123;        return redisTemplate.opsForHash().entries(key);    &#125;     &#x2F;**     * HashSet     *     * @param key 键     * @param map 对应多个键值     * @return true 成功 false 失败     *&#x2F;    public boolean hmset(String key, Map&lt;String, Object&gt; map) &#123;        try &#123;            redisTemplate.opsForHash().putAll(key, map);            return true;        &#125; catch (Exception e) &#123;            e.printStackTrace();            return false;        &#125;    &#125;     &#x2F;**     * HashSet 并设置时间     *     * @param key  键     * @param map  对应多个键值     * @param time 时间(秒)     * @return true成功 false失败     *&#x2F;    public boolean hmset(String key, Map&lt;String, Object&gt; map, long time) &#123;        try &#123;            redisTemplate.opsForHash().putAll(key, map);            if (time &gt; 0) &#123;                expire(key, time);            &#125;            return true;        &#125; catch (Exception e) &#123;            e.printStackTrace();            return false;        &#125;    &#125;     &#x2F;**     * 向一张hash表中放入数据,如果不存在将创建     *     * @param key   键     * @param item  项     * @param value 值     * @return true 成功 false失败     *&#x2F;    public boolean hset(String key, String item, Object value) &#123;        try &#123;            redisTemplate.opsForHash().put(key, item, value);            return true;        &#125; catch (Exception e) &#123;            e.printStackTrace();            return false;        &#125;    &#125;     &#x2F;**     * 向一张hash表中放入数据,如果不存在将创建     *     * @param key   键     * @param item  项     * @param value 值     * @param time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间     * @return true 成功 false失败     *&#x2F;    public boolean hset(String key, String item, Object value, long time) &#123;        try &#123;            redisTemplate.opsForHash().put(key, item, value);            if (time &gt; 0) &#123;                expire(key, time);            &#125;            return true;        &#125; catch (Exception e) &#123;            e.printStackTrace();            return false;        &#125;    &#125;     &#x2F;**     * 删除hash表中的值     *     * @param key  键 不能为null     * @param item 项 可以使多个 不能为null     *&#x2F;    public void hdel(String key, Object... item) &#123;        redisTemplate.opsForHash().delete(key, item);    &#125;     &#x2F;**     * 判断hash表中是否有该项的值     *     * @param key  键 不能为null     * @param item 项 不能为null     * @return true 存在 false不存在     *&#x2F;    public boolean hHasKey(String key, String item) &#123;        return redisTemplate.opsForHash().hasKey(key, item);    &#125;     &#x2F;**     * hash递增 如果不存在,就会创建一个 并把新增后的值返回     *     * @param key  键     * @param item 项     * @param by   要增加几(大于0)     * @return     *&#x2F;    public double hincr(String key, String item, double by) &#123;        return redisTemplate.opsForHash().increment(key, item, by);    &#125;     &#x2F;**     * hash递减     *     * @param key  键     * @param item 项     * @param by   要减少记(小于0)     * @return     *&#x2F;    public double hdecr(String key, String item, double by) &#123;        return redisTemplate.opsForHash().increment(key, item, -by);    &#125;    &#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;set&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;     &#x2F;**     * 根据key获取Set中的所有值     *     * @param key 键     * @return     *&#x2F;    public Set&lt;Object&gt; sGet(String key) &#123;        try &#123;            return redisTemplate.opsForSet().members(key);        &#125; catch (Exception e) &#123;            e.printStackTrace();            return null;        &#125;    &#125;     &#x2F;**     * 根据value从一个set中查询,是否存在     *     * @param key   键     * @param value 值     * @return true 存在 false不存在     *&#x2F;    public boolean sHasKey(String key, Object value) &#123;        try &#123;            return redisTemplate.opsForSet().isMember(key, value);        &#125; catch (Exception e) &#123;            e.printStackTrace();            return false;        &#125;    &#125;     &#x2F;**     * 将数据放入set缓存     *     * @param key    键     * @param values 值 可以是多个     * @return 成功个数     *&#x2F;    public long sSet(String key, Object... values) &#123;        try &#123;            return redisTemplate.opsForSet().add(key, values);        &#125; catch (Exception e) &#123;            e.printStackTrace();            return 0;        &#125;    &#125;     &#x2F;**     * 将set数据放入缓存     *     * @param key    键     * @param time   时间(秒)     * @param values 值 可以是多个     * @return 成功个数     *&#x2F;    public long sSetAndTime(String key, long time, Object... values) &#123;        try &#123;            Long count &#x3D; redisTemplate.opsForSet().add(key, values);            if (time &gt; 0)                expire(key, time);            return count;        &#125; catch (Exception e) &#123;            e.printStackTrace();            return 0;        &#125;    &#125;     &#x2F;**     * 获取set缓存的长度     *     * @param key 键     * @return     *&#x2F;    public long sGetSetSize(String key) &#123;        try &#123;            return redisTemplate.opsForSet().size(key);        &#125; catch (Exception e) &#123;            e.printStackTrace();            return 0;        &#125;    &#125;     &#x2F;**     * 移除值为value的     *     * @param key    键     * @param values 值 可以是多个     * @return 移除的个数     *&#x2F;    public long setRemove(String key, Object... values) &#123;        try &#123;            Long count &#x3D; redisTemplate.opsForSet().remove(key, values);            return count;        &#125; catch (Exception e) &#123;            e.printStackTrace();            return 0;        &#125;    &#125;    &#x2F;&#x2F; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;list&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;     &#x2F;**     * 获取list缓存的内容     *     * @param key   键     * @param start 开始     * @param end   结束 0 到 -1代表所有值     * @return     *&#x2F;    public List&lt;Object&gt; lGet(String key, long start, long end) &#123;        try &#123;            return redisTemplate.opsForList().range(key, start, end);        &#125; catch (Exception e) &#123;            e.printStackTrace();            return null;        &#125;    &#125;     &#x2F;**     * 获取list缓存的长度     *     * @param key 键     * @return     *&#x2F;    public long lGetListSize(String key) &#123;        try &#123;            return redisTemplate.opsForList().size(key);        &#125; catch (Exception e) &#123;            e.printStackTrace();            return 0;        &#125;    &#125;     &#x2F;**     * 通过索引 获取list中的值     *     * @param key   键     * @param index 索引 index&gt;&#x3D;0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推     * @return     *&#x2F;    public Object lGetIndex(String key, long index) &#123;        try &#123;            return redisTemplate.opsForList().index(key, index);        &#125; catch (Exception e) &#123;            e.printStackTrace();            return null;        &#125;    &#125;     &#x2F;**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @return     *&#x2F;    public boolean lSet(String key, Object value) &#123;        try &#123;            redisTemplate.opsForList().rightPush(key, value);            return true;        &#125; catch (Exception e) &#123;            e.printStackTrace();            return false;        &#125;    &#125;     &#x2F;**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @param time  时间(秒)     * @return     *&#x2F;    public boolean lSet(String key, Object value, long time) &#123;        try &#123;            redisTemplate.opsForList().rightPush(key, value);            if (time &gt; 0)                expire(key, time);            return true;        &#125; catch (Exception e) &#123;            e.printStackTrace();            return false;        &#125;    &#125;     &#x2F;**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @return     *&#x2F;    public boolean lSet(String key, List&lt;Object&gt; value) &#123;        try &#123;            redisTemplate.opsForList().rightPushAll(key, value);            return true;        &#125; catch (Exception e) &#123;            e.printStackTrace();            return false;        &#125;    &#125;     &#x2F;**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @param time  时间(秒)     * @return     *&#x2F;    public boolean lSet(String key, List&lt;Object&gt; value, long time) &#123;        try &#123;            redisTemplate.opsForList().rightPushAll(key, value);            if (time &gt; 0)                expire(key, time);            return true;        &#125; catch (Exception e) &#123;            e.printStackTrace();            return false;        &#125;    &#125;     &#x2F;**     * 根据索引修改list中的某条数据     *     * @param key   键     * @param index 索引     * @param value 值     * @return     *&#x2F;    public boolean lUpdateIndex(String key, long index, Object value) &#123;        try &#123;            redisTemplate.opsForList().set(key, index, value);            return true;        &#125; catch (Exception e) &#123;            e.printStackTrace();            return false;        &#125;    &#125;     &#x2F;**     * 移除N个值为value     *     * @param key   键     * @param count 移除多少个     * @param value 值     * @return 移除的个数     *&#x2F;    public long lRemove(String key, long count, Object value) &#123;        try &#123;            Long remove &#x3D; redisTemplate.opsForList().remove(key, count, value);            return remove;        &#125; catch (Exception e) &#123;            e.printStackTrace();            return 0;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="八、自定义Redis工具类"><a href="#八、自定义Redis工具类" class="headerlink" title="八、自定义Redis工具类"></a>八、自定义Redis工具类</h2><p>使用RedisTemplate需要频繁调用<code>.opForxxx</code>然后才能进行对应的操作，这样使用起来代码效率低下，工作中一般不会这样使用，而是将这些常用的公共API抽取出来封装成为一个工具类，然后直接使用工具类来间接操作Redis,不但效率高并且易用。</p><p>工具类参考博客：</p><p><a href="https://www.cnblogs.com/zeng1994/p/03303c805731afc9aa9c60dbbd32a323.html">https://www.cnblogs.com/zeng1994/p/03303c805731afc9aa9c60dbbd32a323.html</a></p><p><a href="https://www.cnblogs.com/zhzhlong/p/11434284.html">https://www.cnblogs.com/zhzhlong/p/11434284.html</a></p><blockquote><p>以下面试问的</p></blockquote><h2 id="九、Redis-conf"><a href="#九、Redis-conf" class="headerlink" title="九、Redis.conf"></a>九、Redis.conf</h2><blockquote><p>容量单位不区分大小写，G和GB有区别</p></blockquote><p><img src="/2021/07/07/redis/2020051321485460.png"></p><blockquote><p>可以使用 include 组合多个配置问题</p></blockquote><p><img src="/2021/07/07/redis/20200513214902552.png"></p><blockquote><p>网络配置</p></blockquote><p><img src="/2021/07/07/redis/20200513214912813.png"></p><blockquote><p>日志输出级别</p></blockquote><p><img src="/2021/07/07/redis/20200513214923678.png"></p><blockquote><p>日志输出文件</p></blockquote><p><img src="/2021/07/07/redis/20200513214933713.png"></p><blockquote><p>持久化规则</p></blockquote><p>由于Redis是基于内存的数据库，需要将数据由内存持久化到文件中(帮保存)</p><p>持久化方式：</p><ul><li>RDB</li><li>AOF</li></ul><p><img src="/2021/07/07/redis/20200513214944964.png"></p><blockquote><p>RDB文件相关</p></blockquote><p><img src="/2021/07/07/redis/20200513214955679.png"></p><p><img src="/2021/07/07/redis/20200513215006207.png"></p><blockquote><p>主从复制</p></blockquote><p><img src="/2021/07/07/redis/20200513215016371.png"></p><blockquote><p>Security模块中进行密码设置</p></blockquote><p><img src="/2021/07/07/redis/20200513215026143.png"></p><p><img src="/2021/07/07/redis/1622714949484.png"></p><blockquote><p>客户端连接相关</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">maxclients 10000  最大客户端数量maxmemory &lt;bytes&gt; 最大内存限制maxmemory-policy noeviction # 内存达到限制值的处理策略<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>redis 中的<strong>默认</strong>的过期策略是 <strong>volatile-lru</strong> 。</p><p><strong>设置方式</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">config set maxmemory-policy volatile-lru <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="maxmemory-policy-六种方式"><a href="#maxmemory-policy-六种方式" class="headerlink" title="maxmemory-policy 六种方式"></a><strong>maxmemory-policy 六种方式</strong></h4><p><strong>1、volatile-lru：</strong>只对设置了过期时间的key进行LRU（默认值）</p><p><strong>2、allkeys-lru ：</strong> 删除lru算法的key</p><p><strong>3、volatile-random：</strong>随机删除即将过期key</p><p><strong>4、allkeys-random：</strong>随机删除</p><p><strong>5、volatile-ttl ：</strong> 删除即将过期的</p><p><strong>6、noeviction ：</strong> 永不过期，返回错误</p><blockquote><p>AOF相关部分</p></blockquote><p><img src="/2021/07/07/redis/20200513215037918.png"></p><p><img src="/2021/07/07/redis/20200513215047999.png"></p><h2 id="十、持久化—RDB"><a href="#十、持久化—RDB" class="headerlink" title="十、持久化—RDB"></a>十、持久化—RDB</h2><p>RDB：Redis Databases</p><p><img src="/2021/07/07/redis/1622781766510.png"></p><h3 id="什么是RDB（默认）"><a href="#什么是RDB（默认）" class="headerlink" title="什么是RDB（默认）"></a>什么是RDB（默认）</h3><hr><p>在指定时间间隔后，将内存中的数据集快照写入数据库 ；在恢复时候，直接读取快照文件，进行数据的恢复 ；</p><p><img src="/2021/07/07/redis/20200513215126515.jpg"></p><p>默认情况下， Redis 将数据库快照保存在名字为 dump.rdb的二进制文件中。文件名可以在配置文件中进行自定义。</p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><hr><p>在进行 <strong><code>RDB</code></strong> 的时候，**<code>redis</code>** 的主线程是不会做 <strong><code>io</code></strong> 操作的，主线程会 <strong><code>fork</code></strong> 一个子线程来完成该操作；</p><ol><li>Redis 调用forks。同时拥有父进程和子进程。</li><li>子进程将数据集写入到一个临时 RDB 文件中。</li><li>当子进程完成对新 RDB 文件的写入时，Redis 用新 RDB 文件替换原来的 RDB 文件，并删除旧的 RDB 文件。</li></ol><p>这种工作方式使得 Redis 可以从写时复制（copy-on-write）机制中获益(因为是使用子进程进行写操作，而父进程依然可以接收来自客户端的请求。)</p><p><img src="/2021/07/07/redis/20200513215141519.jpg"></p><h3 id="触发机制"><a href="#触发机制" class="headerlink" title="触发机制"></a>触发机制</h3><hr><ol><li>save的规则满足的情况下，会自动触发rdb原则</li><li>执行flushall命令，也会触发我们的rdb原则</li><li>退出redis，也会自动产生rdb文件</li></ol><h4 id="save"><a href="#save" class="headerlink" title="save"></a>save</h4><p>使用 <code>save</code> 命令，会立刻对当前内存中的数据进行持久化 ,但是会阻塞，也就是不接受其他操作了；</p><blockquote><p>由于 <code>save</code> 命令是同步命令，会占用Redis的主进程。若Redis数据非常多时，<code>save</code>命令执行速度会非常慢，阻塞所有客户端的请求。</p></blockquote><p><img src="/2021/07/07/redis/20200513215150892.jpg"></p><h4 id="flushall命令"><a href="#flushall命令" class="headerlink" title="flushall命令"></a>flushall命令</h4><p><code>flushall</code> 命令也会触发持久化 ；</p><h4 id="触发持久化规则"><a href="#触发持久化规则" class="headerlink" title="触发持久化规则"></a>触发持久化规则</h4><p>==满足配置条件中的触发条件 ；或者执行了flushall命令，或者关闭redis都会生成dump.rdb==</p><p>启动时，自动读取目录下的dump.rdb文件，恢复数据</p><blockquote><p>可以通过配置文件对 Redis 进行设置， 让它在“ N 秒内数据集至少有 M 个改动”这一条件被满足时， 自动进行数据集保存操作。</p><p><img src="/2021/07/07/redis/20200513215205970.png"></p></blockquote><p><img src="/2021/07/07/redis/20200513215220858.jpg"></p><h4 id="bgsave"><a href="#bgsave" class="headerlink" title="bgsave"></a>bgsave</h4><p><code>bgsave</code> 是异步进行，进行持久化的时候，<code>redis</code> 还可以将继续响应客户端请求 ；</p><p><img src="/2021/07/07/redis/2020051321523151.jpg"></p><p><strong>bgsave和save对比</strong></p><table><thead><tr><th>命令</th><th>save</th><th>bgsave</th></tr></thead><tbody><tr><td>IO类型</td><td>同步</td><td>异步</td></tr><tr><td>阻塞？</td><td>是</td><td>是（阻塞发生在fock()，通常非常快）</td></tr><tr><td>复杂度</td><td>O(n)</td><td>O(n)</td></tr><tr><td>优点</td><td>不会消耗额外的内存</td><td>不阻塞客户端命令</td></tr><tr><td>缺点</td><td>阻塞客户端命令</td><td>需要fock子进程，消耗内存</td></tr></tbody></table><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p><strong>优点：</strong></p><ol><li>适合大规模的数据恢复</li><li>对数据的完整性要求不高</li></ol><p><strong>缺点：</strong></p><ol><li>需要一定的时间间隔进行操作，如果redis意外宕机了，这个最后一次修改的数据就没有了。</li><li>fork进程的时候，会占用一定的内容空间。</li></ol><h2 id="十一、持久化AOF"><a href="#十一、持久化AOF" class="headerlink" title="十一、持久化AOF"></a>十一、持久化AOF</h2><p><strong>Append Only File</strong></p><p>将我们所有的命令都记录下来，history，恢复的时候就把这个文件全部再执行一遍</p><p><img src="/2021/07/07/redis/1622788216649.png"></p><blockquote><p>以日志的形式来记录每个写的操作，将Redis执行过的所有指令记录下来（读操作不记录），只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p></blockquote><h3 id="什么是AOF"><a href="#什么是AOF" class="headerlink" title="什么是AOF"></a>什么是AOF</h3><p> 快照功能（RDB）并不是非常耐久（durable）： 如果 Redis 因为某些原因而造成故障停机， 那么服务器将丢失最近写入、以及未保存到快照中的那些数据。 从 1.1 版本开始， Redis 增加了一种完全耐久的持久化方式： AOF 持久化。</p><p>如果要使用AOF，需要修改配置文件：</p><p><img src="/2021/07/07/redis/20200513215247113.png" alt="在这里插入图片描述"></p><p><code>appendonly no yes</code>则表示启用AOF</p><p>默认是不开启的，我们需要手动配置，然后重启redis，就可以生效了！</p><p>如果这个aof文件有错位，这时候redis是启动不起来的，我需要修改这个aof文件</p><p>redis给我们提供了一个工具<code>redis-check-aof --fix</code></p><blockquote><p>优点和缺点</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">appendonly yes  # 默认是不开启aof模式的，默认是使用rdb方式持久化的，在大部分的情况下，rdb完全够用appendfilename &quot;appendonly.aof&quot;# appendfsync always # 每次修改都会sync 消耗性能appendfsync everysec # 每秒执行一次 sync 可能会丢失这一秒的数据# appendfsync no # 不执行 sync ,这时候操作系统自己同步数据，速度最快<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优点</strong></p><ol><li>每一次修改都会同步，文件的完整性会更加好</li><li>没秒同步一次，可能会丢失一秒的数据</li><li>从不同步，效率最高</li></ol><p><strong>缺点</strong></p><ol><li>相对于数据文件来说，aof远远大于rdb，修复速度比rdb慢！</li><li>Aof运行效率也要比rdb慢，所以我们redis默认的配置就是rdb持久化</li></ol><p><img src="/2021/07/07/redis/1622789220071.png"></p><h2 id="十二、RDB和AOP选择"><a href="#十二、RDB和AOP选择" class="headerlink" title="十二、RDB和AOP选择"></a>十二、RDB和AOP选择</h2><h3 id="RDB-和-AOF-对比"><a href="#RDB-和-AOF-对比" class="headerlink" title="RDB 和 AOF 对比"></a>RDB 和 AOF 对比</h3><table><thead><tr><th>RDB</th><th>AOF</th><th></th></tr></thead><tbody><tr><td>启动优先级</td><td>低</td><td>高</td></tr><tr><td>体积</td><td>小</td><td>大</td></tr><tr><td>恢复速度</td><td>快</td><td>慢</td></tr><tr><td>数据安全性</td><td>丢数据</td><td>根据策略决定</td></tr></tbody></table><h3 id="如何选择使用哪种持久化方式？"><a href="#如何选择使用哪种持久化方式？" class="headerlink" title="如何选择使用哪种持久化方式？"></a>如何选择使用哪种持久化方式？</h3><p>一般来说， 如果想达到足以媲美 PostgreSQL 的数据安全性， 你应该同时使用两种持久化功能。</p><p>如果你非常关心你的数据， 但仍然可以承受数分钟以内的数据丢失， 那么你可以只使用 RDB 持久化。</p><p>有很多用户都只使用 AOF 持久化， 但并不推荐这种方式： 因为定时生成 RDB 快照（snapshot）非常便于进行数据库备份， 并且 RDB 恢复数据集的速度也要比 AOF 恢复的速度要快。</p><p><img src="/2021/07/07/redis/1622789539758.png"></p><p><img src="/2021/07/07/redis/1622789580232.png" alt="1622789580232"></p><h2 id="十三、Redis发布与订阅"><a href="#十三、Redis发布与订阅" class="headerlink" title="十三、Redis发布与订阅"></a>十三、Redis发布与订阅</h2><p>Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。</p><p><img src="/2021/07/07/redis/1622789627687.png"></p><p>下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：</p><p><img src="/2021/07/07/redis/20200513215523258.png"></p><p>当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：</p><p><img src="/2021/07/07/redis/2020051321553483.png"></p><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>PSUBSCRIBE pattern [pattern..]</code></td><td>订阅一个或多个符合给定模式的频道。</td></tr><tr><td><code>PUNSUBSCRIBE pattern [pattern..]</code></td><td>退订一个或多个符合给定模式的频道。</td></tr><tr><td><code>PUBSUB subcommand [argument[argument]]</code></td><td>查看订阅与发布系统状态。</td></tr><tr><td><code>PUBLISH channel message</code></td><td>向指定频道发布消息</td></tr><tr><td><code>SUBSCRIBE channel [channel..]</code></td><td>订阅给定的一个或多个频道。</td></tr><tr><td><code>SUBSCRIBE channel [channel..]</code></td><td>退订一个或多个频道</td></tr></tbody></table><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">------------订阅端----------------------127.0.0.1:6379&gt; SUBSCRIBE sakura # 订阅sakura频道Reading messages... (press Ctrl-C to quit) # 等待接收消息1) &quot;subscribe&quot; # 订阅成功的消息2) &quot;sakura&quot;3) (integer) 11) &quot;message&quot; # 接收到来自sakura频道的消息 &quot;hello world&quot;2) &quot;sakura&quot;3) &quot;hello world&quot;1) &quot;message&quot; # 接收到来自sakura频道的消息 &quot;hello i am sakura&quot;2) &quot;sakura&quot;3) &quot;hello i am sakura&quot;--------------消息发布端-------------------127.0.0.1:6379&gt; PUBLISH sakura &quot;hello world&quot; # 发布消息到sakura频道(integer) 1127.0.0.1:6379&gt; PUBLISH sakura &quot;hello i am sakura&quot; # 发布消息(integer) 1-----------------查看活跃的频道------------127.0.0.1:6379&gt; PUBSUB channels1) &quot;sakura&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>每个 Redis 服务器进程都维持着一个表示服务器状态的 redis.h/redisServer 结构， 结构的 pubsub_channels 属性是一个字典， 这个字典就用于保存订阅频道的信息，其中，字典的键为正在被订阅的频道， 而字典的值则是一个链表， 链表中保存了所有订阅这个频道的客户端。</p><p><img src="/2021/07/07/redis/2020051321554964.png"></p><p>客户端订阅，就被链接到对应频道的链表的尾部，退订则就是将客户端节点从链表中移除。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>如果一个客户端订阅了频道，但自己读取消息的速度却不够快的话，那么不断积压的消息会使redis输出缓冲区的体积变得越来越大，这可能使得redis本身的速度变慢，甚至直接崩溃。</li><li>这和数据传输可靠性有关，如果在订阅方断线，那么他将会丢失所有在短线期间发布者发布的消息。</li></ol><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ol><li>消息订阅：公众号订阅，微博关注等等（起始更多是使用消息队列来进行实现）</li><li>多人在线聊天室。</li></ol><p>稍微复杂的场景，我们就会使用消息中间件MQ处理。</p><h2 id="十四、Redis主从复制"><a href="#十四、Redis主从复制" class="headerlink" title="十四、Redis主从复制"></a>十四、Redis主从复制</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p> 主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点（Master/Leader）,后者称为从节点（Slave/Follower）， 数据的复制是单向的！只能由主节点复制到从节点（主节点以写为主、从节点以读为主）。</p><p>默认情况下，每台Redis服务器都是主节点，一个主节点可以有0个或者多个从节点，但每个从节点只能由一个主节点。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol><li>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余的方式。</li><li>故障恢复：当主节点故障时，从节点可以暂时替代主节点提供服务，是一种服务冗余的方式</li><li>负载均衡：在主从复制的基础上，配合读写分离，由主节点进行写操作，从节点进行读操作，分担服务器的负载；尤其是在多读少写的场景下，通过多个从节点分担负载，提高并发量。</li><li>高可用基石：主从复制还是哨兵和集群能够实施的基础。</li></ol><h3 id="为什么使用集群"><a href="#为什么使用集群" class="headerlink" title="为什么使用集群"></a>为什么使用集群</h3><ol><li>单台服务器难以负载大量的请求</li><li>单台服务器故障率高，系统崩坏概率大</li><li>单台服务器内存容量有限。</li></ol><p><img src="/2021/07/07/redis/1622791611499.png"></p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>我们在讲解配置文件的时候，注意到有一个<code>replication</code>模块 (见Redis.conf中第8条)</p><p>查看当前库的信息：<code>info replication</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">127.0.0.1:6379&gt; info replication# Replicationrole:master # 角色connected_slaves:0 # 从机数量master_replid:3b54deef5b7b7b7f7dd8acefa23be48879b4fcffmaster_replid2:0000000000000000000000000000000000000000master_repl_offset:0second_repl_offset:-1repl_backlog_active:0repl_backlog_size:1048576repl_backlog_first_byte_offset:0repl_backlog_histlen:0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>既然需要启动多个服务，就需要多个配置文件。每个配置文件对应修改以下信息：</p><ul><li>端口号</li><li>pid文件名</li><li>日志文件名</li><li>rdb文件名</li></ul><p>启动单机多服务集群：</p><p><img src="/2021/07/07/redis/20200513215610163.png"></p><h3 id="一主二从配置"><a href="#一主二从配置" class="headerlink" title="一主二从配置"></a>一主二从配置</h3><p>==默认情况下，每台Redis服务器都是主节点；==我们一般情况下只用配置从机就好了！</p><p>认老大！一主（79）二从（80，81）</p><p>使用<code>SLAVEOF host port</code>就可以为从机配置主机了。</p><p><img src="/2021/07/07/redis/20200513215637483.png"></p><p>然后主机上也能看到从机的状态：</p><p><img src="/2021/07/07/redis/20200513215645778.png"></p><p>我们这里是使用命令搭建，是暂时的，==真实开发中应该在从机的配置文件中进行配置，==这样的话是永久的。</p><p><img src="/2021/07/07/redis/20200513215654634.png"></p><h3 id="使用规则"><a href="#使用规则" class="headerlink" title="使用规则"></a>使用规则</h3><ol><li><p>从机只能读，不能写，主机可读可写但是多用于写。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> 127.0.0.1:6381&gt; set name sakura # 从机6381写入失败(error) READONLY You can&#39;t write against a read only replica.127.0.0.1:6380&gt; set name sakura # 从机6380写入失败(error) READONLY You can&#39;t write against a read only replica.127.0.0.1:6379&gt; set name sakuraOK127.0.0.1:6379&gt; get name&quot;sakura&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当主机断电宕机后，默认情况下从机的角色不会发生变化 ，集群中只是失去了写操作，当主机恢复以后，又会连接上从机恢复原状。</p></li><li><p>当从机断电宕机后，若不是使用配置文件配置的从机，再次启动后作为主机是无法获取之前主机的数据的，若此时重新配置称为从机，又可以获取到主机的所有数据。这里就要提到一个同步原理。</p></li><li><p>第二条中提到，默认情况下，主机故障后，不会出现新的主机，有两种方式可以产生新的主机：</p><ul><li>从机手动执行命令<code>slaveof no one</code>,这样执行以后从机会独立出来成为一个主机</li><li>使用哨兵模式（自动选举）</li></ul></li></ol><p><img src="/2021/07/07/redis/1622793921751.png" alt="1622793921751"></p><blockquote><p>如果没有老大了，这个时候能不能选择出来一个老大呢？手动！</p></blockquote><p>如果主机断开了连接，我们可以使用<code>SLAVEOF no one</code>让自己变成主机！其他的节点就可以手动连接到最新的主节点（手动）！如果这个时候老大修复了，那么久重新连接！</p><h2 id="十五、哨兵模式"><a href="#十五、哨兵模式" class="headerlink" title="十五、哨兵模式"></a>十五、哨兵模式</h2><p>更多信息参考博客：<a href="https://www.jianshu.com/p/06ab9daf921d">https://www.jianshu.com/p/06ab9daf921d</a></p><p><strong>主从切换技术的方法是：当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费事费力，还会造成一段时间内服务不可用。</strong>这不是一种推荐的方式，更多时候，我们优先考虑<strong>哨兵模式</strong>。</p><p>单机单个哨兵</p><p><img src="/2021/07/07/redis/1622795845926.png"></p><p>哨兵的作用：</p><ul><li>通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器。</li><li>当哨兵监测到master宕机，会自动将slave切换成master，然后通过<strong>发布订阅模式</strong>通知其他的从服务器，修改配置文件，让它们切换主机。</li></ul><p>多哨兵模式</p><p><img src="/2021/07/07/redis/1622796343841.png"></p><blockquote><p>==哨兵的核心配置sentinel.config==</p></blockquote><pre class="line-numbers language-none"><code class="language-none">sentinel monitor 被监控的名称 127.0.0.1 6379 1sentinel monitor mymaster 127.0.0.1 6379 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>数字1表示 ：当一个哨兵主观认为主机断开，就可以客观认为主机故障，然后开始选举新的主机。</li></ul><blockquote><p>测试</p></blockquote><pre class="line-numbers language-none"><code class="language-none">redis-sentinel xxx&#x2F;sentinel.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功启动哨兵模式</p><p><img src="/2021/07/07/redis/20200513215752444.png"></p><p>此时哨兵监视着我们的主机6379，当我们断开主机后：</p><p><img src="/2021/07/07/redis/20200513215806972.png"></p><blockquote><p>哨兵模式优缺点</p></blockquote><p><strong>优点：</strong></p><ol><li>哨兵集群，基于主从复制模式，所有主从复制的优点，它都有</li><li>主从可以切换，故障可以转移，系统的可用性更好</li><li>哨兵模式是主从模式的升级，手动到自动，更加健壮</li></ol><p><strong>缺点：</strong></p><ol><li>Redis不好在线扩容，集群容量一旦达到上限，在线扩容就十分麻烦</li><li>实现哨兵模式的配置其实是很麻烦的，里面有很多配置项</li></ol><blockquote><p>哨兵模式的全部配置</p></blockquote><p>完整的哨兵模式配置文件 sentinel.conf</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># Example sentinel.conf # 哨兵sentinel实例运行的端口 默认26379port 26379 # 哨兵sentinel的工作目录dir &#x2F;tmp # 哨兵sentinel监控的redis主节点的 ip port # master-name  可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符&quot;.-_&quot;组成。# quorum 当这些quorum个数sentinel哨兵认为master主节点失联 那么这时 客观上认为主节点失联了# sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;sentinel monitor mymaster 127.0.0.1 6379 1 # 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码# 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码# sentinel auth-pass &lt;master-name&gt; &lt;password&gt;sentinel auth-pass mymaster MySUPER--secret-0123passw0rd  # 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒# sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;sentinel down-after-milliseconds mymaster 30000 # 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，这个数字越小，完成failover所需的时间就越长，但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。# sentinel parallel-syncs &lt;master-name&gt; &lt;numslaves&gt;sentinel parallel-syncs mymaster 1   # 故障转移的超时时间 failover-timeout 可以用在以下这些方面： #1. 同一个sentinel对同一个master两次failover之间的间隔时间。#2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。#3.当想要取消一个正在进行的failover所需要的时间。  #4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了# 默认三分钟# sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;sentinel failover-timeout mymaster 180000 # SCRIPTS EXECUTION #配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。#对于脚本的运行结果有以下规则：#若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10#若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。#一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。 #通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），将会去调用这个脚本，#这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信息。调用该脚本时，将传给脚本两个参数，#一个是事件的类型，#一个是事件的描述。#如果sentinel.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。#通知脚本# sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;  sentinel notification-script mymaster &#x2F;var&#x2F;redis&#x2F;notify.sh # 客户端重新配置主节点参数脚本# 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。# 以下参数将会在调用脚本时传给脚本:# &lt;master-name&gt; &lt;role&gt; &lt;state&gt; &lt;from-ip&gt; &lt;from-port&gt; &lt;to-ip&gt; &lt;to-port&gt;# 目前&lt;state&gt;总是“failover”,# &lt;role&gt;是“leader”或者“observer”中的一个。 # 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通信的# 这个脚本应该是通用的，能被多次调用，不是针对性的。# sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;sentinel client-reconfig-script mymaster &#x2F;var&#x2F;redis&#x2F;reconfig.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十六、缓存穿透与雪崩"><a href="#十六、缓存穿透与雪崩" class="headerlink" title="十六、缓存穿透与雪崩"></a>十六、缓存穿透与雪崩</h2><h3 id="缓存穿透（查不到）"><a href="#缓存穿透（查不到）" class="headerlink" title="缓存穿透（查不到）"></a>缓存穿透（查不到）</h3><blockquote><p>概念</p></blockquote><p>在默认情况下，用户请求数据时，会先在缓存(Redis)中查找，若没找到即缓存未命中，再在数据库中进行查找，数量少可能问题不大，可是一旦大量的请求数据（例如秒杀场景）缓存都没有命中的话，就会全部转移到数据库上，造成数据库极大的压力，就有可能导致数据库崩溃。网络安全中也有人恶意使用这种手段进行攻击被称为洪水攻击。</p><blockquote><p>解决方案</p></blockquote><p><strong>布隆过滤器</strong></p><p>对所有可能查询的参数以Hash的形式存储，以便快速确定是否存在这个值，在控制层先进行拦截校验，校验不通过直接打回，减轻了存储系统的压力。</p><p><img src="/2021/07/07/redis/20200513215824722.jpg"></p><p><strong>缓存空对象</strong></p><p>一次请求若在缓存和数据库中都没找到，就在缓存中方一个空对象用于处理后续这个请求。</p><p><img src="/2021/07/07/redis/20200513215836317.jpg"></p><p> 这样做有一个缺陷：存储空对象也需要空间，大量的空对象会耗费一定的空间，存储效率并不高。解决这个缺陷的方式就是设置较短过期时间</p><p>即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于需要保持一致性的业务会有影响。</p><h3 id="缓存击穿（量太大，缓存过期）"><a href="#缓存击穿（量太大，缓存过期）" class="headerlink" title="缓存击穿（量太大，缓存过期）"></a>缓存击穿（量太大，缓存过期）</h3><blockquote><p>概念</p></blockquote><p> 相较于缓存穿透，缓存击穿的目的性更强，一个存在的key，在缓存过期的一刻，同时有大量的请求，这些请求都会击穿到DB，造成瞬时DB请求量大、压力骤增。这就是缓存被击穿，只是针对其中某个key的缓存不可用而导致击穿，但是其他的key依然可以使用缓存响应。</p><p> 比如热搜排行上，一个热点新闻被同时大量访问就可能导致缓存击穿。</p><blockquote><p>解决方案</p></blockquote><ol><li><p><strong>设置热点数据永不过期</strong></p><p>这样就不会出现热点数据过期的情况，但是当Redis内存空间满的时候也会清理部分数据，而且此种方案会占用空间，一旦热点数据多了起来，就会占用部分空间。</p></li><li><p><strong>加互斥锁(分布式锁)</strong></p><p>在访问key之前，采用SETNX（set if not exists）来设置另一个短期key来锁住当前key的访问，访问结束再删除该短期key。保证同时刻只有一个线程访问。这样对锁的要求就十分高。</p></li></ol><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><blockquote><p>概念</p></blockquote><p>大量的key设置了相同的过期时间，导致在缓存在同一时刻全部失效，造成瞬时DB请求量大、压力骤增，引起雪崩。</p><p><img src="/2021/07/07/redis/20200513215850428.jpeg"></p><blockquote><p>解决方案</p></blockquote><ul><li><p>redis高可用</p><p>这个思想的含义是，既然redis有可能挂掉，那我多增设几台redis，这样一台挂掉之后其他的还可以继续工作，其实就是搭建的集群</p></li><li><p>限流降级</p><p>这个解决方案的思想是，在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。</p></li><li><p>数据预热</p><p>数据加热的含义就是在正式部署之前，我先把可能的数据先预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀。</p></li></ul><p>参考：<a href="https://blog.csdn.net/weixin_43873227/article/details/106107270">https://blog.csdn.net/weixin_43873227/article/details/106107270</a></p>]]></content>
      
      
      <categories>
          
          <category> 与命令有关的笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker</title>
      <link href="/2021/07/07/docker/"/>
      <url>/2021/07/07/docker/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p><img src="/2021/07/07/docker/image-20200606203315597-1623556326395-1625636108743.png"></p><p>linux开放端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">1、开启防火墙     systemctl start firewalld2、开放指定端口      firewall-cmd --zone&#x3D;public --add-port&#x3D;1935&#x2F;tcp --permanent 命令含义：--zone #作用域--add-port&#x3D;1935&#x2F;tcp  #添加端口，格式为：端口&#x2F;通讯协议--permanent  #永久生效，没有此参数重启后失效3、重启防火墙      firewall-cmd --reload4、查看端口号netstat -ntlp   &#x2F;&#x2F;查看当前所有tcp端口·netstat -ntulp |grep 1935   &#x2F;&#x2F;查看所有1935端口使用情况·firewalld防火墙基本操作：1.查看防火墙状态：systemctl status firewalld或者 firewall-cmd --state2.查看开放端口列表firewall-cmd --list-ports3.在指定区域打开端口（记得重启防火墙）(永久生效再加上 --permanent)firewall-cmd --zone&#x3D;public --add-port&#x3D;8080&#x2F;tcp4.启动防火墙systemctl start firewalld5.禁用防火墙systemctl stop firewalld6.设置开机启动systemctl enable firewalld7.停止并禁用开机启动sytemctl disable firewalld8.重启防火墙firewall-cmd --reload9.查看版本firewall-cmd --version10.查看帮助firewall-cmd --help<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>访问的时候老是不行，问题39.103.142.243：8088的冒号用的中文冒号</p><p>应该39.103.142.243:8088</p></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>官方文档：<a href="https://docs.docker.com/docker-for-windows/">https://docs.docker.com/docker-for-windows/</a> </p><p>【官方文档超级详细】</p><p>仓库地址：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p><p>【发布到仓库，git pull push】</p><p>b站教程：<a href="https://www.bilibili.com/video/BV1og4y1q7M4">https://www.bilibili.com/video/BV1og4y1q7M4</a>?</p><p>【这个教程非常简洁！且深入！基于企业应用场景！推荐！以下笔记都基于该课程】</p><h2 id="前期基础"><a href="#前期基础" class="headerlink" title="前期基础"></a>前期基础</h2><p>linux基本命令，类似cd，mkdir等</p><h2 id="Docker概述"><a href="#Docker概述" class="headerlink" title="Docker概述"></a>Docker概述</h2><h3 id="Docker为什么会出现"><a href="#Docker为什么会出现" class="headerlink" title="Docker为什么会出现"></a>Docker为什么会出现</h3><p>一款产品，开发和上线两套环境，应用环境配置费时费力，而且容易出问题</p><p>尤其对于机器学习和深度学习的库更是如此，很可能存在版本问题、底层依赖冲突问题</p><p>所以发布项目时，不只是一套代码过去，而是代码+环境整体打包过去</p><p>所谓开发即运维，保证系统稳定性，提高部署效率</p><p>使用Docker后的流程：</p><p>开发：建立模型–环境–打包带上环境，即镜像–放到Docker仓库</p><p>部署：下载Docker中的镜像，直接运行即可</p><p>Docker的思想来自于集装箱，集装箱，对环境进行隔离</p><p>Docker通过隔离机制，可以将服务器利用到极致。</p><h3 id="Docker的历史"><a href="#Docker的历史" class="headerlink" title="Docker的历史"></a>Docker的历史</h3><p>2010年，几个搞IT的人，在美国成立一家公司<code>dotCloud</code></p><p>做一些pass的云计算服务</p><p>他们将自己的容器化技术命名为Docker</p><p>Docker基于Go语言开发</p><p>Docker刚刚诞生的时候，没有引起行业的注意，dotCloud活不下去</p><p>然后他们决定开源</p><p>2013年，创始人将Docker开源，不开则以，一开惊人，刚开源的时候，每个月都会更新一个版本</p><p>2014年4月9日，Docker 1.0发布</p><h3 id="容器vs虚拟机"><a href="#容器vs虚拟机" class="headerlink" title="容器vs虚拟机"></a>容器vs虚拟机</h3><p>在容器技术出来之前，用的是虚拟机技术</p><h4 id="虚拟机原理示意图"><a href="#虚拟机原理示意图" class="headerlink" title="虚拟机原理示意图"></a>虚拟机原理示意图</h4><p><img src="/2021/07/07/docker/image-20200606205436434-1623556326396-1625636108744.png"></p><p>缺点：</p><ol><li>资源占用多</li><li>冗余步骤多</li><li>启动很慢</li></ol><h4 id="容器化技术示意图"><a href="#容器化技术示意图" class="headerlink" title="容器化技术示意图"></a>容器化技术示意图</h4><p>不是模拟的完整的操作系统</p><p><img src="/2021/07/07/docker/image-20200606205739655-1623556326396-1625636108744.png"></p><h4 id="二者对比"><a href="#二者对比" class="headerlink" title="二者对比"></a>二者对比</h4><p>比较虚拟机和Docker的不同</p><table><thead><tr><th></th><th>传统虚拟机</th><th>Docker</th></tr></thead><tbody><tr><td>虚拟内容</td><td>硬件+完整的操作系统+软件</td><td>APP+LIB</td></tr><tr><td>大小</td><td>笨重，通常几个G</td><td>轻便几个M或KB</td></tr><tr><td>启动速度</td><td>慢，分钟级</td><td>快，秒级</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><h3 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h3><p><img src="/2021/07/07/docker/image-20200606212250845-1623556326396-1625636108744.png"></p><p>明确几个概念：</p><ol><li><p>镜像(image)：docker镜像好比一个模板，可以通过这个模板来创建容器(container)，一个镜像可以创建多个容器，类似Python中的Class</p></li><li><p>容器(container)：类似Python中通过Class创建的实例，Object；容器可以理解为一个简易的系统</p></li><li><p>仓库(repository)：存放镜像的地方，</p><p>分为共有仓库和私有仓库</p><ul><li><p>Docker Hub：国外的</p></li><li><p>阿里云：配置镜像加速</p></li></ul></li></ol><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>我们要有一台服务器，并且可以操作它</p><ol><li>Linux命令基础，购买linux阿里云的服务器</li><li>CentOS 7</li><li>使用Xshell链接远程服务器</li></ol><h3 id="安装xshell"><a href="#安装xshell" class="headerlink" title="安装xshell"></a>安装xshell</h3><p>下载CentOS7 <a href="https://www.jianshu.com/p/a63f47e096e8">https://www.jianshu.com/p/a63f47e096e8</a></p><p>下载VMware 360软件管家下载</p><p>VMware配置虚拟机 <a href="https://blog.csdn.net/babyxue/article/details/80970526">https://blog.csdn.net/babyxue/article/details/80970526</a></p><p>xshell链接服务器 <a href="https://blog.csdn.net/zzy1078689276/article/details/77280814">https://blog.csdn.net/zzy1078689276/article/details/77280814</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@192 ~]# cd &#x2F;[root@192 &#x2F;]# lsbin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var[root@192 &#x2F;]# uname -r&#x2F;&#x2F;查看版本信息3.10.0-1127.el7.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看ip：vmware里面输入，ip addIPr</p><h3 id="Centos安装"><a href="#Centos安装" class="headerlink" title="Centos安装"></a>Centos安装</h3><p><a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p><h3 id="卸载旧的版本"><a href="#卸载旧的版本" class="headerlink" title="卸载旧的版本"></a>卸载旧的版本</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 卸载旧的版本$ sudo yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/1623556500192-1625636108744.png"></p><h3 id="安装基本环境"><a href="#安装基本环境" class="headerlink" title="安装基本环境"></a>安装基本环境</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 安装基本的安装包$ sudo yum install -y yum-utils<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/1623556584641-1625636108744.png"></p><h3 id="设置镜像的仓库"><a href="#设置镜像的仓库" class="headerlink" title="设置镜像的仓库"></a>设置镜像的仓库</h3><p>注意！！下载默认用国外的，太慢不要用！</p><p>用国内镜像，百度搜索，docker的阿里云镜像地址</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 不要用官网默认这个！$ sudo yum-config-manager \    --add-repo \    https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo # 默认是国外的# 换成下面的$ sudo yum-config-manager \    --add-repo \    https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo # 阿里云镜像<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/1623556975165-1625636108744.png"></p><p>直接复制粘贴就OK了</p><p>更像软件包索引</p><pre class="line-numbers language-none"><code class="language-none">yum makecache fast<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/07/docker/1623560963569-1625636108744.png"></p><p>没有问题的话就是可以用的</p><h3 id="安装docker引擎"><a href="#安装docker引擎" class="headerlink" title="安装docker引擎"></a>安装docker引擎</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">yum install docker-ce docker-ce-cli containerd.io # docker-ce 社区版 ee 企业版<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/07/docker/1623561311771-1625636108744.png"></p><p>注意这里会有几个个y/n的判断</p><p><img src="/2021/07/07/docker/1623561244635-1625636108744.png"></p><p><img src="/2021/07/07/docker/1623561273220-1625636108744.png"></p><p>要看到Complet再收手！</p><h3 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start docker # 代表启动成功<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@renyichao ~]# systemctl start docker[root@renyichao ~]# docker versionClient: Docker Engine - Community Version:           20.10.7 API version:       1.41 Go version:        go1.13.15 Git commit:        f0df350 Built:             Wed Jun  2 11:56:24 2021 OS&#x2F;Arch:           linux&#x2F;amd64 Context:           default Experimental:      trueServer: Docker Engine - Community Engine:  Version:          20.10.7  API version:      1.41 (minimum version 1.12)  Go version:       go1.13.15  Git commit:       b0f5bc3  Built:            Wed Jun  2 11:54:48 2021  OS&#x2F;Arch:          linux&#x2F;amd64  Experimental:     false containerd:  Version:          1.4.6  GitCommit:        d71fcd7d8303cbf684402823e425e9dd2e99285d runc:  Version:          1.0.0-rc95  GitCommit:        b9ee9c6314599f1b4a7f497e1f1f856fe433d3b7 docker-init:  Version:          0.19.0  GitCommit:        de40ad0   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/1623561573513-1625636108744.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/07/docker/image-20200616151641013-1623556326397-1625636108744.png"></p><p><img src="/2021/07/07/docker/1623561739209-1625636108744.png"></p><p>中间一堆是签名信息</p><p>==查看下载的镜像==</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@renyichao ~]# docker imagesREPOSITORY    TAG       IMAGE ID       CREATED        SIZEhello-world   latest    d1165f221234   3 months ago   13.3kB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/1623561794363-1625636108744.png"></p><h3 id="卸载Docker"><a href="#卸载Docker" class="headerlink" title="卸载Docker"></a>卸载Docker</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 卸载依赖yum remove docker-ce docker-ce-cli containerd.io# 删除资源rm -rf &#x2F;var&#x2F;lib&#x2F;docker # docker 的默认工作路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="阿里云镜像加速"><a href="#阿里云镜像加速" class="headerlink" title="阿里云镜像加速"></a>阿里云镜像加速</h3><p><img src="/2021/07/07/docker/1623562479567-1625636108744.png"></p><p>或者控制台搜索 容器镜像服务</p><p><img src="/2021/07/07/docker/1623562816205-1625636108744.png"></p><p>找到加速地址</p><p><img src="/2021/07/07/docker/1623562760255-1625636108744.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sudo mkdir -p &#x2F;etc&#x2F;docker         # 创建一个目录sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt;-&#39;EOF&#39;&#123;  &quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;vhsayy9j.mirror.aliyuncs.com&quot;]&#125;EOF                                   # 编写配置文件sudo systemctl daemon-reload          # 重启服务sudo systemctl restart docker         # 重启docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/1623563085860-1625636108744.png"></p><h3 id="HelloWorld的流程"><a href="#HelloWorld的流程" class="headerlink" title="HelloWorld的流程"></a>HelloWorld的流程</h3><p><img src="/2021/07/07/docker/../../%25E7%25AC%2594%25E8%25AE%25B0/docker.assets/1623561739209.png"></p><p>run的运行流程图</p><p><img src="/2021/07/07/docker/image-20200616161441669-1623556326397-1625636108744.png"></p><p><a href="https://www.processon.com/">在线画图软件ProcessOn</a></p><p><a href="https://www.bilibili.com/video/BV177411K7bH">服务器及购买相关介绍</a></p><h2 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h2><p>Docker是真么工作的？</p><p>Docker是一个Client-Server结构的系统，Docker的守护进程在主机上。通过Socket从客户端访问！</p><p>DockerServer接受到Docker-Client的指令，</p><p><img src="/2021/07/07/docker/image-20200616162107363-1623556326397-1625636108744.png"></p><p>Docker为什么比VM快？</p><ol><li>Docker有着比虚拟机更少的抽象层</li><li>docker主要用的是宿主机的内核，vm需要Guest OS</li></ol><p><img src="/2021/07/07/docker/image-20200616162302653-1623556326397-1625636108744.png"></p><p>所以说新建一个容器的时候，docker不需要像虚拟机一样重新加载一个操作系统内核，避免引导</p><p><img src="/2021/07/07/docker/1623564222172-1625636108744.png"></p><h2 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h2><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker version # 显示docker的基本信息docker info # 系统信息，镜像和容器的数量docker --help # 全部信息,命令docker 命令 --help    # 与该仓库有关的全部信息,命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://docs.docker.com/reference/">官网文档</a></p><p><img src="/2021/07/07/docker/image-20200616163338187-1623556326398-1625636108744.png"></p><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><h4 id="docker-images"><a href="#docker-images" class="headerlink" title="docker images"></a>docker images</h4><p>查看所有本地主机上的镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@192 ~]# docker images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/07/docker/1623564642128-1625636108744.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 解释REPOSITORY          # 镜像仓库源TAG                 # 镜像的标签IMAGE ID            # 镜像的IDCREATED             # 镜像的创建时间SIZE                # 镜像的大小<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">--all , -aShow all images (default hides intermediate images) # 显示所有--digestsShow digests--filter , -fFilter output based on conditions provided--formatPretty-print images using a Go template--no-truncDon’t truncate output--quiet , -qOnly show numeric IDs                           # 只显示镜像id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/1623565011922-1625636108744.png"></p><h4 id="docker-search"><a href="#docker-search" class="headerlink" title="docker search"></a>docker search</h4><p>搜索仓库中的镜像，相当于网页搜索</p><p><a href="http://hub.docker.com/">网页搜索</a></p><p><img src="/2021/07/07/docker/image-20200616173009473-1623556326398-1625636108744.png"></p><p>mysql</p><p><img src="/2021/07/07/docker/image-20200616173050756-1623556326398-1625636108744.png"></p><pre class="line-numbers language-none"><code class="language-none">docker search mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/07/docker/1623567242849-1625636108744.png"></p><pre class="line-numbers language-none"><code class="language-none">docker search --help<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/07/docker/1623567440394-1625636108744.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 解释Options:  -f, --filter filter   Filter output based on conditions provided      --format string   Pretty-print search using a Go template      --limit int       Max number of search results (default 25)      --no-trunc        Don&#39;t truncate output<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">docker search mysql --filter&#x3D;STARS&#x3D;3000 # 搜索出Stars大于3000的<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/07/docker/1623567482029-1625636108744.png"></p><h4 id="docker-pull-下载镜像"><a href="#docker-pull-下载镜像" class="headerlink" title="docker pull 下载镜像"></a>docker pull 下载镜像</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull mysql # 下载mysql镜像，default tag，默认最新版latestdocker pull 镜像名:tag# 下载对应版本镜像<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/1623567716228-1625636108744.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@renyichao &#x2F;]# docker pull mysqlUsing default tag: latest               # 不写tag默认最新版latest: Pulling from library&#x2F;mysql69692152171a: Pull complete             # layer 分层下载，docker image的核心 联合文件系统1651b0be3df3: Pull complete 951da7386bc8: Pull complete 0f86c95aa242: Pull complete 37ba2d8bd4fe: Pull complete 6d278bb05e94: Pull complete 497efbd93a3e: Pull complete f7fddf10c2c2: Pull complete 16415d159dfb: Pull complete 0e530ffc6b73: Pull complete b0a4a1a77178: Pull complete cd90f92aa9ef: Pull complete Digest: sha256:d50098d7fcb25b1fcb24e2d3247cae3fc55815d64fec640dc395840f8fa80969#签名Status: Downloaded newer image for mysql:latestdocker.io&#x2F;library&#x2F;mysql:latest         # 真实地址# 即docker pull mysql# 等价于docker pull docker.io&#x2F;library&#x2F;mysql:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 指定版本下载（版本一定要是人家官网上有的） docker pull mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/1623569025829-1625636108744.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@renyichao &#x2F;]# docker pull mysql:5.75.7: Pulling from library&#x2F;mysql69692152171a: Already exists 1651b0be3df3: Already exists 951da7386bc8: Already exists 0f86c95aa242: Already exists 37ba2d8bd4fe: Already exists 6d278bb05e94: Already exists 497efbd93a3e: Already exists a023ae82eef5: Pull complete e76c35f20ee7: Pull complete e887524d2ef9: Pull complete ccb65627e1c3: Pull complete Digest: sha256:a682e3c78fc5bd941e9db080b4796c75f69a28a8cad65677c23f7a9f18ba21faStatus: Downloaded newer image for mysql:5.7docker.io&#x2F;library&#x2F;mysql:5.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==版本信息==</p><p><img src="/2021/07/07/docker/1623569131187-1625636108744.png"></p><p>版本来自于官网，版本库<a href="https://hub.docker.com/_/mysql">https://hub.docker.com/_/mysql</a></p><p><img src="/2021/07/07/docker/image-20200617094339687-1623556326399-1625636108744.png"></p><p><img src="/2021/07/07/docker/image-20200617100948088-1623556326399-1625636108745.png"></p><pre class="line-numbers language-none"><code class="language-none">docker images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时查看镜像，可以看到新下载的两个</p><p><img src="/2021/07/07/docker/image-20200617101105899-1623556326399-1625636108745.png"></p><h4 id="docker-rmi"><a href="#docker-rmi" class="headerlink" title="docker rmi"></a>docker rmi</h4><p>remove images</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 删除一个 可以通过名称 也可以指定id -f表示删除所有docker rmi -f 9cfcce23593a# 删除多个 用空格分隔iddocker rmi -f id id id# 删除所有 docker rmi -f $(docker images -aq) # images -aq就是查所有镜像id，从而递归删除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/1623570439820-1625636108745.png"></p><p><img src="/2021/07/07/docker/1623571688188-1625636108745.png"></p><h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><p>说明：有了镜像才能创建容器，linux，下载一个centos镜像来测试学习</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull centos<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/07/docker/1623573372106-1625636108745.png"></p><h4 id="新建容器并启动"><a href="#新建容器并启动" class="headerlink" title="新建容器并启动"></a>新建容器并启动</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run [可选参数] image# 参数说明--name&#x3D;“Name” # 容器名字，用于区分容器-d 后台方式运行-it 使用交互方式运行，进入容器查看内容-p 指定容器的端口 如-p 8080::8080-p ip:主机端口：容器端口-p 主机端口:容器端口-p 容器端口-p 随机指定端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="进入退出容器"><a href="#进入退出容器" class="headerlink" title="进入退出容器"></a>进入退出容器</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 进入docker run -it centos &#x2F;bin&#x2F;bash # 查看目录ls# 退出exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/1623576522698-1625636108745.png"></p><p>注意这里面主机名，编程了centos的id</p><p>这里面就是一个容器，套娃啊</p><h4 id="查看运行的容器"><a href="#查看运行的容器" class="headerlink" title="查看运行的容器"></a>查看运行的容器</h4><pre class="line-numbers language-none"><code class="language-none"># 查看正在运行的容器docker ps# 查看曾经运行的容器docker ps -a# 显示最近创建的容器，设置显示个数docker ps -a - n&#x3D;? # 只显示容器的编号docker ps -aq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@renyichao &#x2F;]# docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES[root@192 ~]# docker ps -aCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES9939864fa2e6        centos              &quot;bin&#x2F;bash&quot;          4 minutes ago       Exited (0) 4 minutes ago                       unruffled_knuth5f42e9930435        centos              &quot;&#x2F;bin&#x2F;bash&quot;         8 minutes ago       Exited (0) 4 minutes ago                       lucid_cannona89ddb393d3d        bf756fb1ae65        &quot;&#x2F;hello&quot;            19 hours ago        Exited (0) 19 hours ago                        gracious_bhabha[root@renyichao &#x2F;]# docker ps -a -n&#x3D;2CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES9939864fa2e6        centos              &quot;bin&#x2F;bash&quot;          6 minutes ago       Exited (0) 6 minutes ago                       unruffled_knuth5f42e9930435        centos              &quot;&#x2F;bin&#x2F;bash&quot;         10 minutes ago      Exited (0) 7 minutes ago [root@renyichao &#x2F;]# docker ps -aq9939864fa2e65f42e9930435a89ddb393d3d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/1623576639928-1625636108745.png"></p><h4 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 容器停止退出exit# 容器不停止退出 注意必须在英文输入法下，中文输入法不行Ctrl + P + Q<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@renyichao &#x2F;]# docker run -it centos &#x2F;bin&#x2F;bash[root@bfcea13c40cd &#x2F;]# [root@192 ~]# docker ps ##注意这里会自动给个命令，删掉CONTAINER ID        IMAGE               COMMAND             CREATED              STATUS              PORTS               NAMESbfcea13c40cd        centos              &quot;&#x2F;bin&#x2F;bash&quot;         About a minute ago   Up About a minute                       stoic_wilsonedbd9366d959        centos              &quot;&#x2F;bin&#x2F;bash&quot;         7 minutes ago        Up 7 minutes                            affectionate_bartik[root@renyichao &#x2F;]# docker exec -it edbd9366d959 &#x2F;bin&#x2F;bash ## 再次进入[root@edbd9366d959 &#x2F;]# exit ##停止并推出exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 删除指定容器 不能删除正在运行的容器，如果强制删除 rm -fdocker rm 容器id# 删除所有容器docker rm -f $(docker ps -aq)# 删除所有容器docker ps -a -q|xargs docker rm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@renyichao &#x2F;]# docker ps -aCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMESbfcea13c40cd        centos              &quot;&#x2F;bin&#x2F;bash&quot;         29 minutes ago      Up 29 minutes                                   stoic_wilsonedbd9366d959        centos              &quot;&#x2F;bin&#x2F;bash&quot;         35 minutes ago      Up 35 minutes                                   affectionate_bartik9939864fa2e6        centos              &quot;bin&#x2F;bash&quot;          48 minutes ago      Exited (0) 48 minutes ago                       unruffled_knuth5f42e9930435        centos              &quot;&#x2F;bin&#x2F;bash&quot;         52 minutes ago      Exited (0) 49 minutes ago                       lucid_cannona89ddb393d3d        bf756fb1ae65        &quot;&#x2F;hello&quot;            20 hours ago        Exited (0) 20 hours ago                         gracious_bhabha[root@renyichao &#x2F;]# docker rm 5f42e99304355f42e9930435[root@renyichao &#x2F;]# docker rm edbd9366d959      # 注意正在运行的容器不能删除Error response from daemon: You cannot remove a running container edbd9366d9596c744dd449119269b04de2f2a494e7fc471f6396bcefd94c33fe. Stop the container before attempting removal or force remove<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@renyichao &#x2F;]# docker ps -aq # 所有容器idbfcea13c40cdedbd9366d9599939864fa2e6a89ddb393d3d[root@renyichao &#x2F;]# docker rm -f $(docker ps -aq) # 全部删除bfcea13c40cdedbd9366d9599939864fa2e6a89ddb393d3d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="启动和停止容器的操作"><a href="#启动和停止容器的操作" class="headerlink" title="启动和停止容器的操作"></a>启动和停止容器的操作</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker start  容器id        #启动容器         docker restart   容器id     #重启容器 docker stop   容器id        #停止容器 docker kill   容器id        #强制停止容器 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@renyichao &#x2F;]# docker run -it centos &#x2F;bin&#x2F;bash[root@7b1a7dd10ea4 &#x2F;]# exitexit[root@renyichao &#x2F;]# docker ps #查看正在运行的CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS     [root@renyichao &#x2F;]# docker ps -a # 查看历史运行过的CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS     7b1a7dd10ea4        centos              &quot;&#x2F;bin&#x2F;bash&quot;         54 seconds ago      Exited (0) [root@renyichao &#x2F;]# docker start 7b1a7dd10ea4 # 启动当前这个容器 container id 粘过 来7b1a7dd10ea4[root@renyichao &#x2F;]# docker ps # 查看当前运行容器 发现启动成功CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS     7b1a7dd10ea4        centos              &quot;&#x2F;bin&#x2F;bash&quot;         2 minutes ago       Up 28 [root@renyichao &#x2F;]# docker stop 7b1a7dd10ea4 # 停止运行7b1a7dd10ea4[root@renyichao &#x2F;]# docker ps # 再次查看 没有这个容器了CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h3><h4 id="后台启动docker"><a href="#后台启动docker" class="headerlink" title="后台启动docker"></a>后台启动docker</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -d 镜像名# 用docker ps 查看的时候 发现停止了# 后台运行，docker发现前台没有，容器启动后，发现自己没有提供服务，会立刻停止<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@renyichao &#x2F;]# docker run -d centos      # 运行7754f51c67d0aa480480e51865edaf9a8e123e50349a235e13a6407ebf2efc41[root@renyichao &#x2F;]# docker ps -a              # 查看正在运行的CONTAINER ID   IMAGE          COMMAND       CREATED          STATUS          PORTS     7754f51c67d0   centos         &quot;&#x2F;bin&#x2F;bash&quot;   5 seconds ago    Exited (0) 4 seconds ago       b173b286675e   centos         &quot;&#x2F;bin&#x2F;bash&quot;   16 minutes ago   Exited (0) 15 minutes ago     603c36f0ca21   centos         &quot;&#x2F;bin&#x2F;bash&quot;   17 minutes ago   Exited (0) 16 minutes ago     9c6c81463c8d   d1165f221234   &quot;&#x2F;hello&quot;      4 hours ago      Exited (0) 4 hours ago         d5151d881c00   d1165f221234   &quot;&#x2F;hello&quot;      4 weeks ago      Exited (0) 4 weeks ago         <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker logsdocker logs -f -t --tail n 【id】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/image-20200617161744298-1623556326399-1625636108745.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@192 ~]# docker logs --helpUsage:docker logs [OPTIONS] CONTAINERFetch the logs of a containerOptions:      --details        Show extra details provided to logs  -f, --follow         Follow log output      --since string   Show logs since timestamp (e.g.                       2013-01-02T13:23:37) or relative                       (e.g. 42m for 42 minutes)      --tail string    Number of lines to show from the                       end of the logs (default &quot;all&quot;)  -t, --timestamps     Show timestamps # 时间戳      --until string   Show logs before a timestamp (e.g.                       2013-01-02T13:23:37) or relative                       (e.g. 42m for 42 minutes)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">whiel true;do echo shenzai;sleep <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 运行一个[root@192 ~]# docker run -it centos &#x2F;bin&#x2F;bash[root@c2887d35c71d &#x2F;]# [root@192 ~]# docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS             c2887d35c71d        centos              &quot;&#x2F;bin&#x2F;bash&quot;         57 seconds ago      Up 56 # 查看日志，由于没有运行脚本，所以啥也没显示[root@192 ~]# docker logs -f -t --tail 10 c2887d35c71d^C # ctrl+c退出# 运行centos里面加个脚本[root@192 ~]# docker run -d centos &#x2F;bin&#x2F;sh -c &quot;while true;do echo shenzai;sleep 1;done&quot;cb6d7fbc3f27a064137d58282de97b97365dea2705211ebfbad642079cc1b388[root@192 ~]# docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS cb6d7fbc3f27        centos              &quot;&#x2F;bin&#x2F;sh -c &#39;while t…&quot;   7 seconds ago       Up 6 c2887d35c71d        centos              &quot;&#x2F;bin&#x2F;bash&quot;              3 minutes ago       Up 3 # 查看日志 发现隔一秒打印一条[root@192 ~]# docker logs -f -t --tail 10 cb6d7fbc3f272020-06-17T12:02:11.293765084Z shenzai2020-06-17T12:02:12.297675608Z shenzai2020-06-17T12:02:13.301845582Z shenzai2020-06-17T12:02:14.304800996Z shenzai2020-06-17T12:02:15.307130238Z shenzai2020-06-17T12:02:16.310574235Z shenzai2020-06-17T12:02:17.312946923Z shenzai2020-06-17T12:02:18.314841295Z shenzai2020-06-17T12:02:19.317021705Z shenzai2020-06-17T12:02:20.319670013Z shenzai2020-06-17T12:02:21.322651649Z shenzai2020-06-17T12:02:22.325466918Z shenzai2020-06-17T12:02:23.327984704Z shenzai2020-06-17T12:02:24.329656919Z shenzai<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看正在运行的容器信息"><a href="#查看正在运行的容器信息" class="headerlink" title="查看正在运行的容器信息"></a>查看正在运行的容器信息</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker   top    容器id      #查看容器进程信息docker inspect  容器id      #查看完整信息，源数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@192 ~]# docker inspect cb6d7fbc3f27[    &#123;        # 容器的完整id        &quot;Id&quot;: &quot;cb6d7fbc3f27a064137d58282de97b97365dea2705211ebfbad642079cc1b388&quot;,                # 创建时间        &quot;Created&quot;: &quot;2020-06-17T12:00:50.706906186Z&quot;,                # 脚本位置        &quot;Path&quot;: &quot;&#x2F;bin&#x2F;sh&quot;,                # 运行的脚本        &quot;Args&quot;: [            &quot;-c&quot;,            &quot;while true;do echo shenzai;sleep 1;done&quot;        ],        &quot;State&quot;: &#123;            &quot;Status&quot;: &quot;running&quot;, # 状态，正在运行            &quot;Running&quot;: true,            &quot;Paused&quot;: false,            &quot;Restarting&quot;: false,            &quot;OOMKilled&quot;: false,            &quot;Dead&quot;: false,            &quot;Pid&quot;: 1909, # 父进程id            &quot;ExitCode&quot;: 0,            &quot;Error&quot;: &quot;&quot;,            &quot;StartedAt&quot;: &quot;2020-06-17T12:00:51.093617477Z&quot;,            &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;        &#125;,                # 来源镜像        &quot;Image&quot;: &quot;sha256:831691599b88ad6cc2a4abbd0e89661a121aff14cfa289ad840fd3946f274f1f&quot;,        &quot;ResolvConfPath&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers&#x2F;cb6d7fbc3f27a064137d58282de97b97365dea2705211ebfbad642079cc1b388&#x2F;resolv.conf&quot;,        &quot;HostnamePath&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers&#x2F;cb6d7fbc3f27a064137d58282de97b97365dea2705211ebfbad642079cc1b388&#x2F;hostname&quot;,        &quot;HostsPath&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers&#x2F;cb6d7fbc3f27a064137d58282de97b97365dea2705211ebfbad642079cc1b388&#x2F;hosts&quot;,        &quot;LogPath&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers&#x2F;cb6d7fbc3f27a064137d58282de97b97365dea2705211ebfbad642079cc1b388&#x2F;cb6d7fbc3f27a064137d58282de97b97365dea2705211ebfbad642079cc1b388-json.log&quot;,                        &quot;Name&quot;: &quot;&#x2F;dreamy_almeida&quot;,        &quot;RestartCount&quot;: 0,        &quot;Driver&quot;: &quot;overlay2&quot;,        &quot;Platform&quot;: &quot;linux&quot;,        &quot;MountLabel&quot;: &quot;&quot;,        &quot;ProcessLabel&quot;: &quot;&quot;,        &quot;AppArmorProfile&quot;: &quot;&quot;,        &quot;ExecIDs&quot;: null,                # 主机配置        &quot;HostConfig&quot;: &#123;            &quot;Binds&quot;: null,            &quot;ContainerIDFile&quot;: &quot;&quot;,            &quot;LogConfig&quot;: &#123;                &quot;Type&quot;: &quot;json-file&quot;,                &quot;Config&quot;: &#123;&#125;            &#125;,            &quot;NetworkMode&quot;: &quot;default&quot;,            &quot;PortBindings&quot;: &#123;&#125;,            &quot;RestartPolicy&quot;: &#123;                &quot;Name&quot;: &quot;no&quot;,                &quot;MaximumRetryCount&quot;: 0            &#125;,            &quot;AutoRemove&quot;: false,            &quot;VolumeDriver&quot;: &quot;&quot;,            &quot;VolumesFrom&quot;: null,            &quot;CapAdd&quot;: null,            &quot;CapDrop&quot;: null,            &quot;Capabilities&quot;: null,            &quot;Dns&quot;: [],            &quot;DnsOptions&quot;: [],            &quot;DnsSearch&quot;: [],            &quot;ExtraHosts&quot;: null,            &quot;GroupAdd&quot;: null,            &quot;IpcMode&quot;: &quot;private&quot;,            &quot;Cgroup&quot;: &quot;&quot;,            &quot;Links&quot;: null,            &quot;OomScoreAdj&quot;: 0,            &quot;PidMode&quot;: &quot;&quot;,            &quot;Privileged&quot;: false,            &quot;PublishAllPorts&quot;: false,            &quot;ReadonlyRootfs&quot;: false,            &quot;SecurityOpt&quot;: null,            &quot;UTSMode&quot;: &quot;&quot;,            &quot;UsernsMode&quot;: &quot;&quot;,            &quot;ShmSize&quot;: 67108864,            &quot;Runtime&quot;: &quot;runc&quot;,            &quot;ConsoleSize&quot;: [                0,                0            ],            &quot;Isolation&quot;: &quot;&quot;,            &quot;CpuShares&quot;: 0,            &quot;Memory&quot;: 0,            &quot;NanoCpus&quot;: 0,            &quot;CgroupParent&quot;: &quot;&quot;,            &quot;BlkioWeight&quot;: 0,            &quot;BlkioWeightDevice&quot;: [],            &quot;BlkioDeviceReadBps&quot;: null,            &quot;BlkioDeviceWriteBps&quot;: null,            &quot;BlkioDeviceReadIOps&quot;: null,            &quot;BlkioDeviceWriteIOps&quot;: null,            &quot;CpuPeriod&quot;: 0,            &quot;CpuQuota&quot;: 0,            &quot;CpuRealtimePeriod&quot;: 0,            &quot;CpuRealtimeRuntime&quot;: 0,            &quot;CpusetCpus&quot;: &quot;&quot;,            &quot;CpusetMems&quot;: &quot;&quot;,            &quot;Devices&quot;: [],            &quot;DeviceCgroupRules&quot;: null,            &quot;DeviceRequests&quot;: null,            &quot;KernelMemory&quot;: 0,            &quot;KernelMemoryTCP&quot;: 0,            &quot;MemoryReservation&quot;: 0,            &quot;MemorySwap&quot;: 0,            &quot;MemorySwappiness&quot;: null,            &quot;OomKillDisable&quot;: false,            &quot;PidsLimit&quot;: null,            &quot;Ulimits&quot;: null,            &quot;CpuCount&quot;: 0,            &quot;CpuPercent&quot;: 0,            &quot;IOMaximumIOps&quot;: 0,            &quot;IOMaximumBandwidth&quot;: 0,            &quot;MaskedPaths&quot;: [                &quot;&#x2F;proc&#x2F;asound&quot;,                &quot;&#x2F;proc&#x2F;acpi&quot;,                &quot;&#x2F;proc&#x2F;kcore&quot;,                &quot;&#x2F;proc&#x2F;keys&quot;,                &quot;&#x2F;proc&#x2F;latency_stats&quot;,                &quot;&#x2F;proc&#x2F;timer_list&quot;,                &quot;&#x2F;proc&#x2F;timer_stats&quot;,                &quot;&#x2F;proc&#x2F;sched_debug&quot;,                &quot;&#x2F;proc&#x2F;scsi&quot;,                &quot;&#x2F;sys&#x2F;firmware&quot;            ],            &quot;ReadonlyPaths&quot;: [                &quot;&#x2F;proc&#x2F;bus&quot;,                &quot;&#x2F;proc&#x2F;fs&quot;,                &quot;&#x2F;proc&#x2F;irq&quot;,                &quot;&#x2F;proc&#x2F;sys&quot;,                &quot;&#x2F;proc&#x2F;sysrq-trigger&quot;            ]        &#125;,                # 其他配置        &quot;GraphDriver&quot;: &#123;            &quot;Data&quot;: &#123;                &quot;LowerDir&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;3675586ebbd79cd72d2562a90c9380627a331c563724c0dac091f92600af4907-init&#x2F;diff:&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;7f79322e0f58d651a84a555dadd83d92537788172525945d3f538dd95dce336c&#x2F;diff&quot;,                &quot;MergedDir&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;3675586ebbd79cd72d2562a90c9380627a331c563724c0dac091f92600af4907&#x2F;merged&quot;,                &quot;UpperDir&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;3675586ebbd79cd72d2562a90c9380627a331c563724c0dac091f92600af4907&#x2F;diff&quot;,                &quot;WorkDir&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;3675586ebbd79cd72d2562a90c9380627a331c563724c0dac091f92600af4907&#x2F;work&quot;            &#125;,            &quot;Name&quot;: &quot;overlay2&quot;        &#125;,                &quot;Mounts&quot;: [], # 挂载                # 基本配置        &quot;Config&quot;: &#123;            &quot;Hostname&quot;: &quot;cb6d7fbc3f27&quot;,            &quot;Domainname&quot;: &quot;&quot;,            &quot;User&quot;: &quot;&quot;,            &quot;AttachStdin&quot;: false,            &quot;AttachStdout&quot;: false,            &quot;AttachStderr&quot;: false,            &quot;Tty&quot;: false,            &quot;OpenStdin&quot;: false,            &quot;StdinOnce&quot;: false,            &quot;Env&quot;: [                &quot;PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;bin&quot;            ], # 基本环境变量，这里没有Java                        # 基本命令            &quot;Cmd&quot;: [                &quot;&#x2F;bin&#x2F;sh&quot;,                &quot;-c&quot;,                &quot;while true;do echo shenzai;sleep 1;done&quot;            ],            &quot;Image&quot;: &quot;centos&quot;,            &quot;Volumes&quot;: null,            &quot;WorkingDir&quot;: &quot;&quot;,            &quot;Entrypoint&quot;: null,            &quot;OnBuild&quot;: null,            &quot;Labels&quot;: &#123;                &quot;org.label-schema.build-date&quot;: &quot;20200611&quot;,                &quot;org.label-schema.license&quot;: &quot;GPLv2&quot;,                &quot;org.label-schema.name&quot;: &quot;CentOS Base Image&quot;,                &quot;org.label-schema.schema-version&quot;: &quot;1.0&quot;,                &quot;org.label-schema.vendor&quot;: &quot;CentOS&quot;            &#125;        &#125;,                # 网卡，比如现在用的是桥接的网卡        &quot;NetworkSettings&quot;: &#123;            &quot;Bridge&quot;: &quot;&quot;,            &quot;SandboxID&quot;: &quot;4d701985d7e77aa153790b697b2f38a61e20555c224b7675e4bf650b82799882&quot;,            &quot;HairpinMode&quot;: false,            &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,            &quot;LinkLocalIPv6PrefixLen&quot;: 0,            &quot;Ports&quot;: &#123;&#125;,            &quot;SandboxKey&quot;: &quot;&#x2F;var&#x2F;run&#x2F;docker&#x2F;netns&#x2F;4d701985d7e7&quot;,            &quot;SecondaryIPAddresses&quot;: null,            &quot;SecondaryIPv6Addresses&quot;: null,            &quot;EndpointID&quot;: &quot;8a6c71e2bafb19ca7dfd85445ccc4bef6d17467360a243d624089e676a24a018&quot;,            &quot;Gateway&quot;: &quot;172.17.0.1&quot;,            &quot;GlobalIPv6Address&quot;: &quot;&quot;,            &quot;GlobalIPv6PrefixLen&quot;: 0,            &quot;IPAddress&quot;: &quot;172.17.0.3&quot;,            &quot;IPPrefixLen&quot;: 16,            &quot;IPv6Gateway&quot;: &quot;&quot;,            &quot;MacAddress&quot;: &quot;02:42:ac:11:00:03&quot;,            &quot;Networks&quot;: &#123;                &quot;bridge&quot;: &#123;                    &quot;IPAMConfig&quot;: null,                    &quot;Links&quot;: null,                    &quot;Aliases&quot;: null,                    &quot;NetworkID&quot;: &quot;22b0fd2290ccbc4e066a75d3f01bd8bf32ee4352c5bbcfc9f911287219219571&quot;,                    &quot;EndpointID&quot;: &quot;8a6c71e2bafb19ca7dfd85445ccc4bef6d17467360a243d624089e676a24a018&quot;,                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,                    &quot;IPAddress&quot;: &quot;172.17.0.3&quot;,                    &quot;IPPrefixLen&quot;: 16,                    &quot;IPv6Gateway&quot;: &quot;&quot;,                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,                    &quot;GlobalIPv6PrefixLen&quot;: 0,                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:03&quot;,                    &quot;DriverOpts&quot;: null                &#125;            &#125;        &#125;    &#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 停止正在疯狂输出的那个容器[root@192 ~]# docker stop cb6d7fbc3f27cb6d7fbc3f27<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="进入当前正在运行的容器"><a href="#进入当前正在运行的容器" class="headerlink" title="进入当前正在运行的容器"></a>进入当前正在运行的容器</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker exec -it 容器id bashshelldocker attach  容器id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 我们通常容器都是使用后台方式运行的edocker exec -it 容器id bashSHELL# 测试[root@192 ~]# docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS     c2887d35c71d        centos              &quot;&#x2F;bin&#x2F;bash&quot;         35 minutes ago      Up 35 [root@192 ~]# docker exec -it c2887d35c71d &#x2F;bin&#x2F;bash[root@c2887d35c71d &#x2F;]# lsbin  etc   lib  lost+found  mnt  proc  run   srv  tmp  vardev  home  lib64  media       opt  root  sbin  sys  usr[root@c2887d35c71d &#x2F;]# ps -efUID         PID   PPID  C STIME TTY          TIME CMDroot          1      0  0 11:57 pts&#x2F;0    00:00:00 &#x2F;bin&#x2F;bashroot         14      0  0 12:32 pts&#x2F;1    00:00:00 &#x2F;bin&#x2F;bashroot         28     14  0 12:32 pts&#x2F;1    00:00:00 ps -ef[root@c2887d35c71d &#x2F;]# c2887d35c71d[root@c2887d35c71d &#x2F;]# exitexit# 方式二[root@192 ~]# docker attach c2887d35c71d[root@c2887d35c71d &#x2F;]# # 区别# docker exec # 进入容器后开启一个新的终端，可以在里面操作(常用)# docker attach 进入容器正在执行的终端，不会启动新的进程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="从容器内拷贝文件到主机上"><a href="#从容器内拷贝文件到主机上" class="headerlink" title="从容器内拷贝文件到主机上"></a>从容器内拷贝文件到主机上</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker cp 容器id:容器内路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 运行[root@192 ~]# docker run -it centos# ctrl P Q 不关闭退出，查看[root@0569081aa89c &#x2F;]# [root@192 ~]# docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS     0569081aa89c        centos              &quot;&#x2F;bin&#x2F;bash&quot;         19 seconds ago      Up 19 # 查看主机home下无文件[root@192 ~]# cd &#x2F;home[root@192 home]# ls# 进入正在运行的容器[root@192 home]# docker attach 0569081aa89c# 进入容器home目录[root@0569081aa89c &#x2F;]# cd &#x2F;home# 在目录中创建java文件[root@0569081aa89c home]# touch test.java# 退出并停止容器[root@0569081aa89c home]# exitexit# 查看现在运行的容器[root@192 home]# docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES# 容器虽然被停止，但是数据都会保留[root@192 home]# docker ps -aCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS 0569081aa89c        centos              &quot;&#x2F;bin&#x2F;bash&quot;              3 minutes ago       Exited f589e5684a01        centos              &quot;&#x2F;bin&#x2F;bash&quot;              44 minutes ago      Exited cb6d7fbc3f27        centos              &quot;&#x2F;bin&#x2F;sh -c &#39;while t…&quot;   54 minutes ago      Exited c2887d35c71d        centos              &quot;&#x2F;bin&#x2F;bash&quot;              58 minutes ago      Exited 8ce188e5fee3        centos              &quot;&#x2F;bin&#x2F;bash&quot;              About an hour ago   Exited 7b1a7dd10ea4        centos              &quot;&#x2F;bin&#x2F;bash&quot;              9 hours ago         Exited # 容器数据拷贝到主机[root@192 home]# docker cp 0569081aa89c:&#x2F;home&#x2F;test.java &#x2F;home[root@192 home]# lstest.java# 拷贝是一个手动过程，未来我们使用 -v 卷的技术，可以实现自动同步 &#x2F;home &#x2F;home<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看内容占用"><a href="#查看内容占用" class="headerlink" title="查看内容占用"></a>查看内容占用</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker stats<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p><img src="/2021/07/07/docker/image-20200617210554147-1623556326399-1625636108745.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@192 home]# docker --helpUsage:docker [OPTIONS] COMMANDA self-sufficient runtime for containersOptions:      --config string      Location of client config                           files (default &quot;&#x2F;root&#x2F;.docker&quot;)  -c, --context string     Name of the context to use to                           connect to the daemon                           (overrides DOCKER_HOST env var                           and default context set with                           &quot;docker context use&quot;)  -D, --debug              Enable debug mode  -H, --host list          Daemon socket(s) to connect to  -l, --log-level string   Set the logging level                           (&quot;debug&quot;|&quot;info&quot;|&quot;warn&quot;|&quot;error&quot;|&quot;fatal&quot;) (default &quot;info&quot;)      --tls                Use TLS; implied by --tlsverify      --tlscacert string   Trust certs signed only by                           this CA (default                           &quot;&#x2F;root&#x2F;.docker&#x2F;ca.pem&quot;)      --tlscert string     Path to TLS certificate file                           (default &quot;&#x2F;root&#x2F;.docker&#x2F;cert.pem&quot;)      --tlskey string      Path to TLS key file (default                           &quot;&#x2F;root&#x2F;.docker&#x2F;key.pem&quot;)      --tlsverify          Use TLS and verify the remote  -v, --version            Print version information and quitManagement Commands:  builder     Manage builds  config      Manage Docker configs  container   Manage containers  context     Manage contexts  engine      Manage the docker engine  image       Manage images  network     Manage networks  node        Manage Swarm nodes  plugin      Manage plugins  secret      Manage Docker secrets  service     Manage services  stack       Manage Docker stacks  swarm       Manage Swarm  system      Manage Docker  trust       Manage trust on Docker images  volume      Manage volumesCommands:  attach      Attach to a running container    # 当前shell下attach连接指定运行镜像  build       Build an image from a Dockerfile # 通过Dockerfile定制镜像  commit      Create a new image from a container changes # 提交当前容器为新镜像  cp          Copy files&#x2F;folders between a container and the local filesystem                                               # 容器数据拷贝到主机  create      Create a new container           # 创建一个新容器，同run，但不启动容器  diff        Inspect changes to files or directories on a container&#39;s filesystem                                               # 查看docker容器变化  events      Get real time events from the server  # 从docker服务获取容器实时事件  exec        Run a command in a running container  # 在已存在的容器上运行命令  export      Export a container&#39;s filesystem as a tar archive                                   # 导出容器的内容作为一个tar归档文件【对应import】  history     Show the history of an image     # 展示一个镜像形成历史  images      List images                      # 列出系统当前镜像  import      Import the contents from a tarball to create a filesystem image                                   # 从tar包中的内容创建一个新的文件系统映像归档文件【对应export】  info        Display system-wide information  # 显示系统相关信息  inspect     Return low-level information on Docker objects # 查看容器相关信息  kill        Kill one or more running containers # 杀死指定 docker 容器  load        Load an image from a tar archive or STDIN # 从tar包中加载一个镜像【对应 save】  login       Log in to a Docker registry      # 注册或登录一个docker源服务器  logout      Log out from a Docker registry   # 从当前docker registry 退出  logs        Fetch the logs of a container    # 输出当前容器日志信息  pause       Pause all processes within one or more containers # 暂停容器  port        List port mappings or a specific mapping for the container                                               # 从查看映射端口对应的容器内部的源端口  ps          List containers                  # 列出容器列表  pull        Pull an image or a repository from a registry                                     # 从docker镜像源服务器上拉取指定镜像或者镜像库  push        Push an image or a repository to a registry                                     #推送指定镜像或者镜像库至docker镜像源服务器  rename      Rename a container               # 对一个容器进行重命名  restart     Restart one or more containers   # 重启运行的容器  rm          Remove one or more containers    # 移除一个或者多个容器  rmi         Remove one or more images       # 移除一个或者多个镜像【无容器使用才可删除，否则需删除相关容器才可继续 或者 -f强制删除】  run         Run a command in a new container # 创建一个新容器并运行一个命令  save        Save one or more images to a tar archive # 保存一个镜像为一个tar包【对应load】  search      Search the Docker Hub for images # 从Docker Hub中搜索镜像  start       Start one or more stopped containers # 启动容器  stats       Display a live stream of container(s) resource usage statistics  stop        Stop one or more running containers  # 停止容器  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE # 给源镜像打标签  top         Display the running processes of a container # 查看容器中运行的进程信息  unpause     Unpause all processes within one or more containers # 取消暂停容器  update      Update configuration of one or more containers # 更新容器  version     Show the Docker version information    # 查看docker版本号  wait        Block until one or more containers stop, then print their exit codes                                                 # 截取容器停止时的退出状态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="作业练习"><a href="#作业练习" class="headerlink" title="作业练习"></a>作业练习</h4><h5 id="部署Nginx"><a href="#部署Nginx" class="headerlink" title="部署Nginx"></a>部署Nginx</h5><p><img src="/2021/07/07/docker/image-20200618100621199-1623556326399-1625636108745.png"></p><blockquote><p>curl localhost:3344 访问本机的地址</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 官网搜索nginx，可以看到帮助文档# 下载镜像[root@192 home]# docker pull nginxUsing default tag: latestlatest: Pulling from library&#x2F;nginx8559a31e96f4: Pull complete 8d69e59170f7: Pull complete 3f9f1ec1d262: Pull complete d1f5ff4f210d: Pull complete 1e22bfa8652e: Pull complete Digest: sha256:21f32f6c08406306d822a0e6e8b7dc81f53f336570e852e25fbe1e3e3d0d0133Status: Downloaded newer image for nginx:latestdocker.io&#x2F;library&#x2F;nginx:latest# 查看镜像[root@192 home]# docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEcentos              latest              831691599b88        13 hours ago        215MBnginx               latest              2622e6cca7eb        7 days ago          132MB# 运行测试# -d 后台运行，--name 命名，-p 暴露端口，3344服务器、宿主机的端口，容器内部端口[root@192 home]# docker run -d --name nginx01 -p:3344:80 nginx38dbf7bdcaef232d269b7184d91e44e06087181b5ee929494e177ad526810fa8[root@192 home]# docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES38dbf7bdcaef        nginx               &quot;&#x2F;docker-entrypoint.…&quot;   7 seconds ago       Up 6 seconds        0.0.0.0:3344-&gt;80&#x2F;tcp   nginx01# 使用3344可以访问成功[root@192 home]# curl localhost:3344&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Welcome to nginx!&lt;&#x2F;title&gt;&lt;style&gt;    body &#123;        width: 35em;        margin: 0 auto;        font-family: Tahoma, Verdana, Arial, sans-serif;    &#125;&lt;&#x2F;style&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;h1&gt;Welcome to nginx!&lt;&#x2F;h1&gt;&lt;p&gt;If you see this page, the nginx web server is successfully installed andworking. Further configuration is required.&lt;&#x2F;p&gt;&lt;p&gt;For online documentation and support please refer to&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;nginx.org&#x2F;&quot;&gt;nginx.org&lt;&#x2F;a&gt;.&lt;br&#x2F;&gt;Commercial support is available at&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;nginx.com&#x2F;&quot;&gt;nginx.com&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/1623652256091-1625636108745.png"></p><p>端口暴露</p><p><img src="/2021/07/07/docker/image-20200617212310709-1623556326400-1625636108745.png"></p><p>可以公网访问</p><p>找到服务器地址</p><p><img src="/2021/07/07/docker/image-20200617213213721-1623556326400-1625636108745.png"></p><p>浏览器输入 192.168.147.132:3344/</p><p><img src="/2021/07/07/docker/image-20200617213142079-1623556326400-1625636108745.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@192 home]# docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES38dbf7bdcaef        nginx               &quot;&#x2F;docker-entrypoint.…&quot;   21 minutes ago      Up 21 minutes       0.0.0.0:3344-&gt;80&#x2F;tcp   nginx01# 进入容器[root@192 home]# docker exec -it nginx01 &#x2F;bin&#x2F;bash# 查一下nginx在哪root@38dbf7bdcaef:&#x2F;# whereis nginxnginx: &#x2F;usr&#x2F;sbin&#x2F;nginx &#x2F;usr&#x2F;lib&#x2F;nginx &#x2F;etc&#x2F;nginx &#x2F;usr&#x2F;share&#x2F;nginx# 到这个目录root@38dbf7bdcaef:&#x2F;# cd &#x2F;etc&#x2F;nginxroot@38dbf7bdcaef:&#x2F;etc&#x2F;nginx# lsconf.dkoi-utf  mime.types  nginx.conf   uwsgi_paramsfastcgi_paramskoi-win  modules     scgi_params  win-utf# 退出root@38dbf7bdcaef:&#x2F;etc&#x2F;nginx# exitexit# 停止[root@192 home]# docker stop 38dbf7bdcaef38dbf7bdcaef<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再次刷新网页，服务关闭</p><p>思考问题：每次改动nginx配置文件，都需要进入容器内部，十分麻烦，要是可以在容器外部提供一个映射路径，达到在容器修改文件名，容器内部就可以自动修改？-v 数据卷技术！</p><h5 id="部署tomcat"><a href="#部署tomcat" class="headerlink" title="部署tomcat"></a>部署tomcat</h5><p><img src="/2021/07/07/docker/image-20200618100551587-1623556326400-1625636108745.png"></p><p>在docker hub上查看版本号和使用方法</p><p><img src="/2021/07/07/docker/image-20200618100319796-1623556326400-1625636108745.png"></p><p>官方文档一定要翻烂，超多版本，我的天呐~</p><h6 id="官方方法"><a href="#官方方法" class="headerlink" title="官方方法"></a>官方方法</h6><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -it --rm tomcat:9.0# docker run 可以不用pull，能自动下载# -it 直接进去运行# --rm 是什么意思？入门的意思？# 我们之前的启动都是后台，停止了容器之后，容器还是可以查到# 写了--rm，类似阅后即焚模式，用完即删除，这种通常用来测试# 最后冒号查好的版本号#部署tomcatdocker pull tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/image-20200618101811914-1623556326400-1625636108745.png"></p><p><img src="/2021/07/07/docker/image-20200618101849917-1623556326400-1625636108745.png"></p><p>ctrl+c退出</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker ps -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/07/docker/image-20200618102022167-1623556326400-1625636108745.png"></p><p>可以看到并没有tomcat，印证阅后即焚模式，容器会删除，镜像不会删除</p><p>平时不建议这样搞</p><h6 id="正常方法"><a href="#正常方法" class="headerlink" title="正常方法"></a>正常方法</h6><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull tomcat:9.0 # 之前下过了，应该不用下了，这里老师讲错了<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/07/docker/image-20200618102544564-1623556326400-1625636108745.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 启动运行，应该加上版本号docker run -d -p 3355:8080 --name tomcat01 tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/1623726025129-1625636108745.png"></p><p><img src="/2021/07/07/docker/1623725900877-1625636108745.png"></p><blockquote><p>说明外网已经可以访问了，就是tomcat内部还不是很完整</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 进入容器docker exec -it tomcat01 &#x2F;bin&#x2F;bash#发现linux命令少了一些，例如ll<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/1623726195341-1625636108745.png"></p><blockquote><p>这是阿里云镜像的原因：默认使用最小镜像，所有不必要的都剔除了，保证最小可运行环境</p></blockquote><p><img src="/2021/07/07/docker/image-20200618103848104-1623556326401-1625636108745.png"></p><p>再次刷新页面</p><p><img src="/2021/07/07/docker/1623726568137-1625636108745.png"></p><p>思考问题：我们以后部署项目，如果每次都要进入容器是不是身份麻烦？我要是可以在容器外部提供一个映射路径，webapps，我们在外部放置项目，就自动同步到内部就好了！</p><p>docker容器 tomcat+网站 </p><p>docker mysql</p><h5 id="部署es-kibana"><a href="#部署es-kibana" class="headerlink" title="部署es+kibana"></a>部署es+kibana</h5><p><img src="/2021/07/07/docker/image-20200618104950722-1623556326401-1625636108745.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># es 暴露的端口很多# es 十分耗内存# es 的数据一般需要放置到安全目录！挂载# 启动 elasticsearch$ docker run -d --name elasticsearch01 -p 9200:9200 -p 9300:9300 -e &quot;discovery.type&#x3D;single-node&quot; elasticsearch:7.6.2#启动就卡# 查看内存占用情况docker stats<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/1623754568271-1625636108745.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 先感觉stop一下docker stop ba18713ca536<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/image-20200618105057785-1623556326401-1625636108745.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 通过 -e 限制内存$ docker run -d --name elasticsearch02 -p 9200:9200 -p 9300:9300 -e &quot;discovery.type&#x3D;single-node&quot; -e ES_JAVA_OPTS&#x3D;“-Xms64m -Xmx512m” elasticsearch:7.6.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/image-20200618113018622-1623556326401-1625636108745.png"></p><p>没成功啊，SEI能告诉我为啥！！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -d --name elasticsearch02 -p 9200:9200 -p 9300:9300 -e &quot;discovery.type&#x3D;single-node&quot; -e ES_JAVA_OPTS&#x3D;&quot;-Xms64m -Xmx512m&quot; elasticsearch:7.6.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>py0003null大佬:<br>“ES_JAVA_OPTS=-Xms64m -Xmx512m” </p><p>py0003null大佬:<br>引号提前试试</p></blockquote><p>原因是引号！！你没觉得怪怪的嘛</p><p><img src="/2021/07/07/docker/image-20200618115302656-1623556326401-1625636108745.png"></p><p>此时查看stats，发现内存占用在控制范围内</p><p><img src="/2021/07/07/docker/image-20200618115149971-1623556326401-1625636108745.png"></p><p>ctrl + C退出，记得stop</p><p><img src="/2021/07/07/docker/image-20200618115921069-1623556326401-1625636108745.png"></p><p><img src="/2021/07/07/docker/1623986162546-1625636108745.png"> </p><h5 id="思考：用kibana链接elasticsearch"><a href="#思考：用kibana链接elasticsearch" class="headerlink" title="思考：用kibana链接elasticsearch"></a>思考：用kibana链接elasticsearch</h5><p><img src="/2021/07/07/docker/image-20200618113556445-1623556326401-1625636108745.png"></p><h3 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h3><ul><li>portainer(先用这个)</li><li>Rancher(CI/CD时用)</li></ul><h4 id="portainer"><a href="#portainer" class="headerlink" title="portainer"></a>portainer</h4><p>Docker图像化界面管理工具，提供一个后台面板供我们操作！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -d -p 8088:9000 --restart&#x3D;always -v &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker --privileged&#x3D;true portainer&#x2F;portainer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/07/docker/1623986487621-1625636108745.png"></p><p>访问外网8088</p><blockquote><p>访问的时候老是不行，问题39.103.142.243：8088的冒号用的中文冒号</p><p>应该39.103.142.243:8088</p></blockquote><p><img src="/2021/07/07/docker/1623987327449-1625636108745.png"></p><p>用户名</p><p>密码 </p><p><img src="/2021/07/07/docker/image-20200618134706491-1623556326401-1625636108745.png"></p><p>【中午吃饭重连了一下，失败，不知道发生了啥】</p><p><img src="/2021/07/07/docker/image-20200618135424706-1623556326401-1625636108745.png"></p><p><img src="/2021/07/07/docker/image-20200618135450037-1623556326401-1625636108745.png"></p><blockquote><p>好像是创建的时候的映射问题</p></blockquote><p>【平时不会用这个，好吧，先往下】</p><h3 id><a href="#" class="headerlink" title></a></h3><h2 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h2><p><img src="/2021/07/07/docker/1623992495486-1625636108745.png" alt="1623992495486"></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>UnionFS 联合文件系统</p><p><img src="/2021/07/07/docker/1623992450192-1625636108745.png" alt="1623992450192"></p><p><img src="/2021/07/07/docker/1623992543382-1625636108745.png" alt="1623992543382"></p><p><img src="/2021/07/07/docker/image-20200618140242423-1623556326401-1625636108745.png"></p><p>bootfs：boot file system</p><p>rootfs：root file system</p><p><img src="/2021/07/07/docker/1623992766899-1625636108745.png"></p><p><img src="/2021/07/07/docker/image-20200618140932621-1623556326401-1625636108745.png"></p><p><img src="/2021/07/07/docker/image-20200618141014511-1623556326401-1625636108745.png"></p><p><img src="/2021/07/07/docker/image-20200618153329894-1623556326402-1625636108745.png"></p><p>Docker镜像都是只读的，当容器启动时，一个新的可写层被加到镜像的顶部，这一层就是我们通常说的容器层，容器层之下的都叫镜像层</p><p><img src="/2021/07/07/docker/image-20200618153855605-1623556326402-1625636108745.png"></p><h3 id="commit提交镜像"><a href="#commit提交镜像" class="headerlink" title="commit提交镜像"></a>commit提交镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker commit # 提交容器成为一个新的副本docker commit -m&#x3D;&quot;提交的描述信息&quot; -a&#x3D;&quot;作者&quot; 容器id 目标镜像名：[TAG]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>==实战测试==</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#启动一个默认tomcat#发现这个tomcat没有webapps应用，原因官方默认webapps下没有文件#自己考进去基本文件#通过commit提交一个镜像，我们以后就可以使用自己的镜像docker imagesdocker run -it -p 8080:8080 tomcat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/1623993369339-1625636108745.png"></p><p>这是一个前台程序</p><p><img src="/2021/07/07/docker/1623993583544-1625636108745.png"></p><p>将webapps.dist里面所有的文件拷贝到webapps里面，其中-r必须有，表示目录递归拷贝</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">cp -r webapps.dist&#x2F;* webapps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/07/docker/1623993921001-1625636108745.png"></p><p><img src="/2021/07/07/docker/image-20200618155750591-1623556326402-1625636108746.png"></p><p>==将自己修改的提交成镜像==</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker commit -a&#x3D;&quot;renyichao&quot; -m&#x3D;&quot;add webapps app&quot; fdbb67382e54 tomcat02:1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/07/docker/1623994710904-1625636108746.png"></p><p>发现新的版本，比之前的大了一些，因为里面记录了我们的改动</p><blockquote><p>如果想保存当前容器的状态，可以通过commit提交，获得一个镜像</p><p>好比我们以前学习VM的时候的快照</p><p>到这里算是入门了</p><p>接下来三个部分是docker的精髓</p></blockquote><h2 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h2><h3 id="什么是容器卷"><a href="#什么是容器卷" class="headerlink" title="什么是容器卷"></a>什么是容器卷</h3><p>docker是要将应用和环境打包成一个镜像</p><p>这样，数据就不应该在容器中，否则容器删除，数据就会丢失，这就是删库跑路</p><p>故容器之间要有一个数据共享技术</p><p>在Docker容器中产生的数据，同步到本地，这就是卷技术</p><p>本质上是一个目录挂载，将容器内的目录挂载到虚拟机上</p><p><img src="/2021/07/07/docker/image-20200618162917672-1623556326402-1625636108746.png"></p><p>目的：容器的持久化和同步操作</p><p>容器间可以数据共享</p><h3 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h3><blockquote><p>方式一：直接使用命令来挂载</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -it -v -p# -it 交互式进入# -v volume卷技术# -p 主机端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/1624007382800-1625636108746.png"></p><p>新开一个窗口</p><p><img src="/2021/07/07/docker/1624007425728-1625636108746.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker inspect 容器id    #详细信息<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/07/docker/1624007572198-1625636108746.png"></p><p>找到挂载信息Mounts</p><p><img src="/2021/07/07/docker/image-20200618164148642-1623556326402-1625636108746.png"></p><p>测试</p><p><img src="/2021/07/07/docker/1624007979599-1625636108746.png"></p><p>容器停止后，修改主机文件，再启动容器的时候，数据同样改变</p><p><img src="/2021/07/07/docker/1624008524344-1625636108746.png"></p><blockquote><p>优点：我们以后只要修改本地即可，容器可自动同步</p></blockquote><h3 id="实战安装mysql"><a href="#实战安装mysql" class="headerlink" title="实战安装mysql"></a>实战安装mysql</h3><p>MySQL的数据持久化命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker search mysql# 拉取docker pull mysql:5.7# 挂载 docker run -d -p 3310:3306 -v &#x2F;home&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;conf.d -v &#x2F;home&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql -e MYSQL_ROOT_PASSWORD&#x3D;123456 --name mysql01 mysql:5.7-d 后台运行-p 端口映射-v 卷挂载-e 环境配置 安装启动mysql需要配置密码--name 容器名字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/1624009784688-1625636108746.png" alt="1624009784688"></p><p>链接测试：打开navicat</p><p><img src="/2021/07/07/docker/1624010296911-1625636108746.png"></p><p><img src="/2021/07/07/docker/1624010506631-1625636108746.png" alt="1624010506631"></p><p><img src="/2021/07/07/docker/1624010479789-1625636108746.png"></p><blockquote><p>多了一个test</p></blockquote><p><img src="/2021/07/07/docker/1624010564477-1625636108746.png"></p><p>我们将容器删除</p><p><img src="/2021/07/07/docker/1624010916571-1625636108746.png"></p><blockquote><p>发现，我们挂载到本地的数据卷依旧没有丢失，这就实现了容器数据持久化功能</p></blockquote><p><img src="/2021/07/07/docker/1624011181593-1625636108746.png"></p><h3 id="具名和匿名挂载"><a href="#具名和匿名挂载" class="headerlink" title="具名和匿名挂载"></a>具名和匿名挂载</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#匿名挂载-v 容器内路径docker run -d -P --name nginx01 -v &#x2F;ect&#x2F;nginx  nginx#查看所有卷的情况docker volum ls <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/1624016618618-1625636108746.png"></p><p><img src="/2021/07/07/docker/1624016838932-1625636108746.png"></p><p><img src="/2021/07/07/docker/1624016933173-1625636108746.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#所有docker容器内的卷，没有指定路径下，都是这个路径#我们通过具名挂载可以方便我们找到我们的每一个卷，大多数情况适用具名挂载&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;juming-nginx&#x2F;_data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#如何确定具名挂载还是匿名挂载，还是指定路径挂载！-v 容器内路径                    #匿名挂载-v 卷名：容器内路径              #具名挂载-v &#x2F;宿主机路径：：容器内路径      #指定路径挂载<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>拓展：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 通过 -v 容器内路径：ro&#x2F;rw 改写读写权限ro    readonly  #只读rw    readwrite #可读可写#一旦设置了容器权限，容器对我们挂载出来的内容就有限定了！docker run -d -P --name nginx01 -v juming-nginx:&#x2F;ect&#x2F;nginx:ro  nginxdocker run -d -P --name nginx01 -v juming-nginx:&#x2F;ect&#x2F;nginx:rw  nginx#ro 只要看到ro就说明这个路径只能通过宿主机（外部）来操作，容器内不无法操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="初识Dockerfile"><a href="#初识Dockerfile" class="headerlink" title="初识Dockerfile"></a>初识Dockerfile</h3><p>DockerFile使用来构建docker镜像的文件</p><p><img src="/2021/07/07/docker/1624090930718-1625636108746.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum install vim # 编辑文件的，没有装一下<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 镜像是一层一层的，脚本是一行一行的# 指令都是大写的# 这里的每个命令可以理解为镜像的一层FROM centosVOLUME [&quot;&#x2F;volume01&quot;,&quot;&#x2F;volume02&quot;] # 再创建镜像的时候就挂载出来，必须加上&#x2F;  ，否则启动报错，属于匿名挂载CMD echo &quot;---end---&quot;CMD &#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/1624090838848-1625636108746.png"></p><p>想保存并退出</p><blockquote><p>​                                        esc</p><p>然后                              ：wq</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cat dockerfiledocker build -f dockerfile -t renyichao&#x2F;centos:1.0 .  # 最后的点很重要 镜像名不能有&#x2F;docker images<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/1624091521652-1625636108746.png"></p><p>启动生成的镜像</p><p><img src="/2021/07/07/docker/1624092739516-1625636108746.png"></p><p><img src="/2021/07/07/docker/1624092863483-1625636108746.png"></p><p>查看Mounts，Source对应容器外目录，匿名挂载卷</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker inspect 4ade3463430f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/07/docker/1624093557066-1625636108746.png"></p><p>测试一下，在container volume01下生成文件</p><p><img src="/2021/07/07/docker/image-20200618222224352-1623556326403-1625636108747.png"></p><p>在主机挂载路径下，也同样生成</p><h3 id="多个容器数据共享"><a href="#多个容器数据共享" class="headerlink" title="多个容器数据共享"></a>多个容器数据共享</h3><p><img src="/2021/07/07/docker/image-20200621165403842-1623556326403-1625636108747.png"></p><p>启动docker01，用之前建的padaxing/centos 1.0  镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -it --name docker01 padaxing&#x2F;centos:1.0 # 1.0必须写<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/07/docker/image-20200621170429658-1623556326404-1625636108747.png"></p><p>当前这个ctrl+p+q不停止退出</p><p>依次启动docker02、docker03</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -it --name docker02 --volumes-from docker01 padaxing&#x2F;centos:1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>docker02继承docker01的volumes</p><p><img src="/2021/07/07/docker/1624095265474-1625636108747.png"></p><p>可以验证，在docker01下加一个数据，在docker02下也会出现</p><p><img src="/2021/07/07/docker/1624095289466-1625636108747.png"></p><p>创建docker03，同样继承docker01</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -it --name docker03 --volumes-from docker01 padaxing&#x2F;centos:1.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/07/docker/image-20200621172333639-1623556326404-1625636108747.png"></p><p>在docker03的volume01下建立文件，在docker01的volume01下同样也有</p><p>即通过–volumes-from 可以实现不同容器间的数据共享</p><p>删除docker01，数据还在</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker rm -f <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/07/docker/1624095429040-1625636108747.png"></p><p>可以看到，删除docker01，进入docker02，数据依然在</p><p><img src="/2021/07/07/docker/1624095440841-1625636108747.png"></p><p>结论：</p><p>容器之间配置信息的传递，数据卷容器的生命周期一直持续到没有容器使用位置</p><p>但是如果持久化到了本地，即使所有容器删除了，本地数据是不会删除的</p><p>要想实现两个数据库共享数据，一个挂载到另一个就行</p><h3 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h3><h4 id="DockerFile介绍"><a href="#DockerFile介绍" class="headerlink" title="DockerFile介绍"></a>DockerFile介绍</h4><p><code>dockerfile</code>是用来构建docker镜像的文件！命令参数脚本！</p><p>构建步骤：</p><ol><li>编写一个dockerfile文件</li><li>docker build 构建称为一个镜像</li><li>docker run运行镜像</li><li>docker push发布镜像（DockerHub 、阿里云仓库)</li></ol><hr><p><strong>查一下官方是怎么做的？</strong></p><p><img src="/2021/07/07/docker/1624252291286-1625636108747.png"></p><p><img src="/2021/07/07/docker/1624252329785-1625636108747.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM scratchADD centos-7-x86_64-docker.tar.xz &#x2F;LABEL \    org.label-schema.schema-version&#x3D;&quot;1.0&quot; \    org.label-schema.name&#x3D;&quot;CentOS Base Image&quot; \    org.label-schema.vendor&#x3D;&quot;CentOS&quot; \    org.label-schema.license&#x3D;&quot;GPLv2&quot; \    org.label-schema.build-date&#x3D;&quot;20201113&quot; \    org.opencontainers.image.title&#x3D;&quot;CentOS Base Image&quot; \    org.opencontainers.image.vendor&#x3D;&quot;CentOS&quot; \    org.opencontainers.image.licenses&#x3D;&quot;GPL-2.0-only&quot; \    org.opencontainers.image.created&#x3D;&quot;2020-11-13 00:00:00+00:00&quot;CMD [&quot;&#x2F;bin&#x2F;bash&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很多官方镜像都是基础包，很多功能没有，我们通常会自己搭建自己的镜像！</p><p>官方既然可以制作镜像，那我们也可以！</p><h4 id="DockerFile构建过程"><a href="#DockerFile构建过程" class="headerlink" title="DockerFile构建过程"></a>DockerFile构建过程</h4><p><strong>基础知识：</strong></p><ol><li><p>每个保留关键字（指令）都必须是大写字母</p></li><li><p>执行从上到下顺序执行</p></li><li><h1 id="表示注释"><a href="#表示注释" class="headerlink" title="表示注释"></a>表示注释</h1></li><li><p>每一个指令都会创建提交一个新的镜像层，并提交！</p></li></ol><p><img src="/2021/07/07/docker/1624252747833-1625636108747.png"></p><p>dockerfile是面向开发的，我们以后要发布项目，做镜像，就需要编写dockerfile文件，这个文件十分简单！</p><p>Docker镜像逐渐成为企业交付的标准，必须要掌握！</p><blockquote><p>步骤：开发，部署，运维</p></blockquote><p>DockerFile : 构建文件，定义了一切的步骤，源代码</p><p>DockerImages ： 通过DokerFile构建生成的镜像，是最终发布和运行的产品</p><p>Docker容器：容器就是镜像运行起来提供服务器</p><h4 id="DockerFile的指令"><a href="#DockerFile的指令" class="headerlink" title="DockerFile的指令"></a>DockerFile的指令</h4><p>以前我们使用别人的，现在我们知道了这些指令之后，我们来练习自己写一个镜像！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM# 基础镜像，一切从这里开始构建MAINTAINER        # 镜像是谁写的， 姓名+邮箱RUN# 镜像构建的时候需要运行的命令ADD# 步骤，例如加一个tomcat镜像，这个tomcat压缩包！添加内容 添加同目录WORKDIR    # 镜像的工作目录VOLUME    # 挂载的目录EXPOSE    # 保留端口配置CMD# 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代。ENTRYPOINT        # 指定这个容器启动的时候要运行的命令，可以追加命令ONBUILD    # 当构建一个被继承 DockerFile 这个时候就会运行ONBUILD的指令，触发指令。COPY# 类似ADD，将我们文件拷贝到镜像中ENV# 构建的时候设置环境变量！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/1624268940938-1625636108747.png"></p><h4 id="实战测试"><a href="#实战测试" class="headerlink" title="实战测试"></a>实战测试</h4><blockquote><p>创建一个自己的centos</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 1.编写Dockerfile的文件FROM centosMAINTAINER dainel&lt;dlgnjupt@qq.com&gt;ENV MYPATH &#x2F;usr&#x2F;localWORKDIR $MYPATHRUN yum -y install vimRUN yum -y install net-toolsEXPOSE 80CMD echo $MYPATHCMD echo &quot;-----end----&quot;CMD &#x2F;bin&#x2F;bashFROM centosMAINTAINER renyichao&lt;727958639@qq.com&gt;ENV MYPATH &#x2F;usr&#x2F;localWORKDIR $MYPATHRUN yum -y install vimRUN yum -y install net-toolsEXPOSE 80 CMD echo $MYPATHCMD echo &quot;-----end-----&quot;CMD &#x2F;bin&#x2F;bash# 2.通过这个文件构建镜像# 命令 docker build -f 文件路径 -t 镜像名:[tag] .docker build -f mydockerfile-centos -t mycentos:0.1 .Successfully built 4af56313b71aSuccessfully tagged mycentos:0.1# 3.测试运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对比：之前原生的centos</p><p><img src="/2021/07/07/docker/1624269646536-1625636108747.png"></p><p>dockerfile:</p><p><img src="/2021/07/07/docker/1624270294565-1625636108747.png"></p><p>我们增加后的镜像：</p><p><img src="/2021/07/07/docker/1624432286137-1625636108747.png"></p><p>我们可以列出本地进行的变更历史</p><p><img src="/2021/07/07/docker/1624436078976-1625636108747.png"></p><p>我们平时拿到一个镜像，可以研究一下它是怎么做的</p><blockquote><p>CMD 和 ENTRYPOINT区别</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">CMD# 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代。ENTRYPOINT# 指定这个容器启动的时候要运行的命令，可以追加命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>测试cmd</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 编写dockerfile文件$ vim dockerfile-test-cmdFROM centosCMD [&quot;ls&quot;,&quot;-a&quot;]# 构建镜像$ docker build  -f dockerfile-test-cmd -t cmd-test:0.1 .# 运行镜像$ docker run cmd-test:0.1....dockerenvbindev# 想追加一个命令  -l 成为ls -al$ docker run cmd-test:0.1 -ldocker: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused &quot;exec: \&quot;-l\&quot;: executable file not found in $PATH&quot;: unknown.ERRO[0000] error waiting for container: context canceled # cmd的情况下 -l 替换了CMD[&quot;ls&quot;,&quot;-l&quot;]。 -l  不是命令所有报错<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试ENTRYPOINT</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 编写dockerfile文件$ vim dockerfile-test-entrypointFROM centosENTRYPOINT [&quot;ls&quot;,&quot;-a&quot;]$ docker run entrypoint-test:0.1....dockerenvbindevetchomeliblib64lost+found ...# 我们的命令，是直接拼接在我们得ENTRYPOINT命令后面的$ docker run entrypoint-test:0.1 -ltotal 56drwxr-xr-x   1 root root 4096 May 16 06:32 .drwxr-xr-x   1 root root 4096 May 16 06:32 ..-rwxr-xr-x   1 root root    0 May 16 06:32 .dockerenvlrwxrwxrwx   1 root root    7 May 11  2019 bin -&gt; usr&#x2F;bindrwxr-xr-x   5 root root  340 May 16 06:32 devdrwxr-xr-x   1 root root 4096 May 16 06:32 etcdrwxr-xr-x   2 root root 4096 May 11  2019 homelrwxrwxrwx   1 root root    7 May 11  2019 lib -&gt; usr&#x2F;liblrwxrwxrwx   1 root root    9 May 11  2019 lib64 -&gt; usr&#x2F;lib64 ....<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Dockerfile中很多命令都十分的相似，我们需要了解它们的区别，我们最好的学习就是对比他们然后测试效果！</p><h4 id="实战-Tomcat镜像"><a href="#实战-Tomcat镜像" class="headerlink" title="实战: Tomcat镜像"></a>实战: Tomcat镜像</h4><ol><li><p>准备镜像文件 tomcat压缩包，jdk压缩包</p><p><img src="/2021/07/07/docker/1624513530046-1625636108747.png"></p></li><li><p>编写dockerfile文件，官方命名<code>Dockerfile</code>，build会自动寻找这个文件，就不需要-f指定了！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM centosMAINTAINET renyichao&lt;727958639@qq.com&gt;COPY readme.txt &#x2F;urs&#x2F;local&#x2F;readme.texADD jdk-8u291-linux-x64.tar.gz &#x2F;usr&#x2F;local&#x2F;ADD apache-tomcat-9.0.46.tar.gz &#x2F;usr&#x2F;local&#x2F;RUN yum -y install vimENV MYPATH &#x2F;usr&#x2F;localWORK $MYPATHENV JAVA_HOME &#x2F;usr&#x2F;local&#x2F;jdk1.8.0_291ENV CLASSPATH $JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jarENV CATALINA_HOME &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.46ENV CATALINA_BASH &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.46ENV PATH $PATH:$JAVA_HOME&#x2F;bin:$CATALINA_HOME&#x2F;lib:$CATALINA_HOME&#x2F;binEXPOSE 8080CMD &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.46&#x2F;bin&#x2F;startup.sh &amp;&amp; tail -F &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.46&#x2F;bin&#x2F;logs&#x2F;catalina.out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>带注释</p><p><img src="/2021/07/07/docker/1624514785949-1625636108747.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM centos #MAINTAINER cheng&lt;1204598429@qq.com&gt;COPY README &#x2F;usr&#x2F;local&#x2F;README #复制文件ADD jdk-8u231-linux-x64.tar.gz &#x2F;usr&#x2F;local&#x2F; #复制解压ADD apache-tomcat-9.0.35.tar.gz &#x2F;usr&#x2F;local&#x2F; #复制解压RUN yum -y install vimENV MYPATH &#x2F;usr&#x2F;local #设置环境变量WORKDIR $MYPATH #设置工作目录ENV JAVA_HOME &#x2F;usr&#x2F;local&#x2F;jdk1.8.0_231 #设置环境变量ENV CATALINA_HOME &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.35 #设置环境变量ENV PATH $PATH:$JAVA_HOME&#x2F;bin:$CATALINA_HOME&#x2F;lib #设置环境变量 分隔符是：EXPOSE 8080 #设置暴露的端口CMD &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.35&#x2F;bin&#x2F;startup.sh &amp;&amp; tail -F &#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.35&#x2F;logs&#x2F;catalina.out # 设置默认命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>构建镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 因为dockerfile命名使用默认命名 因此不用使用-f 指定文件 docker build -t diytomcat .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/1624515153280-1625636108747.png"></p><p><img src="/2021/07/07/docker/1624515183035-1625636108747.png"></p></li><li><p>run镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@renyichao renyichao2]# docker run -d -p 9090:8080 --name renyichaotomcat -v &#x2F;home&#x2F;renyichao2&#x2F;build&#x2F;tomcat&#x2F;test:&#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.46&#x2F;webapps&#x2F;test -v &#x2F;home&#x2F;renyichao2&#x2F;build&#x2F;tomcat&#x2F;tomcatlogs&#x2F;:&#x2F;usr&#x2F;local&#x2F;apache-tomcat-9.0.46&#x2F;logs diytomcat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/07/docker/1624515538482-1625636108747.png"></p><p><img src="/2021/07/07/docker/1624515600332-1625636108747.png"></p></li><li><p>访问测试</p><p>==内网访问==</p><p><img src="/2021/07/07/docker/1624516108295-1625636108747.png"></p><p>==外网可以访问==</p><p><img src="/2021/07/07/docker/1624516302144-1625636108747.png"></p></li><li><p>发布项目（由于做了卷挂载，我们直接在本地编写项目就可以发布了！）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt; &lt;web-app xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot; xmlns&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;javaee&quot; xmlns:web&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_2_5.xsd&quot; xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;javaee http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_2_5.xsd&quot; id&#x3D;&quot;WebApp_ID&quot; version&#x3D;&quot;2.5&quot;&gt; &lt;&#x2F;web-app&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page language&#x3D;&quot;java&quot; contentType&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot;    pageEncoding&#x3D;&quot;UTF-8&quot;%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;&lt;title&gt;hello renyichao&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;Hello World!&lt;br&#x2F;&gt;&lt;%System.out.println(&quot;可以显示了，呵呵&quot;);%&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/1624517844135-1625636108747.png"></p><p><strong>发现：项目部署成功，可以直接访问！</strong></p><p><img src="/2021/07/07/docker/1624518253364-1625636108747.png"></p><blockquote><p>理解：在tomcat的webapps文件夹下新建文件夹test ,在test文件夹下新建WEB-INF文件夹，将xml文件放在 WEB-INF 里面，将页面放在test目录下，就可以通过端口/test进行访问了</p></blockquote></li></ol><p> 我们以后开发的步骤：需要掌握Dockerfile的编写！我们之后的一切都是使用docker镜像来发布运行！</p><h4 id="发布自己的镜像"><a href="#发布自己的镜像" class="headerlink" title="发布自己的镜像"></a>发布自己的镜像</h4><blockquote><p>Dockerhub</p></blockquote><p>1、地址 <a href="https://hub.docker.com/">https://hub.docker.com/</a></p><p><img src="/2021/07/07/docker/1624518970152-1625636108747.png"></p><p>2、确定这个账号可以登录</p><p>3、登录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ docker login --helpUsage:  docker login [OPTIONS] [SERVER]Log in to a Docker registry.If no server is specified, the default is defined by the daemon.Options:  -p, --password string   Password      --password-stdin    Take the password from stdin  -u, --username string   Username<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>docker login -u  账号</p></blockquote><p><img src="/2021/07/07/docker/1624519103076-1625636108747.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@renyichao WEB-INF]# docker login -u 727958639Password: WARNING! Your password will be stored unencrypted in &#x2F;root&#x2F;.docker&#x2F;config.json.Configure a credential helper to remove this warning. Seehttps:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;reference&#x2F;commandline&#x2F;login&#x2F;#credentials-storeLogin Succeeded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、提交 push镜像</p><p><img src="/2021/07/07/docker/1624520119534-1625636108748.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@renyichao WEB-INF]# docker push diytomcatUsing default tag: latestThe push refers to repository [docker.io&#x2F;library&#x2F;diytomcat]41f1fac48deb: Preparing d3fb3fc96a51: Preparing e646a2b2216d: Preparing 741c936a9365: Preparing 2653d992f4ef: Preparing denied: requested access to the resource is denied #拒绝# 会发现push不上去，因为如果没有前缀的话默认是push到 官方的library# 解决方法# 第一种 build的时候添加你的dockerhub用户名，然后在push就可以放到自己的仓库了$ docker build -t chengcoder&#x2F;mytomcat:0.1 .# 第二种 使用docker tag #然后再次push$ docker tag 容器id chengcoder&#x2F;mytomcat:1.0 #然后再次push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>阿里云镜像服务器上</p></blockquote><ol><li>看官网 很详细<a href="https://cr.console.aliyun.com/repository/%E7%99%BB%E5%BD%95%E9%98%BF%E9%87%8C%E4%BA%91">https://cr.console.aliyun.com/repository/登录阿里云</a></li><li>找到容器镜像服务</li><li>创建命名空间</li><li>创建容器镜像</li><li>浏览阿里云</li></ol><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p><img src="/2021/07/07/docker/1624521753079-1625636108748.png"></p><p><img src="/2021/07/07/docker/1624522101463-1625636108748.png"></p><h3 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h3><h4 id="理解Docker0"><a href="#理解Docker0" class="headerlink" title="理解Docker0"></a>理解Docker0</h4><p>清空所有环境</p><blockquote><p>测试</p></blockquote><p><img src="/2021/07/07/docker/1625317112344-1625636108748.png"></p><p>三个网络</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 问题： docker 是如何处理容器网络访问的？<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/07/07/docker/1625378829881-1625636108748.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@renyichao ~]# docker run -d -P --name tomcat01 tomcat# 查看容器的内部网络地址 ip addr , 发现容器启动的时候会得到一个 eth0@if83 ip地址，docker分配的[root@renyichao ~]# docker exec -it tomcat01 ip addr1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000    link&#x2F;loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1&#x2F;8 scope host lo       valid_lft forever preferred_lft forever82: eth0@if83: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default     link&#x2F;ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0    inet 172.17.0.2&#x2F;16 brd 172.17.255.255 scope global eth0       valid_lft forever preferred_lft forever# 思考：linux能不能 ping 通容器内部[root@renyichao ~]# ping 172.17.0.2PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.64 bytes from 172.17.0.2: icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.120 ms64 bytes from 172.17.0.2: icmp_seq&#x3D;2 ttl&#x3D;64 time&#x3D;0.069 ms64 bytes from 172.17.0.2: icmp_seq&#x3D;3 ttl&#x3D;64 time&#x3D;0.081 ms# linux可以 ping 通 docker 容器内部<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/1625379176088-1625636108748.png"></p><blockquote><p>原理</p></blockquote><ol><li><p>我们每启动一个docker容器，docker就会给docker容器分配一个ip，我们只要按照了docker，就会有一个网卡docker0桥接模式，使用的技术是veth-pair技术！</p><p>再次测试ip add</p></li></ol><p><img src="/2021/07/07/docker/1625379533385-1625636108748.png"></p><ol><li>再启动一个容器</li></ol><p><img src="/2021/07/07/docker/1625379705334-1625636108748.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 我们发现这个容器带来网卡，都是一对对的# veth-pair 就是一对的虚拟设备接口，他们都是成对出现的，一端连着协议，一端彼此相连# 正因为有这个特性 veth-pair 充当一个桥梁，连接各种虚拟网络设备的# OpenStac,Docker容器之间的连接，OVS的连接，都是使用evth-pair技术<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>我们来测试一下 tomcat1 和 tomcat2 是否可以ping 通</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@renyichao ~]# docker exec -it tomcat02 ping 172.17.0.3PING 172.17.0.3 (172.17.0.3) 56(84) bytes of data.64 bytes from 172.17.0.3: icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.046 ms64 bytes from 172.17.0.3: icmp_seq&#x3D;2 ttl&#x3D;64 time&#x3D;0.047 ms# 结论：容器和容器之间是可以ping通的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/1625379963830-1625636108748.png"></p><p><strong>结论 :</strong></p><p><img src="/2021/07/07/docker/1625380748436-1625636108748.png"></p><ol><li>tomcat01 和 tomcat02 是公用一个路由器，docker0。</li><li>所有的容器不指定网络的情况下，都是通过docker0路由的，docker会给我们的容器分配一个默认的可用IP</li></ol><blockquote><p>小结</p></blockquote><p>Docker使用的是Linux的桥接，宿主机是一个Docker容器的网桥 docker0</p><p><img src="/2021/07/07/docker/1625381144476-1625636108748.png"></p><p>Docker中所有网络接口都是虚拟的，虚拟的转发效率高（内网传递文件）。</p><p>只要容器删除，对应的网桥一对就没了！</p><p><img src="/2021/07/07/docker/1625381323295-1625636108748.png"></p><p><img src="/2021/07/07/docker/1625382321186-1625636108748.png"></p><h4 id="–link"><a href="#–link" class="headerlink" title="–link"></a>–link</h4><blockquote><p>思考一个场景：我们编写了一个微服务，database url=ip: 项目不重启，数据ip换了，我们希望可以处理这个问题，可以通过名字来进行访问容器？</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@renyichao ~]# docker exec -it tomcat02 ping tomcat01ping: tomcat01: Name or service not known# ping不通# 如何解决呢？# 通过 --link 就可以解决了[root@renyichao ~]# docker run -d -P --name tomcat03 --link tomcat02 tomcat88031303efd572ea15551036c0350aafc3f60644fc8df8fff2fbe81fef8e5ed5[root@renyichao ~]# docker exec -it tomcat03 ping tomcat02 PING tomcat02 (172.17.0.3) 56(84) bytes of data.64 bytes from tomcat02 (172.17.0.3): icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.137 ms64 bytes from tomcat02 (172.17.0.3): icmp_seq&#x3D;2 ttl&#x3D;64 time&#x3D;0.093 ms64 bytes from tomcat02 (172.17.0.3): icmp_seq&#x3D;3 ttl&#x3D;64 time&#x3D;0.090 ms64 bytes from tomcat02 (172.17.0.3): icmp_seq&#x3D;4 ttl&#x3D;64 time&#x3D;0.093 ms# 用tomcat02 ping tomcat03 ping不通[root@renyichao ~]# docker exec -it tomcat02 ping tomcat03 ping: tomcat03: Name or service not known<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看tomcat03就是在在本地配置了tomcat02的配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 查看hosts 配置，在这里原理发现[root@renyichao ~]#  127.0.0.1       localhost::1     localhost ip6-localhost ip6-loopbackfe00::0 ip6-localnetff00::0 ip6-mcastprefixff02::1 ip6-allnodesff02::2 ip6-allrouters172.17.0.3      tomcat02 c2e5a8a29151172.17.0.4      50b163f99e32<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>–link 本质就是在hosts配置中添加映射</p><p><strong>现在使用Docker已经不建议使用–link了！</strong></p><p>自定义网络，不适用docker0！</p><p>docker0问题：不支持容器名连接访问！</p><h4 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h4><blockquote><p>查看所有的docker网络</p></blockquote><p><img src="/2021/07/07/docker/1625382998142-1625636108748.png"></p><p><strong>网络模式</strong></p><p>bridge ：桥接 docker（默认，自己创建也是用bridge模式）</p><p>none ：不配置网络，一般不用</p><p>host ：和宿主机共享网络</p><p>container ：容器网络连通（用得少！局限很大）</p><p><strong>测试</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@renyichao ~]# docker rm -f $(docker ps -aq)88031303efd50a2fa4f8a6d8be6a3e5f5698# 我们直接启动的命令 ，默认有--net bridge，就是我们的docker0docker run -d -P --name tomcat01 tomcatdocker run -d -P --name tomcat01 --net bridge tomcat# docker0特点：默认，域名不能访问，--link可以打通连接# 我们可以自定义一个网络# --driver bridge # --subnet 192.168.0.0&#x2F;16    子网从192.168.0.2到192.168.255.255# --gateway 192.168.0.1      网关[root@renyichao home]# docker network create --driver bridge --subnet 192.168.0.0&#x2F;16 --gateway 192.168.0.1 mynet4d8c7c6a65d02988ac983862010cb614b262b6e69c8a67fe8b1b243b5a7d84a1[root@renyichao home]# docker network lsNETWORK ID     NAME      DRIVER    SCOPEade9e1c4d834   bridge    bridge    local59a870ff79ee   host      host      local4d8c7c6a65d0   mynet     bridge    local7e75e12bf7f9   none      null      local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>自己的网络就创建好了，以后服务就可以放在自己的网络</p></blockquote><p><img src="/2021/07/07/docker/1625399285974-1625636108748.png"></p><p><img src="/2021/07/07/docker/1625399460882-1625636108748.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@renyichao home]# docker run -d -P --name tomcat-net-01 --net mynet tomcat2a5809a8027ae70f3198ee49109979311793a4b90da4971b452566b8fc77f660[root@renyichao home]# docker run -d -P --name tomcat-net-02 --net mynet tomcat7fbf9c6f6ec74185725ddc46350350994cd0f70805736b556ca730e62ad0da2f[root@renyichao home]# docker network inspect mynet[    &#123;        &quot;Name&quot;: &quot;mynet&quot;,        &quot;Id&quot;: &quot;4d8c7c6a65d02988ac983862010cb614b262b6e69c8a67fe8b1b243b5a7d84a1&quot;,        &quot;Created&quot;: &quot;2021-07-04T19:46:47.801996952+08:00&quot;,        &quot;Scope&quot;: &quot;local&quot;,        &quot;Driver&quot;: &quot;bridge&quot;,        &quot;EnableIPv6&quot;: false,        &quot;IPAM&quot;: &#123;            &quot;Driver&quot;: &quot;default&quot;,            &quot;Options&quot;: &#123;&#125;,            &quot;Config&quot;: [                &#123;                    &quot;Subnet&quot;: &quot;192.168.0.0&#x2F;16&quot;,                    &quot;Gateway&quot;: &quot;192.168.0.1&quot;                &#125;            ]        &#125;,        &quot;Internal&quot;: false,        &quot;Attachable&quot;: false,        &quot;Ingress&quot;: false,        &quot;ConfigFrom&quot;: &#123;            &quot;Network&quot;: &quot;&quot;        &#125;,        &quot;ConfigOnly&quot;: false,        &quot;Containers&quot;: &#123;            &quot;2a5809a8027ae70f3198ee49109979311793a4b90da4971b452566b8fc77f660&quot;: &#123;                &quot;Name&quot;: &quot;tomcat-net-01&quot;,                &quot;EndpointID&quot;: &quot;cc64cfffb56010a03c036e7f6c00a4bd031739fcb5baf647d7ef836dfbafc394&quot;,                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:02&quot;,                &quot;IPv4Address&quot;: &quot;192.168.0.2&#x2F;16&quot;,                &quot;IPv6Address&quot;: &quot;&quot;            &#125;,            &quot;7fbf9c6f6ec74185725ddc46350350994cd0f70805736b556ca730e62ad0da2f&quot;: &#123;                &quot;Name&quot;: &quot;tomcat-net-02&quot;,                &quot;EndpointID&quot;: &quot;5000a30b8d2e1e1f8e4b7b4a6d9ac50bc62a7b1e5f568f90863be39532ad51d7&quot;,                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:03&quot;,                &quot;IPv4Address&quot;: &quot;192.168.0.3&#x2F;16&quot;,                &quot;IPv6Address&quot;: &quot;&quot;            &#125;        &#125;,        &quot;Options&quot;: &#123;&#125;,        &quot;Labels&quot;: &#123;&#125;    &#125;]# 再次测试ping连接 ， 现在不适用 --link 也可以ping名字了[root@renyichao home]# docker exec -it tomcat-net-01 ping tomcat-net-02PING tomcat-net-02 (192.168.0.3) 56(84) bytes of data.64 bytes from tomcat-net-02.mynet (192.168.0.3): icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.147 ms64 bytes from tomcat-net-02.mynet (192.168.0.3): icmp_seq&#x3D;2 ttl&#x3D;64 time&#x3D;0.109 ms64 bytes from tomcat-net-02.mynet (192.168.0.3): icmp_seq&#x3D;3 ttl&#x3D;64 time&#x3D;0.103 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/1625399774083-1625636108748.png"></p><p>我们自定义的网络docker当我们维护好了对应的关系，推荐我们平时这样使用网络！</p><p>好处：</p><p>redis - 不同的集群使用不同的网络，保证集群是健康和安全的</p><p>mysql - 不同的集群使用不同的网络，保证集群是健康安全的</p><p><img src="/2021/07/07/docker/1625404045908-1625636108748.png"></p><h4 id="网络连通"><a href="#网络连通" class="headerlink" title="网络连通"></a>网络连通</h4><p><img src="/2021/07/07/docker/1625406296553-1625636108748.png"></p><p><img src="/2021/07/07/docker/1625406370698-1625636108748.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 测试打通 tomcat - mynet[root@renyichao]# docker network connect mynet tomcat01# 连通之后就是将 tomcat01 放到了 mynet 网络下# 一个容器两个ip地址# 阿里云服务：公网ip  私网ip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/1625452518762-1625636108748.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 01连通ok[root@renyichao]# docker exec -it tomcat01 ping tomcat-net-01PING tomcat-net-01 (192.168.0.2) 56(84) bytes of data.64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.098 ms64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq&#x3D;2 ttl&#x3D;64 time&#x3D;0.091 ms# 02依旧是打不通的[root@renyichao]# docker exec -it tomcat02 ping tomcat-net-01Error: No such container: tomcat02<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结论：假设要跨网络操作别人，就需要使用docker network connect 连通！</p><h4 id="实战：部署Redis集群"><a href="#实战：部署Redis集群" class="headerlink" title="实战：部署Redis集群"></a>实战：部署Redis集群</h4><p><img src="/2021/07/07/docker/1625452973084-1625636108748.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 创建网卡docker network create redis --subnet 172.38.0.0&#x2F;16# 通过脚本创建六个redis配置for port in $(seq 1 6);\do \mkdir -p &#x2F;mydata&#x2F;redis&#x2F;node-$&#123;port&#125;&#x2F;conftouch &#x2F;mydata&#x2F;redis&#x2F;node-$&#123;port&#125;&#x2F;conf&#x2F;redis.confcat &lt;&lt; EOF &gt;&gt; &#x2F;mydata&#x2F;redis&#x2F;node-$&#123;port&#125;&#x2F;conf&#x2F;redis.confport 6379bind 0.0.0.0cluster-enabled yescluster-config-file nodes.confcluster-node-timeout 5000cluster-announce-ip 172.38.0.1$&#123;port&#125;cluster-announce-port 6379cluster-announce-bus-port 16379appendonly yesEOFdone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/1625453404414-1625636108748.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#运行六个redisdocker run -p 6371:6379 -p 16671:16379 --name redis-1 \-v &#x2F;mydata&#x2F;redis&#x2F;node-1&#x2F;data:&#x2F;data \-v &#x2F;mydata&#x2F;redis&#x2F;node-1&#x2F;conf&#x2F;redis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf \-d --net redis --ip 172.38.0.11 redis:5.0.9-alpine3.11 redis-server &#x2F;etc&#x2F;redis&#x2F;redis.confdocker run -p 6372:6379 -p 16672:16379 --name redis-2 \-v &#x2F;mydata&#x2F;redis&#x2F;node-2&#x2F;data:&#x2F;data \-v &#x2F;mydata&#x2F;redis&#x2F;node-2&#x2F;conf&#x2F;redis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf \-d --net redis --ip 172.38.0.12 redis:5.0.9-alpine3.11 redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf...# 通过脚本运行六个redisfor port in $(seq 1 6);\docker run -p 637$&#123;port&#125;:6379 -p 1667$&#123;port&#125;:16379 --name redis-$&#123;port&#125; \-v &#x2F;mydata&#x2F;redis&#x2F;node-$&#123;port&#125;&#x2F;data:&#x2F;data \-v &#x2F;mydata&#x2F;redis&#x2F;node-$&#123;port&#125;&#x2F;conf&#x2F;redis.conf:&#x2F;etc&#x2F;redis&#x2F;redis.conf \-d --net redis --ip 172.38.0.1$&#123;port&#125; redis:5.0.9-alpine3.11 redis-server &#x2F;etc&#x2F;redis&#x2F;redis.confdocker exec -it redis-1 &#x2F;bin&#x2F;sh #redis默认没有bash&#x2F;data # redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379  --cluster-replicas 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/1625454030942-1625636108748.png"></p><p>docker搭建redis集群完成！</p><p><img src="/2021/07/07/docker/1625454136861-1625636108748.png"></p><p><img src="/2021/07/07/docker/1625454294681-1625636108748.png"></p><p>我们使用了Docker之后，所有的技术都会变得简单起来！</p><h3 id="SpringBoot微服务打包Docker镜像"><a href="#SpringBoot微服务打包Docker镜像" class="headerlink" title="SpringBoot微服务打包Docker镜像"></a>SpringBoot微服务打包Docker镜像</h3><ol><li><p>架构springboot项目</p></li><li><p>打包应用</p><p><img src="/2021/07/07/docker/1625461206388-1625636108748.png"></p></li><li><p>编写dockerfile</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM java:8COPY *.jar &#x2F;app.jarCMD [&quot;--server.port&#x3D;8080&quot;]EXPOSE 8080ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;&#x2F;app.jar&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/1625461586297-1625636108748.png"></p><blockquote><p>上传文件</p></blockquote><p><img src="/2021/07/07/docker/1625462033403-1625636108748.png"></p></li><li><p>构建镜像</p><p><img src="/2021/07/07/docker/1625462118930-1625636108748.png"></p></li><li><p>发布运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[root@renyichao idea]# docker run -d -P --name renyichao-spring renyichao66628962b73b950490e449448ea1393be4664351a346cb377d262c679b7783d8057[root@renyichao idea]# docker psCONTAINER ID   IMAGE          COMMAND                  CREATED          STATUS          PORTS                                         NAMES28962b73b950   renyichao666   &quot;java -jar &#x2F;app.jar …&quot;   57 seconds ago   Up 56 seconds   0.0.0.0:49163-&gt;8080&#x2F;tcp, :::49163-&gt;8080&#x2F;tcp   renyichao-spring[root@renyichao idea]# curl localhost:49163&#123;&quot;timestamp&quot;:&quot;2021-07-05T05:18:12.046+00:00&quot;,&quot;status&quot;:404,&quot;error&quot;:&quot;Not Found&quot;,&quot;path&quot;:&quot;&#x2F;&quot;&#125;[root@renyichao idea]# [root@renyichao idea]# curl localhost:49163&#x2F;hellohello ryc[root@renyichao idea]# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/07/07/docker/1625462342955-1625636108748.png"></p></li></ol><p>以后我们使用了Docker之后，给别人交付的就是一个镜像即可！</p>]]></content>
      
      
      <categories>
          
          <category> 与命令有关的笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
